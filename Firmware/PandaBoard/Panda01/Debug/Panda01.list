
Panda01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f510  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800f5d0  0800f5d0  0001f5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f858  0800f858  00020288  2**0
                  CONTENTS
  4 .ARM          00000000  0800f858  0800f858  00020288  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f858  0800f858  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f858  0800f858  0001f858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f85c  0800f85c  0001f85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800f860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001728  20000288  0800fae8  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019b0  0800fae8  000219b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294ef  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f25  00000000  00000000  0004979f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0004f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d48  00000000  00000000  00051680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218e8  00000000  00000000  000533c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000299a0  00000000  00000000  00074cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a97d8  00000000  00000000  0009e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147e28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d0  00000000  00000000  00147e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000288 	.word	0x20000288
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f5b8 	.word	0x0800f5b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000028c 	.word	0x2000028c
 8000104:	0800f5b8 	.word	0x0800f5b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <FIRFilter_init>:
		-128,-140,-148,-152,-154,-152,-149,-143,-136,-128,
		-119,-110,-100,-90,-80,-71,-62,-53,-45,-38,-31,-26,
		-21,-16,-12,-9,-7,-5,-5
};///sum

void FIRFilter_init(FIRFilter* f) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  int i;
  for(i = 0; i < FIRFILTER_TAP_NUM; ++i)
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	e007      	b.n	8000412 <FIRFilter_init+0x1e>
    f->history[i] = 0;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	0052      	lsls	r2, r2, #1
 8000408:	2100      	movs	r1, #0
 800040a:	52d1      	strh	r1, [r2, r3]
  for(i = 0; i < FIRFILTER_TAP_NUM; ++i)
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	3301      	adds	r3, #1
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	2b7f      	cmp	r3, #127	; 0x7f
 8000416:	ddf4      	ble.n	8000402 <FIRFilter_init+0xe>
  f->last_index = 0;
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	2100      	movs	r1, #0
 8000420:	54d1      	strb	r1, [r2, r3]
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b004      	add	sp, #16
 8000428:	bd80      	pop	{r7, pc}

0800042a <FIRFilter_put>:

void FIRFilter_put(FIRFilter* f, uint16_t input) {
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	000a      	movs	r2, r1
 8000434:	1cbb      	adds	r3, r7, #2
 8000436:	801a      	strh	r2, [r3, #0]
  f->history[f->last_index++] = input;
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	5cd3      	ldrb	r3, [r2, r3]
 8000440:	1c5a      	adds	r2, r3, #1
 8000442:	b2d0      	uxtb	r0, r2
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	0052      	lsls	r2, r2, #1
 800044a:	5488      	strb	r0, [r1, r2]
 800044c:	001a      	movs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	0052      	lsls	r2, r2, #1
 8000452:	1cb9      	adds	r1, r7, #2
 8000454:	8809      	ldrh	r1, [r1, #0]
 8000456:	52d1      	strh	r1, [r2, r3]
  if(f->last_index == FIRFILTER_TAP_NUM)
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	5cd3      	ldrb	r3, [r2, r3]
 8000460:	2b80      	cmp	r3, #128	; 0x80
 8000462:	d104      	bne.n	800046e <FIRFilter_put+0x44>
    f->last_index = 0;
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	2100      	movs	r1, #0
 800046c:	54d1      	strb	r1, [r2, r3]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <FIRFilter_get>:

uint16_t FIRFilter_get(FIRFilter* f) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  int32_t acc = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  uint8_t index = f->last_index + 1;
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	5cd2      	ldrb	r2, [r2, r3]
 800048c:	230b      	movs	r3, #11
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	3201      	adds	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < FIRFILTER_TAP_NUM; ++i) {
 8000494:	230a      	movs	r3, #10
 8000496:	18fb      	adds	r3, r7, r3
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	e01d      	b.n	80004da <FIRFilter_get+0x62>
    if (index == FIRFILTER_TAP_NUM){
 800049e:	220b      	movs	r2, #11
 80004a0:	18bb      	adds	r3, r7, r2
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b80      	cmp	r3, #128	; 0x80
 80004a6:	d102      	bne.n	80004ae <FIRFilter_get+0x36>
    	index = 0;
 80004a8:	18bb      	adds	r3, r7, r2
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
    }
    acc += (int32_t)f->history[index] * (int32_t)filter_taps[i];
 80004ae:	230b      	movs	r3, #11
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	0052      	lsls	r2, r2, #1
 80004b8:	5ad3      	ldrh	r3, [r2, r3]
 80004ba:	0019      	movs	r1, r3
 80004bc:	200a      	movs	r0, #10
 80004be:	183b      	adds	r3, r7, r0
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <FIRFilter_get+0x84>)
 80004c4:	0052      	lsls	r2, r2, #1
 80004c6:	5ed3      	ldrsh	r3, [r2, r3]
 80004c8:	434b      	muls	r3, r1
 80004ca:	68fa      	ldr	r2, [r7, #12]
 80004cc:	18d3      	adds	r3, r2, r3
 80004ce:	60fb      	str	r3, [r7, #12]
  for(uint8_t i = 0; i < FIRFILTER_TAP_NUM; ++i) {
 80004d0:	183b      	adds	r3, r7, r0
 80004d2:	183a      	adds	r2, r7, r0
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	3201      	adds	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	230a      	movs	r3, #10
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b25b      	sxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dadb      	bge.n	800049e <FIRFilter_get+0x26>
  };
  return acc / 65460;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	4905      	ldr	r1, [pc, #20]	; (8000500 <FIRFilter_get+0x88>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f7ff fe96 	bl	800021c <__divsi3>
 80004f0:	0003      	movs	r3, r0
 80004f2:	b29b      	uxth	r3, r3
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000000 	.word	0x20000000
 8000500:	0000ffb4 	.word	0x0000ffb4

08000504 <getAnalogRead>:
FIRFilter amp_filter;
DAC_HandleTypeDef *dac_handler;
uint16_t dac_val;


uint16_t getAnalogRead(uint8_t in){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	0002      	movs	r2, r0
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	701a      	strb	r2, [r3, #0]
	return adc_dma_arr[in];
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <getAnalogRead+0x20>)
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	5ad3      	ldrh	r3, [r2, r3]
}
 800051a:	0018      	movs	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000654 	.word	0x20000654

08000528 <setEncoderCount>:

void setEncoderCount(uint32_t ncount){
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	enc_pin_state = 2 * HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) + HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	019b      	lsls	r3, r3, #6
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <setEncoderCount+0x44>)
 8000536:	0019      	movs	r1, r3
 8000538:	0010      	movs	r0, r2
 800053a:	f005 f905 	bl	8005748 <HAL_GPIO_ReadPin>
 800053e:	0003      	movs	r3, r0
 8000540:	18db      	adds	r3, r3, r3
 8000542:	b2dc      	uxtb	r4, r3
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	015b      	lsls	r3, r3, #5
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <setEncoderCount+0x44>)
 800054a:	0019      	movs	r1, r3
 800054c:	0010      	movs	r0, r2
 800054e:	f005 f8fb 	bl	8005748 <HAL_GPIO_ReadPin>
 8000552:	0003      	movs	r3, r0
 8000554:	18e3      	adds	r3, r4, r3
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <setEncoderCount+0x48>)
 800055a:	701a      	strb	r2, [r3, #0]
	encoder_count = ncount;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <setEncoderCount+0x4c>)
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b003      	add	sp, #12
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	48000400 	.word	0x48000400
 8000570:	200002a4 	.word	0x200002a4
 8000574:	200002a8 	.word	0x200002a8

08000578 <setEncoderMode>:

void setEncoderMode(uint8_t mode){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	701a      	strb	r2, [r3, #0]
	encoder_mode = mode;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <setEncoderMode+0x1c>)
 8000586:	1dfa      	adds	r2, r7, #7
 8000588:	7812      	ldrb	r2, [r2, #0]
 800058a:	701a      	strb	r2, [r3, #0]
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200002ac 	.word	0x200002ac

08000598 <getEncoderMode>:
uint8_t getEncoderMode(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	return encoder_mode;
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <getEncoderMode+0x10>)
 800059e:	781b      	ldrb	r3, [r3, #0]
}
 80005a0:	0018      	movs	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	200002ac 	.word	0x200002ac

080005ac <getEncoderCount>:

uint32_t getEncoderCount(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	return encoder_count;
 80005b0:	4b02      	ldr	r3, [pc, #8]	; (80005bc <getEncoderCount+0x10>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	0018      	movs	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	200002a8 	.word	0x200002a8

080005c0 <encoderController>:

void encoderController(){
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
	static uint32_t pwm_rising_edge = 0;
	static uint32_t pwm_duty_period = 0;
	static uint32_t pwm_period = 0;

	if(encoder_mode == ENCODER_QUADRATURE_MODE){
 80005c6:	4b5c      	ldr	r3, [pc, #368]	; (8000738 <encoderController+0x178>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d000      	beq.n	80005d0 <encoderController+0x10>
 80005ce:	e07f      	b.n	80006d0 <encoderController+0x110>
		uint8_t enc_pins_reading = 2 * HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) + HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	019b      	lsls	r3, r3, #6
 80005d4:	4a59      	ldr	r2, [pc, #356]	; (800073c <encoderController+0x17c>)
 80005d6:	0019      	movs	r1, r3
 80005d8:	0010      	movs	r0, r2
 80005da:	f005 f8b5 	bl	8005748 <HAL_GPIO_ReadPin>
 80005de:	0003      	movs	r3, r0
 80005e0:	18db      	adds	r3, r3, r3
 80005e2:	b2dc      	uxtb	r4, r3
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	015b      	lsls	r3, r3, #5
 80005e8:	4a54      	ldr	r2, [pc, #336]	; (800073c <encoderController+0x17c>)
 80005ea:	0019      	movs	r1, r3
 80005ec:	0010      	movs	r0, r2
 80005ee:	f005 f8ab 	bl	8005748 <HAL_GPIO_ReadPin>
 80005f2:	0003      	movs	r3, r0
 80005f4:	001a      	movs	r2, r3
 80005f6:	1cfb      	adds	r3, r7, #3
 80005f8:	18a2      	adds	r2, r4, r2
 80005fa:	701a      	strb	r2, [r3, #0]
		switch(enc_pin_state){
 80005fc:	4b50      	ldr	r3, [pc, #320]	; (8000740 <encoderController+0x180>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b03      	cmp	r3, #3
 8000602:	d031      	beq.n	8000668 <encoderController+0xa8>
 8000604:	dd00      	ble.n	8000608 <encoderController+0x48>
 8000606:	e05e      	b.n	80006c6 <encoderController+0x106>
 8000608:	2b02      	cmp	r3, #2
 800060a:	d019      	beq.n	8000640 <encoderController+0x80>
 800060c:	dc5b      	bgt.n	80006c6 <encoderController+0x106>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <encoderController+0x58>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d03c      	beq.n	8000690 <encoderController+0xd0>
 8000616:	e056      	b.n	80006c6 <encoderController+0x106>
		case 0:
			if(enc_pins_reading == 2){
 8000618:	1cfb      	adds	r3, r7, #3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d105      	bne.n	800062c <encoderController+0x6c>
				encoder_count++;
 8000620:	4b48      	ldr	r3, [pc, #288]	; (8000744 <encoderController+0x184>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	4b47      	ldr	r3, [pc, #284]	; (8000744 <encoderController+0x184>)
 8000628:	601a      	str	r2, [r3, #0]
			}else if(enc_pins_reading == 1){
				encoder_count--;
			}
			break;
 800062a:	e045      	b.n	80006b8 <encoderController+0xf8>
			}else if(enc_pins_reading == 1){
 800062c:	1cfb      	adds	r3, r7, #3
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d141      	bne.n	80006b8 <encoderController+0xf8>
				encoder_count--;
 8000634:	4b43      	ldr	r3, [pc, #268]	; (8000744 <encoderController+0x184>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	4b42      	ldr	r3, [pc, #264]	; (8000744 <encoderController+0x184>)
 800063c:	601a      	str	r2, [r3, #0]
			break;
 800063e:	e03b      	b.n	80006b8 <encoderController+0xf8>
		case 2:
			if(enc_pins_reading == 3){
 8000640:	1cfb      	adds	r3, r7, #3
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b03      	cmp	r3, #3
 8000646:	d105      	bne.n	8000654 <encoderController+0x94>
				encoder_count++;
 8000648:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <encoderController+0x184>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <encoderController+0x184>)
 8000650:	601a      	str	r2, [r3, #0]
			}else if(enc_pins_reading == 0){
				encoder_count--;
			}
			break;
 8000652:	e033      	b.n	80006bc <encoderController+0xfc>
			}else if(enc_pins_reading == 0){
 8000654:	1cfb      	adds	r3, r7, #3
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d12f      	bne.n	80006bc <encoderController+0xfc>
				encoder_count--;
 800065c:	4b39      	ldr	r3, [pc, #228]	; (8000744 <encoderController+0x184>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1e5a      	subs	r2, r3, #1
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <encoderController+0x184>)
 8000664:	601a      	str	r2, [r3, #0]
			break;
 8000666:	e029      	b.n	80006bc <encoderController+0xfc>
		case 3:
			if(enc_pins_reading == 1){
 8000668:	1cfb      	adds	r3, r7, #3
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d105      	bne.n	800067c <encoderController+0xbc>
					encoder_count++;
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <encoderController+0x184>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <encoderController+0x184>)
 8000678:	601a      	str	r2, [r3, #0]
				}else if(enc_pins_reading == 2){
					encoder_count--;
				}
			break;
 800067a:	e021      	b.n	80006c0 <encoderController+0x100>
				}else if(enc_pins_reading == 2){
 800067c:	1cfb      	adds	r3, r7, #3
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d11d      	bne.n	80006c0 <encoderController+0x100>
					encoder_count--;
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <encoderController+0x184>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	1e5a      	subs	r2, r3, #1
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <encoderController+0x184>)
 800068c:	601a      	str	r2, [r3, #0]
			break;
 800068e:	e017      	b.n	80006c0 <encoderController+0x100>
		case 1:
			if(enc_pins_reading == 0){
 8000690:	1cfb      	adds	r3, r7, #3
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d105      	bne.n	80006a4 <encoderController+0xe4>
					encoder_count++;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <encoderController+0x184>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <encoderController+0x184>)
 80006a0:	601a      	str	r2, [r3, #0]
				}else if(enc_pins_reading == 3){
					encoder_count--;
				}
			break;
 80006a2:	e00f      	b.n	80006c4 <encoderController+0x104>
				}else if(enc_pins_reading == 3){
 80006a4:	1cfb      	adds	r3, r7, #3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d10b      	bne.n	80006c4 <encoderController+0x104>
					encoder_count--;
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <encoderController+0x184>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	4b24      	ldr	r3, [pc, #144]	; (8000744 <encoderController+0x184>)
 80006b4:	601a      	str	r2, [r3, #0]
			break;
 80006b6:	e005      	b.n	80006c4 <encoderController+0x104>
			break;
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	e004      	b.n	80006c6 <encoderController+0x106>
			break;
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	e002      	b.n	80006c6 <encoderController+0x106>
			break;
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	e000      	b.n	80006c6 <encoderController+0x106>
			break;
 80006c4:	46c0      	nop			; (mov r8, r8)
		}
		enc_pin_state = enc_pins_reading;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <encoderController+0x180>)
 80006c8:	1cfa      	adds	r2, r7, #3
 80006ca:	7812      	ldrb	r2, [r2, #0]
 80006cc:	701a      	strb	r2, [r3, #0]
		}else{
			pwm_duty_period = acc_tick - pwm_rising_edge;
			encoder_pwm_duty = 4096 * pwm_duty_period / pwm_period;
		}
	}
}
 80006ce:	e02f      	b.n	8000730 <encoderController+0x170>
	}else if (encoder_mode == ENCODER_PWM_MODE){
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <encoderController+0x178>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d12b      	bne.n	8000730 <encoderController+0x170>
		uint32_t acc_tick = pwm_timer->Instance->CNT;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <encoderController+0x188>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e0:	607b      	str	r3, [r7, #4]
		if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) == 1){
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	019b      	lsls	r3, r3, #6
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <encoderController+0x17c>)
 80006e8:	0019      	movs	r1, r3
 80006ea:	0010      	movs	r0, r2
 80006ec:	f005 f82c 	bl	8005748 <HAL_GPIO_ReadPin>
 80006f0:	0003      	movs	r3, r0
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d109      	bne.n	800070a <encoderController+0x14a>
			pwm_period = acc_tick - pwm_rising_edge;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <encoderController+0x18c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	1ad2      	subs	r2, r2, r3
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <encoderController+0x190>)
 8000700:	601a      	str	r2, [r3, #0]
			pwm_rising_edge = acc_tick;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <encoderController+0x18c>)
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	601a      	str	r2, [r3, #0]
}
 8000708:	e012      	b.n	8000730 <encoderController+0x170>
			pwm_duty_period = acc_tick - pwm_rising_edge;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <encoderController+0x18c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	1ad2      	subs	r2, r2, r3
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <encoderController+0x194>)
 8000714:	601a      	str	r2, [r3, #0]
			encoder_pwm_duty = 4096 * pwm_duty_period / pwm_period;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <encoderController+0x194>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	031a      	lsls	r2, r3, #12
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <encoderController+0x190>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	0019      	movs	r1, r3
 8000722:	0010      	movs	r0, r2
 8000724:	f7ff fcf0 	bl	8000108 <__udivsi3>
 8000728:	0003      	movs	r3, r0
 800072a:	001a      	movs	r2, r3
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <encoderController+0x198>)
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b003      	add	sp, #12
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	200002ac 	.word	0x200002ac
 800073c:	48000400 	.word	0x48000400
 8000740:	200002a4 	.word	0x200002a4
 8000744:	200002a8 	.word	0x200002a8
 8000748:	20000648 	.word	0x20000648
 800074c:	200002b8 	.word	0x200002b8
 8000750:	200002bc 	.word	0x200002bc
 8000754:	200002c0 	.word	0x200002c0
 8000758:	200002b0 	.word	0x200002b0

0800075c <getEncoderDuty>:

uint32_t getEncoderDuty(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	return encoder_pwm_duty;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <getEncoderDuty+0x10>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200002b0 	.word	0x200002b0

08000770 <getUserIn>:

uint8_t getUserIn(uint8_t in){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	701a      	strb	r2, [r3, #0]
	switch(in){
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d002      	beq.n	800078a <getUserIn+0x1a>
 8000784:	2b02      	cmp	r3, #2
 8000786:	d009      	beq.n	800079c <getUserIn+0x2c>
 8000788:	e011      	b.n	80007ae <getUserIn+0x3e>
	case 1:
		return HAL_GPIO_ReadPin(USER_IN1_GPIO_Port, USER_IN1_Pin);
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <getUserIn+0x48>)
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f004 ffd8 	bl	8005748 <HAL_GPIO_ReadPin>
 8000798:	0003      	movs	r3, r0
 800079a:	e009      	b.n	80007b0 <getUserIn+0x40>
		break;
	case 2:
		return HAL_GPIO_ReadPin(USER_IN2_GPIO_Port, USER_IN2_Pin);
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <getUserIn+0x48>)
 80007a2:	0019      	movs	r1, r3
 80007a4:	0010      	movs	r0, r2
 80007a6:	f004 ffcf 	bl	8005748 <HAL_GPIO_ReadPin>
 80007aa:	0003      	movs	r3, r0
 80007ac:	e000      	b.n	80007b0 <getUserIn+0x40>
		break;
	}
	return 0;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	48000400 	.word	0x48000400

080007bc <setOffset>:

void setOffset(uint16_t value){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	801a      	strh	r2, [r3, #0]
	dac_val = value;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <setOffset+0x2c>)
 80007ca:	1dba      	adds	r2, r7, #6
 80007cc:	8812      	ldrh	r2, [r2, #0]
 80007ce:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(dac_handler, DAC_CHANNEL_1,DAC_ALIGN_12B_R, dac_val);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <setOffset+0x30>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <setOffset+0x2c>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	f004 fb6b 	bl	8004eb6 <HAL_DAC_SetValue>
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b002      	add	sp, #8
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000650 	.word	0x20000650
 80007ec:	20000644 	.word	0x20000644

080007f0 <getOffset>:
uint16_t getOffset(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	return dac_val;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <getOffset+0x10>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000650 	.word	0x20000650

08000804 <acquisitionInit>:

void acquisitionInit(ADC_HandleTypeDef* hadcx, TIM_HandleTypeDef *htimx, DAC_HandleTypeDef* hdacx){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	adc_handler = hadcx;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <acquisitionInit+0x68>)
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	601a      	str	r2, [r3, #0]
	dac_handler = hdacx;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <acquisitionInit+0x6c>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]
	pwm_timer = htimx;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <acquisitionInit+0x70>)
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(adc_handler, (uint32_t *)adc_dma_arr, 3);
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <acquisitionInit+0x68>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4914      	ldr	r1, [pc, #80]	; (8000878 <acquisitionInit+0x74>)
 8000828:	2203      	movs	r2, #3
 800082a:	0018      	movs	r0, r3
 800082c:	f003 f828 	bl	8003880 <HAL_ADC_Start_DMA>
	FIRFilter_init(&amp_filter);
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <acquisitionInit+0x78>)
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff fdde 	bl	80003f4 <FIRFilter_init>

	HAL_DAC_Start(dac_handler, DAC_CHANNEL_1);
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <acquisitionInit+0x6c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2100      	movs	r1, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f004 fb9c 	bl	8004f7c <HAL_DAC_Start>
    setOffset(2048);
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff ffb7 	bl	80007bc <setOffset>

    HAL_TIM_Base_Start_IT(pwm_timer);
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <acquisitionInit+0x70>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	0018      	movs	r0, r3
 8000854:	f009 f920 	bl	8009a98 <HAL_TIM_Base_Start_IT>
	setEncoderCount(0);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fe65 	bl	8000528 <setEncoderCount>

	digipotWrite(0);//8.77K
 800085e:	2000      	movs	r0, #0
 8000860:	f002 facc 	bl	8002dfc <digipotWrite>



}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000064c 	.word	0x2000064c
 8000870:	20000644 	.word	0x20000644
 8000874:	20000648 	.word	0x20000648
 8000878:	20000654 	.word	0x20000654
 800087c:	20000540 	.word	0x20000540

08000880 <sendToFilter>:
void sendToFilter(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	FIRFilter_put(&amp_filter, adc_dma_arr[2]);
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <sendToFilter+0x18>)
 8000886:	889a      	ldrh	r2, [r3, #4]
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <sendToFilter+0x1c>)
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fdcc 	bl	800042a <FIRFilter_put>
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000654 	.word	0x20000654
 800089c:	20000540 	.word	0x20000540

080008a0 <getFromFilter>:

uint16_t getFromFilter(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	return FIRFilter_get(&amp_filter);
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <getFromFilter+0x14>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff fde6 	bl	8000478 <FIRFilter_get>
 80008ac:	0003      	movs	r3, r0
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000540 	.word	0x20000540

080008b8 <measureGain>:
/*
 * input_val is the actual differential voltage on the input in a 12 bit representation according to:
 * input_val = 4096 * dV/3.3
 */
uint8_t measureGain(uint16_t input_val){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	0002      	movs	r2, r0
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	801a      	strh	r2, [r3, #0]
	int32_t amp_out = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i<100; i++){
 80008c8:	230b      	movs	r3, #11
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e012      	b.n	80008f8 <measureGain+0x40>
		amp_out += getAnalogRead(2)-2048;
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff fe16 	bl	8000504 <getAnalogRead>
 80008d8:	0003      	movs	r3, r0
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <measureGain+0x7c>)
 80008dc:	4694      	mov	ip, r2
 80008de:	4463      	add	r3, ip
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f002 fe66 	bl	80035b8 <HAL_Delay>
	for (uint8_t i = 0; i<100; i++){
 80008ec:	210b      	movs	r1, #11
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	3201      	adds	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	230b      	movs	r3, #11
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b63      	cmp	r3, #99	; 0x63
 8000900:	d9e7      	bls.n	80008d2 <measureGain+0x1a>
	}
	amp_out /= 100;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2164      	movs	r1, #100	; 0x64
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fc88 	bl	800021c <__divsi3>
 800090c:	0003      	movs	r3, r0
 800090e:	60fb      	str	r3, [r7, #12]

	if (amp_out < 0){
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	da02      	bge.n	800091c <measureGain+0x64>
		amp_out = -amp_out;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	425b      	negs	r3, r3
 800091a:	60fb      	str	r3, [r7, #12]
	}
	return amp_out/input_val;
 800091c:	1dbb      	adds	r3, r7, #6
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	0019      	movs	r1, r3
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff fc7a 	bl	800021c <__divsi3>
 8000928:	0003      	movs	r3, r0
 800092a:	b2db      	uxtb	r3, r3
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}
 8000934:	fffff800 	.word	0xfffff800

08000938 <calibrateGain>:
 */
uint8_t gain_res_step = 35;
uint8_t gain_res_wiper = 72;
uint8_t device_calibrated = 0;

void calibrateGain(){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
	digipotWrite(255);
 800093e:	20ff      	movs	r0, #255	; 0xff
 8000940:	f002 fa5c 	bl	8002dfc <digipotWrite>
	HAL_Delay(100);
 8000944:	2064      	movs	r0, #100	; 0x64
 8000946:	f002 fe37 	bl	80035b8 <HAL_Delay>
	uint32_t res1 = 100000 / (measureGain(41) - 1);
 800094a:	2029      	movs	r0, #41	; 0x29
 800094c:	f7ff ffb4 	bl	80008b8 <measureGain>
 8000950:	0003      	movs	r3, r0
 8000952:	3b01      	subs	r3, #1
 8000954:	0019      	movs	r1, r3
 8000956:	4819      	ldr	r0, [pc, #100]	; (80009bc <calibrateGain+0x84>)
 8000958:	f7ff fc60 	bl	800021c <__divsi3>
 800095c:	0003      	movs	r3, r0
 800095e:	607b      	str	r3, [r7, #4]
	HAL_Delay(100);
 8000960:	2064      	movs	r0, #100	; 0x64
 8000962:	f002 fe29 	bl	80035b8 <HAL_Delay>
	digipotWrite(245);
 8000966:	20f5      	movs	r0, #245	; 0xf5
 8000968:	f002 fa48 	bl	8002dfc <digipotWrite>
	HAL_Delay(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f002 fe23 	bl	80035b8 <HAL_Delay>
	uint32_t res10 = 100000 / (measureGain(41) - 1);
 8000972:	2029      	movs	r0, #41	; 0x29
 8000974:	f7ff ffa0 	bl	80008b8 <measureGain>
 8000978:	0003      	movs	r3, r0
 800097a:	3b01      	subs	r3, #1
 800097c:	0019      	movs	r1, r3
 800097e:	480f      	ldr	r0, [pc, #60]	; (80009bc <calibrateGain+0x84>)
 8000980:	f7ff fc4c 	bl	800021c <__divsi3>
 8000984:	0003      	movs	r3, r0
 8000986:	603b      	str	r3, [r7, #0]
	gain_res_step = (res10-res1) / 10;
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	210a      	movs	r1, #10
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fbb9 	bl	8000108 <__udivsi3>
 8000996:	0003      	movs	r3, r0
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <calibrateGain+0x88>)
 800099c:	701a      	strb	r2, [r3, #0]
	gain_res_wiper = res1 - gain_res_step;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <calibrateGain+0x88>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <calibrateGain+0x8c>)
 80009ac:	701a      	strb	r2, [r3, #0]
	device_calibrated = 1;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <calibrateGain+0x90>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	000186a0 	.word	0x000186a0
 80009c0:	20000100 	.word	0x20000100
 80009c4:	20000101 	.word	0x20000101
 80009c8:	200002b4 	.word	0x200002b4

080009cc <getGainCalibrated>:
uint8_t getGainCalibrated(){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	return device_calibrated;
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <getGainCalibrated+0x10>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	200002b4 	.word	0x200002b4

080009e0 <getRgStep>:

uint8_t getRgStep(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	return gain_res_step;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <getRgStep+0x10>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000100 	.word	0x20000100

080009f4 <getRgWiper>:
uint8_t getRgWiper(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	return gain_res_wiper;
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <getRgWiper+0x10>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	20000101 	.word	0x20000101

08000a08 <calcGain>:


uint16_t calcGain(uint8_t d){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	701a      	strb	r2, [r3, #0]
	uint16_t res =  gain_res_wiper + ((255-d) * gain_res_step);
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <calcGain+0x54>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	22ff      	movs	r2, #255	; 0xff
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <calcGain+0x58>)
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	b292      	uxth	r2, r2
 8000a2a:	4353      	muls	r3, r2
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	200e      	movs	r0, #14
 8000a30:	183b      	adds	r3, r7, r0
 8000a32:	188a      	adds	r2, r1, r2
 8000a34:	801a      	strh	r2, [r3, #0]
	uint16_t gain = 1 + (100000/res);
 8000a36:	183b      	adds	r3, r7, r0
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <calcGain+0x5c>)
 8000a3e:	f7ff fbed 	bl	800021c <__divsi3>
 8000a42:	0003      	movs	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	210c      	movs	r1, #12
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	3201      	adds	r2, #1
 8000a4c:	801a      	strh	r2, [r3, #0]
	return gain;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	881b      	ldrh	r3, [r3, #0]
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000101 	.word	0x20000101
 8000a60:	20000100 	.word	0x20000100
 8000a64:	000186a0 	.word	0x000186a0

08000a68 <setGain>:

void setGain(uint16_t ngain){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	801a      	strh	r2, [r3, #0]
	uint16_t res_val = 100000/(ngain - 1);
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	4815      	ldr	r0, [pc, #84]	; (8000ad4 <setGain+0x6c>)
 8000a7e:	f7ff fbcd 	bl	800021c <__divsi3>
 8000a82:	0003      	movs	r3, r0
 8000a84:	001a      	movs	r2, r3
 8000a86:	210c      	movs	r1, #12
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	801a      	strh	r2, [r3, #0]
	uint16_t d = 255 - (res_val - gain_res_wiper)/gain_res_step;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <setGain+0x70>)
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	1a9a      	subs	r2, r3, r2
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <setGain+0x74>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	0010      	movs	r0, r2
 8000a9e:	f7ff fbbd 	bl	800021c <__divsi3>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	200e      	movs	r0, #14
 8000aa8:	183b      	adds	r3, r7, r0
 8000aaa:	21ff      	movs	r1, #255	; 0xff
 8000aac:	1a8a      	subs	r2, r1, r2
 8000aae:	801a      	strh	r2, [r3, #0]
	if (d > 255){
 8000ab0:	183b      	adds	r3, r7, r0
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	2bff      	cmp	r3, #255	; 0xff
 8000ab6:	d902      	bls.n	8000abe <setGain+0x56>
		d = 255;
 8000ab8:	183b      	adds	r3, r7, r0
 8000aba:	22ff      	movs	r2, #255	; 0xff
 8000abc:	801a      	strh	r2, [r3, #0]
	}
	digipotWrite(d);
 8000abe:	230e      	movs	r3, #14
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f002 f998 	bl	8002dfc <digipotWrite>
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b004      	add	sp, #16
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	000186a0 	.word	0x000186a0
 8000ad8:	20000101 	.word	0x20000101
 8000adc:	20000100 	.word	0x20000100

08000ae0 <getActiveGain>:

uint16_t getActiveGain(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	return calcGain(getActiveD());
 8000ae4:	f002 f980 	bl	8002de8 <getActiveD>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff ff8c 	bl	8000a08 <calcGain>
 8000af0:	0003      	movs	r3, r0
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <autoOffset>:
#define OFFSET_THRESHOLD 5
#define OFFSET_TIMEOUT 1000
uint8_t autoOffset(){//Auto offset routine
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	setOffset(2048);
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff fe5a 	bl	80007bc <setOffset>
	int16_t noffset = 2048;
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	801a      	strh	r2, [r3, #0]
	int16_t offset_error =  getFromFilter() - 2048 ;
 8000b10:	f7ff fec6 	bl	80008a0 <getFromFilter>
 8000b14:	0003      	movs	r3, r0
 8000b16:	4a33      	ldr	r2, [pc, #204]	; (8000be4 <autoOffset+0xec>)
 8000b18:	4694      	mov	ip, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	801a      	strh	r2, [r3, #0]
	uint32_t start_tick = HAL_GetTick();
 8000b22:	f002 fd3f 	bl	80035a4 <HAL_GetTick>
 8000b26:	0003      	movs	r3, r0
 8000b28:	603b      	str	r3, [r7, #0]
	while ((offset_error < -OFFSET_THRESHOLD) | (offset_error > OFFSET_THRESHOLD)){
 8000b2a:	e03f      	b.n	8000bac <autoOffset+0xb4>
		if (HAL_GetTick() > start_tick + OFFSET_TIMEOUT){
 8000b2c:	f002 fd3a 	bl	80035a4 <HAL_GetTick>
 8000b30:	0002      	movs	r2, r0
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	21fa      	movs	r1, #250	; 0xfa
 8000b36:	0089      	lsls	r1, r1, #2
 8000b38:	468c      	mov	ip, r1
 8000b3a:	4463      	add	r3, ip
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d906      	bls.n	8000b4e <autoOffset+0x56>
			setOffset(2048);
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff fe39 	bl	80007bc <setOffset>
			return 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e045      	b.n	8000bda <autoOffset+0xe2>
		}
		noffset -= offset_error;
 8000b4e:	1dbb      	adds	r3, r7, #6
 8000b50:	881a      	ldrh	r2, [r3, #0]
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	1dbb      	adds	r3, r7, #6
 8000b5c:	801a      	strh	r2, [r3, #0]
		if ((noffset > 4096) | (noffset < 0)){
 8000b5e:	1dbb      	adds	r3, r7, #6
 8000b60:	2201      	movs	r2, #1
 8000b62:	1c11      	adds	r1, r2, #0
 8000b64:	2200      	movs	r2, #0
 8000b66:	5e9a      	ldrsh	r2, [r3, r2]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	015b      	lsls	r3, r3, #5
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dc01      	bgt.n	8000b74 <autoOffset+0x7c>
 8000b70:	2300      	movs	r3, #0
 8000b72:	1c19      	adds	r1, r3, #0
 8000b74:	b2ca      	uxtb	r2, r1
 8000b76:	1dbb      	adds	r3, r7, #6
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	0bdb      	lsrs	r3, r3, #15
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <autoOffset+0x92>
			return 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e027      	b.n	8000bda <autoOffset+0xe2>
		}
		setOffset(noffset);
 8000b8a:	1dbb      	adds	r3, r7, #6
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff fe14 	bl	80007bc <setOffset>
		HAL_Delay(100);
 8000b94:	2064      	movs	r0, #100	; 0x64
 8000b96:	f002 fd0f 	bl	80035b8 <HAL_Delay>
		offset_error =  getFromFilter() - 2048 ;
 8000b9a:	f7ff fe81 	bl	80008a0 <getFromFilter>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <autoOffset+0xec>)
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	4463      	add	r3, ip
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	801a      	strh	r2, [r3, #0]
	while ((offset_error < -OFFSET_THRESHOLD) | (offset_error > OFFSET_THRESHOLD)){
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	5e5b      	ldrsh	r3, [r3, r1]
 8000bb4:	3305      	adds	r3, #5
 8000bb6:	db01      	blt.n	8000bbc <autoOffset+0xc4>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	1c1a      	adds	r2, r3, #0
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	5e1b      	ldrsh	r3, [r3, r0]
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	dc01      	bgt.n	8000bce <autoOffset+0xd6>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	1c19      	adds	r1, r3, #0
 8000bce:	b2cb      	uxtb	r3, r1
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1a9      	bne.n	8000b2c <autoOffset+0x34>
	}
	return 1;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	fffff800 	.word	0xfffff800

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f002 fc7f 	bl	80034f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f869 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 fb1f 	bl	8001238 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfa:	f000 faff 	bl	80011fc <MX_DMA_Init>
  MX_ADC_Init();
 8000bfe:	f000 f8c5 	bl	8000d8c <MX_ADC_Init>
  MX_CAN_Init();
 8000c02:	f000 f939 	bl	8000e78 <MX_CAN_Init>
  MX_DAC_Init();
 8000c06:	f000 f99b 	bl	8000f40 <MX_DAC_Init>
  MX_I2C1_Init();
 8000c0a:	f000 f9c7 	bl	8000f9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c0e:	f000 fa05 	bl	800101c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c12:	f000 fabb 	bl	800118c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000c16:	f00d ff59 	bl	800eacc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000c1a:	f000 fa3d 	bl	8001098 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000c1e:	f000 fa8f 	bl	8001140 <MX_TIM14_Init>
  MX_CRC_Init();
 8000c22:	f000 f961 	bl	8000ee8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  outputsInit(&htim14);
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <main+0xbc>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 fd95 	bl	8001758 <outputsInit>
  spiInit(&hspi1);
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <main+0xc0>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f002 f919 	bl	8002e68 <spiInit>
  acquisitionInit(&hadc, &htim2, &hdac);
 8000c36:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <main+0xc4>)
 8000c38:	491d      	ldr	r1, [pc, #116]	; (8000cb0 <main+0xc8>)
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <main+0xcc>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fde1 	bl	8000804 <acquisitionInit>
  statusLedOff();
 8000c42:	f000 fc85 	bl	8001550 <statusLedOff>
  usb_init();
 8000c46:	f001 fc09 	bl	800245c <usb_init>
  i2cInit(&hi2c1);
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <main+0xd0>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f000 fd9d 	bl	800178c <i2cInit>
  serial_init(&huart1);
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <main+0xd4>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f001 f8d1 	bl	8001dfc <serial_init>
  can_filterConfig();
 8000c5a:	f000 fbd7 	bl	800140c <can_filterConfig>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <main+0xd8>)
 8000c60:	2102      	movs	r1, #2
 8000c62:	0018      	movs	r0, r3
 8000c64:	f003 fbfe 	bl	8004464 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <main+0xd8>)
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f003 fbf9 	bl	8004464 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan);
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <main+0xd8>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 fa93 	bl	80041a0 <HAL_CAN_Start>
  can_msgConfig();
 8000c7a:	f000 fbf1 	bl	8001460 <can_msgConfig>
  uint8_t can_data[2] = {0,77};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	229a      	movs	r2, #154	; 0x9a
 8000c82:	01d2      	lsls	r2, r2, #7
 8000c84:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)

 {
	  usbController();
 8000c86:	f002 f82d 	bl	8002ce4 <usbController>
	  userLedController();
 8000c8a:	f000 fcdd 	bl	8001648 <userLedController>
	  i2cController();
 8000c8e:	f000 fe29 	bl	80018e4 <i2cController>
	  serialController();
 8000c92:	f001 fb6d 	bl	8002370 <serialController>
	  enc = getEncoderCount();
 8000c96:	f7ff fc89 	bl	80005ac <getEncoderCount>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <main+0xdc>)
 8000c9e:	601a      	str	r2, [r3, #0]
	  usbController();
 8000ca0:	e7f1      	b.n	8000c86 <main+0x9e>
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	20000924 	.word	0x20000924
 8000ca8:	20000878 	.word	0x20000878
 8000cac:	20000800 	.word	0x20000800
 8000cb0:	200008dc 	.word	0x200008dc
 8000cb4:	200009b0 	.word	0x200009b0
 8000cb8:	2000065c 	.word	0x2000065c
 8000cbc:	2000077c 	.word	0x2000077c
 8000cc0:	200006e4 	.word	0x200006e4
 8000cc4:	200002c4 	.word	0x200002c4

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b099      	sub	sp, #100	; 0x64
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	242c      	movs	r4, #44	; 0x2c
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2334      	movs	r3, #52	; 0x34
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f00e fc65 	bl	800f5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cde:	231c      	movs	r3, #28
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f00e fc5d 	bl	800f5a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cee:	003b      	movs	r3, r7
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	231c      	movs	r3, #28
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f00e fc56 	bl	800f5a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000cfc:	0021      	movs	r1, r4
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2222      	movs	r2, #34	; 0x22
 8000d02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2201      	movs	r2, #1
 8000d08:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2210      	movs	r2, #16
 8000d14:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f007 fcf2 	bl	8008708 <HAL_RCC_OscConfig>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d28:	f000 fbc0 	bl	80014ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	211c      	movs	r1, #28
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2203      	movs	r2, #3
 8000d38:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2101      	movs	r1, #1
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f008 f862 	bl	8008e14 <HAL_RCC_ClockConfig>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d54:	f000 fbaa 	bl	80014ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000d58:	003b      	movs	r3, r7
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <SystemClock_Config+0xc0>)
 8000d5c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d5e:	003b      	movs	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d64:	003b      	movs	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d70:	003b      	movs	r3, r7
 8000d72:	0018      	movs	r0, r3
 8000d74:	f008 f9c8 	bl	8009108 <HAL_RCCEx_PeriphCLKConfig>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d7c:	f000 fb96 	bl	80014ac <Error_Handler>
  }
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b019      	add	sp, #100	; 0x64
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	00020021 	.word	0x00020021

08000d8c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	0018      	movs	r0, r3
 8000d96:	230c      	movs	r3, #12
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f00e fc04 	bl	800f5a8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000da2:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <MX_ADC_Init+0xe8>)
 8000da4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	0612      	lsls	r2, r2, #24
 8000dac:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dae:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000de0:	22c2      	movs	r2, #194	; 0xc2
 8000de2:	32ff      	adds	r2, #255	; 0xff
 8000de4:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000dee:	2224      	movs	r2, #36	; 0x24
 8000df0:	2101      	movs	r1, #1
 8000df2:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 fbff 	bl	8003600 <HAL_ADC_Init>
 8000e02:	1e03      	subs	r3, r0, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8000e06:	f000 fb51 	bl	80014ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	0152      	lsls	r2, r2, #5
 8000e16:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e1e:	1d3a      	adds	r2, r7, #4
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000e22:	0011      	movs	r1, r2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f002 fdbd 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8000e2a:	1e03      	subs	r3, r0, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000e2e:	f000 fb3d 	bl	80014ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e38:	1d3a      	adds	r2, r7, #4
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f002 fdb0 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000e48:	f000 fb30 	bl	80014ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2202      	movs	r2, #2
 8000e50:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e52:	1d3a      	adds	r2, r7, #4
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_ADC_Init+0xe4>)
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f002 fda3 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000e62:	f000 fb23 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	200009b0 	.word	0x200009b0
 8000e74:	40012400 	.word	0x40012400

08000e78 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <MX_CAN_Init+0x6c>)
 8000e80:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 300;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000e84:	2296      	movs	r2, #150	; 0x96
 8000e86:	0052      	lsls	r2, r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000e98:	22c0      	movs	r2, #192	; 0xc0
 8000e9a:	0312      	lsls	r2, r2, #12
 8000e9c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	0352      	lsls	r2, r2, #13
 8000ea4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <MX_CAN_Init+0x68>)
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f002 ff77 	bl	8003dc0 <HAL_CAN_Init>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d001      	beq.n	8000eda <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000ed6:	f000 fae9 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200006e4 	.word	0x200006e4
 8000ee4:	40006400 	.word	0x40006400

08000ee8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <MX_CRC_Init+0x50>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <MX_CRC_Init+0x54>)
 8000f02:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000f06:	2208      	movs	r2, #8
 8000f08:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <MX_CRC_Init+0x4c>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f003 fdbc 	bl	8004a9c <HAL_CRC_Init>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_CRC_Init+0x44>
  {
    Error_Handler();
 8000f28:	f000 fac0 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	200006a8 	.word	0x200006a8
 8000f38:	40023000 	.word	0x40023000
 8000f3c:	00008005 	.word	0x00008005

08000f40 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f46:	003b      	movs	r3, r7
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f00e fb2a 	bl	800f5a8 <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_DAC_Init+0x54>)
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <MX_DAC_Init+0x58>)
 8000f58:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_DAC_Init+0x54>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f003 ff87 	bl	8004e70 <HAL_DAC_Init>
 8000f62:	1e03      	subs	r3, r0, #0
 8000f64:	d001      	beq.n	8000f6a <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000f66:	f000 faa1 	bl	80014ac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f70:	003b      	movs	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f76:	0039      	movs	r1, r7
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_DAC_Init+0x54>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f003 ffbd 	bl	8004efc <HAL_DAC_ConfigChannel>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8000f86:	f000 fa91 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	20000800 	.word	0x20000800
 8000f98:	40007400 	.word	0x40007400

08000f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 100;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2264      	movs	r2, #100	; 0x64
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f004 fc27 	bl	800582c <HAL_I2C_Init>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 fa63 	bl	80014ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f005 fe60 	bl	8006cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 fa5a 	bl	80014ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <MX_I2C1_Init+0x74>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f005 fea3 	bl	8006d48 <HAL_I2CEx_ConfigDigitalFilter>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 fa51 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000065c 	.word	0x2000065c
 8001014:	40005400 	.word	0x40005400
 8001018:	2000090e 	.word	0x2000090e

0800101c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_SPI1_Init+0x74>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <MX_SPI1_Init+0x78>)
 8001024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_SPI1_Init+0x74>)
 8001028:	2282      	movs	r2, #130	; 0x82
 800102a:	0052      	lsls	r2, r2, #1
 800102c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_SPI1_Init+0x74>)
 8001036:	22e0      	movs	r2, #224	; 0xe0
 8001038:	00d2      	lsls	r2, r2, #3
 800103a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_SPI1_Init+0x74>)
 800103e:	2202      	movs	r2, #2
 8001040:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_SPI1_Init+0x74>)
 8001044:	2201      	movs	r2, #1
 8001046:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_SPI1_Init+0x74>)
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_SPI1_Init+0x74>)
 8001052:	2220      	movs	r2, #32
 8001054:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_SPI1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_SPI1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_SPI1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_SPI1_Init+0x74>)
 800106a:	2207      	movs	r2, #7
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_SPI1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <MX_SPI1_Init+0x74>)
 800107c:	0018      	movs	r0, r3
 800107e:	f008 f941 	bl	8009304 <HAL_SPI_Init>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d001      	beq.n	800108a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 fa11 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000878 	.word	0x20000878
 8001094:	40013000 	.word	0x40013000

08001098 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	2308      	movs	r3, #8
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	0018      	movs	r0, r3
 80010a4:	2310      	movs	r3, #16
 80010a6:	001a      	movs	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	f00e fa7d 	bl	800f5a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	003b      	movs	r3, r7
 80010b0:	0018      	movs	r0, r3
 80010b2:	2308      	movs	r3, #8
 80010b4:	001a      	movs	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	f00e fa76 	bl	800f5a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_TIM2_Init+0xa4>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	05d2      	lsls	r2, r2, #23
 80010c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_TIM2_Init+0xa4>)
 80010c6:	2230      	movs	r2, #48	; 0x30
 80010c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_TIM2_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM2_Init+0xa4>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	4252      	negs	r2, r2
 80010d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_TIM2_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_TIM2_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_TIM2_Init+0xa4>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f008 fc86 	bl	80099f8 <HAL_TIM_Base_Init>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010f0:	f000 f9dc 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f4:	2108      	movs	r1, #8
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	0152      	lsls	r2, r2, #5
 80010fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fe:	187a      	adds	r2, r7, r1
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_TIM2_Init+0xa4>)
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f008 fe2f 	bl	8009d68 <HAL_TIM_ConfigClockSource>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800110e:	f000 f9cd 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001112:	003b      	movs	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	003b      	movs	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111e:	003a      	movs	r2, r7
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_TIM2_Init+0xa4>)
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f009 f82b 	bl	800a180 <HAL_TIMEx_MasterConfigSynchronization>
 800112a:	1e03      	subs	r3, r0, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800112e:	f000 f9bd 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b006      	add	sp, #24
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	200008dc 	.word	0x200008dc

08001140 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_TIM14_Init+0x40>)
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <MX_TIM14_Init+0x44>)
 8001148:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 74;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_TIM14_Init+0x40>)
 800114c:	224a      	movs	r2, #74	; 0x4a
 800114e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_TIM14_Init+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64865;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_TIM14_Init+0x40>)
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <MX_TIM14_Init+0x48>)
 800115a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_TIM14_Init+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_TIM14_Init+0x40>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <MX_TIM14_Init+0x40>)
 800116a:	0018      	movs	r0, r3
 800116c:	f008 fc44 	bl	80099f8 <HAL_TIM_Base_Init>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001174:	f000 f99a 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000924 	.word	0x20000924
 8001184:	40002000 	.word	0x40002000
 8001188:	0000fd61 	.word	0x0000fd61

0800118c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <MX_USART1_UART_Init+0x6c>)
 8001194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 8001198:	2296      	movs	r2, #150	; 0x96
 800119a:	0192      	lsls	r2, r2, #6
 800119c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011ca:	2240      	movs	r2, #64	; 0x40
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	0352      	lsls	r2, r2, #13
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	0392      	lsls	r2, r2, #14
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <MX_USART1_UART_Init+0x68>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f009 f83b 	bl	800a25c <HAL_UART_Init>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80011ea:	f000 f95f 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000077c 	.word	0x2000077c
 80011f8:	40013800 	.word	0x40013800

080011fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_DMA_Init+0x38>)
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_DMA_Init+0x38>)
 8001208:	2101      	movs	r1, #1
 800120a:	430a      	orrs	r2, r1
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_DMA_Init+0x38>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	2201      	movs	r2, #1
 8001214:	4013      	ands	r3, r2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2009      	movs	r0, #9
 8001220:	f003 fc0a 	bl	8004a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001224:	2009      	movs	r0, #9
 8001226:	f003 fc1c 	bl	8004a62 <HAL_NVIC_EnableIRQ>

}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	40021000 	.word	0x40021000

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	240c      	movs	r4, #12
 8001240:	193b      	adds	r3, r7, r4
 8001242:	0018      	movs	r0, r3
 8001244:	2314      	movs	r3, #20
 8001246:	001a      	movs	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	f00e f9ad 	bl	800f5a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b4f      	ldr	r3, [pc, #316]	; (800138c <MX_GPIO_Init+0x154>)
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_GPIO_Init+0x154>)
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	0289      	lsls	r1, r1, #10
 8001258:	430a      	orrs	r2, r1
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <MX_GPIO_Init+0x154>)
 800125e:	695a      	ldr	r2, [r3, #20]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	029b      	lsls	r3, r3, #10
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <MX_GPIO_Init+0x154>)
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <MX_GPIO_Init+0x154>)
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	02c9      	lsls	r1, r1, #11
 8001274:	430a      	orrs	r2, r1
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <MX_GPIO_Init+0x154>)
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	02db      	lsls	r3, r3, #11
 8001280:	4013      	ands	r3, r2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_RESET);
 8001286:	2390      	movs	r3, #144	; 0x90
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	2200      	movs	r2, #0
 800128c:	2108      	movs	r1, #8
 800128e:	0018      	movs	r0, r3
 8001290:	f004 fa77 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERIAL_RSE_Pin|USER_OUT1_Pin|USER_OUT2_Pin|LD2_Pin
 8001294:	493e      	ldr	r1, [pc, #248]	; (8001390 <MX_GPIO_Init+0x158>)
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <MX_GPIO_Init+0x15c>)
 8001298:	2200      	movs	r2, #0
 800129a:	0018      	movs	r0, r3
 800129c:	f004 fa71 	bl	8005782 <HAL_GPIO_WritePin>
                          |LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI1_SS1_Pin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	2208      	movs	r2, #8
 80012a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	2201      	movs	r2, #1
 80012aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	193b      	adds	r3, r7, r4
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	193b      	adds	r3, r7, r4
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 80012b8:	193a      	adds	r2, r7, r4
 80012ba:	2390      	movs	r3, #144	; 0x90
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	0011      	movs	r1, r2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f004 f8c9 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERIAL_RSE_Pin USER_OUT1_Pin USER_OUT2_Pin LD2_Pin
                           LD1_Pin */
  GPIO_InitStruct.Pin = SERIAL_RSE_Pin|USER_OUT1_Pin|USER_OUT2_Pin|LD2_Pin
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	4a31      	ldr	r2, [pc, #196]	; (8001390 <MX_GPIO_Init+0x158>)
 80012ca:	601a      	str	r2, [r3, #0]
                          |LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	2201      	movs	r2, #1
 80012d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <MX_GPIO_Init+0x15c>)
 80012e2:	0019      	movs	r1, r3
 80012e4:	0010      	movs	r0, r2
 80012e6:	f004 f8b7 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_IN1_Pin USER_IN2_Pin */
  GPIO_InitStruct.Pin = USER_IN1_Pin|USER_IN2_Pin;
 80012ea:	0021      	movs	r1, r4
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	22c0      	movs	r2, #192	; 0xc0
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	000c      	movs	r4, r1
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	2201      	movs	r2, #1
 8001300:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	193b      	adds	r3, r7, r4
 8001304:	4a23      	ldr	r2, [pc, #140]	; (8001394 <MX_GPIO_Init+0x15c>)
 8001306:	0019      	movs	r1, r3
 8001308:	0010      	movs	r0, r2
 800130a:	f004 f8a5 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 800130e:	0021      	movs	r1, r4
 8001310:	187b      	adds	r3, r7, r1
 8001312:	22c0      	movs	r2, #192	; 0xc0
 8001314:	0192      	lsls	r2, r2, #6
 8001316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001318:	000c      	movs	r4, r1
 800131a:	193b      	adds	r3, r7, r4
 800131c:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <MX_GPIO_Init+0x160>)
 800131e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	193b      	adds	r3, r7, r4
 8001322:	2201      	movs	r2, #1
 8001324:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	193b      	adds	r3, r7, r4
 8001328:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <MX_GPIO_Init+0x15c>)
 800132a:	0019      	movs	r1, r3
 800132c:	0010      	movs	r0, r2
 800132e:	f004 f893 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_BUS_SENS_Pin CONFIG_BIT0_Pin */
  GPIO_InitStruct.Pin = USB_BUS_SENS_Pin|CONFIG_BIT0_Pin;
 8001332:	193b      	adds	r3, r7, r4
 8001334:	2281      	movs	r2, #129	; 0x81
 8001336:	0212      	lsls	r2, r2, #8
 8001338:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	193b      	adds	r3, r7, r4
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	193a      	adds	r2, r7, r4
 8001348:	2390      	movs	r3, #144	; 0x90
 800134a:	05db      	lsls	r3, r3, #23
 800134c:	0011      	movs	r1, r2
 800134e:	0018      	movs	r0, r3
 8001350:	f004 f882 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONFIG_BIT1_Pin CONFIG_BIT2_Pin CONFIG_BIT3_Pin */
  GPIO_InitStruct.Pin = CONFIG_BIT1_Pin|CONFIG_BIT2_Pin|CONFIG_BIT3_Pin;
 8001354:	193b      	adds	r3, r7, r4
 8001356:	2238      	movs	r2, #56	; 0x38
 8001358:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	193b      	adds	r3, r7, r4
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <MX_GPIO_Init+0x15c>)
 800136a:	0019      	movs	r1, r3
 800136c:	0010      	movs	r0, r2
 800136e:	f004 f873 	bl	8005458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2007      	movs	r0, #7
 8001378:	f003 fb5e 	bl	8004a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800137c:	2007      	movs	r0, #7
 800137e:	f003 fb70 	bl	8004a62 <HAL_NVIC_EnableIRQ>

}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b009      	add	sp, #36	; 0x24
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40021000 	.word	0x40021000
 8001390:	0000c007 	.word	0x0000c007
 8001394:	48000400 	.word	0x48000400
 8001398:	10310000 	.word	0x10310000

0800139c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	0002      	movs	r2, r0
 80013a4:	1dbb      	adds	r3, r7, #6
 80013a6:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin){
 80013a8:	1dbb      	adds	r3, r7, #6
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	019b      	lsls	r3, r3, #6
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d005      	beq.n	80013c0 <HAL_GPIO_EXTI_Callback+0x24>
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	881a      	ldrh	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	015b      	lsls	r3, r3, #5
 80013bc:	429a      	cmp	r2, r3
 80013be:	d101      	bne.n	80013c4 <HAL_GPIO_EXTI_Callback+0x28>
	  encoderController();
 80013c0:	f7ff f8fe 	bl	80005c0 <encoderController>
  }
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	sendToFilter();
 80013d4:	f7ff fa54 	bl	8000880 <sendToFilter>
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <calcCRC>:

uint16_t calcCRC(uint8_t * data, uint8_t len){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	000a      	movs	r2, r1
 80013ea:	1cfb      	adds	r3, r7, #3
 80013ec:	701a      	strb	r2, [r3, #0]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 80013ee:	1cfb      	adds	r3, r7, #3
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <calcCRC+0x28>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f003 fbb6 	bl	8004b68 <HAL_CRC_Calculate>
 80013fc:	0003      	movs	r3, r0
 80013fe:	b29b      	uxth	r3, r3
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200006a8 	.word	0x200006a8

0800140c <can_filterConfig>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
	i2cEnable();
}
*/

void can_filterConfig(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <can_filterConfig+0x48>)
 8001412:	2201      	movs	r2, #1
 8001414:	621a      	str	r2, [r3, #32]
	canFilterConfig.FilterIdHigh = 0x245 << 5;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <can_filterConfig+0x48>)
 8001418:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <can_filterConfig+0x4c>)
 800141a:	601a      	str	r2, [r3, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <can_filterConfig+0x48>)
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
	canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <can_filterConfig+0x48>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
	canFilterConfig.FilterMaskIdHigh = 0x0000;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <can_filterConfig+0x48>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <can_filterConfig+0x48>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <can_filterConfig+0x48>)
 8001436:	2201      	movs	r2, #1
 8001438:	61da      	str	r2, [r3, #28]
	if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK){
 800143a:	4a06      	ldr	r2, [pc, #24]	; (8001454 <can_filterConfig+0x48>)
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <can_filterConfig+0x50>)
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f002 fdbb 	bl	8003fbc <HAL_CAN_ConfigFilter>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d001      	beq.n	800144e <can_filterConfig+0x42>
		Error_Handler();
 800144a:	f000 f82f 	bl	80014ac <Error_Handler>
	}
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000070c 	.word	0x2000070c
 8001458:	000048a0 	.word	0x000048a0
 800145c:	200006e4 	.word	0x200006e4

08001460 <can_msgConfig>:
void can_msgConfig(){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	canTxMsg.StdId = 0x200;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <can_msgConfig+0x24>)
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	0092      	lsls	r2, r2, #2
 800146a:	601a      	str	r2, [r3, #0]
	canTxMsg.IDE = CAN_ID_STD;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <can_msgConfig+0x24>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
	canTxMsg.RTR = CAN_RTR_DATA;
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <can_msgConfig+0x24>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
	canTxMsg.DLC = 2;
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <can_msgConfig+0x24>)
 800147a:	2202      	movs	r2, #2
 800147c:	611a      	str	r2, [r3, #16]
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200006cc 	.word	0x200006cc

08001488 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxMsg, canRx);
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	2100      	movs	r1, #0
 8001498:	f002 fec8 	bl	800422c <HAL_CAN_GetRxMessage>
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200009f4 	.word	0x200009f4
 80014a8:	2000085c 	.word	0x2000085c

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <statusLedController>:

/*
 * statusLedController()
 * Called by the timer interruption to blink the status led
 */
void statusLedController(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	if (status_led == LED_BLINKING){
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <statusLedController+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d106      	bne.n	80014d2 <statusLedController+0x1a>
		HAL_GPIO_TogglePin(STATUS_LED_PORT, STATUS_LED_PIN);
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <statusLedController+0x24>)
 80014ca:	0019      	movs	r1, r3
 80014cc:	0010      	movs	r0, r2
 80014ce:	f004 f975 	bl	80057bc <HAL_GPIO_TogglePin>
		}
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200002c8 	.word	0x200002c8
 80014dc:	48000400 	.word	0x48000400

080014e0 <statusLedMode>:

/*
 * statusLedMode(mode)
 * Changes status led mode between off, on ou blinking
 */
void statusLedMode(uint8_t mode){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	0002      	movs	r2, r0
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	701a      	strb	r2, [r3, #0]
		if ( mode != status_led){
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <statusLedMode+0x58>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	1dfa      	adds	r2, r7, #7
 80014f2:	7812      	ldrb	r2, [r2, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d01a      	beq.n	800152e <statusLedMode+0x4e>
			switch(mode){
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <statusLedMode+0x26>
 8001500:	2b01      	cmp	r3, #1
 8001502:	d008      	beq.n	8001516 <statusLedMode+0x36>
 8001504:	e00f      	b.n	8001526 <statusLedMode+0x46>
			case LED_OFF:
				HAL_GPIO_WritePin(STATUS_LED_PORT, STATUS_LED_PIN, 0);
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	01db      	lsls	r3, r3, #7
 800150a:	480c      	ldr	r0, [pc, #48]	; (800153c <statusLedMode+0x5c>)
 800150c:	2200      	movs	r2, #0
 800150e:	0019      	movs	r1, r3
 8001510:	f004 f937 	bl	8005782 <HAL_GPIO_WritePin>
				break;
 8001514:	e007      	b.n	8001526 <statusLedMode+0x46>
			case LED_ON:
				HAL_GPIO_WritePin(STATUS_LED_PORT, STATUS_LED_PIN, 1);
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	01db      	lsls	r3, r3, #7
 800151a:	4808      	ldr	r0, [pc, #32]	; (800153c <statusLedMode+0x5c>)
 800151c:	2201      	movs	r2, #1
 800151e:	0019      	movs	r1, r3
 8001520:	f004 f92f 	bl	8005782 <HAL_GPIO_WritePin>
				break;
 8001524:	46c0      	nop			; (mov r8, r8)
			}
			status_led = mode;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <statusLedMode+0x58>)
 8001528:	1dfa      	adds	r2, r7, #7
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	701a      	strb	r2, [r3, #0]
		}
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	200002c8 	.word	0x200002c8
 800153c:	48000400 	.word	0x48000400

08001540 <statusLedOn>:

void statusLedOn(){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	statusLedMode(LED_ON);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff ffcb 	bl	80014e0 <statusLedMode>
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <statusLedOff>:
void statusLedOff(){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	statusLedMode(LED_OFF);
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff ffc3 	bl	80014e0 <statusLedMode>
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <statusLedBlink>:
void statusLedBlink(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	statusLedMode(LED_BLINKING);
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff ffbb 	bl	80014e0 <statusLedMode>
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <userLedMode>:

/*
 * userLedMode(mode)
 * Changes user led mode between off, on or blinking
 */
void userLedMode(uint8_t mode){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	701a      	strb	r2, [r3, #0]
	user_led = mode;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <userLedMode+0x68>)
 800157e:	1dfa      	adds	r2, r7, #7
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	701a      	strb	r2, [r3, #0]
	static uint8_t last_mode = 9;
	if (user_led != last_mode){
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <userLedMode+0x68>)
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <userLedMode+0x6c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d01f      	beq.n	80015d0 <userLedMode+0x60>
		switch(user_led){
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <userLedMode+0x68>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d015      	beq.n	80015c4 <userLedMode+0x54>
 8001598:	dc16      	bgt.n	80015c8 <userLedMode+0x58>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <userLedMode+0x34>
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d008      	beq.n	80015b4 <userLedMode+0x44>
 80015a2:	e011      	b.n	80015c8 <userLedMode+0x58>
		case LED_OFF:
			HAL_GPIO_WritePin(USER_LED_PORT, USER_LED_PIN, 0);
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <userLedMode+0x70>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	0019      	movs	r1, r3
 80015ae:	f004 f8e8 	bl	8005782 <HAL_GPIO_WritePin>
			break;
 80015b2:	e009      	b.n	80015c8 <userLedMode+0x58>
		case LED_ON:
			HAL_GPIO_WritePin(USER_LED_PORT, USER_LED_PIN, 1);
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <userLedMode+0x70>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	0019      	movs	r1, r3
 80015be:	f004 f8e0 	bl	8005782 <HAL_GPIO_WritePin>
			break;
 80015c2:	e001      	b.n	80015c8 <userLedMode+0x58>
		case LED_BLINKING:
			userLedController();
 80015c4:	f000 f840 	bl	8001648 <userLedController>
		}
		last_mode = user_led;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <userLedMode+0x68>)
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <userLedMode+0x6c>)
 80015ce:	701a      	strb	r2, [r3, #0]
	}
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200002c9 	.word	0x200002c9
 80015dc:	20000104 	.word	0x20000104
 80015e0:	48000400 	.word	0x48000400

080015e4 <getUserLedMode>:

/*
 * getUserLedMode()
 * returns user led current mode
 */
uint8_t getUserLedMode(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	return user_led;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <getUserLedMode+0x10>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	200002c9 	.word	0x200002c9

080015f8 <userLedFreq>:

/*
 * userLedFreq(frequency)
 * Changes user led mode 2 blinking frequency
 */
void userLedFreq(uint8_t freq){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	0002      	movs	r2, r0
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	701a      	strb	r2, [r3, #0]
	user_led_period = 1000/freq;
 8001604:	1dfb      	adds	r3, r7, #7
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	0019      	movs	r1, r3
 800160a:	23fa      	movs	r3, #250	; 0xfa
 800160c:	0098      	lsls	r0, r3, #2
 800160e:	f7fe fe05 	bl	800021c <__divsi3>
 8001612:	0003      	movs	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b03      	ldr	r3, [pc, #12]	; (8001624 <userLedFreq+0x2c>)
 8001618:	801a      	strh	r2, [r3, #0]
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	20000102 	.word	0x20000102

08001628 <getUserLedFreq>:

/*
 * getUserLedFreq()
 * returns user led current blinking frequency
 */
uint8_t getUserLedFreq(){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	return 1000/user_led_period;
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <getUserLedFreq+0x1c>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	0019      	movs	r1, r3
 8001632:	23fa      	movs	r3, #250	; 0xfa
 8001634:	0098      	lsls	r0, r3, #2
 8001636:	f7fe fdf1 	bl	800021c <__divsi3>
 800163a:	0003      	movs	r3, r0
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000102 	.word	0x20000102

08001648 <userLedController>:

/*
 * userLedController()
 * toggles the user led when on mode 2
 */
void userLedController(){
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
	static uint32_t last_toogle_time = 0;
	if (user_led == LED_BLINKING){
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <userLedController+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d116      	bne.n	8001684 <userLedController+0x3c>
		uint32_t time = HAL_GetTick();
 8001656:	f001 ffa5 	bl	80035a4 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	607b      	str	r3, [r7, #4]
		if ( time > last_toogle_time + user_led_period){
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <userLedController+0x48>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	001a      	movs	r2, r3
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <userLedController+0x4c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	d909      	bls.n	8001684 <userLedController+0x3c>
			HAL_GPIO_TogglePin(USER_LED_PORT, USER_LED_PIN);
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <userLedController+0x50>)
 8001676:	0019      	movs	r1, r3
 8001678:	0010      	movs	r0, r2
 800167a:	f004 f89f 	bl	80057bc <HAL_GPIO_TogglePin>
			last_toogle_time = time;
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <userLedController+0x4c>)
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200002c9 	.word	0x200002c9
 8001690:	20000102 	.word	0x20000102
 8001694:	200002cc 	.word	0x200002cc
 8001698:	48000400 	.word	0x48000400

0800169c <setUserOut>:

/*
 * userOutWrite(output selection, duty cycle)
 * sets the duty cycle for a user output pin
 */
void setUserOut(uint8_t out, uint8_t state){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	0002      	movs	r2, r0
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	1dbb      	adds	r3, r7, #6
 80016aa:	1c0a      	adds	r2, r1, #0
 80016ac:	701a      	strb	r2, [r3, #0]
	if (state != 0 && state != 1){
 80016ae:	1dbb      	adds	r3, r7, #6
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <setUserOut+0x22>
 80016b6:	1dbb      	adds	r3, r7, #6
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d11e      	bne.n	80016fc <setUserOut+0x60>
		return;
	}
	switch(out){
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d002      	beq.n	80016cc <setUserOut+0x30>
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d00c      	beq.n	80016e4 <setUserOut+0x48>
 80016ca:	e018      	b.n	80016fe <setUserOut+0x62>
	case 1:
		userOut1 = state;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <setUserOut+0x68>)
 80016ce:	1dba      	adds	r2, r7, #6
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(USER_OUT1_GPIO_Port, USER_OUT1_Pin, userOut1);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <setUserOut+0x68>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <setUserOut+0x6c>)
 80016da:	001a      	movs	r2, r3
 80016dc:	2102      	movs	r1, #2
 80016de:	f004 f850 	bl	8005782 <HAL_GPIO_WritePin>
		break;
 80016e2:	e00c      	b.n	80016fe <setUserOut+0x62>

	case 2:
		userOut2 = state;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <setUserOut+0x70>)
 80016e6:	1dba      	adds	r2, r7, #6
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(USER_OUT2_GPIO_Port, USER_OUT2_Pin, userOut2);
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <setUserOut+0x70>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <setUserOut+0x6c>)
 80016f2:	001a      	movs	r2, r3
 80016f4:	2104      	movs	r1, #4
 80016f6:	f004 f844 	bl	8005782 <HAL_GPIO_WritePin>
		break;
 80016fa:	e000      	b.n	80016fe <setUserOut+0x62>
		return;
 80016fc:	46c0      	nop			; (mov r8, r8)
	}
}
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200002ca 	.word	0x200002ca
 8001708:	48000400 	.word	0x48000400
 800170c:	200002cb 	.word	0x200002cb

08001710 <getUserOut>:

/*
 * getUserOut(output)
 * Return the current output value
 */
uint8_t getUserOut(uint8_t out){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	0002      	movs	r2, r0
 8001718:	1dfb      	adds	r3, r7, #7
 800171a:	701a      	strb	r2, [r3, #0]
	uint8_t state;
	switch(out){
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d002      	beq.n	800172a <getUserOut+0x1a>
 8001724:	2b02      	cmp	r3, #2
 8001726:	d006      	beq.n	8001736 <getUserOut+0x26>
 8001728:	e00b      	b.n	8001742 <getUserOut+0x32>
	case 1:
		state = userOut1;
 800172a:	230f      	movs	r3, #15
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <getUserOut+0x40>)
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	701a      	strb	r2, [r3, #0]
		break;
 8001734:	e005      	b.n	8001742 <getUserOut+0x32>

	case 2:
		state = userOut2;
 8001736:	230f      	movs	r3, #15
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	4a06      	ldr	r2, [pc, #24]	; (8001754 <getUserOut+0x44>)
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	701a      	strb	r2, [r3, #0]
		break;
 8001740:	46c0      	nop			; (mov r8, r8)
	}
	return state;
 8001742:	230f      	movs	r3, #15
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b004      	add	sp, #16
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200002ca 	.word	0x200002ca
 8001754:	200002cb 	.word	0x200002cb

08001758 <outputsInit>:

/*
 * outputsInit()
 * initializer for the outputs
 */
void outputsInit(TIM_HandleTypeDef *htimx){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htimx);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	0018      	movs	r0, r3
 8001764:	f008 f998 	bl	8009a98 <HAL_TIM_Base_Start_IT>
	statusLedMode(0);
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff feb9 	bl	80014e0 <statusLedMode>
	userLedMode(0);
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff fefe 	bl	8001570 <userLedMode>
	setUserOut(1, 0);
 8001774:	2100      	movs	r1, #0
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff ff90 	bl	800169c <setUserOut>
	setUserOut(2, 0);
 800177c:	2100      	movs	r1, #0
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff ff8c 	bl	800169c <setUserOut>

}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}

0800178c <i2cInit>:
I2C_HandleTypeDef *hi2c;

void i2cEnable(){
	HAL_I2C_Slave_Receive_IT(hi2c, i2cRXBuf , 1);
}
void i2cInit(I2C_HandleTypeDef * hi2cx){
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	hi2c = hi2cx;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <i2cInit+0x50>)
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < I2C_BUFFER_SIZE; i++){
 800179a:	230f      	movs	r3, #15
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e00f      	b.n	80017c4 <i2cInit+0x38>
		i2cRXBuf[i] = 0;
 80017a4:	200f      	movs	r0, #15
 80017a6:	183b      	adds	r3, r7, r0
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <i2cInit+0x54>)
 80017ac:	2100      	movs	r1, #0
 80017ae:	54d1      	strb	r1, [r2, r3]
		i2cTXBuf[i] = 0;
 80017b0:	183b      	adds	r3, r7, r0
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <i2cInit+0x58>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < I2C_BUFFER_SIZE; i++){
 80017ba:	183b      	adds	r3, r7, r0
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	183b      	adds	r3, r7, r0
 80017c0:	3201      	adds	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	230f      	movs	r3, #15
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d9ea      	bls.n	80017a4 <i2cInit+0x18>
	}
	i2c_com_state = I2C_COM_IDLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <i2cInit+0x5c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
	//i2cEnable();
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b004      	add	sp, #16
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000a14 	.word	0x20000a14
 80017e0:	20000a00 	.word	0x20000a00
 80017e4:	20000a08 	.word	0x20000a08
 80017e8:	200002d0 	.word	0x200002d0

080017ec <i2cProcessRequest>:

void i2cProcessRequest(){
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	static uint8_t req_register;
	uint16_t res_val;
	uint32_t value ;

	if (i2c_com_state == I2C_COM_WRITE){
 80017f2:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <i2cProcessRequest+0xdc>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d110      	bne.n	800181c <i2cProcessRequest+0x30>
		switch (req_register){
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <i2cProcessRequest+0xe0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b0b      	cmp	r3, #11
 8001800:	d108      	bne.n	8001814 <i2cProcessRequest+0x28>
		case 11:
			value = i2cRXBuf[0];
 8001802:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <i2cProcessRequest+0xe4>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	603b      	str	r3, [r7, #0]
			userLedMode((uint8_t)value);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff feaf 	bl	8001570 <userLedMode>
			break;
 8001812:	46c0      	nop			; (mov r8, r8)
		}
		i2c_com_state = I2C_COM_IDLE;
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <i2cProcessRequest+0xdc>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e02f      	b.n	800187c <i2cProcessRequest+0x90>
	}else{
		req_register = i2cRXBuf[0];
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <i2cProcessRequest+0xe4>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <i2cProcessRequest+0xe0>)
 8001822:	701a      	strb	r2, [r3, #0]
		switch (req_register){
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <i2cProcessRequest+0xe0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b0b      	cmp	r3, #11
 800182a:	d002      	beq.n	8001832 <i2cProcessRequest+0x46>
 800182c:	2b14      	cmp	r3, #20
 800182e:	d007      	beq.n	8001840 <i2cProcessRequest+0x54>
				res_val = getFromFilter();
				i2cTXBuf[0] = get8MSB(res_val);
				i2cTXBuf[1] = get8LSB(res_val);
				break;
			default:
				break;
 8001830:	e024      	b.n	800187c <i2cProcessRequest+0x90>
				i2c_com_state = I2C_COM_WRITE;
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <i2cProcessRequest+0xdc>)
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
				i2c_req_n = 1;
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <i2cProcessRequest+0xe8>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
				break;
 800183e:	e01d      	b.n	800187c <i2cProcessRequest+0x90>
				i2c_com_state = I2C_COM_READ;
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <i2cProcessRequest+0xdc>)
 8001842:	2202      	movs	r2, #2
 8001844:	701a      	strb	r2, [r3, #0]
				i2c_res_n = 2;
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <i2cProcessRequest+0xec>)
 8001848:	2202      	movs	r2, #2
 800184a:	701a      	strb	r2, [r3, #0]
				res_val = getFromFilter();
 800184c:	1d3c      	adds	r4, r7, #4
 800184e:	f7ff f827 	bl	80008a0 <getFromFilter>
 8001852:	0003      	movs	r3, r0
 8001854:	8023      	strh	r3, [r4, #0]
				i2cTXBuf[0] = get8MSB(res_val);
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	0018      	movs	r0, r3
 800185c:	f001 fa54 	bl	8002d08 <get8MSB>
 8001860:	0003      	movs	r3, r0
 8001862:	001a      	movs	r2, r3
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <i2cProcessRequest+0xf0>)
 8001866:	701a      	strb	r2, [r3, #0]
				i2cTXBuf[1] = get8LSB(res_val);
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	0018      	movs	r0, r3
 800186e:	f001 fa5a 	bl	8002d26 <get8LSB>
 8001872:	0003      	movs	r3, r0
 8001874:	001a      	movs	r2, r3
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <i2cProcessRequest+0xf0>)
 8001878:	705a      	strb	r2, [r3, #1]
				break;
 800187a:	46c0      	nop			; (mov r8, r8)

		}
	}
	for (uint8_t i = 0; i < I2C_BUFFER_SIZE; i++){
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e009      	b.n	8001898 <i2cProcessRequest+0xac>
		i2cRXBuf[i] = 0;
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <i2cProcessRequest+0xe4>)
 800188a:	2100      	movs	r1, #0
 800188c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < I2C_BUFFER_SIZE; i++){
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	3201      	adds	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	1dfb      	adds	r3, r7, #7
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b07      	cmp	r3, #7
 800189e:	d9f1      	bls.n	8001884 <i2cProcessRequest+0x98>
	}
	if (i2c_com_state == I2C_COM_READ){
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <i2cProcessRequest+0xdc>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d10b      	bne.n	80018c0 <i2cProcessRequest+0xd4>
		HAL_I2C_Slave_Transmit(hi2c, i2cTXBuf, i2c_res_n, 1);
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <i2cProcessRequest+0xf4>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <i2cProcessRequest+0xec>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <i2cProcessRequest+0xf0>)
 80018b4:	2301      	movs	r3, #1
 80018b6:	f004 f84f 	bl	8005958 <HAL_I2C_Slave_Transmit>
		i2c_com_state = I2C_COM_IDLE;
 80018ba:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <i2cProcessRequest+0xdc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
	}
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b003      	add	sp, #12
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	200002d0 	.word	0x200002d0
 80018cc:	200002d1 	.word	0x200002d1
 80018d0:	20000a00 	.word	0x20000a00
 80018d4:	200009fc 	.word	0x200009fc
 80018d8:	20000a10 	.word	0x20000a10
 80018dc:	20000a08 	.word	0x20000a08
 80018e0:	20000a14 	.word	0x20000a14

080018e4 <i2cController>:
void i2cController(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	switch (i2c_com_state ){
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <i2cController+0x50>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <i2cController+0x12>
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d00e      	beq.n	8001912 <i2cController+0x2e>
		i2cProcessRequest();
		break;

	}

}
 80018f4:	e01a      	b.n	800192c <i2cController+0x48>
		HAL_I2C_Slave_Receive(hi2c, i2cRXBuf, 1, 1);
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <i2cController+0x54>)
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	4910      	ldr	r1, [pc, #64]	; (800193c <i2cController+0x58>)
 80018fc:	2301      	movs	r3, #1
 80018fe:	2201      	movs	r2, #1
 8001900:	f004 f940 	bl	8005b84 <HAL_I2C_Slave_Receive>
		if (i2cRXBuf[0]){
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <i2cController+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00e      	beq.n	800192a <i2cController+0x46>
			i2cProcessRequest();
 800190c:	f7ff ff6e 	bl	80017ec <i2cProcessRequest>
		break;
 8001910:	e00b      	b.n	800192a <i2cController+0x46>
		HAL_I2C_Slave_Receive(hi2c, i2cRXBuf, i2c_req_n, 1);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <i2cController+0x54>)
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <i2cController+0x5c>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b29a      	uxth	r2, r3
 800191c:	4907      	ldr	r1, [pc, #28]	; (800193c <i2cController+0x58>)
 800191e:	2301      	movs	r3, #1
 8001920:	f004 f930 	bl	8005b84 <HAL_I2C_Slave_Receive>
		i2cProcessRequest();
 8001924:	f7ff ff62 	bl	80017ec <i2cProcessRequest>
		break;
 8001928:	e000      	b.n	800192c <i2cController+0x48>
		break;
 800192a:	46c0      	nop			; (mov r8, r8)
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	200002d0 	.word	0x200002d0
 8001938:	20000a14 	.word	0x20000a14
 800193c:	20000a00 	.word	0x20000a00
 8001940:	200009fc 	.word	0x200009fc

08001944 <getCoils>:
#define MAX_INPUTS 2




uint8_t getCoils(uint16_t ind){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	0002      	movs	r2, r0
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	801a      	strh	r2, [r3, #0]
	switch (ind){
 8001950:	1dbb      	adds	r3, r7, #6
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d00e      	beq.n	8001976 <getCoils+0x32>
 8001958:	dc12      	bgt.n	8001980 <getCoils+0x3c>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <getCoils+0x20>
 800195e:	2b01      	cmp	r3, #1
 8001960:	d004      	beq.n	800196c <getCoils+0x28>
 8001962:	e00d      	b.n	8001980 <getCoils+0x3c>
	case 0:
		return getUserLedMode();
 8001964:	f7ff fe3e 	bl	80015e4 <getUserLedMode>
 8001968:	0003      	movs	r3, r0
 800196a:	e00a      	b.n	8001982 <getCoils+0x3e>
		break;
	case 1:
		return getUserOut(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff fecf 	bl	8001710 <getUserOut>
 8001972:	0003      	movs	r3, r0
 8001974:	e005      	b.n	8001982 <getCoils+0x3e>
		break;
	case 2:
		return getUserOut(2);
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff feca 	bl	8001710 <getUserOut>
 800197c:	0003      	movs	r3, r0
 800197e:	e000      	b.n	8001982 <getCoils+0x3e>
		break;
	}
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b002      	add	sp, #8
 8001988:	bd80      	pop	{r7, pc}

0800198a <getInputs>:

uint8_t getInputs(uint16_t ind){
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	0002      	movs	r2, r0
 8001992:	1dbb      	adds	r3, r7, #6
 8001994:	801a      	strh	r2, [r3, #0]
	switch (ind){
 8001996:	1dbb      	adds	r3, r7, #6
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d002      	beq.n	80019a4 <getInputs+0x1a>
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d005      	beq.n	80019ae <getInputs+0x24>
 80019a2:	e009      	b.n	80019b8 <getInputs+0x2e>
	case 1:
		return getUserIn(1);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7fe fee3 	bl	8000770 <getUserIn>
 80019aa:	0003      	movs	r3, r0
 80019ac:	e005      	b.n	80019ba <getInputs+0x30>
		break;
	case 2:
		return getUserIn(2);
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7fe fede 	bl	8000770 <getUserIn>
 80019b4:	0003      	movs	r3, r0
 80019b6:	e000      	b.n	80019ba <getInputs+0x30>
		break;
	}
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	0018      	movs	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <writeCoil>:

uint8_t writeCoil(uint16_t ind, uint8_t value){
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	0002      	movs	r2, r0
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	1d7b      	adds	r3, r7, #5
 80019d0:	1c0a      	adds	r2, r1, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	switch (ind){
 80019d4:	1dbb      	adds	r3, r7, #6
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d014      	beq.n	8001a06 <writeCoil+0x44>
 80019dc:	dc1b      	bgt.n	8001a16 <writeCoil+0x54>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <writeCoil+0x26>
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d007      	beq.n	80019f6 <writeCoil+0x34>
 80019e6:	e016      	b.n	8001a16 <writeCoil+0x54>
		case 0:
			userLedMode(value);
 80019e8:	1d7b      	adds	r3, r7, #5
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fdbf 	bl	8001570 <userLedMode>
			return 1;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e010      	b.n	8001a18 <writeCoil+0x56>
			break;
		case 1:
			setUserOut(1, value);
 80019f6:	1d7b      	adds	r3, r7, #5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	0019      	movs	r1, r3
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff fe4d 	bl	800169c <setUserOut>
			return 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e008      	b.n	8001a18 <writeCoil+0x56>
			break;
		case 2:
			setUserOut(1, value);
 8001a06:	1d7b      	adds	r3, r7, #5
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff fe45 	bl	800169c <setUserOut>
			return 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <writeCoil+0x56>
			break;

		}
		return 0;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <modbus_readCoilStatus>:

uint8_t modbus_readCoilStatus(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	0008      	movs	r0, r1
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	1cbb      	adds	r3, r7, #2
 8001a2e:	1c02      	adds	r2, r0, #0
 8001a30:	801a      	strh	r2, [r3, #0]
 8001a32:	003b      	movs	r3, r7
 8001a34:	1c0a      	adds	r2, r1, #0
 8001a36:	801a      	strh	r2, [r3, #0]
	if (data > MAX_COILS){
 8001a38:	003b      	movs	r3, r7
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d901      	bls.n	8001a44 <modbus_readCoilStatus+0x24>
		return MODBUS_ILLEGAL_DATA_VALUE;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e068      	b.n	8001b16 <modbus_readCoilStatus+0xf6>
	}
	if (data < 1 || starting_addr + data > MAX_COILS ){
 8001a44:	003b      	movs	r3, r7
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <modbus_readCoilStatus+0x3a>
 8001a4c:	1cbb      	adds	r3, r7, #2
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	003b      	movs	r3, r7
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	dd01      	ble.n	8001a5e <modbus_readCoilStatus+0x3e>
		return MODBUS_ILLEGAL_DATA_ADDRESS;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e05b      	b.n	8001b16 <modbus_readCoilStatus+0xf6>
	}
	*response = data/8 + (data%8 != 0);
 8001a5e:	003b      	movs	r3, r7
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	003a      	movs	r2, r7
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	2107      	movs	r1, #7
 8001a6e:	400a      	ands	r2, r1
 8001a70:	b292      	uxth	r2, r2
 8001a72:	1e51      	subs	r1, r2, #1
 8001a74:	418a      	sbcs	r2, r1
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	189b      	adds	r3, r3, r2
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	701a      	strb	r2, [r3, #0]
	response++;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	607b      	str	r3, [r7, #4]
	uint8_t res_byte = 0;
 8001a86:	230f      	movs	r3, #15
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<data; i++){
 8001a8e:	230e      	movs	r3, #14
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e035      	b.n	8001b04 <modbus_readCoilStatus+0xe4>
		if(getCoils(starting_addr + i)){
 8001a98:	240e      	movs	r4, #14
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	1cbb      	adds	r3, r7, #2
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	18d3      	adds	r3, r2, r3
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff ff4b 	bl	8001944 <getCoils>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d00f      	beq.n	8001ad2 <modbus_readCoilStatus+0xb2>
			res_byte &= 1<<(i%8);
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2201      	movs	r2, #1
 8001abc:	409a      	lsls	r2, r3
 8001abe:	0013      	movs	r3, r2
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	187a      	adds	r2, r7, r1
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	b252      	sxtb	r2, r2
 8001aca:	4013      	ands	r3, r2
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
		}
		if ((i%8) == 7){
 8001ad2:	230e      	movs	r3, #14
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2207      	movs	r2, #7
 8001ada:	4013      	ands	r3, r2
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b07      	cmp	r3, #7
 8001ae0:	d10a      	bne.n	8001af8 <modbus_readCoilStatus+0xd8>
			*response = res_byte;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	187a      	adds	r2, r7, r1
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	701a      	strb	r2, [r3, #0]
			response++;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3301      	adds	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
			res_byte = 0;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<data; i++){
 8001af8:	210e      	movs	r1, #14
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	3201      	adds	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	230e      	movs	r3, #14
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	003a      	movs	r2, r7
 8001b0e:	8812      	ldrh	r2, [r2, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8c1      	bhi.n	8001a98 <modbus_readCoilStatus+0x78>
		}
	}
	return MODBUS_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b005      	add	sp, #20
 8001b1c:	bd90      	pop	{r4, r7, pc}

08001b1e <modbus_readInputStatus>:
uint8_t modbus_readInputStatus(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001b1e:	b590      	push	{r4, r7, lr}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	0008      	movs	r0, r1
 8001b28:	0011      	movs	r1, r2
 8001b2a:	1cbb      	adds	r3, r7, #2
 8001b2c:	1c02      	adds	r2, r0, #0
 8001b2e:	801a      	strh	r2, [r3, #0]
 8001b30:	003b      	movs	r3, r7
 8001b32:	1c0a      	adds	r2, r1, #0
 8001b34:	801a      	strh	r2, [r3, #0]
	if (data > MAX_INPUTS){
 8001b36:	003b      	movs	r3, r7
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <modbus_readInputStatus+0x24>
			return MODBUS_ILLEGAL_DATA_VALUE;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e068      	b.n	8001c14 <modbus_readInputStatus+0xf6>
		}
	if (data < 1 || starting_addr + data > MAX_INPUTS ){
 8001b42:	003b      	movs	r3, r7
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <modbus_readInputStatus+0x3a>
 8001b4a:	1cbb      	adds	r3, r7, #2
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	003b      	movs	r3, r7
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	18d3      	adds	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	dd01      	ble.n	8001b5c <modbus_readInputStatus+0x3e>
		return MODBUS_ILLEGAL_DATA_ADDRESS;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e05b      	b.n	8001c14 <modbus_readInputStatus+0xf6>
	}
	*response = data/8 + (data%8 != 0);
 8001b5c:	003b      	movs	r3, r7
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	003a      	movs	r2, r7
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	2107      	movs	r1, #7
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	1e51      	subs	r1, r2, #1
 8001b72:	418a      	sbcs	r2, r1
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	189b      	adds	r3, r3, r2
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	701a      	strb	r2, [r3, #0]
	response++;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3301      	adds	r3, #1
 8001b82:	607b      	str	r3, [r7, #4]
	uint8_t res_byte = 0;
 8001b84:	230f      	movs	r3, #15
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<data; i++){
 8001b8c:	230e      	movs	r3, #14
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e035      	b.n	8001c02 <modbus_readInputStatus+0xe4>
		if(getInputs(starting_addr + i)){
 8001b96:	240e      	movs	r4, #14
 8001b98:	193b      	adds	r3, r7, r4
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	18d3      	adds	r3, r2, r3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff feef 	bl	800198a <getInputs>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d00f      	beq.n	8001bd0 <modbus_readInputStatus+0xb2>
			res_byte &= 1<<(i%8);
 8001bb0:	193b      	adds	r3, r7, r4
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2201      	movs	r2, #1
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	187a      	adds	r2, r7, r1
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	b252      	sxtb	r2, r2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	701a      	strb	r2, [r3, #0]
		}
		if ((i%8) == 7){
 8001bd0:	230e      	movs	r3, #14
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	4013      	ands	r3, r2
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b07      	cmp	r3, #7
 8001bde:	d10a      	bne.n	8001bf6 <modbus_readInputStatus+0xd8>
			*response = res_byte;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	210f      	movs	r1, #15
 8001be4:	187a      	adds	r2, r7, r1
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	701a      	strb	r2, [r3, #0]
			response++;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3301      	adds	r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
			res_byte = 0;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<data; i++){
 8001bf6:	210e      	movs	r1, #14
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	3201      	adds	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	230e      	movs	r3, #14
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	003a      	movs	r2, r7
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d8c1      	bhi.n	8001b96 <modbus_readInputStatus+0x78>
		}
	}
	return MODBUS_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b005      	add	sp, #20
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <modbus_readHoldingRegisters>:
uint8_t modbus_readHoldingRegisters(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	0008      	movs	r0, r1
 8001c26:	0011      	movs	r1, r2
 8001c28:	1cbb      	adds	r3, r7, #2
 8001c2a:	1c02      	adds	r2, r0, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	003b      	movs	r3, r7
 8001c30:	1c0a      	adds	r2, r1, #0
 8001c32:	801a      	strh	r2, [r3, #0]
	return MODBUS_SERVER_DEVICE_FAILURE;
 8001c34:	2304      	movs	r3, #4
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <modbus_readIputRegisters>:
uint8_t modbus_readIputRegisters(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	0008      	movs	r0, r1
 8001c48:	0011      	movs	r1, r2
 8001c4a:	1cbb      	adds	r3, r7, #2
 8001c4c:	1c02      	adds	r2, r0, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
 8001c50:	003b      	movs	r3, r7
 8001c52:	1c0a      	adds	r2, r1, #0
 8001c54:	801a      	strh	r2, [r3, #0]
	return MODBUS_SERVER_DEVICE_FAILURE;
 8001c56:	2304      	movs	r3, #4
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <modbus_writeSingleCoil>:
uint8_t modbus_writeSingleCoil(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	0008      	movs	r0, r1
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	1cbb      	adds	r3, r7, #2
 8001c6e:	1c02      	adds	r2, r0, #0
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	003b      	movs	r3, r7
 8001c74:	1c0a      	adds	r2, r1, #0
 8001c76:	801a      	strh	r2, [r3, #0]
	if (starting_addr > MAX_COILS){
 8001c78:	1cbb      	adds	r3, r7, #2
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d901      	bls.n	8001c84 <modbus_writeSingleCoil+0x24>
			return MODBUS_ILLEGAL_DATA_ADDRESS;
 8001c80:	2302      	movs	r3, #2
 8001c82:	e01c      	b.n	8001cbe <modbus_writeSingleCoil+0x5e>
		}
	if (data != 0xFF00 && data!=0x0000 ){
 8001c84:	003b      	movs	r3, r7
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	23ff      	movs	r3, #255	; 0xff
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d005      	beq.n	8001c9c <modbus_writeSingleCoil+0x3c>
 8001c90:	003b      	movs	r3, r7
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <modbus_writeSingleCoil+0x3c>
		return MODBUS_ILLEGAL_DATA_VALUE;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e010      	b.n	8001cbe <modbus_writeSingleCoil+0x5e>
	}
	if (writeCoil(starting_addr, (data != 0)) == 0){
 8001c9c:	003b      	movs	r3, r7
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	4193      	sbcs	r3, r2
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	1cbb      	adds	r3, r7, #2
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7ff fe87 	bl	80019c2 <writeCoil>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d101      	bne.n	8001cbc <modbus_writeSingleCoil+0x5c>
		return MODBUS_SERVER_DEVICE_FAILURE;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e000      	b.n	8001cbe <modbus_writeSingleCoil+0x5e>
	}
	return MODBUS_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <modbus_writeSingleRegister>:
uint8_t modbus_writeSingleRegister(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	0008      	movs	r0, r1
 8001cd0:	0011      	movs	r1, r2
 8001cd2:	1cbb      	adds	r3, r7, #2
 8001cd4:	1c02      	adds	r2, r0, #0
 8001cd6:	801a      	strh	r2, [r3, #0]
 8001cd8:	003b      	movs	r3, r7
 8001cda:	1c0a      	adds	r2, r1, #0
 8001cdc:	801a      	strh	r2, [r3, #0]
	return MODBUS_SERVER_DEVICE_FAILURE;
 8001cde:	2304      	movs	r3, #4
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b002      	add	sp, #8
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <serial_receiveEnable>:
uint8_t modbus_device_address = MODBUS_DEVICE_ADDRESS;

UART_HandleTypeDef * huart;


void serial_receiveEnable(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SERIAL_RSE_GPIO_Port, SERIAL_RSE_Pin, 0);
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <serial_receiveEnable+0x2c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f003 fd45 	bl	8005782 <HAL_GPIO_WritePin>
	SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <serial_receiveEnable+0x30>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <serial_receiveEnable+0x30>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2190      	movs	r1, #144	; 0x90
 8001d08:	0049      	lsls	r1, r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	48000400 	.word	0x48000400
 8001d18:	20000a18 	.word	0x20000a18

08001d1c <serial_transmit>:
void serial_transmit(uint8_t *buf, uint8_t len){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	000a      	movs	r2, r1
 8001d26:	1cfb      	adds	r3, r7, #3
 8001d28:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SERIAL_RSE_GPIO_Port, SERIAL_RSE_Pin, 1);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <serial_transmit+0x34>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2101      	movs	r1, #1
 8001d30:	0018      	movs	r0, r3
 8001d32:	f003 fd26 	bl	8005782 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(huart, buf, len, 10);
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <serial_transmit+0x38>)
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	1cfb      	adds	r3, r7, #3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	230a      	movs	r3, #10
 8001d44:	f008 fade 	bl	800a304 <HAL_UART_Transmit>

}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	48000400 	.word	0x48000400
 8001d54:	20000a18 	.word	0x20000a18

08001d58 <serial_ISR>:

void serial_ISR(UART_HandleTypeDef * huart){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	static uint8_t rxBuff[4];
	uint8_t data;
	uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
	//uint32_t errorcode;

	/* If no error occurs */
	//errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
	if (1){
		if (((isrflags & USART_ISR_RXNE) != 0U)&& ((cr1its & USART_CR1_RXNEIE) != 0U)){
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2220      	movs	r2, #32
 8001d74:	4013      	ands	r3, r2
 8001d76:	d015      	beq.n	8001da4 <serial_ISR+0x4c>
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d011      	beq.n	8001da4 <serial_ISR+0x4c>
			data = huart->Instance->RDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	210f      	movs	r1, #15
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
			rxBuff[0] = data;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <serial_ISR+0x54>)
 8001d90:	187a      	adds	r2, r7, r1
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	701a      	strb	r2, [r3, #0]
			serial_addToQueue(&serial_Q, rxBuff, 1);
 8001d96:	4905      	ldr	r1, [pc, #20]	; (8001dac <serial_ISR+0x54>)
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <serial_ISR+0x58>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 f843 	bl	8001e28 <serial_addToQueue>
			return;
 8001da2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b006      	add	sp, #24
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	200002d4 	.word	0x200002d4
 8001db0:	20000814 	.word	0x20000814

08001db4 <serial_queueInit>:

void serial_queueInit(serialQueue *q){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < SERIAL_QUEUE_SIZE+1; i++){
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e00a      	b.n	8001ddc <serial_queueInit+0x28>
		q->queue[i] = 0;
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	183b      	adds	r3, r7, r0
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	2100      	movs	r1, #0
 8001dd0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < SERIAL_QUEUE_SIZE+1; i++){
 8001dd2:	183b      	adds	r3, r7, r0
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	183b      	adds	r3, r7, r0
 8001dd8:	3201      	adds	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	230f      	movs	r3, #15
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b40      	cmp	r3, #64	; 0x40
 8001de4:	d9ef      	bls.n	8001dc6 <serial_queueInit+0x12>
	}
	q->w_index = 0;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2241      	movs	r2, #65	; 0x41
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]
	q->last_add_tick = 0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b004      	add	sp, #16
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <serial_init>:

void serial_init(UART_HandleTypeDef * huartx){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	huart = huartx;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <serial_init+0x24>)
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	601a      	str	r2, [r3, #0]
	serial_queueInit(&serial_Q);
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <serial_init+0x28>)
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff ffd1 	bl	8001db4 <serial_queueInit>
	serial_receiveEnable();
 8001e12:	f7ff ff69 	bl	8001ce8 <serial_receiveEnable>
}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	20000a18 	.word	0x20000a18
 8001e24:	20000814 	.word	0x20000814

08001e28 <serial_addToQueue>:
/*
 * serial_addToQueue(pointer to queue, pointer to message, length of message)
 * if there is room in the queue, adds  the message to it
 * else, discards message
 */
void serial_addToQueue(serialQueue *q, uint8_t *msg, uint8_t len){
 8001e28:	b5b0      	push	{r4, r5, r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	701a      	strb	r2, [r3, #0]
	//checks if there is room for len number in the queue
		if (q->w_index == SERIAL_QUEUE_SIZE+1){
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2241      	movs	r2, #65	; 0x41
 8001e3a:	5c9b      	ldrb	r3, [r3, r2]
 8001e3c:	2b41      	cmp	r3, #65	; 0x41
 8001e3e:	d027      	beq.n	8001e90 <serial_addToQueue+0x68>
			return;
		}
		for(uint8_t i = 0; i< len; i++){
 8001e40:	2317      	movs	r3, #23
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e015      	b.n	8001e76 <serial_addToQueue+0x4e>
			q->queue[q->w_index++] = msg[i];
 8001e4a:	2517      	movs	r5, #23
 8001e4c:	197b      	adds	r3, r7, r5
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	18d2      	adds	r2, r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2141      	movs	r1, #65	; 0x41
 8001e58:	5c5b      	ldrb	r3, [r3, r1]
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	b2cc      	uxtb	r4, r1
 8001e5e:	68f9      	ldr	r1, [r7, #12]
 8001e60:	2041      	movs	r0, #65	; 0x41
 8001e62:	540c      	strb	r4, [r1, r0]
 8001e64:	0019      	movs	r1, r3
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	545a      	strb	r2, [r3, r1]
		for(uint8_t i = 0; i< len; i++){
 8001e6c:	197b      	adds	r3, r7, r5
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	197b      	adds	r3, r7, r5
 8001e72:	3201      	adds	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	2317      	movs	r3, #23
 8001e78:	18fa      	adds	r2, r7, r3
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3e2      	bcc.n	8001e4a <serial_addToQueue+0x22>
		}
		q->last_add_tick = HAL_GetTick();
 8001e84:	f001 fb8e 	bl	80035a4 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
 8001e8e:	e000      	b.n	8001e92 <serial_addToQueue+0x6a>
			return;
 8001e90:	46c0      	nop			; (mov r8, r8)
	}
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b006      	add	sp, #24
 8001e96:	bdb0      	pop	{r4, r5, r7, pc}

08001e98 <serial_queuedData>:

/*
 * serial_queuedData(pointer to queue)
 * returns True if there is data  to be read in the queue
 */
uint8_t serial_queuedData(serialQueue *q){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	return (q->w_index);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2241      	movs	r2, #65	; 0x41
 8001ea4:	5c9b      	ldrb	r3, [r3, r2]
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <serial_processFrame>:


/*
 * Decodes a valid serial frame into device functions
 */
uint8_t serial_processFrame(uint8_t * frame, uint8_t len){
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	000a      	movs	r2, r1
 8001eba:	1cfb      	adds	r3, r7, #3
 8001ebc:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_status = MODBUS_OK;
 8001ebe:	2317      	movs	r3, #23
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
	static uint8_t response[SERIAL_FRAME_SIZE];
	uint8_t func = frame[1];
 8001ec6:	2115      	movs	r1, #21
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	7852      	ldrb	r2, [r2, #1]
 8001ece:	701a      	strb	r2, [r3, #0]
	uint8_t res_n = 0;
 8001ed0:	2316      	movs	r3, #22
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
	uint16_t starting_addr;
	uint16_t data;
	response[0] = modbus_device_address;
 8001ed8:	4bb6      	ldr	r3, [pc, #728]	; (80021b4 <serial_processFrame+0x304>)
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	4bb6      	ldr	r3, [pc, #728]	; (80021b8 <serial_processFrame+0x308>)
 8001ede:	701a      	strb	r2, [r3, #0]
	response[1] = func;
 8001ee0:	4bb5      	ldr	r3, [pc, #724]	; (80021b8 <serial_processFrame+0x308>)
 8001ee2:	187a      	adds	r2, r7, r1
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	705a      	strb	r2, [r3, #1]
	switch (func){
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d900      	bls.n	8001ef2 <serial_processFrame+0x42>
 8001ef0:	e168      	b.n	80021c4 <serial_processFrame+0x314>
 8001ef2:	009a      	lsls	r2, r3, #2
 8001ef4:	4bb1      	ldr	r3, [pc, #708]	; (80021bc <serial_processFrame+0x30c>)
 8001ef6:	18d3      	adds	r3, r2, r3
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	469f      	mov	pc, r3
		case MODBUS_READ_COIL_STATUS:
			if (len != MODBUS_READ_COIL_STATUS_LEN){
 8001efc:	1cfb      	adds	r3, r7, #3
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d001      	beq.n	8001f08 <serial_processFrame+0x58>
				return 0;//framing error
 8001f04:	2300      	movs	r3, #0
 8001f06:	e1a4      	b.n	8002252 <serial_processFrame+0x3a2>
			}
			starting_addr = 256 * frame[2] + frame[3];
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b299      	uxth	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3303      	adds	r3, #3
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	2512      	movs	r5, #18
 8001f1e:	197b      	adds	r3, r7, r5
 8001f20:	188a      	adds	r2, r1, r2
 8001f22:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3304      	adds	r3, #4
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	b299      	uxth	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3305      	adds	r3, #5
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2010      	movs	r0, #16
 8001f3a:	183b      	adds	r3, r7, r0
 8001f3c:	188a      	adds	r2, r1, r2
 8001f3e:	801a      	strh	r2, [r3, #0]
			res_n = 1 + data/8 + (data%8 != 0);
 8001f40:	183b      	adds	r3, r7, r0
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	183a      	adds	r2, r7, r0
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	2107      	movs	r1, #7
 8001f50:	400a      	ands	r2, r1
 8001f52:	b292      	uxth	r2, r2
 8001f54:	1e51      	subs	r1, r2, #1
 8001f56:	418a      	sbcs	r2, r1
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	189b      	adds	r3, r3, r2
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	2316      	movs	r3, #22
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	3201      	adds	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_readCoilStatus(&response[3], starting_addr, data);
 8001f66:	2317      	movs	r3, #23
 8001f68:	18fc      	adds	r4, r7, r3
 8001f6a:	183b      	adds	r3, r7, r0
 8001f6c:	881a      	ldrh	r2, [r3, #0]
 8001f6e:	197b      	adds	r3, r7, r5
 8001f70:	8819      	ldrh	r1, [r3, #0]
 8001f72:	4b93      	ldr	r3, [pc, #588]	; (80021c0 <serial_processFrame+0x310>)
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff fd53 	bl	8001a20 <modbus_readCoilStatus>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	7023      	strb	r3, [r4, #0]
			break;
 8001f7e:	e125      	b.n	80021cc <serial_processFrame+0x31c>
		case MODBUS_READ_INPUT_STATUS:
			if (len != MODBUS_READ_INPUT_STATUS_LEN){
 8001f80:	1cfb      	adds	r3, r7, #3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d001      	beq.n	8001f8c <serial_processFrame+0xdc>
				return 0;//framing error
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e162      	b.n	8002252 <serial_processFrame+0x3a2>
			}
			starting_addr = 256 * frame[2] + frame[3];
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3302      	adds	r3, #2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b299      	uxth	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	2512      	movs	r5, #18
 8001fa2:	197b      	adds	r3, r7, r5
 8001fa4:	188a      	adds	r2, r1, r2
 8001fa6:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3305      	adds	r3, #5
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	2010      	movs	r0, #16
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	188a      	adds	r2, r1, r2
 8001fc2:	801a      	strh	r2, [r3, #0]
			res_n = 1 + data/8 + (data%8 != 0);
 8001fc4:	183b      	adds	r3, r7, r0
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	08db      	lsrs	r3, r3, #3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	183a      	adds	r2, r7, r0
 8001fd0:	8812      	ldrh	r2, [r2, #0]
 8001fd2:	2107      	movs	r1, #7
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	b292      	uxth	r2, r2
 8001fd8:	1e51      	subs	r1, r2, #1
 8001fda:	418a      	sbcs	r2, r1
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	189b      	adds	r3, r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	2316      	movs	r3, #22
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	3201      	adds	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_readInputStatus(&response[3], starting_addr, data);
 8001fea:	2317      	movs	r3, #23
 8001fec:	18fc      	adds	r4, r7, r3
 8001fee:	183b      	adds	r3, r7, r0
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	197b      	adds	r3, r7, r5
 8001ff4:	8819      	ldrh	r1, [r3, #0]
 8001ff6:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <serial_processFrame+0x310>)
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7ff fd90 	bl	8001b1e <modbus_readInputStatus>
 8001ffe:	0003      	movs	r3, r0
 8002000:	7023      	strb	r3, [r4, #0]
			break;
 8002002:	e0e3      	b.n	80021cc <serial_processFrame+0x31c>
		case MODBUS_READ_HOLDING_REGISTERS:
			if (len != MODBUS_READ_HOLDING_REGISTERS_LEN){
 8002004:	1cfb      	adds	r3, r7, #3
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d001      	beq.n	8002010 <serial_processFrame+0x160>
				return 0;//framing error
 800200c:	2300      	movs	r3, #0
 800200e:	e120      	b.n	8002252 <serial_processFrame+0x3a2>
			}
			starting_addr = 256 * frame[2] + frame[3];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3302      	adds	r3, #2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	b299      	uxth	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3303      	adds	r3, #3
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b29a      	uxth	r2, r3
 8002024:	2512      	movs	r5, #18
 8002026:	197b      	adds	r3, r7, r5
 8002028:	188a      	adds	r2, r1, r2
 800202a:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3304      	adds	r3, #4
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	b299      	uxth	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3305      	adds	r3, #5
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b29a      	uxth	r2, r3
 8002040:	2010      	movs	r0, #16
 8002042:	183b      	adds	r3, r7, r0
 8002044:	188a      	adds	r2, r1, r2
 8002046:	801a      	strh	r2, [r3, #0]
			res_n = 2 * data + 1;
 8002048:	0001      	movs	r1, r0
 800204a:	187b      	adds	r3, r7, r1
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	18db      	adds	r3, r3, r3
 8002052:	b2da      	uxtb	r2, r3
 8002054:	2316      	movs	r3, #22
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	3201      	adds	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_readHoldingRegisters(&response[3], starting_addr, data);
 800205c:	2317      	movs	r3, #23
 800205e:	18fc      	adds	r4, r7, r3
 8002060:	187b      	adds	r3, r7, r1
 8002062:	881a      	ldrh	r2, [r3, #0]
 8002064:	197b      	adds	r3, r7, r5
 8002066:	8819      	ldrh	r1, [r3, #0]
 8002068:	4b55      	ldr	r3, [pc, #340]	; (80021c0 <serial_processFrame+0x310>)
 800206a:	0018      	movs	r0, r3
 800206c:	f7ff fdd6 	bl	8001c1c <modbus_readHoldingRegisters>
 8002070:	0003      	movs	r3, r0
 8002072:	7023      	strb	r3, [r4, #0]
			break;
 8002074:	e0aa      	b.n	80021cc <serial_processFrame+0x31c>
		case MODBUS_READ_INPUT_REGISTERS:
			if (len != MODBUS_READ_INPUT_REGISTERS_LEN){
 8002076:	1cfb      	adds	r3, r7, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b08      	cmp	r3, #8
 800207c:	d001      	beq.n	8002082 <serial_processFrame+0x1d2>
				return 0;//framing error
 800207e:	2300      	movs	r3, #0
 8002080:	e0e7      	b.n	8002252 <serial_processFrame+0x3a2>
			}
			starting_addr = 256 * frame[2] + frame[3];
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3302      	adds	r3, #2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	b299      	uxth	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3303      	adds	r3, #3
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b29a      	uxth	r2, r3
 8002096:	2512      	movs	r5, #18
 8002098:	197b      	adds	r3, r7, r5
 800209a:	188a      	adds	r2, r1, r2
 800209c:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b299      	uxth	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3305      	adds	r3, #5
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	2010      	movs	r0, #16
 80020b4:	183b      	adds	r3, r7, r0
 80020b6:	188a      	adds	r2, r1, r2
 80020b8:	801a      	strh	r2, [r3, #0]
			res_n = 2 * data + 1;
 80020ba:	0001      	movs	r1, r0
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	18db      	adds	r3, r3, r3
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	2316      	movs	r3, #22
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	3201      	adds	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_readIputRegisters(&response[3], starting_addr, data);
 80020ce:	2317      	movs	r3, #23
 80020d0:	18fc      	adds	r4, r7, r3
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	881a      	ldrh	r2, [r3, #0]
 80020d6:	197b      	adds	r3, r7, r5
 80020d8:	8819      	ldrh	r1, [r3, #0]
 80020da:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <serial_processFrame+0x310>)
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fdae 	bl	8001c3e <modbus_readIputRegisters>
 80020e2:	0003      	movs	r3, r0
 80020e4:	7023      	strb	r3, [r4, #0]
			break;
 80020e6:	e071      	b.n	80021cc <serial_processFrame+0x31c>
		case MODBUS_WRITE_SINGLE_COIL:
			if (len != MODBUS_WRITE_SINGLE_COIL_LEN){
 80020e8:	1cfb      	adds	r3, r7, #3
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d001      	beq.n	80020f4 <serial_processFrame+0x244>
				return 0;//framing error
 80020f0:	2300      	movs	r3, #0
 80020f2:	e0ae      	b.n	8002252 <serial_processFrame+0x3a2>
			}
			starting_addr = 256 * frame[2] + frame[3];
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3302      	adds	r3, #2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	b299      	uxth	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3303      	adds	r3, #3
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b29a      	uxth	r2, r3
 8002108:	2012      	movs	r0, #18
 800210a:	183b      	adds	r3, r7, r0
 800210c:	188a      	adds	r2, r1, r2
 800210e:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3304      	adds	r3, #4
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b299      	uxth	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3305      	adds	r3, #5
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b29a      	uxth	r2, r3
 8002124:	2510      	movs	r5, #16
 8002126:	197b      	adds	r3, r7, r5
 8002128:	188a      	adds	r2, r1, r2
 800212a:	801a      	strh	r2, [r3, #0]
			res_n = 4;
 800212c:	2316      	movs	r3, #22
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2204      	movs	r2, #4
 8002132:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_writeSingleCoil(&response[3], starting_addr, data);
 8002134:	2317      	movs	r3, #23
 8002136:	18fc      	adds	r4, r7, r3
 8002138:	197b      	adds	r3, r7, r5
 800213a:	881a      	ldrh	r2, [r3, #0]
 800213c:	183b      	adds	r3, r7, r0
 800213e:	8819      	ldrh	r1, [r3, #0]
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <serial_processFrame+0x310>)
 8002142:	0018      	movs	r0, r3
 8002144:	f7ff fd8c 	bl	8001c60 <modbus_writeSingleCoil>
 8002148:	0003      	movs	r3, r0
 800214a:	7023      	strb	r3, [r4, #0]
			break;
 800214c:	e03e      	b.n	80021cc <serial_processFrame+0x31c>
		case MODBUS_WRITE_SINGLE_REGISTER:
			if (len != MODBUS_WRITE_SINGLE_REGISTER_LEN){
 800214e:	1cfb      	adds	r3, r7, #3
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b08      	cmp	r3, #8
 8002154:	d001      	beq.n	800215a <serial_processFrame+0x2aa>
				return 0;//framing error
 8002156:	2300      	movs	r3, #0
 8002158:	e07b      	b.n	8002252 <serial_processFrame+0x3a2>
			}
			starting_addr = 256 * frame[2] + frame[3];
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3302      	adds	r3, #2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	b299      	uxth	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3303      	adds	r3, #3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b29a      	uxth	r2, r3
 800216e:	2012      	movs	r0, #18
 8002170:	183b      	adds	r3, r7, r0
 8002172:	188a      	adds	r2, r1, r2
 8002174:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b299      	uxth	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3305      	adds	r3, #5
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b29a      	uxth	r2, r3
 800218a:	2510      	movs	r5, #16
 800218c:	197b      	adds	r3, r7, r5
 800218e:	188a      	adds	r2, r1, r2
 8002190:	801a      	strh	r2, [r3, #0]
			res_n = 4;
 8002192:	2316      	movs	r3, #22
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2204      	movs	r2, #4
 8002198:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_writeSingleRegister(&response[3], starting_addr, data);
 800219a:	2317      	movs	r3, #23
 800219c:	18fc      	adds	r4, r7, r3
 800219e:	197b      	adds	r3, r7, r5
 80021a0:	881a      	ldrh	r2, [r3, #0]
 80021a2:	183b      	adds	r3, r7, r0
 80021a4:	8819      	ldrh	r1, [r3, #0]
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <serial_processFrame+0x310>)
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff fd8c 	bl	8001cc6 <modbus_writeSingleRegister>
 80021ae:	0003      	movs	r3, r0
 80021b0:	7023      	strb	r3, [r4, #0]
			break;
 80021b2:	e00b      	b.n	80021cc <serial_processFrame+0x31c>
 80021b4:	20000105 	.word	0x20000105
 80021b8:	200002d8 	.word	0x200002d8
 80021bc:	0800f638 	.word	0x0800f638
 80021c0:	200002db 	.word	0x200002db

		default:
			modbus_status = MODBUS_ILLEGAL_FUNCTION;
 80021c4:	2317      	movs	r3, #23
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
	}
	if (modbus_status!= MODBUS_OK){
 80021cc:	2117      	movs	r1, #23
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00d      	beq.n	80021f2 <serial_processFrame+0x342>
		response[1]+=80;
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <serial_processFrame+0x3ac>)
 80021d8:	785b      	ldrb	r3, [r3, #1]
 80021da:	3350      	adds	r3, #80	; 0x50
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <serial_processFrame+0x3ac>)
 80021e0:	705a      	strb	r2, [r3, #1]
		response[2] = modbus_status;
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <serial_processFrame+0x3ac>)
 80021e4:	187a      	adds	r2, r7, r1
 80021e6:	7812      	ldrb	r2, [r2, #0]
 80021e8:	709a      	strb	r2, [r3, #2]
		res_n = 1;
 80021ea:	2316      	movs	r3, #22
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
	}
	uint16_t crc16 = calcCRC(response, 2 + res_n);
 80021f2:	2516      	movs	r5, #22
 80021f4:	197b      	adds	r3, r7, r5
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	3302      	adds	r3, #2
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	260e      	movs	r6, #14
 80021fe:	19bc      	adds	r4, r7, r6
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <serial_processFrame+0x3ac>)
 8002202:	0011      	movs	r1, r2
 8002204:	0018      	movs	r0, r3
 8002206:	f7ff f8eb 	bl	80013e0 <calcCRC>
 800220a:	0003      	movs	r3, r0
 800220c:	8023      	strh	r3, [r4, #0]
	response[2 + res_n] = get8LSB(crc16);
 800220e:	197b      	adds	r3, r7, r5
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	1c9c      	adds	r4, r3, #2
 8002214:	19bb      	adds	r3, r7, r6
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fd84 	bl	8002d26 <get8LSB>
 800221e:	0003      	movs	r3, r0
 8002220:	001a      	movs	r2, r3
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <serial_processFrame+0x3ac>)
 8002224:	551a      	strb	r2, [r3, r4]
	response[2 + res_n + 1] = get8MSB(crc16);
 8002226:	197b      	adds	r3, r7, r5
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	1cdc      	adds	r4, r3, #3
 800222c:	19bb      	adds	r3, r7, r6
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fd69 	bl	8002d08 <get8MSB>
 8002236:	0003      	movs	r3, r0
 8002238:	001a      	movs	r2, r3
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <serial_processFrame+0x3ac>)
 800223c:	551a      	strb	r2, [r3, r4]
	serial_transmit(response, 4 + res_n);
 800223e:	197b      	adds	r3, r7, r5
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	3304      	adds	r3, #4
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <serial_processFrame+0x3ac>)
 8002248:	0011      	movs	r1, r2
 800224a:	0018      	movs	r0, r3
 800224c:	f7ff fd66 	bl	8001d1c <serial_transmit>
	return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b007      	add	sp, #28
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	200002d8 	.word	0x200002d8

08002260 <serial_getQueuedCommand>:
 * serial_getQueuedCommand(pointer to queue)
 * Get a entire frame from the queue and verify its format,
 * If valid, it gets processed and returns 1. otherwise, returns 0 *
 */

uint8_t serial_getQueuedCommand(serialQueue *q){
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

	static uint8_t rx_frame[SERIAL_FRAME_SIZE];
	for (uint8_t i = 0; i< q->w_index; i++){
 8002268:	230f      	movs	r3, #15
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e00d      	b.n	800228e <serial_getQueuedCommand+0x2e>
		rx_frame[i] = q->queue[i];
 8002272:	200f      	movs	r0, #15
 8002274:	183b      	adds	r3, r7, r0
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	183b      	adds	r3, r7, r0
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	5c89      	ldrb	r1, [r1, r2]
 8002280:	4a2a      	ldr	r2, [pc, #168]	; (800232c <serial_getQueuedCommand+0xcc>)
 8002282:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i< q->w_index; i++){
 8002284:	183b      	adds	r3, r7, r0
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	183b      	adds	r3, r7, r0
 800228a:	3201      	adds	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2241      	movs	r2, #65	; 0x41
 8002292:	5c9b      	ldrb	r3, [r3, r2]
 8002294:	220f      	movs	r2, #15
 8002296:	18ba      	adds	r2, r7, r2
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d3e9      	bcc.n	8002272 <serial_getQueuedCommand+0x12>
	}
	uint8_t rx_addr = rx_frame[0];
 800229e:	210e      	movs	r1, #14
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	4a22      	ldr	r2, [pc, #136]	; (800232c <serial_getQueuedCommand+0xcc>)
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
	if ((q->w_index) > 3 && (rx_addr == modbus_device_address)){
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2241      	movs	r2, #65	; 0x41
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d937      	bls.n	8002322 <serial_getQueuedCommand+0xc2>
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <serial_getQueuedCommand+0xd0>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	187a      	adds	r2, r7, r1
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d131      	bne.n	8002322 <serial_getQueuedCommand+0xc2>
		uint16_t rx_crc = 256 * rx_frame[q->w_index-1] + rx_frame[q->w_index-2];
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2241      	movs	r2, #65	; 0x41
 80022c2:	5c9b      	ldrb	r3, [r3, r2]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <serial_getQueuedCommand+0xcc>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	b299      	uxth	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2241      	movs	r2, #65	; 0x41
 80022d4:	5c9b      	ldrb	r3, [r3, r2]
 80022d6:	3b02      	subs	r3, #2
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <serial_getQueuedCommand+0xcc>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	250c      	movs	r5, #12
 80022e0:	197b      	adds	r3, r7, r5
 80022e2:	188a      	adds	r2, r1, r2
 80022e4:	801a      	strh	r2, [r3, #0]
		uint16_t calc_crc = calcCRC(rx_frame, q->w_index-2);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2241      	movs	r2, #65	; 0x41
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
 80022ec:	3b02      	subs	r3, #2
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	260a      	movs	r6, #10
 80022f2:	19bc      	adds	r4, r7, r6
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <serial_getQueuedCommand+0xcc>)
 80022f6:	0011      	movs	r1, r2
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff f871 	bl	80013e0 <calcCRC>
 80022fe:	0003      	movs	r3, r0
 8002300:	8023      	strh	r3, [r4, #0]
		if (rx_crc == calc_crc){
 8002302:	197a      	adds	r2, r7, r5
 8002304:	19bb      	adds	r3, r7, r6
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d109      	bne.n	8002322 <serial_getQueuedCommand+0xc2>
			serial_processFrame(rx_frame, q->w_index);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2241      	movs	r2, #65	; 0x41
 8002312:	5c9a      	ldrb	r2, [r3, r2]
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <serial_getQueuedCommand+0xcc>)
 8002316:	0011      	movs	r1, r2
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff fdc9 	bl	8001eb0 <serial_processFrame>
			return 1;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <serial_getQueuedCommand+0xc4>
		}

	}
	return 0;
 8002322:	2300      	movs	r3, #0
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b005      	add	sp, #20
 800232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232c:	200002e8 	.word	0x200002e8
 8002330:	20000105 	.word	0x20000105

08002334 <serial_frameReceived>:
uint8_t serial_frameReceived(serialQueue *q){
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick() > q->last_add_tick + frame_silence_time && serial_queuedData(q));
 800233c:	f001 f932 	bl	80035a4 <HAL_GetTick>
 8002340:	0001      	movs	r1, r0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <serial_frameReceived+0x38>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	18d3      	adds	r3, r2, r3
 800234c:	4299      	cmp	r1, r3
 800234e:	d907      	bls.n	8002360 <serial_frameReceived+0x2c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0018      	movs	r0, r3
 8002354:	f7ff fda0 	bl	8001e98 <serial_queuedData>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d001      	beq.n	8002360 <serial_frameReceived+0x2c>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <serial_frameReceived+0x2e>
 8002360:	2300      	movs	r3, #0
 8002362:	b2db      	uxtb	r3, r3
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b002      	add	sp, #8
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000108 	.word	0x20000108

08002370 <serialController>:

void serialController(){
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	if (serial_frameReceived(&serial_Q)){
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <serialController+0x2c>)
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff ffdc 	bl	8002334 <serial_frameReceived>
 800237c:	1e03      	subs	r3, r0, #0
 800237e:	d009      	beq.n	8002394 <serialController+0x24>
		serial_getQueuedCommand(&serial_Q);
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <serialController+0x2c>)
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff ff6c 	bl	8002260 <serial_getQueuedCommand>
		serial_queueInit(&serial_Q);
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <serialController+0x2c>)
 800238a:	0018      	movs	r0, r3
 800238c:	f7ff fd12 	bl	8001db4 <serial_queueInit>
		serial_receiveEnable();
 8002390:	f7ff fcaa 	bl	8001ce8 <serial_receiveEnable>
	}
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	20000814 	.word	0x20000814

080023a0 <getVBus>:
#include "usbd_cdc_if.h"
#include "acquisition.h"
#include "spi_devices.h"

uint8_t usb_active = 0;
uint8_t getVBus(){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(USB_BUS_SENS_GPIO_Port, USB_BUS_SENS_Pin));
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	005a      	lsls	r2, r3, #1
 80023a8:	2390      	movs	r3, #144	; 0x90
 80023aa:	05db      	lsls	r3, r3, #23
 80023ac:	0011      	movs	r1, r2
 80023ae:	0018      	movs	r0, r3
 80023b0:	f003 f9ca 	bl	8005748 <HAL_GPIO_ReadPin>
 80023b4:	0003      	movs	r3, r0
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <setUsbActive>:

void setUsbActive(uint8_t value){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	0002      	movs	r2, r0
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	701a      	strb	r2, [r3, #0]
	usb_active = value;
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <setUsbActive+0x3c>)
 80023ca:	1dfa      	adds	r2, r7, #7
 80023cc:	7812      	ldrb	r2, [r2, #0]
 80023ce:	701a      	strb	r2, [r3, #0]
	if (usb_active == 1){
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <setUsbActive+0x3c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <setUsbActive+0x22>
		statusLedOn();
 80023d8:	f7ff f8b2 	bl	8001540 <statusLedOn>
	}else if (getVBus()){
		statusLedBlink();
	}else{
		statusLedOff();
	}
}
 80023dc:	e008      	b.n	80023f0 <setUsbActive+0x34>
	}else if (getVBus()){
 80023de:	f7ff ffdf 	bl	80023a0 <getVBus>
 80023e2:	1e03      	subs	r3, r0, #0
 80023e4:	d002      	beq.n	80023ec <setUsbActive+0x30>
		statusLedBlink();
 80023e6:	f7ff f8bb 	bl	8001560 <statusLedBlink>
}
 80023ea:	e001      	b.n	80023f0 <setUsbActive+0x34>
		statusLedOff();
 80023ec:	f7ff f8b0 	bl	8001550 <statusLedOff>
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200002f8 	.word	0x200002f8

080023fc <getUsbActive>:
uint8_t getUsbActive(){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
	return usb_active;
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <getUsbActive+0x10>)
 8002402:	781b      	ldrb	r3, [r3, #0]
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	200002f8 	.word	0x200002f8

08002410 <usb_queueInit>:
void usb_queueInit(usbQueue *q){
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < USB_QUEUE_SIZE+1; i++){
 8002418:	230f      	movs	r3, #15
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e00a      	b.n	8002438 <usb_queueInit+0x28>
		q->queue[i] = 0;
 8002422:	200f      	movs	r0, #15
 8002424:	183b      	adds	r3, r7, r0
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	2100      	movs	r1, #0
 800242c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < USB_QUEUE_SIZE+1; i++){
 800242e:	183b      	adds	r3, r7, r0
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	183b      	adds	r3, r7, r0
 8002434:	3201      	adds	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	230f      	movs	r3, #15
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d9ef      	bls.n	8002422 <usb_queueInit+0x12>
	}
	q->r_index = 0;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	; 0x41
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]
	q->w_index = 0;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2242      	movs	r2, #66	; 0x42
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]
}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <usb_init>:

void usb_init(){
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	usb_queueInit(&usb_Q);
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <usb_init+0x1c>)
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff ffd4 	bl	8002410 <usb_queueInit>
	statusLedBlink();
 8002468:	f7ff f87a 	bl	8001560 <statusLedBlink>
	setUsbActive(0);
 800246c:	2000      	movs	r0, #0
 800246e:	f7ff ffa5 	bl	80023bc <setUsbActive>
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000738 	.word	0x20000738

0800247c <usb_addToQueue>:
/*
 * usb_addToQueue(pointer to queue, pointer to message, length of message)
 * if there is room in the queue, adds  the message to it
 * else, discards message
 */
void usb_addToQueue(usbQueue *q, uint8_t *msg, uint8_t len){
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	701a      	strb	r2, [r3, #0]
	//checks if there is room for len number in the queue
	uint8_t available_size = q->r_index + USB_QUEUE_SIZE - q->w_index;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2241      	movs	r2, #65	; 0x41
 800248e:	5c9a      	ldrb	r2, [r3, r2]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2142      	movs	r1, #66	; 0x42
 8002494:	5c5b      	ldrb	r3, [r3, r1]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	b2da      	uxtb	r2, r3
 800249a:	2117      	movs	r1, #23
 800249c:	187b      	adds	r3, r7, r1
 800249e:	3240      	adds	r2, #64	; 0x40
 80024a0:	701a      	strb	r2, [r3, #0]
	if(available_size > USB_QUEUE_SIZE){
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d904      	bls.n	80024b4 <usb_addToQueue+0x38>
		available_size = available_size - (USB_QUEUE_SIZE+1); //happens when read is "ahead" of Write
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	187a      	adds	r2, r7, r1
 80024ae:	7812      	ldrb	r2, [r2, #0]
 80024b0:	3a41      	subs	r2, #65	; 0x41
 80024b2:	701a      	strb	r2, [r3, #0]
	}
	if (len <= available_size){                            //There is space
 80024b4:	1dfa      	adds	r2, r7, #7
 80024b6:	2317      	movs	r3, #23
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d82b      	bhi.n	800251a <usb_addToQueue+0x9e>
		for(uint8_t i = 0; i< len; i++){
 80024c2:	2316      	movs	r3, #22
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	e01f      	b.n	800250c <usb_addToQueue+0x90>
			q->queue[q->w_index++] = msg[i];
 80024cc:	2316      	movs	r3, #22
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	18d2      	adds	r2, r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2142      	movs	r1, #66	; 0x42
 80024da:	5c5b      	ldrb	r3, [r3, r1]
 80024dc:	1c59      	adds	r1, r3, #1
 80024de:	b2cc      	uxtb	r4, r1
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	2042      	movs	r0, #66	; 0x42
 80024e4:	540c      	strb	r4, [r1, r0]
 80024e6:	0019      	movs	r1, r3
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	545a      	strb	r2, [r3, r1]
			if (q->w_index == USB_QUEUE_SIZE+1){
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2242      	movs	r2, #66	; 0x42
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	2b41      	cmp	r3, #65	; 0x41
 80024f6:	d103      	bne.n	8002500 <usb_addToQueue+0x84>
				q->w_index = 0;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2242      	movs	r2, #66	; 0x42
 80024fc:	2100      	movs	r1, #0
 80024fe:	5499      	strb	r1, [r3, r2]
		for(uint8_t i = 0; i< len; i++){
 8002500:	2116      	movs	r1, #22
 8002502:	187b      	adds	r3, r7, r1
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	187b      	adds	r3, r7, r1
 8002508:	3201      	adds	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	2316      	movs	r3, #22
 800250e:	18fa      	adds	r2, r7, r3
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d3d8      	bcc.n	80024cc <usb_addToQueue+0x50>
			}
		}
	}
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b007      	add	sp, #28
 8002520:	bd90      	pop	{r4, r7, pc}

08002522 <usb_queuedData>:

/*
 * usb_queuedData(pointer to queue)
 * returns True if there is data  to be read in the queue
 */
uint8_t usb_queuedData(usbQueue *q){
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	return (q->w_index != q->r_index);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2242      	movs	r2, #66	; 0x42
 800252e:	5c9a      	ldrb	r2, [r3, r2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2141      	movs	r1, #65	; 0x41
 8002534:	5c5b      	ldrb	r3, [r3, r1]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	1e5a      	subs	r2, r3, #1
 800253a:	4193      	sbcs	r3, r2
 800253c:	b2db      	uxtb	r3, r3
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}

08002546 <usb_peekQueue>:

/*
 * usb_peekQueue(pointer to queue, relative position)
 * returns a queue element at a relative position from the read index. Does not change the index itself
 */
uint8_t usb_peekQueue(usbQueue *q, uint8_t pos){
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	000a      	movs	r2, r1
 8002550:	1cfb      	adds	r3, r7, #3
 8002552:	701a      	strb	r2, [r3, #0]
	uint8_t ind = q->r_index + pos;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2241      	movs	r2, #65	; 0x41
 8002558:	5c99      	ldrb	r1, [r3, r2]
 800255a:	200f      	movs	r0, #15
 800255c:	183b      	adds	r3, r7, r0
 800255e:	1cfa      	adds	r2, r7, #3
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	188a      	adds	r2, r1, r2
 8002564:	701a      	strb	r2, [r3, #0]
	if (ind > (USB_QUEUE_SIZE)){
 8002566:	183b      	adds	r3, r7, r0
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d904      	bls.n	8002578 <usb_peekQueue+0x32>
		ind = ind - (USB_QUEUE_SIZE+1);
 800256e:	183b      	adds	r3, r7, r0
 8002570:	183a      	adds	r2, r7, r0
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	3a41      	subs	r2, #65	; 0x41
 8002576:	701a      	strb	r2, [r3, #0]
	}
	return q->queue[ind];
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	5cd3      	ldrb	r3, [r2, r3]
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b004      	add	sp, #16
 8002588:	bd80      	pop	{r7, pc}

0800258a <usb_GetByteFromQueue>:

/*
 * usb_GetByteFromQueue(pointer to queue)
 * returns a single byte from the queue
 */
uint8_t usb_GetByteFromQueue(usbQueue *q){
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
	uint8_t return_byte = q->queue[q->r_index];
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2241      	movs	r2, #65	; 0x41
 8002596:	5c9b      	ldrb	r3, [r3, r2]
 8002598:	0019      	movs	r1, r3
 800259a:	230f      	movs	r3, #15
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	5c52      	ldrb	r2, [r2, r1]
 80025a2:	701a      	strb	r2, [r3, #0]
	if (q->r_index == USB_QUEUE_SIZE){
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2241      	movs	r2, #65	; 0x41
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d104      	bne.n	80025b8 <usb_GetByteFromQueue+0x2e>
		q->r_index = 0;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2241      	movs	r2, #65	; 0x41
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]
 80025b6:	e007      	b.n	80025c8 <usb_GetByteFromQueue+0x3e>
	}else{
		q->r_index++;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2241      	movs	r2, #65	; 0x41
 80025bc:	5c9b      	ldrb	r3, [r3, r2]
 80025be:	3301      	adds	r3, #1
 80025c0:	b2d9      	uxtb	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2241      	movs	r2, #65	; 0x41
 80025c6:	5499      	strb	r1, [r3, r2]
	}
	return return_byte;
 80025c8:	230f      	movs	r3, #15
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	781b      	ldrb	r3, [r3, #0]
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b004      	add	sp, #16
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <usb_queueDiscard>:
 * usb_queueDiscard(pointer to queue)
 * discards data until (including) next frame ending
 * return the amount of discarded numbers
 * if no frame ending is found, clears the entire queue
 */
uint8_t usb_queueDiscard(usbQueue *q){;
 80025d6:	b590      	push	{r4, r7, lr}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	for (uint8_t i =2; i< USB_QUEUE_SIZE; i++){
 80025de:	230f      	movs	r3, #15
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	2202      	movs	r2, #2
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e032      	b.n	800264e <usb_queueDiscard+0x78>
		if (usb_peekQueue(q, i-2) == '\r' && usb_peekQueue(q, i-1) == '\n' && usb_peekQueue(q, i) == '#'){
 80025e8:	240f      	movs	r4, #15
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	3b02      	subs	r3, #2
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0011      	movs	r1, r2
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7ff ffa5 	bl	8002546 <usb_peekQueue>
 80025fc:	0003      	movs	r3, r0
 80025fe:	2b0d      	cmp	r3, #13
 8002600:	d11f      	bne.n	8002642 <usb_queueDiscard+0x6c>
 8002602:	193b      	adds	r3, r7, r4
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	3b01      	subs	r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0011      	movs	r1, r2
 800260e:	0018      	movs	r0, r3
 8002610:	f7ff ff99 	bl	8002546 <usb_peekQueue>
 8002614:	0003      	movs	r3, r0
 8002616:	2b0a      	cmp	r3, #10
 8002618:	d113      	bne.n	8002642 <usb_queueDiscard+0x6c>
 800261a:	193b      	adds	r3, r7, r4
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0011      	movs	r1, r2
 8002622:	0018      	movs	r0, r3
 8002624:	f7ff ff8f 	bl	8002546 <usb_peekQueue>
 8002628:	0003      	movs	r3, r0
 800262a:	2b23      	cmp	r3, #35	; 0x23
 800262c:	d109      	bne.n	8002642 <usb_queueDiscard+0x6c>
			q->r_index = i;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	193a      	adds	r2, r7, r4
 8002632:	2141      	movs	r1, #65	; 0x41
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	545a      	strb	r2, [r3, r1]
			return (i+2);
 8002638:	193b      	adds	r3, r7, r4
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	3302      	adds	r3, #2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	e013      	b.n	800266a <usb_queueDiscard+0x94>
	for (uint8_t i =2; i< USB_QUEUE_SIZE; i++){
 8002642:	210f      	movs	r1, #15
 8002644:	187b      	adds	r3, r7, r1
 8002646:	781a      	ldrb	r2, [r3, #0]
 8002648:	187b      	adds	r3, r7, r1
 800264a:	3201      	adds	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	230f      	movs	r3, #15
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b3f      	cmp	r3, #63	; 0x3f
 8002656:	d9c7      	bls.n	80025e8 <usb_queueDiscard+0x12>
		}
	}
	q->r_index = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2241      	movs	r2, #65	; 0x41
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]
	q->w_index = 0;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2242      	movs	r2, #66	; 0x42
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]
	return (USB_QUEUE_SIZE);
 8002668:	2340      	movs	r3, #64	; 0x40
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b005      	add	sp, #20
 8002670:	bd90      	pop	{r4, r7, pc}
	...

08002674 <usb_processFrame>:

/*
 * Decodes a valid usb frame into device functions
 */
uint8_t usb_processFrame(uint8_t *frame){
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	static uint8_t response[USB_FRAME_SIZE];
	response[0] = '#';
 800267c:	4bed      	ldr	r3, [pc, #948]	; (8002a34 <usb_processFrame+0x3c0>)
 800267e:	2223      	movs	r2, #35	; 0x23
 8002680:	701a      	strb	r2, [r3, #0]
	uint8_t n = frame[1];
 8002682:	2314      	movs	r3, #20
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	7852      	ldrb	r2, [r2, #1]
 800268a:	701a      	strb	r2, [r3, #0]
	UNUSED(n);
	uint8_t func = frame[2];
 800268c:	2113      	movs	r1, #19
 800268e:	187b      	adds	r3, r7, r1
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	7892      	ldrb	r2, [r2, #2]
 8002694:	701a      	strb	r2, [r3, #0]
	uint16_t value = 0;
 8002696:	2316      	movs	r3, #22
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2200      	movs	r2, #0
 800269c:	801a      	strh	r2, [r3, #0]
	uint8_t res_n = 0;
 800269e:	2315      	movs	r3, #21
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
	uint16_t res_val = 0;
 80026a6:	2310      	movs	r3, #16
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2200      	movs	r2, #0
 80026ac:	801a      	strh	r2, [r3, #0]
	uint32_t res_val32 = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
	uint32_t value32 = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
	switch (func){
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b3e      	cmp	r3, #62	; 0x3e
 80026bc:	d900      	bls.n	80026c0 <usb_processFrame+0x4c>
 80026be:	e285      	b.n	8002bcc <usb_processFrame+0x558>
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	4bdd      	ldr	r3, [pc, #884]	; (8002a38 <usb_processFrame+0x3c4>)
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	469f      	mov	pc, r3
	case 1://Hello
		res_n = 13;
 80026ca:	2315      	movs	r3, #21
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	220d      	movs	r2, #13
 80026d0:	701a      	strb	r2, [r3, #0]
		response[2] = 129;
 80026d2:	4bd8      	ldr	r3, [pc, #864]	; (8002a34 <usb_processFrame+0x3c0>)
 80026d4:	2281      	movs	r2, #129	; 0x81
 80026d6:	709a      	strb	r2, [r3, #2]
		response[3] = 'I';response[4] = ' ';response[5] = 'a';response[6] = 'm';response[7] = ' ';response[8] = 'a';
 80026d8:	4bd6      	ldr	r3, [pc, #856]	; (8002a34 <usb_processFrame+0x3c0>)
 80026da:	2249      	movs	r2, #73	; 0x49
 80026dc:	70da      	strb	r2, [r3, #3]
 80026de:	4bd5      	ldr	r3, [pc, #852]	; (8002a34 <usb_processFrame+0x3c0>)
 80026e0:	2220      	movs	r2, #32
 80026e2:	711a      	strb	r2, [r3, #4]
 80026e4:	4bd3      	ldr	r3, [pc, #844]	; (8002a34 <usb_processFrame+0x3c0>)
 80026e6:	2261      	movs	r2, #97	; 0x61
 80026e8:	715a      	strb	r2, [r3, #5]
 80026ea:	4bd2      	ldr	r3, [pc, #840]	; (8002a34 <usb_processFrame+0x3c0>)
 80026ec:	226d      	movs	r2, #109	; 0x6d
 80026ee:	719a      	strb	r2, [r3, #6]
 80026f0:	4bd0      	ldr	r3, [pc, #832]	; (8002a34 <usb_processFrame+0x3c0>)
 80026f2:	2220      	movs	r2, #32
 80026f4:	71da      	strb	r2, [r3, #7]
 80026f6:	4bcf      	ldr	r3, [pc, #828]	; (8002a34 <usb_processFrame+0x3c0>)
 80026f8:	2261      	movs	r2, #97	; 0x61
 80026fa:	721a      	strb	r2, [r3, #8]
		response[9] = ' ';response[10] = 'P';response[11] = 'a';response[12] = 'n';response[13] = 'd';response[14] = 'a';
 80026fc:	4bcd      	ldr	r3, [pc, #820]	; (8002a34 <usb_processFrame+0x3c0>)
 80026fe:	2220      	movs	r2, #32
 8002700:	725a      	strb	r2, [r3, #9]
 8002702:	4bcc      	ldr	r3, [pc, #816]	; (8002a34 <usb_processFrame+0x3c0>)
 8002704:	2250      	movs	r2, #80	; 0x50
 8002706:	729a      	strb	r2, [r3, #10]
 8002708:	4bca      	ldr	r3, [pc, #808]	; (8002a34 <usb_processFrame+0x3c0>)
 800270a:	2261      	movs	r2, #97	; 0x61
 800270c:	72da      	strb	r2, [r3, #11]
 800270e:	4bc9      	ldr	r3, [pc, #804]	; (8002a34 <usb_processFrame+0x3c0>)
 8002710:	226e      	movs	r2, #110	; 0x6e
 8002712:	731a      	strb	r2, [r3, #12]
 8002714:	4bc7      	ldr	r3, [pc, #796]	; (8002a34 <usb_processFrame+0x3c0>)
 8002716:	2264      	movs	r2, #100	; 0x64
 8002718:	735a      	strb	r2, [r3, #13]
 800271a:	4bc6      	ldr	r3, [pc, #792]	; (8002a34 <usb_processFrame+0x3c0>)
 800271c:	2261      	movs	r2, #97	; 0x61
 800271e:	739a      	strb	r2, [r3, #14]
		break;
 8002720:	e25f      	b.n	8002be2 <usb_processFrame+0x56e>
	case 2://Get config bits
		res_n = 2;
 8002722:	2315      	movs	r3, #21
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	2202      	movs	r2, #2
 8002728:	701a      	strb	r2, [r3, #0]
		response[2] = 130;
 800272a:	4bc2      	ldr	r3, [pc, #776]	; (8002a34 <usb_processFrame+0x3c0>)
 800272c:	2282      	movs	r2, #130	; 0x82
 800272e:	709a      	strb	r2, [r3, #2]
		response[3] = getConfigBits();
 8002730:	f000 fb1c 	bl	8002d6c <getConfigBits>
 8002734:	0003      	movs	r3, r0
 8002736:	001a      	movs	r2, r3
 8002738:	4bbe      	ldr	r3, [pc, #760]	; (8002a34 <usb_processFrame+0x3c0>)
 800273a:	70da      	strb	r2, [r3, #3]
		break;
 800273c:	e251      	b.n	8002be2 <usb_processFrame+0x56e>

	case 5://Set usb active
		value = frame[3];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3303      	adds	r3, #3
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	2116      	movs	r1, #22
 8002746:	187b      	adds	r3, r7, r1
 8002748:	801a      	strh	r2, [r3, #0]
		setUsbActive(value);
 800274a:	187b      	adds	r3, r7, r1
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fe33 	bl	80023bc <setUsbActive>
	case 6://get usb active
		res_n = 2;
 8002756:	2315      	movs	r3, #21
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2202      	movs	r2, #2
 800275c:	701a      	strb	r2, [r3, #0]
		response[2] = 134;
 800275e:	4bb5      	ldr	r3, [pc, #724]	; (8002a34 <usb_processFrame+0x3c0>)
 8002760:	2286      	movs	r2, #134	; 0x86
 8002762:	709a      	strb	r2, [r3, #2]
		response[3] = getUsbActive(value);
 8002764:	2316      	movs	r3, #22
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fe46 	bl	80023fc <getUsbActive>
 8002770:	0003      	movs	r3, r0
 8002772:	001a      	movs	r2, r3
 8002774:	4baf      	ldr	r3, [pc, #700]	; (8002a34 <usb_processFrame+0x3c0>)
 8002776:	70da      	strb	r2, [r3, #3]
		break;
 8002778:	e233      	b.n	8002be2 <usb_processFrame+0x56e>

	case 10://Set user led mode
		value = frame[3];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3303      	adds	r3, #3
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	2116      	movs	r1, #22
 8002782:	187b      	adds	r3, r7, r1
 8002784:	801a      	strh	r2, [r3, #0]
		userLedMode(value);
 8002786:	187b      	adds	r3, r7, r1
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	0018      	movs	r0, r3
 800278e:	f7fe feef 	bl	8001570 <userLedMode>
	case 11://Get user led mode
		res_n = 2;
 8002792:	2315      	movs	r3, #21
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
		response[2] = 139;
 800279a:	4ba6      	ldr	r3, [pc, #664]	; (8002a34 <usb_processFrame+0x3c0>)
 800279c:	228b      	movs	r2, #139	; 0x8b
 800279e:	709a      	strb	r2, [r3, #2]
		response[3] = getUserLedMode();
 80027a0:	f7fe ff20 	bl	80015e4 <getUserLedMode>
 80027a4:	0003      	movs	r3, r0
 80027a6:	001a      	movs	r2, r3
 80027a8:	4ba2      	ldr	r3, [pc, #648]	; (8002a34 <usb_processFrame+0x3c0>)
 80027aa:	70da      	strb	r2, [r3, #3]
		break;
 80027ac:	e219      	b.n	8002be2 <usb_processFrame+0x56e>

	case 12://Set user Led mode 2 Freq
		value = frame[3];
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3303      	adds	r3, #3
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	2116      	movs	r1, #22
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	801a      	strh	r2, [r3, #0]
		userLedFreq(value);
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	0018      	movs	r0, r3
 80027c2:	f7fe ff19 	bl	80015f8 <userLedFreq>
	case 13://Get user led mode 2 Freq
		res_n = 2;
 80027c6:	2315      	movs	r3, #21
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
		response[2] = 141;
 80027ce:	4b99      	ldr	r3, [pc, #612]	; (8002a34 <usb_processFrame+0x3c0>)
 80027d0:	228d      	movs	r2, #141	; 0x8d
 80027d2:	709a      	strb	r2, [r3, #2]
		response[3] = getUserLedFreq();
 80027d4:	f7fe ff28 	bl	8001628 <getUserLedFreq>
 80027d8:	0003      	movs	r3, r0
 80027da:	001a      	movs	r2, r3
 80027dc:	4b95      	ldr	r3, [pc, #596]	; (8002a34 <usb_processFrame+0x3c0>)
 80027de:	70da      	strb	r2, [r3, #3]
		break;
 80027e0:	e1ff      	b.n	8002be2 <usb_processFrame+0x56e>

	case 14://Set user IO Out 1
		value = frame[3];
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3303      	adds	r3, #3
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	2116      	movs	r1, #22
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	801a      	strh	r2, [r3, #0]
		setUserOut(1, value);
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	0019      	movs	r1, r3
 80027f6:	2001      	movs	r0, #1
 80027f8:	f7fe ff50 	bl	800169c <setUserOut>
	case 15://Get user out 1
		res_n = 2;
 80027fc:	2315      	movs	r3, #21
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
		response[2] = 143;
 8002804:	4b8b      	ldr	r3, [pc, #556]	; (8002a34 <usb_processFrame+0x3c0>)
 8002806:	228f      	movs	r2, #143	; 0x8f
 8002808:	709a      	strb	r2, [r3, #2]
		response[3] = getUserOut(1);
 800280a:	2001      	movs	r0, #1
 800280c:	f7fe ff80 	bl	8001710 <getUserOut>
 8002810:	0003      	movs	r3, r0
 8002812:	001a      	movs	r2, r3
 8002814:	4b87      	ldr	r3, [pc, #540]	; (8002a34 <usb_processFrame+0x3c0>)
 8002816:	70da      	strb	r2, [r3, #3]
		break;
 8002818:	e1e3      	b.n	8002be2 <usb_processFrame+0x56e>

	case 16://Set user IO Out 2
		value = frame[3];
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3303      	adds	r3, #3
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	2116      	movs	r1, #22
 8002822:	187b      	adds	r3, r7, r1
 8002824:	801a      	strh	r2, [r3, #0]
		setUserOut(2, value);
 8002826:	187b      	adds	r3, r7, r1
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	0019      	movs	r1, r3
 800282e:	2002      	movs	r0, #2
 8002830:	f7fe ff34 	bl	800169c <setUserOut>
	case 17://Get user out 2
		res_n = 2;
 8002834:	2315      	movs	r3, #21
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]
		response[2] = 145;
 800283c:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <usb_processFrame+0x3c0>)
 800283e:	2291      	movs	r2, #145	; 0x91
 8002840:	709a      	strb	r2, [r3, #2]
		response[3] = getUserOut(2);
 8002842:	2002      	movs	r0, #2
 8002844:	f7fe ff64 	bl	8001710 <getUserOut>
 8002848:	0003      	movs	r3, r0
 800284a:	001a      	movs	r2, r3
 800284c:	4b79      	ldr	r3, [pc, #484]	; (8002a34 <usb_processFrame+0x3c0>)
 800284e:	70da      	strb	r2, [r3, #3]
		break;
 8002850:	e1c7      	b.n	8002be2 <usb_processFrame+0x56e>

	case 20://Read analog in 2 (amp)
		res_n = 3;
 8002852:	2315      	movs	r3, #21
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2203      	movs	r2, #3
 8002858:	701a      	strb	r2, [r3, #0]
		response[2] = 148;
 800285a:	4b76      	ldr	r3, [pc, #472]	; (8002a34 <usb_processFrame+0x3c0>)
 800285c:	2294      	movs	r2, #148	; 0x94
 800285e:	709a      	strb	r2, [r3, #2]
		res_val = getFromFilter();
 8002860:	2510      	movs	r5, #16
 8002862:	197c      	adds	r4, r7, r5
 8002864:	f7fe f81c 	bl	80008a0 <getFromFilter>
 8002868:	0003      	movs	r3, r0
 800286a:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 800286c:	002c      	movs	r4, r5
 800286e:	193b      	adds	r3, r7, r4
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fa48 	bl	8002d08 <get8MSB>
 8002878:	0003      	movs	r3, r0
 800287a:	001a      	movs	r2, r3
 800287c:	4b6d      	ldr	r3, [pc, #436]	; (8002a34 <usb_processFrame+0x3c0>)
 800287e:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002880:	193b      	adds	r3, r7, r4
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	0018      	movs	r0, r3
 8002886:	f000 fa4e 	bl	8002d26 <get8LSB>
 800288a:	0003      	movs	r3, r0
 800288c:	001a      	movs	r2, r3
 800288e:	4b69      	ldr	r3, [pc, #420]	; (8002a34 <usb_processFrame+0x3c0>)
 8002890:	711a      	strb	r2, [r3, #4]
		break;
 8002892:	e1a6      	b.n	8002be2 <usb_processFrame+0x56e>

	case 21://Read user analog in 1
		res_n = 3;
 8002894:	2315      	movs	r3, #21
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	2203      	movs	r2, #3
 800289a:	701a      	strb	r2, [r3, #0]
		response[2] = 149;
 800289c:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <usb_processFrame+0x3c0>)
 800289e:	2295      	movs	r2, #149	; 0x95
 80028a0:	709a      	strb	r2, [r3, #2]
		res_val = getAnalogRead(0);
 80028a2:	2510      	movs	r5, #16
 80028a4:	197c      	adds	r4, r7, r5
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fd fe2c 	bl	8000504 <getAnalogRead>
 80028ac:	0003      	movs	r3, r0
 80028ae:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 80028b0:	002c      	movs	r4, r5
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 fa26 	bl	8002d08 <get8MSB>
 80028bc:	0003      	movs	r3, r0
 80028be:	001a      	movs	r2, r3
 80028c0:	4b5c      	ldr	r3, [pc, #368]	; (8002a34 <usb_processFrame+0x3c0>)
 80028c2:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 fa2c 	bl	8002d26 <get8LSB>
 80028ce:	0003      	movs	r3, r0
 80028d0:	001a      	movs	r2, r3
 80028d2:	4b58      	ldr	r3, [pc, #352]	; (8002a34 <usb_processFrame+0x3c0>)
 80028d4:	711a      	strb	r2, [r3, #4]
		break;
 80028d6:	e184      	b.n	8002be2 <usb_processFrame+0x56e>

	case 22://Read user analog in 2
		res_n = 3;
 80028d8:	2315      	movs	r3, #21
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2203      	movs	r2, #3
 80028de:	701a      	strb	r2, [r3, #0]
		response[2] = 150;
 80028e0:	4b54      	ldr	r3, [pc, #336]	; (8002a34 <usb_processFrame+0x3c0>)
 80028e2:	2296      	movs	r2, #150	; 0x96
 80028e4:	709a      	strb	r2, [r3, #2]
		res_val = getAnalogRead(1);
 80028e6:	2510      	movs	r5, #16
 80028e8:	197c      	adds	r4, r7, r5
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fd fe0a 	bl	8000504 <getAnalogRead>
 80028f0:	0003      	movs	r3, r0
 80028f2:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 80028f4:	002c      	movs	r4, r5
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fa04 	bl	8002d08 <get8MSB>
 8002900:	0003      	movs	r3, r0
 8002902:	001a      	movs	r2, r3
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <usb_processFrame+0x3c0>)
 8002906:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002908:	193b      	adds	r3, r7, r4
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fa0a 	bl	8002d26 <get8LSB>
 8002912:	0003      	movs	r3, r0
 8002914:	001a      	movs	r2, r3
 8002916:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <usb_processFrame+0x3c0>)
 8002918:	711a      	strb	r2, [r3, #4]
		break;
 800291a:	e162      	b.n	8002be2 <usb_processFrame+0x56e>

	case 30://read user input 1
		res_n = 2;
 800291c:	2315      	movs	r3, #21
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2202      	movs	r2, #2
 8002922:	701a      	strb	r2, [r3, #0]
		response[2] = 158;
 8002924:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <usb_processFrame+0x3c0>)
 8002926:	229e      	movs	r2, #158	; 0x9e
 8002928:	709a      	strb	r2, [r3, #2]
		response[3] = getUserIn(1);
 800292a:	2001      	movs	r0, #1
 800292c:	f7fd ff20 	bl	8000770 <getUserIn>
 8002930:	0003      	movs	r3, r0
 8002932:	001a      	movs	r2, r3
 8002934:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <usb_processFrame+0x3c0>)
 8002936:	70da      	strb	r2, [r3, #3]
		break;
 8002938:	e153      	b.n	8002be2 <usb_processFrame+0x56e>

	case 31://read user input 2
		res_n = 2;
 800293a:	2315      	movs	r3, #21
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
		response[2] = 159;
 8002942:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <usb_processFrame+0x3c0>)
 8002944:	229f      	movs	r2, #159	; 0x9f
 8002946:	709a      	strb	r2, [r3, #2]
		response[3] = getUserIn(2);
 8002948:	2002      	movs	r0, #2
 800294a:	f7fd ff11 	bl	8000770 <getUserIn>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <usb_processFrame+0x3c0>)
 8002954:	70da      	strb	r2, [r3, #3]
		break;
 8002956:	e144      	b.n	8002be2 <usb_processFrame+0x56e>

	case 40://Set encoder mode
		value = frame[3];
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3303      	adds	r3, #3
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	2116      	movs	r1, #22
 8002960:	187b      	adds	r3, r7, r1
 8002962:	801a      	strh	r2, [r3, #0]
		setEncoderMode(value);
 8002964:	187b      	adds	r3, r7, r1
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	0018      	movs	r0, r3
 800296c:	f7fd fe04 	bl	8000578 <setEncoderMode>
	case 41://Get encoder mode
		res_n = 2;
 8002970:	2315      	movs	r3, #21
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]
		response[2] = 169;
 8002978:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <usb_processFrame+0x3c0>)
 800297a:	22a9      	movs	r2, #169	; 0xa9
 800297c:	709a      	strb	r2, [r3, #2]
		response[3] = getEncoderMode();
 800297e:	f7fd fe0b 	bl	8000598 <getEncoderMode>
 8002982:	0003      	movs	r3, r0
 8002984:	001a      	movs	r2, r3
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <usb_processFrame+0x3c0>)
 8002988:	70da      	strb	r2, [r3, #3]
		break;
 800298a:	e12a      	b.n	8002be2 <usb_processFrame+0x56e>

	case 42://set encoder count
		value32 = (frame[3]<<24) + (frame[4]<<16) + (frame[5]<<8) + frame[6];
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3303      	adds	r3, #3
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	061a      	lsls	r2, r3, #24
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	18d2      	adds	r2, r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3305      	adds	r3, #5
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	18d3      	adds	r3, r2, r3
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	3206      	adds	r2, #6
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]
		setEncoderCount(value32);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fd fdb7 	bl	8000528 <setEncoderCount>
	case 43://get encoder
		res_n = 5;
 80029ba:	2315      	movs	r3, #21
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2205      	movs	r2, #5
 80029c0:	701a      	strb	r2, [r3, #0]
		response[2] = 171;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <usb_processFrame+0x3c0>)
 80029c4:	22ab      	movs	r2, #171	; 0xab
 80029c6:	709a      	strb	r2, [r3, #2]
		res_val32 = getEncoderCount();
 80029c8:	f7fd fdf0 	bl	80005ac <getEncoderCount>
 80029cc:	0003      	movs	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]
		response[3] = get8MSB(get16MSB(res_val32));
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f9b4 	bl	8002d40 <get16MSB>
 80029d8:	0003      	movs	r3, r0
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f994 	bl	8002d08 <get8MSB>
 80029e0:	0003      	movs	r3, r0
 80029e2:	001a      	movs	r2, r3
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <usb_processFrame+0x3c0>)
 80029e6:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(get16MSB(res_val32));
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 f9a8 	bl	8002d40 <get16MSB>
 80029f0:	0003      	movs	r3, r0
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 f997 	bl	8002d26 <get8LSB>
 80029f8:	0003      	movs	r3, r0
 80029fa:	001a      	movs	r2, r3
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <usb_processFrame+0x3c0>)
 80029fe:	711a      	strb	r2, [r3, #4]
		response[5] = get8MSB(get16LSB(res_val32));
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f9a7 	bl	8002d56 <get16LSB>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f97c 	bl	8002d08 <get8MSB>
 8002a10:	0003      	movs	r3, r0
 8002a12:	001a      	movs	r2, r3
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <usb_processFrame+0x3c0>)
 8002a16:	715a      	strb	r2, [r3, #5]
		response[6] = get8LSB(get16LSB(res_val32));
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f99b 	bl	8002d56 <get16LSB>
 8002a20:	0003      	movs	r3, r0
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f97f 	bl	8002d26 <get8LSB>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	4b01      	ldr	r3, [pc, #4]	; (8002a34 <usb_processFrame+0x3c0>)
 8002a2e:	719a      	strb	r2, [r3, #6]
		break;
 8002a30:	e0d7      	b.n	8002be2 <usb_processFrame+0x56e>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	200002fc 	.word	0x200002fc
 8002a38:	0800f654 	.word	0x0800f654

	case 44:// get pwm duty cycle
		res_n = 3;
 8002a3c:	2315      	movs	r3, #21
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2203      	movs	r2, #3
 8002a42:	701a      	strb	r2, [r3, #0]
		response[2] = 172;
 8002a44:	4b77      	ldr	r3, [pc, #476]	; (8002c24 <usb_processFrame+0x5b0>)
 8002a46:	22ac      	movs	r2, #172	; 0xac
 8002a48:	709a      	strb	r2, [r3, #2]
		res_val = getEncoderDuty();
 8002a4a:	f7fd fe87 	bl	800075c <getEncoderDuty>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	2410      	movs	r4, #16
 8002a52:	193b      	adds	r3, r7, r4
 8002a54:	801a      	strh	r2, [r3, #0]
		response[3] = get8MSB(res_val);
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f954 	bl	8002d08 <get8MSB>
 8002a60:	0003      	movs	r3, r0
 8002a62:	001a      	movs	r2, r3
 8002a64:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <usb_processFrame+0x5b0>)
 8002a66:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 f95a 	bl	8002d26 <get8LSB>
 8002a72:	0003      	movs	r3, r0
 8002a74:	001a      	movs	r2, r3
 8002a76:	4b6b      	ldr	r3, [pc, #428]	; (8002c24 <usb_processFrame+0x5b0>)
 8002a78:	711a      	strb	r2, [r3, #4]
		break;
 8002a7a:	e0b2      	b.n	8002be2 <usb_processFrame+0x56e>

	case 50://Calibrate Gain
		calibrateGain();
 8002a7c:	f7fd ff5c 	bl	8000938 <calibrateGain>
	case 51:
		res_n = 2;
 8002a80:	2315      	movs	r3, #21
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2202      	movs	r2, #2
 8002a86:	701a      	strb	r2, [r3, #0]
		response[2] = 179;
 8002a88:	4b66      	ldr	r3, [pc, #408]	; (8002c24 <usb_processFrame+0x5b0>)
 8002a8a:	22b3      	movs	r2, #179	; 0xb3
 8002a8c:	709a      	strb	r2, [r3, #2]
		response[3] = getGainCalibrated();
 8002a8e:	f7fd ff9d 	bl	80009cc <getGainCalibrated>
 8002a92:	0003      	movs	r3, r0
 8002a94:	001a      	movs	r2, r3
 8002a96:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <usb_processFrame+0x5b0>)
 8002a98:	70da      	strb	r2, [r3, #3]
		break;
 8002a9a:	e0a2      	b.n	8002be2 <usb_processFrame+0x56e>

	case 52://get RG step
		res_n = 2;
 8002a9c:	2315      	movs	r3, #21
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
		response[2] = 180;
 8002aa4:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <usb_processFrame+0x5b0>)
 8002aa6:	22b4      	movs	r2, #180	; 0xb4
 8002aa8:	709a      	strb	r2, [r3, #2]
		response[3] = getRgStep();
 8002aaa:	f7fd ff99 	bl	80009e0 <getRgStep>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <usb_processFrame+0x5b0>)
 8002ab4:	70da      	strb	r2, [r3, #3]
		break;
 8002ab6:	e094      	b.n	8002be2 <usb_processFrame+0x56e>

	case 53://get RG step
		res_n = 2;
 8002ab8:	2315      	movs	r3, #21
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2202      	movs	r2, #2
 8002abe:	701a      	strb	r2, [r3, #0]
		response[2] = 181;
 8002ac0:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <usb_processFrame+0x5b0>)
 8002ac2:	22b5      	movs	r2, #181	; 0xb5
 8002ac4:	709a      	strb	r2, [r3, #2]
		response[3] = getRgWiper();
 8002ac6:	f7fd ff95 	bl	80009f4 <getRgWiper>
 8002aca:	0003      	movs	r3, r0
 8002acc:	001a      	movs	r2, r3
 8002ace:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <usb_processFrame+0x5b0>)
 8002ad0:	70da      	strb	r2, [r3, #3]
		break;
 8002ad2:	e086      	b.n	8002be2 <usb_processFrame+0x56e>

	case 54://Set amp gain
		value = (frame[3]<<8) + frame[4];
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3303      	adds	r3, #3
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	b299      	uxth	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	2016      	movs	r0, #22
 8002aea:	183b      	adds	r3, r7, r0
 8002aec:	188a      	adds	r2, r1, r2
 8002aee:	801a      	strh	r2, [r3, #0]
		setGain(value);
 8002af0:	183b      	adds	r3, r7, r0
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7fd ffb7 	bl	8000a68 <setGain>
	case 55://get amp gain
		res_n = 3;
 8002afa:	2315      	movs	r3, #21
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	2203      	movs	r2, #3
 8002b00:	701a      	strb	r2, [r3, #0]
		response[2] = 183;
 8002b02:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <usb_processFrame+0x5b0>)
 8002b04:	22b7      	movs	r2, #183	; 0xb7
 8002b06:	709a      	strb	r2, [r3, #2]
		res_val = getActiveGain();
 8002b08:	2510      	movs	r5, #16
 8002b0a:	197c      	adds	r4, r7, r5
 8002b0c:	f7fd ffe8 	bl	8000ae0 <getActiveGain>
 8002b10:	0003      	movs	r3, r0
 8002b12:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 8002b14:	002c      	movs	r4, r5
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 f8f4 	bl	8002d08 <get8MSB>
 8002b20:	0003      	movs	r3, r0
 8002b22:	001a      	movs	r2, r3
 8002b24:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <usb_processFrame+0x5b0>)
 8002b26:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f8fa 	bl	8002d26 <get8LSB>
 8002b32:	0003      	movs	r3, r0
 8002b34:	001a      	movs	r2, r3
 8002b36:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <usb_processFrame+0x5b0>)
 8002b38:	711a      	strb	r2, [r3, #4]
		break;
 8002b3a:	e052      	b.n	8002be2 <usb_processFrame+0x56e>

	case 60://set offset
		value = (frame[3]<<8) + frame[4];
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3303      	adds	r3, #3
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	b299      	uxth	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	2016      	movs	r0, #22
 8002b52:	183b      	adds	r3, r7, r0
 8002b54:	188a      	adds	r2, r1, r2
 8002b56:	801a      	strh	r2, [r3, #0]
		setOffset(value);
 8002b58:	183b      	adds	r3, r7, r0
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7fd fe2d 	bl	80007bc <setOffset>

	case 61: //get offset
		res_n = 3;
 8002b62:	2315      	movs	r3, #21
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2203      	movs	r2, #3
 8002b68:	701a      	strb	r2, [r3, #0]
		response[2] = 189;
 8002b6a:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <usb_processFrame+0x5b0>)
 8002b6c:	22bd      	movs	r2, #189	; 0xbd
 8002b6e:	709a      	strb	r2, [r3, #2]
		res_val = getOffset();
 8002b70:	2510      	movs	r5, #16
 8002b72:	197c      	adds	r4, r7, r5
 8002b74:	f7fd fe3c 	bl	80007f0 <getOffset>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 8002b7c:	002c      	movs	r4, r5
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 f8c0 	bl	8002d08 <get8MSB>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <usb_processFrame+0x5b0>)
 8002b8e:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002b90:	193b      	adds	r3, r7, r4
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f8c6 	bl	8002d26 <get8LSB>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <usb_processFrame+0x5b0>)
 8002ba0:	711a      	strb	r2, [r3, #4]
		break;
 8002ba2:	e01e      	b.n	8002be2 <usb_processFrame+0x56e>

	case 62: // auto offset
		res_val = autoOffset();
 8002ba4:	f7fd ffa8 	bl	8000af8 <autoOffset>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	001a      	movs	r2, r3
 8002bac:	2110      	movs	r1, #16
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	801a      	strh	r2, [r3, #0]
		res_n = 2;
 8002bb2:	2315      	movs	r3, #21
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	701a      	strb	r2, [r3, #0]
		response[2] = 190;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <usb_processFrame+0x5b0>)
 8002bbc:	22be      	movs	r2, #190	; 0xbe
 8002bbe:	709a      	strb	r2, [r3, #2]
		response[3] = res_val;
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <usb_processFrame+0x5b0>)
 8002bc8:	70da      	strb	r2, [r3, #3]
		break;
 8002bca:	e00a      	b.n	8002be2 <usb_processFrame+0x56e>
		//// development functions



	default://returns an error
		res_n = 2;
 8002bcc:	2315      	movs	r3, #21
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
		response[2] = 0;
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <usb_processFrame+0x5b0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	709a      	strb	r2, [r3, #2]
		response[3] = 1;
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <usb_processFrame+0x5b0>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	70da      	strb	r2, [r3, #3]
		break;
 8002be0:	46c0      	nop			; (mov r8, r8)

	}


	response[2 + res_n] = '\r';
 8002be2:	2015      	movs	r0, #21
 8002be4:	183b      	adds	r3, r7, r0
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	3302      	adds	r3, #2
 8002bea:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <usb_processFrame+0x5b0>)
 8002bec:	210d      	movs	r1, #13
 8002bee:	54d1      	strb	r1, [r2, r3]
	response[2 + res_n + 1] = '\n';
 8002bf0:	183b      	adds	r3, r7, r0
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	3303      	adds	r3, #3
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <usb_processFrame+0x5b0>)
 8002bf8:	210a      	movs	r1, #10
 8002bfa:	54d1      	strb	r1, [r2, r3]
	response[1] = res_n;
 8002bfc:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <usb_processFrame+0x5b0>)
 8002bfe:	183a      	adds	r2, r7, r0
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(response, res_n + 4);
 8002c04:	183b      	adds	r3, r7, r0
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <usb_processFrame+0x5b0>)
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f00b ffe8 	bl	800ebe8 <CDC_Transmit_FS>
	return 0;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b006      	add	sp, #24
 8002c20:	bdb0      	pop	{r4, r5, r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	200002fc 	.word	0x200002fc

08002c28 <usb_getQueuedCommand>:
/*
 * usb_getQueuedCommand(pointer to queue)
 * Get a entire frame from the queue and verify its format,
 * If valid, it gets processed and returns 1. otherwise, returns 0 *
 */
uint8_t usb_getQueuedCommand(usbQueue *q){
 8002c28:	b5b0      	push	{r4, r5, r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	static uint8_t rx_frame[USB_FRAME_SIZE];
	if (q->queue[q->r_index] != '#'){
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2241      	movs	r2, #65	; 0x41
 8002c34:	5c9b      	ldrb	r3, [r3, r2]
 8002c36:	001a      	movs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	5c9b      	ldrb	r3, [r3, r2]
 8002c3c:	2b23      	cmp	r3, #35	; 0x23
 8002c3e:	d003      	beq.n	8002c48 <usb_getQueuedCommand+0x20>
		usb_queueDiscard(q);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff fcc7 	bl	80025d6 <usb_queueDiscard>
	}
	if (usb_queuedData(q)){
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7ff fc69 	bl	8002522 <usb_queuedData>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d03f      	beq.n	8002cd4 <usb_getQueuedCommand+0xac>
		uint8_t n = usb_peekQueue(q, 1);
 8002c54:	250e      	movs	r5, #14
 8002c56:	197c      	adds	r4, r7, r5
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f7ff fc72 	bl	8002546 <usb_peekQueue>
 8002c62:	0003      	movs	r3, r0
 8002c64:	7023      	strb	r3, [r4, #0]
		uint8_t frame_len = 2 + n + 2;
 8002c66:	230d      	movs	r3, #13
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	197a      	adds	r2, r7, r5
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	3204      	adds	r2, #4
 8002c70:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i< frame_len; i++){
 8002c72:	230f      	movs	r3, #15
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e00f      	b.n	8002c9c <usb_getQueuedCommand+0x74>
			rx_frame[i] = usb_GetByteFromQueue(q);
 8002c7c:	250f      	movs	r5, #15
 8002c7e:	197b      	adds	r3, r7, r5
 8002c80:	781c      	ldrb	r4, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff fc80 	bl	800258a <usb_GetByteFromQueue>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <usb_getQueuedCommand+0xb8>)
 8002c90:	551a      	strb	r2, [r3, r4]
		for (uint8_t i = 0; i< frame_len; i++){
 8002c92:	197b      	adds	r3, r7, r5
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	197b      	adds	r3, r7, r5
 8002c98:	3201      	adds	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	18fa      	adds	r2, r7, r3
 8002ca0:	210d      	movs	r1, #13
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d3e7      	bcc.n	8002c7c <usb_getQueuedCommand+0x54>
		}
		if (rx_frame[frame_len-2] == '\r' && rx_frame[frame_len-1] == '\n'){
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	3b02      	subs	r3, #2
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <usb_getQueuedCommand+0xb8>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	2b0d      	cmp	r3, #13
 8002cb8:	d10c      	bne.n	8002cd4 <usb_getQueuedCommand+0xac>
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <usb_getQueuedCommand+0xb8>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	2b0a      	cmp	r3, #10
 8002cc6:	d105      	bne.n	8002cd4 <usb_getQueuedCommand+0xac>
			usb_processFrame(rx_frame);
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <usb_getQueuedCommand+0xb8>)
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff fcd2 	bl	8002674 <usb_processFrame>
			return 1;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <usb_getQueuedCommand+0xae>
		}
	}
	return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b004      	add	sp, #16
 8002cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	2000030c 	.word	0x2000030c

08002ce4 <usbController>:

void usbController(){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
	if (usb_queuedData(&usb_Q)){
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <usbController+0x20>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7ff fc19 	bl	8002522 <usb_queuedData>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d003      	beq.n	8002cfc <usbController+0x18>
		usb_getQueuedCommand(&usb_Q);
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <usbController+0x20>)
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7ff ff96 	bl	8002c28 <usb_getQueuedCommand>
	}
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	20000738 	.word	0x20000738

08002d08 <get8MSB>:
#include "panda_utils.h"
#include "main.h"


//Utils functions
uint8_t get8MSB(uint16_t val){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	0002      	movs	r2, r0
 8002d10:	1dbb      	adds	r3, r7, #6
 8002d12:	801a      	strh	r2, [r3, #0]
	return val/256;
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <get8LSB>:
uint8_t get8LSB(uint16_t val){
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	1dbb      	adds	r3, r7, #6
 8002d30:	801a      	strh	r2, [r3, #0]
	return val%256;
 8002d32:	1dbb      	adds	r3, r7, #6
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <get16MSB>:
uint16_t get16MSB(uint32_t val){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	return val/65536;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	b29b      	uxth	r3, r3
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b002      	add	sp, #8
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <get16LSB>:
uint16_t get16LSB(uint32_t val){
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	return val%65536;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	b29b      	uxth	r3, r3
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <getConfigBits>:



uint8_t getConfigBits(){
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
	uint8_t config = HAL_GPIO_ReadPin(CONFIG_BIT0_GPIO_Port, CONFIG_BIT0_Pin);
 8002d72:	1dfc      	adds	r4, r7, #7
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	021a      	lsls	r2, r3, #8
 8002d78:	2390      	movs	r3, #144	; 0x90
 8002d7a:	05db      	lsls	r3, r3, #23
 8002d7c:	0011      	movs	r1, r2
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f002 fce2 	bl	8005748 <HAL_GPIO_ReadPin>
 8002d84:	0003      	movs	r3, r0
 8002d86:	7023      	strb	r3, [r4, #0]
	config += 2 * HAL_GPIO_ReadPin(CONFIG_BIT1_GPIO_Port, CONFIG_BIT1_Pin);
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <getConfigBits+0x78>)
 8002d8a:	2108      	movs	r1, #8
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f002 fcdb 	bl	8005748 <HAL_GPIO_ReadPin>
 8002d92:	0003      	movs	r3, r0
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	b2d9      	uxtb	r1, r3
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	1dfa      	adds	r2, r7, #7
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	188a      	adds	r2, r1, r2
 8002da0:	701a      	strb	r2, [r3, #0]
	config += 4 * HAL_GPIO_ReadPin(CONFIG_BIT2_GPIO_Port, CONFIG_BIT2_Pin);
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <getConfigBits+0x78>)
 8002da4:	2110      	movs	r1, #16
 8002da6:	0018      	movs	r0, r3
 8002da8:	f002 fcce 	bl	8005748 <HAL_GPIO_ReadPin>
 8002dac:	0003      	movs	r3, r0
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	b2d9      	uxtb	r1, r3
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	1dfa      	adds	r2, r7, #7
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	188a      	adds	r2, r1, r2
 8002dba:	701a      	strb	r2, [r3, #0]
	config += 8 * HAL_GPIO_ReadPin(CONFIG_BIT3_GPIO_Port, CONFIG_BIT3_Pin);
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <getConfigBits+0x78>)
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f002 fcc1 	bl	8005748 <HAL_GPIO_ReadPin>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	b2d9      	uxtb	r1, r3
 8002dcc:	1dfb      	adds	r3, r7, #7
 8002dce:	1dfa      	adds	r2, r7, #7
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	188a      	adds	r2, r1, r2
 8002dd4:	701a      	strb	r2, [r3, #0]
	return config;
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
}
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b003      	add	sp, #12
 8002de0:	bd90      	pop	{r4, r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	48000400 	.word	0x48000400

08002de8 <getActiveD>:
#define GAIN_POT_SS_PIN SPI1_SS1_Pin

SPI_HandleTypeDef *hspix;

uint8_t last_digipot_data;
uint8_t getActiveD(){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	return last_digipot_data;
 8002dec:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <getActiveD+0x10>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	20000a1c 	.word	0x20000a1c

08002dfc <digipotWrite>:

void digipotWrite(uint8_t ndata){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	0002      	movs	r2, r0
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GAIN_POT_SS_PORT, GAIN_POT_SS_PIN, 0);
 8002e08:	2390      	movs	r3, #144	; 0x90
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2108      	movs	r1, #8
 8002e10:	0018      	movs	r0, r3
 8002e12:	f002 fcb6 	bl	8005782 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002e16:	2032      	movs	r0, #50	; 0x32
 8002e18:	f000 fbce 	bl	80035b8 <HAL_Delay>
	uint8_t potdata[2];
	potdata[0] = 0b00010011;
 8002e1c:	210c      	movs	r1, #12
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2213      	movs	r2, #19
 8002e22:	701a      	strb	r2, [r3, #0]
	potdata[1] = ndata;
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	1dfa      	adds	r2, r7, #7
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(hspix,potdata, 2, 50);
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <digipotWrite+0x64>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	1879      	adds	r1, r7, r1
 8002e32:	2332      	movs	r3, #50	; 0x32
 8002e34:	2202      	movs	r2, #2
 8002e36:	f006 fb1d 	bl	8009474 <HAL_SPI_Transmit>
	HAL_Delay(50);
 8002e3a:	2032      	movs	r0, #50	; 0x32
 8002e3c:	f000 fbbc 	bl	80035b8 <HAL_Delay>
	last_digipot_data = ndata;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <digipotWrite+0x68>)
 8002e42:	1dfa      	adds	r2, r7, #7
 8002e44:	7812      	ldrb	r2, [r2, #0]
 8002e46:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GAIN_POT_SS_PORT, GAIN_POT_SS_PIN, 1);
 8002e48:	2390      	movs	r3, #144	; 0x90
 8002e4a:	05db      	lsls	r3, r3, #23
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2108      	movs	r1, #8
 8002e50:	0018      	movs	r0, r3
 8002e52:	f002 fc96 	bl	8005782 <HAL_GPIO_WritePin>

}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	20000a20 	.word	0x20000a20
 8002e64:	20000a1c 	.word	0x20000a1c

08002e68 <spiInit>:
void spiInit(SPI_HandleTypeDef *nhspix){
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	hspix = nhspix;
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <spiInit+0x1c>)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
	digipotWrite(0);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7ff ffc0 	bl	8002dfc <digipotWrite>
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000a20 	.word	0x20000a20

08002e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_MspInit+0x44>)
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_MspInit+0x44>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	430a      	orrs	r2, r1
 8002e98:	619a      	str	r2, [r3, #24]
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <HAL_MspInit+0x44>)
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_MspInit+0x44>)
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_MspInit+0x44>)
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	0549      	lsls	r1, r1, #21
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_MspInit+0x44>)
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	055b      	lsls	r3, r3, #21
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08b      	sub	sp, #44	; 0x2c
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	2414      	movs	r4, #20
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	0018      	movs	r0, r3
 8002ede:	2314      	movs	r3, #20
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f00c fb60 	bl	800f5a8 <memset>
  if(hadc->Instance==ADC1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_ADC_MspInit+0xd4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d154      	bne.n	8002f9c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_ADC_MspInit+0xd8>)
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_ADC_MspInit+0xd8>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0089      	lsls	r1, r1, #2
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
 8002f00:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_ADC_MspInit+0xd8>)
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_ADC_MspInit+0xd8>)
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_ADC_MspInit+0xd8>)
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	0289      	lsls	r1, r1, #10
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	615a      	str	r2, [r3, #20]
 8002f1c:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_ADC_MspInit+0xd8>)
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = ANALOG_IN1_Pin|ANALOG_IN2_Pin|AMP_OUT_Pin;
 8002f2a:	193b      	adds	r3, r7, r4
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	2203      	movs	r2, #3
 8002f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	193b      	adds	r3, r7, r4
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	193a      	adds	r2, r7, r4
 8002f3e:	2390      	movs	r3, #144	; 0x90
 8002f40:	05db      	lsls	r3, r3, #23
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f002 fa87 	bl	8005458 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_ADC_MspInit+0xe0>)
 8002f4e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f64:	2280      	movs	r2, #128	; 0x80
 8002f66:	0052      	lsls	r2, r2, #1
 8002f68:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	00d2      	lsls	r2, r2, #3
 8002f70:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f74:	2220      	movs	r2, #32
 8002f76:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	0192      	lsls	r2, r2, #6
 8002f7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f002 f846 	bl	8005014 <HAL_DMA_Init>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002f8c:	f7fe fa8e 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a06      	ldr	r2, [pc, #24]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_ADC_MspInit+0xdc>)
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b00b      	add	sp, #44	; 0x2c
 8002fa2:	bd90      	pop	{r4, r7, pc}
 8002fa4:	40012400 	.word	0x40012400
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	2000096c 	.word	0x2000096c
 8002fb0:	40020008 	.word	0x40020008

08002fb4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b08b      	sub	sp, #44	; 0x2c
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	2414      	movs	r4, #20
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	2314      	movs	r3, #20
 8002fc4:	001a      	movs	r2, r3
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	f00c faee 	bl	800f5a8 <memset>
  if(hcan->Instance==CAN)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a20      	ldr	r2, [pc, #128]	; (8003054 <HAL_CAN_MspInit+0xa0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d13a      	bne.n	800304c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_CAN_MspInit+0xa4>)
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_CAN_MspInit+0xa4>)
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	0489      	lsls	r1, r1, #18
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	61da      	str	r2, [r3, #28]
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_CAN_MspInit+0xa4>)
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	049b      	lsls	r3, r3, #18
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_CAN_MspInit+0xa4>)
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_CAN_MspInit+0xa4>)
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	02c9      	lsls	r1, r1, #11
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	615a      	str	r2, [r3, #20]
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_CAN_MspInit+0xa4>)
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	02db      	lsls	r3, r3, #11
 8003008:	4013      	ands	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800300e:	193b      	adds	r3, r7, r4
 8003010:	22c0      	movs	r2, #192	; 0xc0
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	0021      	movs	r1, r4
 8003018:	187b      	adds	r3, r7, r1
 800301a:	2202      	movs	r2, #2
 800301c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	187b      	adds	r3, r7, r1
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003024:	187b      	adds	r3, r7, r1
 8003026:	2203      	movs	r2, #3
 8003028:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800302a:	187b      	adds	r3, r7, r1
 800302c:	2204      	movs	r2, #4
 800302e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003030:	187b      	adds	r3, r7, r1
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <HAL_CAN_MspInit+0xa8>)
 8003034:	0019      	movs	r1, r3
 8003036:	0010      	movs	r0, r2
 8003038:	f002 fa0e 	bl	8005458 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	201e      	movs	r0, #30
 8003042:	f001 fcf9 	bl	8004a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8003046:	201e      	movs	r0, #30
 8003048:	f001 fd0b 	bl	8004a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b00b      	add	sp, #44	; 0x2c
 8003052:	bd90      	pop	{r4, r7, pc}
 8003054:	40006400 	.word	0x40006400
 8003058:	40021000 	.word	0x40021000
 800305c:	48000400 	.word	0x48000400

08003060 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_CRC_MspInit+0x34>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10b      	bne.n	800308a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_CRC_MspInit+0x38>)
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HAL_CRC_MspInit+0x38>)
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	430a      	orrs	r2, r1
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_CRC_MspInit+0x38>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	4013      	ands	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b004      	add	sp, #16
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	40023000 	.word	0x40023000
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b08b      	sub	sp, #44	; 0x2c
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	2414      	movs	r4, #20
 80030a6:	193b      	adds	r3, r7, r4
 80030a8:	0018      	movs	r0, r3
 80030aa:	2314      	movs	r3, #20
 80030ac:	001a      	movs	r2, r3
 80030ae:	2100      	movs	r1, #0
 80030b0:	f00c fa7a 	bl	800f5a8 <memset>
  if(hdac->Instance==DAC)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_DAC_MspInit+0x84>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d12b      	bne.n	8003116 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_DAC_MspInit+0x88>)
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_DAC_MspInit+0x88>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	0589      	lsls	r1, r1, #22
 80030c8:	430a      	orrs	r2, r1
 80030ca:	61da      	str	r2, [r3, #28]
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_DAC_MspInit+0x88>)
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	059b      	lsls	r3, r3, #22
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_DAC_MspInit+0x88>)
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_DAC_MspInit+0x88>)
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	0289      	lsls	r1, r1, #10
 80030e4:	430a      	orrs	r2, r1
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_DAC_MspInit+0x88>)
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	029b      	lsls	r3, r3, #10
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	2210      	movs	r2, #16
 80030fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	2203      	movs	r2, #3
 8003100:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	193b      	adds	r3, r7, r4
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	193a      	adds	r2, r7, r4
 800310a:	2390      	movs	r3, #144	; 0x90
 800310c:	05db      	lsls	r3, r3, #23
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f002 f9a1 	bl	8005458 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b00b      	add	sp, #44	; 0x2c
 800311c:	bd90      	pop	{r4, r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	40007400 	.word	0x40007400
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b08b      	sub	sp, #44	; 0x2c
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003130:	2414      	movs	r4, #20
 8003132:	193b      	adds	r3, r7, r4
 8003134:	0018      	movs	r0, r3
 8003136:	2314      	movs	r3, #20
 8003138:	001a      	movs	r2, r3
 800313a:	2100      	movs	r1, #0
 800313c:	f00c fa34 	bl	800f5a8 <memset>
  if(hi2c->Instance==I2C1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a20      	ldr	r2, [pc, #128]	; (80031c8 <HAL_I2C_MspInit+0xa0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d139      	bne.n	80031be <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_I2C_MspInit+0xa4>)
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <HAL_I2C_MspInit+0xa4>)
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	02c9      	lsls	r1, r1, #11
 8003154:	430a      	orrs	r2, r1
 8003156:	615a      	str	r2, [r3, #20]
 8003158:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <HAL_I2C_MspInit+0xa4>)
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	02db      	lsls	r3, r3, #11
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003166:	0021      	movs	r1, r4
 8003168:	187b      	adds	r3, r7, r1
 800316a:	22c0      	movs	r2, #192	; 0xc0
 800316c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2212      	movs	r2, #18
 8003172:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003174:	187b      	adds	r3, r7, r1
 8003176:	2201      	movs	r2, #1
 8003178:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800317a:	187b      	adds	r3, r7, r1
 800317c:	2203      	movs	r2, #3
 800317e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003180:	187b      	adds	r3, r7, r1
 8003182:	2201      	movs	r2, #1
 8003184:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	187b      	adds	r3, r7, r1
 8003188:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <HAL_I2C_MspInit+0xa8>)
 800318a:	0019      	movs	r1, r3
 800318c:	0010      	movs	r0, r2
 800318e:	f002 f963 	bl	8005458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_I2C_MspInit+0xa4>)
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <HAL_I2C_MspInit+0xa4>)
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	0389      	lsls	r1, r1, #14
 800319c:	430a      	orrs	r2, r1
 800319e:	61da      	str	r2, [r3, #28]
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_I2C_MspInit+0xa4>)
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	039b      	lsls	r3, r3, #14
 80031a8:	4013      	ands	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	2017      	movs	r0, #23
 80031b4:	f001 fc40 	bl	8004a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80031b8:	2017      	movs	r0, #23
 80031ba:	f001 fc52 	bl	8004a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b00b      	add	sp, #44	; 0x2c
 80031c4:	bd90      	pop	{r4, r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	40005400 	.word	0x40005400
 80031cc:	40021000 	.word	0x40021000
 80031d0:	48000400 	.word	0x48000400

080031d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b08b      	sub	sp, #44	; 0x2c
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	2414      	movs	r4, #20
 80031de:	193b      	adds	r3, r7, r4
 80031e0:	0018      	movs	r0, r3
 80031e2:	2314      	movs	r3, #20
 80031e4:	001a      	movs	r2, r3
 80031e6:	2100      	movs	r1, #0
 80031e8:	f00c f9de 	bl	800f5a8 <memset>
  if(hspi->Instance==SPI1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1c      	ldr	r2, [pc, #112]	; (8003264 <HAL_SPI_MspInit+0x90>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d132      	bne.n	800325c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_SPI_MspInit+0x94>)
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_SPI_MspInit+0x94>)
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	0149      	lsls	r1, r1, #5
 8003200:	430a      	orrs	r2, r1
 8003202:	619a      	str	r2, [r3, #24]
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_SPI_MspInit+0x94>)
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	015b      	lsls	r3, r3, #5
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_SPI_MspInit+0x94>)
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_SPI_MspInit+0x94>)
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	0289      	lsls	r1, r1, #10
 800321c:	430a      	orrs	r2, r1
 800321e:	615a      	str	r2, [r3, #20]
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_SPI_MspInit+0x94>)
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	029b      	lsls	r3, r3, #10
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800322e:	0021      	movs	r1, r4
 8003230:	187b      	adds	r3, r7, r1
 8003232:	22e0      	movs	r2, #224	; 0xe0
 8003234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	187b      	adds	r3, r7, r1
 8003238:	2202      	movs	r2, #2
 800323a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	187b      	adds	r3, r7, r1
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2203      	movs	r2, #3
 8003246:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324e:	187a      	adds	r2, r7, r1
 8003250:	2390      	movs	r3, #144	; 0x90
 8003252:	05db      	lsls	r3, r3, #23
 8003254:	0011      	movs	r1, r2
 8003256:	0018      	movs	r0, r3
 8003258:	f002 f8fe 	bl	8005458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b00b      	add	sp, #44	; 0x2c
 8003262:	bd90      	pop	{r4, r7, pc}
 8003264:	40013000 	.word	0x40013000
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	05db      	lsls	r3, r3, #23
 800327c:	429a      	cmp	r2, r3
 800327e:	d10c      	bne.n	800329a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_TIM_Base_MspInit+0x6c>)
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <HAL_TIM_Base_MspInit+0x6c>)
 8003286:	2101      	movs	r1, #1
 8003288:	430a      	orrs	r2, r1
 800328a:	61da      	str	r2, [r3, #28]
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_TIM_Base_MspInit+0x6c>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2201      	movs	r2, #1
 8003292:	4013      	ands	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003298:	e01a      	b.n	80032d0 <HAL_TIM_Base_MspInit+0x64>
  else if(htim_base->Instance==TIM14)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <HAL_TIM_Base_MspInit+0x70>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d115      	bne.n	80032d0 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <HAL_TIM_Base_MspInit+0x6c>)
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_TIM_Base_MspInit+0x6c>)
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	0049      	lsls	r1, r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	61da      	str	r2, [r3, #28]
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_TIM_Base_MspInit+0x6c>)
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4013      	ands	r3, r2
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	2013      	movs	r0, #19
 80032c6:	f001 fbb7 	bl	8004a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80032ca:	2013      	movs	r0, #19
 80032cc:	f001 fbc9 	bl	8004a62 <HAL_NVIC_EnableIRQ>
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b004      	add	sp, #16
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40002000 	.word	0x40002000

080032e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b08b      	sub	sp, #44	; 0x2c
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	2414      	movs	r4, #20
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	0018      	movs	r0, r3
 80032ee:	2314      	movs	r3, #20
 80032f0:	001a      	movs	r2, r3
 80032f2:	2100      	movs	r1, #0
 80032f4:	f00c f958 	bl	800f5a8 <memset>
  if(huart->Instance==USART1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a21      	ldr	r2, [pc, #132]	; (8003384 <HAL_UART_MspInit+0xa4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d13b      	bne.n	800337a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003302:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_UART_MspInit+0xa8>)
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_UART_MspInit+0xa8>)
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	01c9      	lsls	r1, r1, #7
 800330c:	430a      	orrs	r2, r1
 800330e:	619a      	str	r2, [r3, #24]
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_UART_MspInit+0xa8>)
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	01db      	lsls	r3, r3, #7
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_UART_MspInit+0xa8>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_UART_MspInit+0xa8>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	0289      	lsls	r1, r1, #10
 8003328:	430a      	orrs	r2, r1
 800332a:	615a      	str	r2, [r3, #20]
 800332c:	4b16      	ldr	r3, [pc, #88]	; (8003388 <HAL_UART_MspInit+0xa8>)
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	029b      	lsls	r3, r3, #10
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800333a:	193b      	adds	r3, r7, r4
 800333c:	22c0      	movs	r2, #192	; 0xc0
 800333e:	00d2      	lsls	r2, r2, #3
 8003340:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	0021      	movs	r1, r4
 8003344:	187b      	adds	r3, r7, r1
 8003346:	2202      	movs	r2, #2
 8003348:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003350:	187b      	adds	r3, r7, r1
 8003352:	2203      	movs	r2, #3
 8003354:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003356:	187b      	adds	r3, r7, r1
 8003358:	2201      	movs	r2, #1
 800335a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335c:	187a      	adds	r2, r7, r1
 800335e:	2390      	movs	r3, #144	; 0x90
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	0011      	movs	r1, r2
 8003364:	0018      	movs	r0, r3
 8003366:	f002 f877 	bl	8005458 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	2100      	movs	r1, #0
 800336e:	201b      	movs	r0, #27
 8003370:	f001 fb62 	bl	8004a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003374:	201b      	movs	r0, #27
 8003376:	f001 fb74 	bl	8004a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b00b      	add	sp, #44	; 0x2c
 8003380:	bd90      	pop	{r4, r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	40013800 	.word	0x40013800
 8003388:	40021000 	.word	0x40021000

0800338c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339a:	e7fe      	b.n	800339a <HardFault_Handler+0x4>

0800339c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b4:	f000 f8e4 	bl	8003580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	015b      	lsls	r3, r3, #5
 80033c6:	0018      	movs	r0, r3
 80033c8:	f002 fa14 	bl	80057f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	019b      	lsls	r3, r3, #6
 80033d0:	0018      	movs	r0, r3
 80033d2:	f002 fa0f 	bl	80057f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <DMA1_Channel1_IRQHandler+0x14>)
 80033e2:	0018      	movs	r0, r3
 80033e4:	f001 ff41 	bl	800526a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	2000096c 	.word	0x2000096c

080033f4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	statusLedController();
 80033f8:	f7fe f85e 	bl	80014b8 <statusLedController>

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <TIM14_IRQHandler+0x18>)
 80033fe:	0018      	movs	r0, r3
 8003400:	f006 fb9c 	bl	8009b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	20000924 	.word	0x20000924

08003410 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <I2C1_IRQHandler+0x2c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	23e0      	movs	r3, #224	; 0xe0
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4013      	ands	r3, r2
 8003420:	d004      	beq.n	800342c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <I2C1_IRQHandler+0x2c>)
 8003424:	0018      	movs	r0, r3
 8003426:	f002 fcd1 	bl	8005dcc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800342a:	e003      	b.n	8003434 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <I2C1_IRQHandler+0x2c>)
 800342e:	0018      	movs	r0, r3
 8003430:	f002 fcb2 	bl	8005d98 <HAL_I2C_EV_IRQHandler>
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	2000065c 	.word	0x2000065c

08003440 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	serial_ISR(&huart1);
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <USART1_IRQHandler+0x1c>)
 8003446:	0018      	movs	r0, r3
 8003448:	f7fe fc86 	bl	8001d58 <serial_ISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <USART1_IRQHandler+0x1c>)
 800344e:	0018      	movs	r0, r3
 8003450:	f007 f802 	bl	800a458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	2000077c 	.word	0x2000077c

08003460 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */
  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <CEC_CAN_IRQHandler+0x14>)
 8003466:	0018      	movs	r0, r3
 8003468:	f001 f826 	bl	80044b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	200006e4 	.word	0x200006e4

08003478 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <USB_IRQHandler+0x14>)
 800347e:	0018      	movs	r0, r3
 8003480:	f003 fde4 	bl	800704c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	200016bc 	.word	0x200016bc

08003490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800349c:	480d      	ldr	r0, [pc, #52]	; (80034d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800349e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034a0:	480d      	ldr	r0, [pc, #52]	; (80034d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80034a2:	490e      	ldr	r1, [pc, #56]	; (80034dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80034a4:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <LoopForever+0xe>)
  movs r3, #0
 80034a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034a8:	e002      	b.n	80034b0 <LoopCopyDataInit>

080034aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ae:	3304      	adds	r3, #4

080034b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034b4:	d3f9      	bcc.n	80034aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034b6:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034b8:	4c0b      	ldr	r4, [pc, #44]	; (80034e8 <LoopForever+0x16>)
  movs r3, #0
 80034ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034bc:	e001      	b.n	80034c2 <LoopFillZerobss>

080034be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034c0:	3204      	adds	r2, #4

080034c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034c4:	d3fb      	bcc.n	80034be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034c6:	f7ff ffe3 	bl	8003490 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80034ca:	f00c f849 	bl	800f560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ce:	f7fd fb8b 	bl	8000be8 <main>

080034d2 <LoopForever>:

LoopForever:
    b LoopForever
 80034d2:	e7fe      	b.n	80034d2 <LoopForever>
  ldr   r0, =_estack
 80034d4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80034d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034dc:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 80034e0:	0800f860 	.word	0x0800f860
  ldr r2, =_sbss
 80034e4:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 80034e8:	200019b0 	.word	0x200019b0

080034ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034ec:	e7fe      	b.n	80034ec <ADC1_COMP_IRQHandler>
	...

080034f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_Init+0x24>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_Init+0x24>)
 80034fa:	2110      	movs	r1, #16
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003500:	2000      	movs	r0, #0
 8003502:	f000 f809 	bl	8003518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003506:	f7ff fcbf 	bl	8002e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	40022000 	.word	0x40022000

08003518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003520:	4b14      	ldr	r3, [pc, #80]	; (8003574 <HAL_InitTick+0x5c>)
 8003522:	681c      	ldr	r4, [r3, #0]
 8003524:	4b14      	ldr	r3, [pc, #80]	; (8003578 <HAL_InitTick+0x60>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	0019      	movs	r1, r3
 800352a:	23fa      	movs	r3, #250	; 0xfa
 800352c:	0098      	lsls	r0, r3, #2
 800352e:	f7fc fdeb 	bl	8000108 <__udivsi3>
 8003532:	0003      	movs	r3, r0
 8003534:	0019      	movs	r1, r3
 8003536:	0020      	movs	r0, r4
 8003538:	f7fc fde6 	bl	8000108 <__udivsi3>
 800353c:	0003      	movs	r3, r0
 800353e:	0018      	movs	r0, r3
 8003540:	f001 fa9f 	bl	8004a82 <HAL_SYSTICK_Config>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d001      	beq.n	800354c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e00f      	b.n	800356c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d80b      	bhi.n	800356a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	2301      	movs	r3, #1
 8003556:	425b      	negs	r3, r3
 8003558:	2200      	movs	r2, #0
 800355a:	0018      	movs	r0, r3
 800355c:	f001 fa6c 	bl	8004a38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_InitTick+0x64>)
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e000      	b.n	800356c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b003      	add	sp, #12
 8003572:	bd90      	pop	{r4, r7, pc}
 8003574:	2000010c 	.word	0x2000010c
 8003578:	20000114 	.word	0x20000114
 800357c:	20000110 	.word	0x20000110

08003580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_IncTick+0x1c>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	001a      	movs	r2, r3
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_IncTick+0x20>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	18d2      	adds	r2, r2, r3
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <HAL_IncTick+0x20>)
 8003592:	601a      	str	r2, [r3, #0]
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	20000114 	.word	0x20000114
 80035a0:	20000a24 	.word	0x20000a24

080035a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  return uwTick;
 80035a8:	4b02      	ldr	r3, [pc, #8]	; (80035b4 <HAL_GetTick+0x10>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	20000a24 	.word	0x20000a24

080035b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7ff fff0 	bl	80035a4 <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3301      	adds	r3, #1
 80035d0:	d005      	beq.n	80035de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_Delay+0x44>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	001a      	movs	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	f7ff ffe0 	bl	80035a4 <HAL_GetTick>
 80035e4:	0002      	movs	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d8f7      	bhi.n	80035e0 <HAL_Delay+0x28>
  {
  }
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b004      	add	sp, #16
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	20000114 	.word	0x20000114

08003600 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003608:	230f      	movs	r3, #15
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e125      	b.n	800386a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2234      	movs	r2, #52	; 0x34
 8003630:	2100      	movs	r1, #0
 8003632:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0018      	movs	r0, r3
 8003638:	f7ff fc4a 	bl	8002ed0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	2210      	movs	r2, #16
 8003642:	4013      	ands	r3, r2
 8003644:	d000      	beq.n	8003648 <HAL_ADC_Init+0x48>
 8003646:	e103      	b.n	8003850 <HAL_ADC_Init+0x250>
 8003648:	230f      	movs	r3, #15
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d000      	beq.n	8003654 <HAL_ADC_Init+0x54>
 8003652:	e0fd      	b.n	8003850 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2204      	movs	r2, #4
 800365c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800365e:	d000      	beq.n	8003662 <HAL_ADC_Init+0x62>
 8003660:	e0f6      	b.n	8003850 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	4a83      	ldr	r2, [pc, #524]	; (8003874 <HAL_ADC_Init+0x274>)
 8003668:	4013      	ands	r3, r2
 800366a:	2202      	movs	r2, #2
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2203      	movs	r2, #3
 800367a:	4013      	ands	r3, r2
 800367c:	2b01      	cmp	r3, #1
 800367e:	d112      	bne.n	80036a6 <HAL_ADC_Init+0xa6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	2b01      	cmp	r3, #1
 800368c:	d009      	beq.n	80036a2 <HAL_ADC_Init+0xa2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	401a      	ands	r2, r3
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	429a      	cmp	r2, r3
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_Init+0xa6>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_ADC_Init+0xa8>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d116      	bne.n	80036da <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2218      	movs	r2, #24
 80036b4:	4393      	bics	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	0899      	lsrs	r1, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4964      	ldr	r1, [pc, #400]	; (8003878 <HAL_ADC_Init+0x278>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7e1b      	ldrb	r3, [r3, #24]
 80036ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7e5b      	ldrb	r3, [r3, #25]
 80036f4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e9b      	ldrb	r3, [r3, #26]
 80036fc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80036fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2b01      	cmp	r3, #1
 8003706:	d002      	beq.n	800370e <HAL_ADC_Init+0x10e>
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	015b      	lsls	r3, r3, #5
 800370c:	e000      	b.n	8003710 <HAL_ADC_Init+0x110>
 800370e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003710:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003716:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d101      	bne.n	8003724 <HAL_ADC_Init+0x124>
 8003720:	2304      	movs	r3, #4
 8003722:	e000      	b.n	8003726 <HAL_ADC_Init+0x126>
 8003724:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003726:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2124      	movs	r1, #36	; 0x24
 800372c:	5c5b      	ldrb	r3, [r3, r1]
 800372e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003730:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4313      	orrs	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7edb      	ldrb	r3, [r3, #27]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d115      	bne.n	800376c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e9b      	ldrb	r3, [r3, #26]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	0252      	lsls	r2, r2, #9
 800374e:	4313      	orrs	r3, r2
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	e00b      	b.n	800376c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	2220      	movs	r2, #32
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	2201      	movs	r2, #1
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	23c2      	movs	r3, #194	; 0xc2
 8003772:	33ff      	adds	r3, #255	; 0xff
 8003774:	429a      	cmp	r2, r3
 8003776:	d007      	beq.n	8003788 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003780:	4313      	orrs	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68d9      	ldr	r1, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	055b      	lsls	r3, r3, #21
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d01b      	beq.n	80037dc <HAL_ADC_Init+0x1dc>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d017      	beq.n	80037dc <HAL_ADC_Init+0x1dc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d013      	beq.n	80037dc <HAL_ADC_Init+0x1dc>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d00f      	beq.n	80037dc <HAL_ADC_Init+0x1dc>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d00b      	beq.n	80037dc <HAL_ADC_Init+0x1dc>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d007      	beq.n	80037dc <HAL_ADC_Init+0x1dc>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	2b06      	cmp	r3, #6
 80037d2:	d003      	beq.n	80037dc <HAL_ADC_Init+0x1dc>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	2b07      	cmp	r3, #7
 80037da:	d112      	bne.n	8003802 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2107      	movs	r1, #7
 80037e8:	438a      	bics	r2, r1
 80037ea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6959      	ldr	r1, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	2207      	movs	r2, #7
 80037f8:	401a      	ands	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4a1c      	ldr	r2, [pc, #112]	; (800387c <HAL_ADC_Init+0x27c>)
 800380a:	4013      	ands	r3, r2
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	d10b      	bne.n	800382a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	2203      	movs	r2, #3
 800381e:	4393      	bics	r3, r2
 8003820:	2201      	movs	r2, #1
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003828:	e01c      	b.n	8003864 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	2212      	movs	r2, #18
 8003830:	4393      	bics	r3, r2
 8003832:	2210      	movs	r2, #16
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2201      	movs	r2, #1
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003846:	230f      	movs	r3, #15
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800384e:	e009      	b.n	8003864 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	2210      	movs	r2, #16
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800385c:	230f      	movs	r3, #15
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	781b      	ldrb	r3, [r3, #0]
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b004      	add	sp, #16
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	fffffefd 	.word	0xfffffefd
 8003878:	fffe0219 	.word	0xfffe0219
 800387c:	833fffe7 	.word	0x833fffe7

08003880 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388c:	2317      	movs	r3, #23
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2204      	movs	r2, #4
 800389c:	4013      	ands	r3, r2
 800389e:	d15e      	bne.n	800395e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2234      	movs	r2, #52	; 0x34
 80038a4:	5c9b      	ldrb	r3, [r3, r2]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_Start_DMA+0x2e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e05e      	b.n	800396c <HAL_ADC_Start_DMA+0xec>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2234      	movs	r2, #52	; 0x34
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	7e5b      	ldrb	r3, [r3, #25]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d007      	beq.n	80038ce <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80038be:	2317      	movs	r3, #23
 80038c0:	18fc      	adds	r4, r7, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 f97b 	bl	8003bc0 <ADC_Enable>
 80038ca:	0003      	movs	r3, r0
 80038cc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038ce:	2317      	movs	r3, #23
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d146      	bne.n	8003966 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	4a25      	ldr	r2, [pc, #148]	; (8003974 <HAL_ADC_Start_DMA+0xf4>)
 80038de:	4013      	ands	r3, r2
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	0052      	lsls	r2, r2, #1
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2234      	movs	r2, #52	; 0x34
 80038f4:	2100      	movs	r1, #0
 80038f6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <HAL_ADC_Start_DMA+0xf8>)
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <HAL_ADC_Start_DMA+0xfc>)
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HAL_ADC_Start_DMA+0x100>)
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	221c      	movs	r2, #28
 8003916:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2110      	movs	r1, #16
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2101      	movs	r1, #1
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3340      	adds	r3, #64	; 0x40
 8003942:	0019      	movs	r1, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f001 fbac 	bl	80050a4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2104      	movs	r1, #4
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	e003      	b.n	8003966 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800395e:	2317      	movs	r3, #23
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003966:	2317      	movs	r3, #23
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	781b      	ldrb	r3, [r3, #0]
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b007      	add	sp, #28
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	fffff0fe 	.word	0xfffff0fe
 8003978:	08003cb9 	.word	0x08003cb9
 800397c:	08003d6d 	.word	0x08003d6d
 8003980:	08003d8b 	.word	0x08003d8b

08003984 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ae:	230f      	movs	r3, #15
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	055b      	lsls	r3, r3, #21
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d011      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x46>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d00d      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x46>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d009      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x46>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d005      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x46>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d001      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x46>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2234      	movs	r2, #52	; 0x34
 80039ee:	5c9b      	ldrb	r3, [r3, r2]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x54>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e0d0      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x1f6>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2234      	movs	r2, #52	; 0x34
 80039fc:	2101      	movs	r1, #1
 80039fe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2204      	movs	r2, #4
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d000      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x6a>
 8003a0c:	e0b4      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a64      	ldr	r2, [pc, #400]	; (8003ba4 <HAL_ADC_ConfigChannel+0x200>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x76>
 8003a18:	e082      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	409a      	lsls	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	055b      	lsls	r3, r3, #21
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d037      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d033      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d02f      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d02b      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d027      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d023      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	2b06      	cmp	r3, #6
 8003a6a:	d01f      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	2b07      	cmp	r3, #7
 8003a72:	d01b      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2107      	movs	r1, #7
 8003a80:	400b      	ands	r3, r1
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d012      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2107      	movs	r1, #7
 8003a92:	438a      	bics	r2, r1
 8003a94:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6959      	ldr	r1, [r3, #20]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d007      	beq.n	8003ac4 <HAL_ADC_ConfigChannel+0x120>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b11      	cmp	r3, #17
 8003aba:	d003      	beq.n	8003ac4 <HAL_ADC_ConfigChannel+0x120>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b12      	cmp	r3, #18
 8003ac2:	d163      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_ADC_ConfigChannel+0x204>)
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d009      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0x140>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b11      	cmp	r3, #17
 8003ad6:	d102      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x13a>
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	03db      	lsls	r3, r3, #15
 8003adc:	e004      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x144>
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	045b      	lsls	r3, r3, #17
 8003ae2:	e001      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x144>
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	4a2f      	ldr	r2, [pc, #188]	; (8003ba8 <HAL_ADC_ConfigChannel+0x204>)
 8003aea:	430b      	orrs	r3, r1
 8003aec:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d14a      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_ADC_ConfigChannel+0x208>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	492d      	ldr	r1, [pc, #180]	; (8003bb0 <HAL_ADC_ConfigChannel+0x20c>)
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7fc fb03 	bl	8000108 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	001a      	movs	r2, r3
 8003b06:	0013      	movs	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b10:	e002      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f9      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x16e>
 8003b1e:	e035      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4099      	lsls	r1, r3
 8003b2e:	000b      	movs	r3, r1
 8003b30:	43d9      	mvns	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	400a      	ands	r2, r1
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d007      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x1ae>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b11      	cmp	r3, #17
 8003b48:	d003      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x1ae>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b12      	cmp	r3, #18
 8003b50:	d11c      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_ADC_ConfigChannel+0x204>)
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d007      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x1ca>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b11      	cmp	r3, #17
 8003b64:	d101      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x1c6>
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_ADC_ConfigChannel+0x210>)
 8003b68:	e002      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x1cc>
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_ADC_ConfigChannel+0x214>)
 8003b6c:	e000      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x1cc>
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <HAL_ADC_ConfigChannel+0x218>)
 8003b70:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <HAL_ADC_ConfigChannel+0x204>)
 8003b72:	400b      	ands	r3, r1
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e009      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003b84:	230f      	movs	r3, #15
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2234      	movs	r2, #52	; 0x34
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b94:	230f      	movs	r3, #15
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	781b      	ldrb	r3, [r3, #0]
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	00001001 	.word	0x00001001
 8003ba8:	40012708 	.word	0x40012708
 8003bac:	2000010c 	.word	0x2000010c
 8003bb0:	000f4240 	.word	0x000f4240
 8003bb4:	ffbfffff 	.word	0xffbfffff
 8003bb8:	feffffff 	.word	0xfeffffff
 8003bbc:	ff7fffff 	.word	0xff7fffff

08003bc0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d112      	bne.n	8003c04 <ADC_Enable+0x44>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2201      	movs	r2, #1
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d009      	beq.n	8003c00 <ADC_Enable+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d101      	bne.n	8003c04 <ADC_Enable+0x44>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <ADC_Enable+0x46>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d14b      	bne.n	8003ca2 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a26      	ldr	r2, [pc, #152]	; (8003cac <ADC_Enable+0xec>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	2201      	movs	r2, #1
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e038      	b.n	8003ca4 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <ADC_Enable+0xf0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	491b      	ldr	r1, [pc, #108]	; (8003cb4 <ADC_Enable+0xf4>)
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7fc fa5d 	bl	8000108 <__udivsi3>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c52:	e002      	b.n	8003c5a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f9      	bne.n	8003c54 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c60:	f7ff fca0 	bl	80035a4 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c68:	e014      	b.n	8003c94 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c6a:	f7ff fc9b 	bl	80035a4 <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d90d      	bls.n	8003c94 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	2201      	movs	r2, #1
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e007      	b.n	8003ca4 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d1e3      	bne.n	8003c6a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b004      	add	sp, #16
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	80000017 	.word	0x80000017
 8003cb0:	2000010c 	.word	0x2000010c
 8003cb4:	000f4240 	.word	0x000f4240

08003cb8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	2250      	movs	r2, #80	; 0x50
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d140      	bne.n	8003d52 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	2280      	movs	r2, #128	; 0x80
 8003cd6:	0092      	lsls	r2, r2, #2
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	23c0      	movs	r3, #192	; 0xc0
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d12d      	bne.n	8003d48 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d129      	bne.n	8003d48 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d122      	bne.n	8003d48 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d110      	bne.n	8003d30 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	210c      	movs	r1, #12
 8003d1a:	438a      	bics	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <ADC_DMAConvCplt+0xb0>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	2201      	movs	r2, #1
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d2e:	e00b      	b.n	8003d48 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	2220      	movs	r2, #32
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	2201      	movs	r2, #1
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7fd fb3e 	bl	80013cc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003d50:	e005      	b.n	8003d5e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	0010      	movs	r0, r2
 8003d5c:	4798      	blx	r3
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b004      	add	sp, #16
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	fffffefe 	.word	0xfffffefe

08003d6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7ff fe01 	bl	8003984 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b004      	add	sp, #16
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	2240      	movs	r2, #64	; 0x40
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	2204      	movs	r2, #4
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7ff fdee 	bl	8003994 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b004      	add	sp, #16
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0f0      	b.n	8003fb4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	5c9b      	ldrb	r3, [r3, r2]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff f8e7 	bl	8002fb4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2102      	movs	r1, #2
 8003df2:	438a      	bics	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df6:	f7ff fbd5 	bl	80035a4 <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dfe:	e013      	b.n	8003e28 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e00:	f7ff fbd0 	bl	80035a4 <HAL_GetTick>
 8003e04:	0002      	movs	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b0a      	cmp	r3, #10
 8003e0c:	d90c      	bls.n	8003e28 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	0292      	lsls	r2, r2, #10
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	2105      	movs	r1, #5
 8003e22:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0c5      	b.n	8003fb4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	4013      	ands	r3, r2
 8003e32:	d1e5      	bne.n	8003e00 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2101      	movs	r1, #1
 8003e40:	430a      	orrs	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e44:	f7ff fbae 	bl	80035a4 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e4c:	e013      	b.n	8003e76 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e4e:	f7ff fba9 	bl	80035a4 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b0a      	cmp	r3, #10
 8003e5a:	d90c      	bls.n	8003e76 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	0292      	lsls	r2, r2, #10
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	2105      	movs	r1, #5
 8003e70:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e09e      	b.n	8003fb4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d0e5      	beq.n	8003e4e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7e1b      	ldrb	r3, [r3, #24]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d108      	bne.n	8003e9c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	430a      	orrs	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e007      	b.n	8003eac <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	438a      	bics	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7e5b      	ldrb	r3, [r3, #25]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d108      	bne.n	8003ec6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e007      	b.n	8003ed6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2140      	movs	r1, #64	; 0x40
 8003ed2:	438a      	bics	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7e9b      	ldrb	r3, [r3, #26]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d108      	bne.n	8003ef0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2120      	movs	r1, #32
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e007      	b.n	8003f00 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2120      	movs	r1, #32
 8003efc:	438a      	bics	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	7edb      	ldrb	r3, [r3, #27]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d108      	bne.n	8003f1a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2110      	movs	r1, #16
 8003f14:	438a      	bics	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	e007      	b.n	8003f2a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2110      	movs	r1, #16
 8003f26:	430a      	orrs	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7f1b      	ldrb	r3, [r3, #28]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d108      	bne.n	8003f44 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2108      	movs	r1, #8
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e007      	b.n	8003f54 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2108      	movs	r1, #8
 8003f50:	438a      	bics	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7f5b      	ldrb	r3, [r3, #29]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d108      	bne.n	8003f6e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2104      	movs	r1, #4
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e007      	b.n	8003f7e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2104      	movs	r1, #4
 8003f7a:	438a      	bics	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	0011      	movs	r1, r2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b004      	add	sp, #16
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fcc:	2013      	movs	r0, #19
 8003fce:	183b      	adds	r3, r7, r0
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	2120      	movs	r1, #32
 8003fd4:	5c52      	ldrb	r2, [r2, r1]
 8003fd6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fd8:	0002      	movs	r2, r0
 8003fda:	18bb      	adds	r3, r7, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d004      	beq.n	8003fec <HAL_CAN_ConfigFilter+0x30>
 8003fe2:	18bb      	adds	r3, r7, r2
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d000      	beq.n	8003fec <HAL_CAN_ConfigFilter+0x30>
 8003fea:	e0cd      	b.n	8004188 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	58d3      	ldr	r3, [r2, r3]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	0011      	movs	r1, r2
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	221f      	movs	r2, #31
 8004008:	4013      	ands	r3, r2
 800400a:	2201      	movs	r2, #1
 800400c:	409a      	lsls	r2, r3
 800400e:	0013      	movs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	2387      	movs	r3, #135	; 0x87
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	58d3      	ldr	r3, [r2, r3]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	43d2      	mvns	r2, r2
 800401e:	401a      	ands	r2, r3
 8004020:	0011      	movs	r1, r2
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	2387      	movs	r3, #135	; 0x87
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d129      	bne.n	8004086 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	2383      	movs	r3, #131	; 0x83
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	58d3      	ldr	r3, [r2, r3]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	43d2      	mvns	r2, r2
 800403e:	401a      	ands	r2, r3
 8004040:	0011      	movs	r1, r2
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	2383      	movs	r3, #131	; 0x83
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800405c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3248      	adds	r2, #72	; 0x48
 8004062:	00d2      	lsls	r2, r2, #3
 8004064:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004078:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	3348      	adds	r3, #72	; 0x48
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	18cb      	adds	r3, r1, r3
 8004082:	3304      	adds	r3, #4
 8004084:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d128      	bne.n	80040e0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	2383      	movs	r3, #131	; 0x83
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	58d2      	ldr	r2, [r2, r3]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	431a      	orrs	r2, r3
 800409a:	0011      	movs	r1, r2
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	2383      	movs	r3, #131	; 0x83
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040b6:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3248      	adds	r2, #72	; 0x48
 80040bc:	00d2      	lsls	r2, r2, #3
 80040be:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040d4:	6979      	ldr	r1, [r7, #20]
 80040d6:	3348      	adds	r3, #72	; 0x48
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	18cb      	adds	r3, r1, r3
 80040dc:	3304      	adds	r3, #4
 80040de:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10c      	bne.n	8004102 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	2381      	movs	r3, #129	; 0x81
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	58d3      	ldr	r3, [r2, r3]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	43d2      	mvns	r2, r2
 80040f4:	401a      	ands	r2, r3
 80040f6:	0011      	movs	r1, r2
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	2381      	movs	r3, #129	; 0x81
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	50d1      	str	r1, [r2, r3]
 8004100:	e00a      	b.n	8004118 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	2381      	movs	r3, #129	; 0x81
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	58d2      	ldr	r2, [r2, r3]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	431a      	orrs	r2, r3
 800410e:	0011      	movs	r1, r2
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	2381      	movs	r3, #129	; 0x81
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	2385      	movs	r3, #133	; 0x85
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	58d3      	ldr	r3, [r2, r3]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	43d2      	mvns	r2, r2
 800412c:	401a      	ands	r2, r3
 800412e:	0011      	movs	r1, r2
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	2385      	movs	r3, #133	; 0x85
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	50d1      	str	r1, [r2, r3]
 8004138:	e00a      	b.n	8004150 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	2385      	movs	r3, #133	; 0x85
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	58d2      	ldr	r2, [r2, r3]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	431a      	orrs	r2, r3
 8004146:	0011      	movs	r1, r2
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	2385      	movs	r3, #133	; 0x85
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10a      	bne.n	800416e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	2387      	movs	r3, #135	; 0x87
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	58d2      	ldr	r2, [r2, r3]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	431a      	orrs	r2, r3
 8004164:	0011      	movs	r1, r2
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	2387      	movs	r3, #135	; 0x87
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	58d3      	ldr	r3, [r2, r3]
 8004176:	2201      	movs	r2, #1
 8004178:	4393      	bics	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e007      	b.n	8004198 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2280      	movs	r2, #128	; 0x80
 800418e:	02d2      	lsls	r2, r2, #11
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
  }
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b006      	add	sp, #24
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	5c9b      	ldrb	r3, [r3, r2]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d12f      	bne.n	8004214 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	2102      	movs	r1, #2
 80041ba:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2101      	movs	r1, #1
 80041c8:	438a      	bics	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041cc:	f7ff f9ea 	bl	80035a4 <HAL_GetTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041d4:	e013      	b.n	80041fe <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041d6:	f7ff f9e5 	bl	80035a4 <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b0a      	cmp	r3, #10
 80041e2:	d90c      	bls.n	80041fe <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	0292      	lsls	r2, r2, #10
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	2105      	movs	r1, #5
 80041f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e012      	b.n	8004224 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	4013      	ands	r3, r2
 8004208:	d1e5      	bne.n	80041d6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e007      	b.n	8004224 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	0312      	lsls	r2, r2, #12
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
  }
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b004      	add	sp, #16
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800423a:	2017      	movs	r0, #23
 800423c:	183b      	adds	r3, r7, r0
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	2120      	movs	r1, #32
 8004242:	5c52      	ldrb	r2, [r2, r1]
 8004244:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004246:	0002      	movs	r2, r0
 8004248:	18bb      	adds	r3, r7, r2
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d004      	beq.n	800425a <HAL_CAN_GetRxMessage+0x2e>
 8004250:	18bb      	adds	r3, r7, r2
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d000      	beq.n	800425a <HAL_CAN_GetRxMessage+0x2e>
 8004258:	e0f8      	b.n	800444c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10e      	bne.n	800427e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2203      	movs	r2, #3
 8004268:	4013      	ands	r3, r2
 800426a:	d117      	bne.n	800429c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	0392      	lsls	r2, r2, #14
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0ee      	b.n	800445c <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2203      	movs	r2, #3
 8004286:	4013      	ands	r3, r2
 8004288:	d108      	bne.n	800429c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	0392      	lsls	r2, r2, #14
 8004292:	431a      	orrs	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0df      	b.n	800445c <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	321b      	adds	r2, #27
 80042a4:	0112      	lsls	r2, r2, #4
 80042a6:	58d3      	ldr	r3, [r2, r3]
 80042a8:	2204      	movs	r2, #4
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	321b      	adds	r2, #27
 80042c0:	0112      	lsls	r2, r2, #4
 80042c2:	58d3      	ldr	r3, [r2, r3]
 80042c4:	0d5b      	lsrs	r3, r3, #21
 80042c6:	055b      	lsls	r3, r3, #21
 80042c8:	0d5a      	lsrs	r2, r3, #21
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e00a      	b.n	80042e6 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	321b      	adds	r2, #27
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	58d3      	ldr	r3, [r2, r3]
 80042dc:	08db      	lsrs	r3, r3, #3
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	08da      	lsrs	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	321b      	adds	r2, #27
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	58d3      	ldr	r3, [r2, r3]
 80042f2:	2202      	movs	r2, #2
 80042f4:	401a      	ands	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	331b      	adds	r3, #27
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	18d3      	adds	r3, r2, r3
 8004306:	3304      	adds	r3, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	220f      	movs	r2, #15
 800430c:	401a      	ands	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	331b      	adds	r3, #27
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	18d3      	adds	r3, r2, r3
 800431e:	3304      	adds	r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	401a      	ands	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	331b      	adds	r3, #27
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	18d3      	adds	r3, r2, r3
 8004338:	3304      	adds	r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	0c1a      	lsrs	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	23dc      	movs	r3, #220	; 0xdc
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	188a      	adds	r2, r1, r2
 8004354:	18d3      	adds	r3, r2, r3
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6819      	ldr	r1, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	23dc      	movs	r3, #220	; 0xdc
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	0112      	lsls	r2, r2, #4
 800436a:	188a      	adds	r2, r1, r2
 800436c:	18d3      	adds	r3, r2, r3
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0a1a      	lsrs	r2, r3, #8
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	23dc      	movs	r3, #220	; 0xdc
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	0112      	lsls	r2, r2, #4
 8004386:	188a      	adds	r2, r1, r2
 8004388:	18d3      	adds	r3, r2, r3
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0c1a      	lsrs	r2, r3, #16
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	3302      	adds	r3, #2
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	23dc      	movs	r3, #220	; 0xdc
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	188a      	adds	r2, r1, r2
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	0e1a      	lsrs	r2, r3, #24
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3303      	adds	r3, #3
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6819      	ldr	r1, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	23de      	movs	r3, #222	; 0xde
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	0112      	lsls	r2, r2, #4
 80043be:	188a      	adds	r2, r1, r2
 80043c0:	18d3      	adds	r3, r2, r3
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	23de      	movs	r3, #222	; 0xde
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	188a      	adds	r2, r1, r2
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	0a1a      	lsrs	r2, r3, #8
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	3305      	adds	r3, #5
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6819      	ldr	r1, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	23de      	movs	r3, #222	; 0xde
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	188a      	adds	r2, r1, r2
 80043f6:	18d3      	adds	r3, r2, r3
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	0c1a      	lsrs	r2, r3, #16
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	3306      	adds	r3, #6
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	23de      	movs	r3, #222	; 0xde
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	188a      	adds	r2, r1, r2
 8004412:	18d3      	adds	r3, r2, r3
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e1a      	lsrs	r2, r3, #24
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	3307      	adds	r3, #7
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d108      	bne.n	8004438 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2120      	movs	r1, #32
 8004432:	430a      	orrs	r2, r1
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e007      	b.n	8004448 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2120      	movs	r1, #32
 8004444:	430a      	orrs	r2, r1
 8004446:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e007      	b.n	800445c <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2280      	movs	r2, #128	; 0x80
 8004452:	02d2      	lsls	r2, r2, #11
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
  }
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b006      	add	sp, #24
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800446e:	200f      	movs	r0, #15
 8004470:	183b      	adds	r3, r7, r0
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	2120      	movs	r1, #32
 8004476:	5c52      	ldrb	r2, [r2, r1]
 8004478:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800447a:	0002      	movs	r2, r0
 800447c:	18bb      	adds	r3, r7, r2
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d003      	beq.n	800448c <HAL_CAN_ActivateNotification+0x28>
 8004484:	18bb      	adds	r3, r7, r2
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d109      	bne.n	80044a0 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6959      	ldr	r1, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e007      	b.n	80044b0 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	2280      	movs	r2, #128	; 0x80
 80044a6:	02d2      	lsls	r2, r2, #11
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
  }
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b004      	add	sp, #16
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2201      	movs	r2, #1
 80044f8:	4013      	ands	r3, r2
 80044fa:	d100      	bne.n	80044fe <HAL_CAN_IRQHandler+0x46>
 80044fc:	e084      	b.n	8004608 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2201      	movs	r2, #1
 8004502:	4013      	ands	r3, r2
 8004504:	d024      	beq.n	8004550 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2202      	movs	r2, #2
 8004512:	4013      	ands	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0018      	movs	r0, r3
 800451a:	f000 f981 	bl	8004820 <HAL_CAN_TxMailbox0CompleteCallback>
 800451e:	e017      	b.n	8004550 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2204      	movs	r2, #4
 8004524:	4013      	ands	r3, r2
 8004526:	d005      	beq.n	8004534 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	0112      	lsls	r2, r2, #4
 800452e:	4313      	orrs	r3, r2
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e00d      	b.n	8004550 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2208      	movs	r2, #8
 8004538:	4013      	ands	r3, r2
 800453a:	d005      	beq.n	8004548 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	0152      	lsls	r2, r2, #5
 8004542:	4313      	orrs	r3, r2
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	e003      	b.n	8004550 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 f980 	bl	8004850 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4013      	ands	r3, r2
 8004558:	d028      	beq.n	80045ac <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	0052      	lsls	r2, r2, #1
 8004562:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4013      	ands	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0018      	movs	r0, r3
 8004572:	f000 f95d 	bl	8004830 <HAL_CAN_TxMailbox1CompleteCallback>
 8004576:	e019      	b.n	80045ac <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4013      	ands	r3, r2
 8004580:	d005      	beq.n	800458e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	0192      	lsls	r2, r2, #6
 8004588:	4313      	orrs	r3, r2
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e00e      	b.n	80045ac <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	4013      	ands	r3, r2
 8004596:	d005      	beq.n	80045a4 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	2280      	movs	r2, #128	; 0x80
 800459c:	01d2      	lsls	r2, r2, #7
 800459e:	4313      	orrs	r3, r2
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	e003      	b.n	80045ac <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f000 f95a 	bl	8004860 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	4013      	ands	r3, r2
 80045b4:	d028      	beq.n	8004608 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2280      	movs	r2, #128	; 0x80
 80045bc:	0252      	lsls	r2, r2, #9
 80045be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	029b      	lsls	r3, r3, #10
 80045c6:	4013      	ands	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f937 	bl	8004840 <HAL_CAN_TxMailbox2CompleteCallback>
 80045d2:	e019      	b.n	8004608 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	02db      	lsls	r3, r3, #11
 80045da:	4013      	ands	r3, r2
 80045dc:	d005      	beq.n	80045ea <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	0212      	lsls	r2, r2, #8
 80045e4:	4313      	orrs	r3, r2
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
 80045e8:	e00e      	b.n	8004608 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	031b      	lsls	r3, r3, #12
 80045f0:	4013      	ands	r3, r2
 80045f2:	d005      	beq.n	8004600 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	2280      	movs	r2, #128	; 0x80
 80045f8:	0252      	lsls	r2, r2, #9
 80045fa:	4313      	orrs	r3, r2
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	e003      	b.n	8004608 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	0018      	movs	r0, r3
 8004604:	f000 f934 	bl	8004870 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	2208      	movs	r2, #8
 800460c:	4013      	ands	r3, r2
 800460e:	d00c      	beq.n	800462a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2210      	movs	r2, #16
 8004614:	4013      	ands	r3, r2
 8004616:	d008      	beq.n	800462a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	0092      	lsls	r2, r2, #2
 800461e:	4313      	orrs	r3, r2
 8004620:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2210      	movs	r2, #16
 8004628:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2204      	movs	r2, #4
 800462e:	4013      	ands	r3, r2
 8004630:	d00b      	beq.n	800464a <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2208      	movs	r2, #8
 8004636:	4013      	ands	r3, r2
 8004638:	d007      	beq.n	800464a <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2208      	movs	r2, #8
 8004640:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f91b 	bl	8004880 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	2202      	movs	r2, #2
 800464e:	4013      	ands	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2203      	movs	r2, #3
 800465a:	4013      	ands	r3, r2
 800465c:	d003      	beq.n	8004666 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	0018      	movs	r0, r3
 8004662:	f7fc ff11 	bl	8001488 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	2240      	movs	r2, #64	; 0x40
 800466a:	4013      	ands	r3, r2
 800466c:	d00c      	beq.n	8004688 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2210      	movs	r2, #16
 8004672:	4013      	ands	r3, r2
 8004674:	d008      	beq.n	8004688 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	2280      	movs	r2, #128	; 0x80
 800467a:	00d2      	lsls	r2, r2, #3
 800467c:	4313      	orrs	r3, r2
 800467e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2210      	movs	r2, #16
 8004686:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2220      	movs	r2, #32
 800468c:	4013      	ands	r3, r2
 800468e:	d00b      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2208      	movs	r2, #8
 8004694:	4013      	ands	r3, r2
 8004696:	d007      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2208      	movs	r2, #8
 800469e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 f8fc 	bl	80048a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	2210      	movs	r2, #16
 80046ac:	4013      	ands	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2203      	movs	r2, #3
 80046b8:	4013      	ands	r3, r2
 80046ba:	d003      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f8e6 	bl	8004890 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	029b      	lsls	r3, r3, #10
 80046ca:	4013      	ands	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	2210      	movs	r2, #16
 80046d2:	4013      	ands	r3, r2
 80046d4:	d007      	beq.n	80046e6 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2210      	movs	r2, #16
 80046dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 f8e5 	bl	80048b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80046e6:	6a3a      	ldr	r2, [r7, #32]
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	025b      	lsls	r3, r3, #9
 80046ec:	4013      	ands	r3, r2
 80046ee:	d00b      	beq.n	8004708 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2208      	movs	r2, #8
 80046f4:	4013      	ands	r3, r2
 80046f6:	d007      	beq.n	8004708 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2208      	movs	r2, #8
 80046fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f8dc 	bl	80048c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004708:	6a3a      	ldr	r2, [r7, #32]
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	4013      	ands	r3, r2
 8004710:	d100      	bne.n	8004714 <HAL_CAN_IRQHandler+0x25c>
 8004712:	e074      	b.n	80047fe <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2204      	movs	r2, #4
 8004718:	4013      	ands	r3, r2
 800471a:	d100      	bne.n	800471e <HAL_CAN_IRQHandler+0x266>
 800471c:	e06b      	b.n	80047f6 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800471e:	6a3a      	ldr	r2, [r7, #32]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4013      	ands	r3, r2
 8004726:	d007      	beq.n	8004738 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800472e:	d003      	beq.n	8004738 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	2201      	movs	r2, #1
 8004734:	4313      	orrs	r3, r2
 8004736:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4013      	ands	r3, r2
 8004740:	d007      	beq.n	8004752 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2202      	movs	r2, #2
 8004746:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004748:	d003      	beq.n	8004752 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	2202      	movs	r2, #2
 800474e:	4313      	orrs	r3, r2
 8004750:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004752:	6a3a      	ldr	r2, [r7, #32]
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4013      	ands	r3, r2
 800475a:	d007      	beq.n	800476c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2204      	movs	r2, #4
 8004760:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004762:	d003      	beq.n	800476c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	2204      	movs	r2, #4
 8004768:	4313      	orrs	r3, r2
 800476a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	4013      	ands	r3, r2
 8004774:	d03f      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2270      	movs	r2, #112	; 0x70
 800477a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800477c:	d03b      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2270      	movs	r2, #112	; 0x70
 8004782:	4013      	ands	r3, r2
 8004784:	2b60      	cmp	r3, #96	; 0x60
 8004786:	d027      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x320>
 8004788:	d82c      	bhi.n	80047e4 <HAL_CAN_IRQHandler+0x32c>
 800478a:	2b50      	cmp	r3, #80	; 0x50
 800478c:	d01f      	beq.n	80047ce <HAL_CAN_IRQHandler+0x316>
 800478e:	d829      	bhi.n	80047e4 <HAL_CAN_IRQHandler+0x32c>
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d017      	beq.n	80047c4 <HAL_CAN_IRQHandler+0x30c>
 8004794:	d826      	bhi.n	80047e4 <HAL_CAN_IRQHandler+0x32c>
 8004796:	2b30      	cmp	r3, #48	; 0x30
 8004798:	d00f      	beq.n	80047ba <HAL_CAN_IRQHandler+0x302>
 800479a:	d823      	bhi.n	80047e4 <HAL_CAN_IRQHandler+0x32c>
 800479c:	2b10      	cmp	r3, #16
 800479e:	d002      	beq.n	80047a6 <HAL_CAN_IRQHandler+0x2ee>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d005      	beq.n	80047b0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80047a4:	e01e      	b.n	80047e4 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	2208      	movs	r2, #8
 80047aa:	4313      	orrs	r3, r2
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047ae:	e01a      	b.n	80047e6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	2210      	movs	r2, #16
 80047b4:	4313      	orrs	r3, r2
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047b8:	e015      	b.n	80047e6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	2220      	movs	r2, #32
 80047be:	4313      	orrs	r3, r2
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047c2:	e010      	b.n	80047e6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	2240      	movs	r2, #64	; 0x40
 80047c8:	4313      	orrs	r3, r2
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047cc:	e00b      	b.n	80047e6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2280      	movs	r2, #128	; 0x80
 80047d2:	4313      	orrs	r3, r2
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047d6:	e006      	b.n	80047e6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	0052      	lsls	r2, r2, #1
 80047de:	4313      	orrs	r3, r2
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047e2:	e000      	b.n	80047e6 <HAL_CAN_IRQHandler+0x32e>
            break;
 80047e4:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2170      	movs	r1, #112	; 0x70
 80047f2:	438a      	bics	r2, r1
 80047f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2204      	movs	r2, #4
 80047fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 f85c 	bl	80048d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b00a      	add	sp, #40	; 0x28
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b002      	add	sp, #8
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b002      	add	sp, #8
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b002      	add	sp, #8
 80048de:	bd80      	pop	{r7, pc}

080048e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	0002      	movs	r2, r0
 80048e8:	1dfb      	adds	r3, r7, #7
 80048ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048ec:	1dfb      	adds	r3, r7, #7
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b7f      	cmp	r3, #127	; 0x7f
 80048f2:	d809      	bhi.n	8004908 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048f4:	1dfb      	adds	r3, r7, #7
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	001a      	movs	r2, r3
 80048fa:	231f      	movs	r3, #31
 80048fc:	401a      	ands	r2, r3
 80048fe:	4b04      	ldr	r3, [pc, #16]	; (8004910 <__NVIC_EnableIRQ+0x30>)
 8004900:	2101      	movs	r1, #1
 8004902:	4091      	lsls	r1, r2
 8004904:	000a      	movs	r2, r1
 8004906:	601a      	str	r2, [r3, #0]
  }
}
 8004908:	46c0      	nop			; (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}
 8004910:	e000e100 	.word	0xe000e100

08004914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	0002      	movs	r2, r0
 800491c:	6039      	str	r1, [r7, #0]
 800491e:	1dfb      	adds	r3, r7, #7
 8004920:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004922:	1dfb      	adds	r3, r7, #7
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b7f      	cmp	r3, #127	; 0x7f
 8004928:	d828      	bhi.n	800497c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800492a:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <__NVIC_SetPriority+0xd4>)
 800492c:	1dfb      	adds	r3, r7, #7
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b25b      	sxtb	r3, r3
 8004932:	089b      	lsrs	r3, r3, #2
 8004934:	33c0      	adds	r3, #192	; 0xc0
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	589b      	ldr	r3, [r3, r2]
 800493a:	1dfa      	adds	r2, r7, #7
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	0011      	movs	r1, r2
 8004940:	2203      	movs	r2, #3
 8004942:	400a      	ands	r2, r1
 8004944:	00d2      	lsls	r2, r2, #3
 8004946:	21ff      	movs	r1, #255	; 0xff
 8004948:	4091      	lsls	r1, r2
 800494a:	000a      	movs	r2, r1
 800494c:	43d2      	mvns	r2, r2
 800494e:	401a      	ands	r2, r3
 8004950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	22ff      	movs	r2, #255	; 0xff
 8004958:	401a      	ands	r2, r3
 800495a:	1dfb      	adds	r3, r7, #7
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	0018      	movs	r0, r3
 8004960:	2303      	movs	r3, #3
 8004962:	4003      	ands	r3, r0
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004968:	481f      	ldr	r0, [pc, #124]	; (80049e8 <__NVIC_SetPriority+0xd4>)
 800496a:	1dfb      	adds	r3, r7, #7
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	b25b      	sxtb	r3, r3
 8004970:	089b      	lsrs	r3, r3, #2
 8004972:	430a      	orrs	r2, r1
 8004974:	33c0      	adds	r3, #192	; 0xc0
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800497a:	e031      	b.n	80049e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <__NVIC_SetPriority+0xd8>)
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	0019      	movs	r1, r3
 8004984:	230f      	movs	r3, #15
 8004986:	400b      	ands	r3, r1
 8004988:	3b08      	subs	r3, #8
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	3306      	adds	r3, #6
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	18d3      	adds	r3, r2, r3
 8004992:	3304      	adds	r3, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1dfa      	adds	r2, r7, #7
 8004998:	7812      	ldrb	r2, [r2, #0]
 800499a:	0011      	movs	r1, r2
 800499c:	2203      	movs	r2, #3
 800499e:	400a      	ands	r2, r1
 80049a0:	00d2      	lsls	r2, r2, #3
 80049a2:	21ff      	movs	r1, #255	; 0xff
 80049a4:	4091      	lsls	r1, r2
 80049a6:	000a      	movs	r2, r1
 80049a8:	43d2      	mvns	r2, r2
 80049aa:	401a      	ands	r2, r3
 80049ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	22ff      	movs	r2, #255	; 0xff
 80049b4:	401a      	ands	r2, r3
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	0018      	movs	r0, r3
 80049bc:	2303      	movs	r3, #3
 80049be:	4003      	ands	r3, r0
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049c4:	4809      	ldr	r0, [pc, #36]	; (80049ec <__NVIC_SetPriority+0xd8>)
 80049c6:	1dfb      	adds	r3, r7, #7
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	001c      	movs	r4, r3
 80049cc:	230f      	movs	r3, #15
 80049ce:	4023      	ands	r3, r4
 80049d0:	3b08      	subs	r3, #8
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	430a      	orrs	r2, r1
 80049d6:	3306      	adds	r3, #6
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	18c3      	adds	r3, r0, r3
 80049dc:	3304      	adds	r3, #4
 80049de:	601a      	str	r2, [r3, #0]
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b003      	add	sp, #12
 80049e6:	bd90      	pop	{r4, r7, pc}
 80049e8:	e000e100 	.word	0xe000e100
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	1e5a      	subs	r2, r3, #1
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	045b      	lsls	r3, r3, #17
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d301      	bcc.n	8004a08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a04:	2301      	movs	r3, #1
 8004a06:	e010      	b.n	8004a2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <SysTick_Config+0x44>)
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a10:	2301      	movs	r3, #1
 8004a12:	425b      	negs	r3, r3
 8004a14:	2103      	movs	r1, #3
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7ff ff7c 	bl	8004914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <SysTick_Config+0x44>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <SysTick_Config+0x44>)
 8004a24:	2207      	movs	r2, #7
 8004a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b002      	add	sp, #8
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	e000e010 	.word	0xe000e010

08004a38 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	210f      	movs	r1, #15
 8004a44:	187b      	adds	r3, r7, r1
 8004a46:	1c02      	adds	r2, r0, #0
 8004a48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	187b      	adds	r3, r7, r1
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	0011      	movs	r1, r2
 8004a54:	0018      	movs	r0, r3
 8004a56:	f7ff ff5d 	bl	8004914 <__NVIC_SetPriority>
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b004      	add	sp, #16
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	0002      	movs	r2, r0
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a6e:	1dfb      	adds	r3, r7, #7
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b25b      	sxtb	r3, r3
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7ff ff33 	bl	80048e0 <__NVIC_EnableIRQ>
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7ff ffaf 	bl	80049f0 <SysTick_Config>
 8004a92:	0003      	movs	r3, r0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e056      	b.n	8004b5c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	7f5b      	ldrb	r3, [r3, #29]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7fe facd 	bl	8003060 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	791b      	ldrb	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10c      	bne.n	8004aee <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a22      	ldr	r2, [pc, #136]	; (8004b64 <HAL_CRC_Init+0xc8>)
 8004ada:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2118      	movs	r1, #24
 8004ae8:	438a      	bics	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	e00b      	b.n	8004b06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6899      	ldr	r1, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f000 f94c 	bl	8004d96 <HAL_CRCEx_Polynomial_Set>
 8004afe:	1e03      	subs	r3, r0, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e02a      	b.n	8004b5c <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	795b      	ldrb	r3, [r3, #5]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	4252      	negs	r2, r2
 8004b16:	611a      	str	r2, [r3, #16]
 8004b18:	e004      	b.n	8004b24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6912      	ldr	r2, [r2, #16]
 8004b22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2260      	movs	r2, #96	; 0x60
 8004b2c:	4393      	bics	r3, r2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	4393      	bics	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	04c11db7 	.word	0x04c11db7

08004b68 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2101      	movs	r1, #1
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d005      	beq.n	8004ba2 <HAL_CRC_Calculate+0x3a>
 8004b96:	d82d      	bhi.n	8004bf4 <HAL_CRC_Calculate+0x8c>
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d019      	beq.n	8004bd0 <HAL_CRC_Calculate+0x68>
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d020      	beq.n	8004be2 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004ba0:	e028      	b.n	8004bf4 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	e00a      	b.n	8004bbe <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	18d2      	adds	r2, r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d3f0      	bcc.n	8004ba8 <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	613b      	str	r3, [r7, #16]
      break;
 8004bce:	e012      	b.n	8004bf6 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f815 	bl	8004c06 <CRC_Handle_8>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	613b      	str	r3, [r7, #16]
      break;
 8004be0:	e009      	b.n	8004bf6 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 f89d 	bl	8004d28 <CRC_Handle_16>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	613b      	str	r3, [r7, #16]
      break;
 8004bf2:	e000      	b.n	8004bf6 <HAL_CRC_Calculate+0x8e>
      break;
 8004bf4:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004bfc:	693b      	ldr	r3, [r7, #16]
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b006      	add	sp, #24
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b088      	sub	sp, #32
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	e023      	b.n	8004c60 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	18d3      	adds	r3, r2, r3
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	3301      	adds	r3, #1
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	18cb      	adds	r3, r1, r3
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004c32:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	3302      	adds	r3, #2
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	18cb      	adds	r3, r1, r3
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004c42:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	3303      	adds	r3, #3
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	18cb      	adds	r3, r1, r3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004c56:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3d6      	bcc.n	8004c18 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d053      	beq.n	8004d1a <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2203      	movs	r2, #3
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d107      	bne.n	8004c8c <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	18d2      	adds	r2, r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d119      	bne.n	8004cca <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	18d3      	adds	r3, r2, r3
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	b21a      	sxth	r2, r3
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	3301      	adds	r3, #1
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	18cb      	adds	r3, r1, r3
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	b21a      	sxth	r2, r3
 8004cb6:	211a      	movs	r1, #26
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	187a      	adds	r2, r7, r1
 8004cc6:	8812      	ldrh	r2, [r2, #0]
 8004cc8:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2203      	movs	r2, #3
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d122      	bne.n	8004d1a <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	b21a      	sxth	r2, r3
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	18cb      	adds	r3, r1, r3
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b21a      	sxth	r2, r3
 8004cf4:	211a      	movs	r1, #26
 8004cf6:	187b      	adds	r3, r7, r1
 8004cf8:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	187a      	adds	r2, r7, r1
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	18d2      	adds	r2, r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	7812      	ldrb	r2, [r2, #0]
 8004d18:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b008      	add	sp, #32
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	e013      	b.n	8004d62 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	18d3      	adds	r3, r2, r3
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	041a      	lsls	r2, r3, #16
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	18cb      	adds	r3, r1, r3
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	0019      	movs	r1, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d3e6      	bcc.n	8004d3a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4013      	ands	r3, r2
 8004d72:	d009      	beq.n	8004d88 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	18d3      	adds	r3, r2, r3
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b006      	add	sp, #24
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2317      	movs	r3, #23
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004daa:	231f      	movs	r3, #31
 8004dac:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1e5a      	subs	r2, r3, #1
 8004db4:	613a      	str	r2, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <HAL_CRCEx_Polynomial_Set+0x36>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	221f      	movs	r2, #31
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	40da      	lsrs	r2, r3
 8004dc4:	0013      	movs	r3, r2
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d0f1      	beq.n	8004db0 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b18      	cmp	r3, #24
 8004dd0:	d00f      	beq.n	8004df2 <HAL_CRCEx_Polynomial_Set+0x5c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b18      	cmp	r3, #24
 8004dd6:	d824      	bhi.n	8004e22 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d011      	beq.n	8004e02 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d81e      	bhi.n	8004e22 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <HAL_CRCEx_Polynomial_Set+0x96>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d010      	beq.n	8004e12 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004df0:	e017      	b.n	8004e22 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	d91b      	bls.n	8004e30 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8004df8:	2317      	movs	r3, #23
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004e00:	e016      	b.n	8004e30 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b07      	cmp	r3, #7
 8004e06:	d915      	bls.n	8004e34 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8004e08:	2317      	movs	r3, #23
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004e10:	e010      	b.n	8004e34 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b0f      	cmp	r3, #15
 8004e16:	d90f      	bls.n	8004e38 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8004e18:	2317      	movs	r3, #23
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004e20:	e00a      	b.n	8004e38 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004e22:	2317      	movs	r3, #23
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	2201      	movs	r2, #1
 8004e28:	701a      	strb	r2, [r3, #0]
      break;
 8004e2a:	e006      	b.n	8004e3a <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	e004      	b.n	8004e3a <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	e002      	b.n	8004e3a <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	e000      	b.n	8004e3a <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004e38:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8004e3a:	2317      	movs	r3, #23
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10e      	bne.n	8004e62 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2218      	movs	r2, #24
 8004e54:	4393      	bics	r3, r2
 8004e56:	0019      	movs	r1, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004e62:	2317      	movs	r3, #23
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	781b      	ldrb	r3, [r3, #0]
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b006      	add	sp, #24
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e015      	b.n	8004eae <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	791b      	ldrb	r3, [r3, #4]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	0018      	movs	r0, r3
 8004e96:	f7fe f901 	bl	800309c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b002      	add	sp, #8
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	18d3      	adds	r3, r2, r3
 8004eda:	3308      	adds	r3, #8
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e004      	b.n	8004eea <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b006      	add	sp, #24
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	795b      	ldrb	r3, [r3, #5]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_DAC_ConfigChannel+0x20>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e029      	b.n	8004f70 <HAL_DAC_ConfigChannel+0x74>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2202      	movs	r2, #2
 8004f26:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8004f30:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <HAL_DAC_ConfigChannel+0x7c>)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	409a      	lsls	r2, r3
 8004f36:	0013      	movs	r3, r2
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	409a      	lsls	r2, r3
 8004f52:	0013      	movs	r3, r2
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b006      	add	sp, #24
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	00000ffe 	.word	0x00000ffe

08004f7c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	795b      	ldrb	r3, [r3, #5]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_DAC_Start+0x16>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e03b      	b.n	800500a <HAL_DAC_Start+0x8e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10f      	bne.n	8004fd8 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	223c      	movs	r2, #60	; 0x3c
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b3c      	cmp	r3, #60	; 0x3c
 8004fc4:	d11a      	bne.n	8004ffc <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	e011      	b.n	8004ffc <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	23f0      	movs	r3, #240	; 0xf0
 8004fe0:	039b      	lsls	r3, r3, #14
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	23f0      	movs	r3, #240	; 0xf0
 8004fe6:	039b      	lsls	r3, r3, #14
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d107      	bne.n	8004ffc <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2102      	movs	r1, #2
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	b002      	add	sp, #8
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e036      	b.n	8005098 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2221      	movs	r2, #33	; 0x21
 800502e:	2102      	movs	r1, #2
 8005030:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_DMA_Init+0x8c>)
 800503e:	4013      	ands	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800504a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	0018      	movs	r0, r3
 800507c:	f000 f9d0 	bl	8005420 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2221      	movs	r2, #33	; 0x21
 800508a:	2101      	movs	r1, #1
 800508c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	2100      	movs	r1, #0
 8005094:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}  
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b004      	add	sp, #16
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	ffffc00f 	.word	0xffffc00f

080050a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2317      	movs	r3, #23
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	5c9b      	ldrb	r3, [r3, r2]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_DMA_Start_IT+0x24>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e04f      	b.n	8005168 <HAL_DMA_Start_IT+0xc4>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	2101      	movs	r1, #1
 80050ce:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2221      	movs	r2, #33	; 0x21
 80050d4:	5c9b      	ldrb	r3, [r3, r2]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d13a      	bne.n	8005152 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2221      	movs	r2, #33	; 0x21
 80050e0:	2102      	movs	r1, #2
 80050e2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2101      	movs	r1, #1
 80050f6:	438a      	bics	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f960 	bl	80053c6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d008      	beq.n	8005120 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	210e      	movs	r1, #14
 800511a:	430a      	orrs	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e00f      	b.n	8005140 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	210a      	movs	r1, #10
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2104      	movs	r1, #4
 800513c:	438a      	bics	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2101      	movs	r1, #1
 800514c:	430a      	orrs	r2, r1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e007      	b.n	8005162 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	2100      	movs	r1, #0
 8005158:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800515a:	2317      	movs	r3, #23
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	2202      	movs	r2, #2
 8005160:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8005162:	2317      	movs	r3, #23
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	781b      	ldrb	r3, [r3, #0]
} 
 8005168:	0018      	movs	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	b006      	add	sp, #24
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2221      	movs	r2, #33	; 0x21
 800517c:	5c9b      	ldrb	r3, [r3, r2]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d008      	beq.n	8005196 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2204      	movs	r2, #4
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	2100      	movs	r1, #0
 8005190:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e020      	b.n	80051d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	210e      	movs	r1, #14
 80051a2:	438a      	bics	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2101      	movs	r1, #1
 80051b2:	438a      	bics	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	2101      	movs	r1, #1
 80051c0:	4091      	lsls	r1, r2
 80051c2:	000a      	movs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2221      	movs	r2, #33	; 0x21
 80051ca:	2101      	movs	r1, #1
 80051cc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	2100      	movs	r1, #0
 80051d4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	0018      	movs	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	b002      	add	sp, #8
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	210f      	movs	r1, #15
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2221      	movs	r2, #33	; 0x21
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d006      	beq.n	800520a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2204      	movs	r2, #4
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005202:	187b      	adds	r3, r7, r1
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e028      	b.n	800525c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	210e      	movs	r1, #14
 8005216:	438a      	bics	r2, r1
 8005218:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2101      	movs	r1, #1
 8005226:	438a      	bics	r2, r1
 8005228:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	2101      	movs	r1, #1
 8005234:	4091      	lsls	r1, r2
 8005236:	000a      	movs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2221      	movs	r2, #33	; 0x21
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	2100      	movs	r1, #0
 8005248:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	0010      	movs	r0, r2
 800525a:	4798      	blx	r3
    } 
  }
  return status;
 800525c:	230f      	movs	r3, #15
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	781b      	ldrb	r3, [r3, #0]
}
 8005262:	0018      	movs	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	b004      	add	sp, #16
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2204      	movs	r2, #4
 8005288:	409a      	lsls	r2, r3
 800528a:	0013      	movs	r3, r2
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4013      	ands	r3, r2
 8005290:	d024      	beq.n	80052dc <HAL_DMA_IRQHandler+0x72>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2204      	movs	r2, #4
 8005296:	4013      	ands	r3, r2
 8005298:	d020      	beq.n	80052dc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2220      	movs	r2, #32
 80052a2:	4013      	ands	r3, r2
 80052a4:	d107      	bne.n	80052b6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2104      	movs	r1, #4
 80052b2:	438a      	bics	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2104      	movs	r1, #4
 80052c0:	4091      	lsls	r1, r2
 80052c2:	000a      	movs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d100      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x66>
 80052ce:	e06a      	b.n	80053a6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	0010      	movs	r0, r2
 80052d8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80052da:	e064      	b.n	80053a6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2202      	movs	r2, #2
 80052e2:	409a      	lsls	r2, r3
 80052e4:	0013      	movs	r3, r2
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4013      	ands	r3, r2
 80052ea:	d02b      	beq.n	8005344 <HAL_DMA_IRQHandler+0xda>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2202      	movs	r2, #2
 80052f0:	4013      	ands	r3, r2
 80052f2:	d027      	beq.n	8005344 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2220      	movs	r2, #32
 80052fc:	4013      	ands	r3, r2
 80052fe:	d10b      	bne.n	8005318 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	210a      	movs	r1, #10
 800530c:	438a      	bics	r2, r1
 800530e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2221      	movs	r2, #33	; 0x21
 8005314:	2101      	movs	r1, #1
 8005316:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005320:	2102      	movs	r1, #2
 8005322:	4091      	lsls	r1, r2
 8005324:	000a      	movs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	2100      	movs	r1, #0
 800532e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	2b00      	cmp	r3, #0
 8005336:	d036      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	0010      	movs	r0, r2
 8005340:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005342:	e030      	b.n	80053a6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	2208      	movs	r2, #8
 800534a:	409a      	lsls	r2, r3
 800534c:	0013      	movs	r3, r2
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4013      	ands	r3, r2
 8005352:	d028      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x13c>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2208      	movs	r2, #8
 8005358:	4013      	ands	r3, r2
 800535a:	d024      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	210e      	movs	r1, #14
 8005368:	438a      	bics	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	2101      	movs	r1, #1
 8005376:	4091      	lsls	r1, r2
 8005378:	000a      	movs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2221      	movs	r2, #33	; 0x21
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	2100      	movs	r1, #0
 8005390:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	0010      	movs	r0, r2
 80053a2:	4798      	blx	r3
    }
   }
}  
 80053a4:	e7ff      	b.n	80053a6 <HAL_DMA_IRQHandler+0x13c>
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b004      	add	sp, #16
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2221      	movs	r2, #33	; 0x21
 80053ba:	5c9b      	ldrb	r3, [r3, r2]
 80053bc:	b2db      	uxtb	r3, r3
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b002      	add	sp, #8
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
 80053d2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	2101      	movs	r1, #1
 80053de:	4091      	lsls	r1, r2
 80053e0:	000a      	movs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d108      	bne.n	8005406 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005404:	e007      	b.n	8005416 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]
}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	b004      	add	sp, #16
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a08      	ldr	r2, [pc, #32]	; (8005450 <DMA_CalcBaseAndBitshift+0x30>)
 800542e:	4694      	mov	ip, r2
 8005430:	4463      	add	r3, ip
 8005432:	2114      	movs	r1, #20
 8005434:	0018      	movs	r0, r3
 8005436:	f7fa fe67 	bl	8000108 <__udivsi3>
 800543a:	0003      	movs	r3, r0
 800543c:	009a      	lsls	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a03      	ldr	r2, [pc, #12]	; (8005454 <DMA_CalcBaseAndBitshift+0x34>)
 8005446:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	b002      	add	sp, #8
 800544e:	bd80      	pop	{r7, pc}
 8005450:	bffdfff8 	.word	0xbffdfff8
 8005454:	40020000 	.word	0x40020000

08005458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005466:	e155      	b.n	8005714 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2101      	movs	r1, #1
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4091      	lsls	r1, r2
 8005472:	000a      	movs	r2, r1
 8005474:	4013      	ands	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d100      	bne.n	8005480 <HAL_GPIO_Init+0x28>
 800547e:	e146      	b.n	800570e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d00b      	beq.n	80054a0 <HAL_GPIO_Init+0x48>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d007      	beq.n	80054a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005494:	2b11      	cmp	r3, #17
 8005496:	d003      	beq.n	80054a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b12      	cmp	r3, #18
 800549e:	d130      	bne.n	8005502 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	2203      	movs	r2, #3
 80054ac:	409a      	lsls	r2, r3
 80054ae:	0013      	movs	r3, r2
 80054b0:	43da      	mvns	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4013      	ands	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	409a      	lsls	r2, r3
 80054c2:	0013      	movs	r3, r2
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d6:	2201      	movs	r2, #1
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	409a      	lsls	r2, r3
 80054dc:	0013      	movs	r3, r2
 80054de:	43da      	mvns	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4013      	ands	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	091b      	lsrs	r3, r3, #4
 80054ec:	2201      	movs	r2, #1
 80054ee:	401a      	ands	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	409a      	lsls	r2, r3
 80054f4:	0013      	movs	r3, r2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	2203      	movs	r2, #3
 800550e:	409a      	lsls	r2, r3
 8005510:	0013      	movs	r3, r2
 8005512:	43da      	mvns	r2, r3
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4013      	ands	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	409a      	lsls	r2, r3
 8005524:	0013      	movs	r3, r2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d003      	beq.n	8005542 <HAL_GPIO_Init+0xea>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b12      	cmp	r3, #18
 8005540:	d123      	bne.n	800558a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	08da      	lsrs	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3208      	adds	r2, #8
 800554a:	0092      	lsls	r2, r2, #2
 800554c:	58d3      	ldr	r3, [r2, r3]
 800554e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2207      	movs	r2, #7
 8005554:	4013      	ands	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	220f      	movs	r2, #15
 800555a:	409a      	lsls	r2, r3
 800555c:	0013      	movs	r3, r2
 800555e:	43da      	mvns	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4013      	ands	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2107      	movs	r1, #7
 800556e:	400b      	ands	r3, r1
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	409a      	lsls	r2, r3
 8005574:	0013      	movs	r3, r2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	08da      	lsrs	r2, r3, #3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3208      	adds	r2, #8
 8005584:	0092      	lsls	r2, r2, #2
 8005586:	6939      	ldr	r1, [r7, #16]
 8005588:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	2203      	movs	r2, #3
 8005596:	409a      	lsls	r2, r3
 8005598:	0013      	movs	r3, r2
 800559a:	43da      	mvns	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4013      	ands	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2203      	movs	r2, #3
 80055a8:	401a      	ands	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	409a      	lsls	r2, r3
 80055b0:	0013      	movs	r3, r2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	055b      	lsls	r3, r3, #21
 80055c6:	4013      	ands	r3, r2
 80055c8:	d100      	bne.n	80055cc <HAL_GPIO_Init+0x174>
 80055ca:	e0a0      	b.n	800570e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055cc:	4b57      	ldr	r3, [pc, #348]	; (800572c <HAL_GPIO_Init+0x2d4>)
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	4b56      	ldr	r3, [pc, #344]	; (800572c <HAL_GPIO_Init+0x2d4>)
 80055d2:	2101      	movs	r1, #1
 80055d4:	430a      	orrs	r2, r1
 80055d6:	619a      	str	r2, [r3, #24]
 80055d8:	4b54      	ldr	r3, [pc, #336]	; (800572c <HAL_GPIO_Init+0x2d4>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2201      	movs	r2, #1
 80055de:	4013      	ands	r3, r2
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055e4:	4a52      	ldr	r2, [pc, #328]	; (8005730 <HAL_GPIO_Init+0x2d8>)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	089b      	lsrs	r3, r3, #2
 80055ea:	3302      	adds	r3, #2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	589b      	ldr	r3, [r3, r2]
 80055f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2203      	movs	r2, #3
 80055f6:	4013      	ands	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	220f      	movs	r2, #15
 80055fc:	409a      	lsls	r2, r3
 80055fe:	0013      	movs	r3, r2
 8005600:	43da      	mvns	r2, r3
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4013      	ands	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	2390      	movs	r3, #144	; 0x90
 800560c:	05db      	lsls	r3, r3, #23
 800560e:	429a      	cmp	r2, r3
 8005610:	d019      	beq.n	8005646 <HAL_GPIO_Init+0x1ee>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a47      	ldr	r2, [pc, #284]	; (8005734 <HAL_GPIO_Init+0x2dc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <HAL_GPIO_Init+0x1ea>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a46      	ldr	r2, [pc, #280]	; (8005738 <HAL_GPIO_Init+0x2e0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00d      	beq.n	800563e <HAL_GPIO_Init+0x1e6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a45      	ldr	r2, [pc, #276]	; (800573c <HAL_GPIO_Init+0x2e4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <HAL_GPIO_Init+0x1e2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a44      	ldr	r2, [pc, #272]	; (8005740 <HAL_GPIO_Init+0x2e8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d101      	bne.n	8005636 <HAL_GPIO_Init+0x1de>
 8005632:	2304      	movs	r3, #4
 8005634:	e008      	b.n	8005648 <HAL_GPIO_Init+0x1f0>
 8005636:	2305      	movs	r3, #5
 8005638:	e006      	b.n	8005648 <HAL_GPIO_Init+0x1f0>
 800563a:	2303      	movs	r3, #3
 800563c:	e004      	b.n	8005648 <HAL_GPIO_Init+0x1f0>
 800563e:	2302      	movs	r3, #2
 8005640:	e002      	b.n	8005648 <HAL_GPIO_Init+0x1f0>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <HAL_GPIO_Init+0x1f0>
 8005646:	2300      	movs	r3, #0
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	2103      	movs	r1, #3
 800564c:	400a      	ands	r2, r1
 800564e:	0092      	lsls	r2, r2, #2
 8005650:	4093      	lsls	r3, r2
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005658:	4935      	ldr	r1, [pc, #212]	; (8005730 <HAL_GPIO_Init+0x2d8>)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	089b      	lsrs	r3, r3, #2
 800565e:	3302      	adds	r3, #2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005666:	4b37      	ldr	r3, [pc, #220]	; (8005744 <HAL_GPIO_Init+0x2ec>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	43da      	mvns	r2, r3
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	025b      	lsls	r3, r3, #9
 800567e:	4013      	ands	r3, r2
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800568a:	4b2e      	ldr	r3, [pc, #184]	; (8005744 <HAL_GPIO_Init+0x2ec>)
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005690:	4b2c      	ldr	r3, [pc, #176]	; (8005744 <HAL_GPIO_Init+0x2ec>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	43da      	mvns	r2, r3
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4013      	ands	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	4013      	ands	r3, r2
 80056aa:	d003      	beq.n	80056b4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80056b4:	4b23      	ldr	r3, [pc, #140]	; (8005744 <HAL_GPIO_Init+0x2ec>)
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ba:	4b22      	ldr	r3, [pc, #136]	; (8005744 <HAL_GPIO_Init+0x2ec>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	43da      	mvns	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	035b      	lsls	r3, r3, #13
 80056d2:	4013      	ands	r3, r2
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80056de:	4b19      	ldr	r3, [pc, #100]	; (8005744 <HAL_GPIO_Init+0x2ec>)
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <HAL_GPIO_Init+0x2ec>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	43da      	mvns	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	039b      	lsls	r3, r3, #14
 80056fc:	4013      	ands	r3, r2
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <HAL_GPIO_Init+0x2ec>)
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	3301      	adds	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	40da      	lsrs	r2, r3
 800571c:	1e13      	subs	r3, r2, #0
 800571e:	d000      	beq.n	8005722 <HAL_GPIO_Init+0x2ca>
 8005720:	e6a2      	b.n	8005468 <HAL_GPIO_Init+0x10>
  } 
}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	46bd      	mov	sp, r7
 8005728:	b006      	add	sp, #24
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40021000 	.word	0x40021000
 8005730:	40010000 	.word	0x40010000
 8005734:	48000400 	.word	0x48000400
 8005738:	48000800 	.word	0x48000800
 800573c:	48000c00 	.word	0x48000c00
 8005740:	48001000 	.word	0x48001000
 8005744:	40010400 	.word	0x40010400

08005748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	000a      	movs	r2, r1
 8005752:	1cbb      	adds	r3, r7, #2
 8005754:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	1cba      	adds	r2, r7, #2
 800575c:	8812      	ldrh	r2, [r2, #0]
 800575e:	4013      	ands	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005762:	230f      	movs	r3, #15
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e003      	b.n	8005774 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800576c:	230f      	movs	r3, #15
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005774:	230f      	movs	r3, #15
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	781b      	ldrb	r3, [r3, #0]
  }
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b004      	add	sp, #16
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	0008      	movs	r0, r1
 800578c:	0011      	movs	r1, r2
 800578e:	1cbb      	adds	r3, r7, #2
 8005790:	1c02      	adds	r2, r0, #0
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	1c7b      	adds	r3, r7, #1
 8005796:	1c0a      	adds	r2, r1, #0
 8005798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800579a:	1c7b      	adds	r3, r7, #1
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d004      	beq.n	80057ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057a2:	1cbb      	adds	r3, r7, #2
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057aa:	e003      	b.n	80057b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057ac:	1cbb      	adds	r3, r7, #2
 80057ae:	881a      	ldrh	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b002      	add	sp, #8
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	000a      	movs	r2, r1
 80057c6:	1cbb      	adds	r3, r7, #2
 80057c8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057d0:	1cbb      	adds	r3, r7, #2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4013      	ands	r3, r2
 80057d8:	041a      	lsls	r2, r3, #16
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	43db      	mvns	r3, r3
 80057de:	1cb9      	adds	r1, r7, #2
 80057e0:	8809      	ldrh	r1, [r1, #0]
 80057e2:	400b      	ands	r3, r1
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	619a      	str	r2, [r3, #24]
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b004      	add	sp, #16
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	0002      	movs	r2, r0
 80057fc:	1dbb      	adds	r3, r7, #6
 80057fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	1dba      	adds	r2, r7, #6
 8005806:	8812      	ldrh	r2, [r2, #0]
 8005808:	4013      	ands	r3, r2
 800580a:	d008      	beq.n	800581e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800580e:	1dba      	adds	r2, r7, #6
 8005810:	8812      	ldrh	r2, [r2, #0]
 8005812:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005814:	1dbb      	adds	r3, r7, #6
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	0018      	movs	r0, r3
 800581a:	f7fb fdbf 	bl	800139c <HAL_GPIO_EXTI_Callback>
  }
}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	46bd      	mov	sp, r7
 8005822:	b002      	add	sp, #8
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	40010400 	.word	0x40010400

0800582c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e082      	b.n	8005944 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2241      	movs	r2, #65	; 0x41
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d107      	bne.n	800585a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2240      	movs	r2, #64	; 0x40
 800584e:	2100      	movs	r1, #0
 8005850:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	0018      	movs	r0, r3
 8005856:	f7fd fc67 	bl	8003128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2241      	movs	r2, #65	; 0x41
 800585e:	2124      	movs	r1, #36	; 0x24
 8005860:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2101      	movs	r1, #1
 800586e:	438a      	bics	r2, r1
 8005870:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4934      	ldr	r1, [pc, #208]	; (800594c <HAL_I2C_Init+0x120>)
 800587c:	400a      	ands	r2, r1
 800587e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4931      	ldr	r1, [pc, #196]	; (8005950 <HAL_I2C_Init+0x124>)
 800588c:	400a      	ands	r2, r1
 800588e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d108      	bne.n	80058aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	0209      	lsls	r1, r1, #8
 80058a4:	430a      	orrs	r2, r1
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	e007      	b.n	80058ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2184      	movs	r1, #132	; 0x84
 80058b4:	0209      	lsls	r1, r1, #8
 80058b6:	430a      	orrs	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d104      	bne.n	80058cc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2280      	movs	r2, #128	; 0x80
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	491f      	ldr	r1, [pc, #124]	; (8005954 <HAL_I2C_Init+0x128>)
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	491a      	ldr	r1, [pc, #104]	; (8005950 <HAL_I2C_Init+0x124>)
 80058e8:	400a      	ands	r2, r1
 80058ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	0011      	movs	r1, r2
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	021a      	lsls	r2, r3, #8
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69d9      	ldr	r1, [r3, #28]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2101      	movs	r1, #1
 8005922:	430a      	orrs	r2, r1
 8005924:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2241      	movs	r2, #65	; 0x41
 8005930:	2120      	movs	r1, #32
 8005932:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2242      	movs	r2, #66	; 0x42
 800593e:	2100      	movs	r1, #0
 8005940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}
 800594c:	f0ffffff 	.word	0xf0ffffff
 8005950:	ffff7fff 	.word	0xffff7fff
 8005954:	02008000 	.word	0x02008000

08005958 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	1dbb      	adds	r3, r7, #6
 8005966:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2241      	movs	r2, #65	; 0x41
 800596c:	5c9b      	ldrb	r3, [r3, r2]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b20      	cmp	r3, #32
 8005972:	d000      	beq.n	8005976 <HAL_I2C_Slave_Transmit+0x1e>
 8005974:	e0fe      	b.n	8005b74 <HAL_I2C_Slave_Transmit+0x21c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_I2C_Slave_Transmit+0x2c>
 800597c:	1dbb      	adds	r3, r7, #6
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	0092      	lsls	r2, r2, #2
 800598a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0f2      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2240      	movs	r2, #64	; 0x40
 8005994:	5c9b      	ldrb	r3, [r3, r2]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_I2C_Slave_Transmit+0x46>
 800599a:	2302      	movs	r3, #2
 800599c:	e0eb      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2240      	movs	r2, #64	; 0x40
 80059a2:	2101      	movs	r1, #1
 80059a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059a6:	f7fd fdfd 	bl	80035a4 <HAL_GetTick>
 80059aa:	0003      	movs	r3, r0
 80059ac:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2241      	movs	r2, #65	; 0x41
 80059b2:	2121      	movs	r1, #33	; 0x21
 80059b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2242      	movs	r2, #66	; 0x42
 80059ba:	2120      	movs	r1, #32
 80059bc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1dba      	adds	r2, r7, #6
 80059ce:	8812      	ldrh	r2, [r2, #0]
 80059d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4967      	ldr	r1, [pc, #412]	; (8005b80 <HAL_I2C_Slave_Transmit+0x228>)
 80059e4:	400a      	ands	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	0013      	movs	r3, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	2108      	movs	r1, #8
 80059f6:	f000 ff6b 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 80059fa:	1e03      	subs	r3, r0, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	0209      	lsls	r1, r1, #8
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0b0      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d119      	bne.n	8005a58 <HAL_I2C_Slave_Transmit+0x100>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	0013      	movs	r3, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2108      	movs	r1, #8
 8005a32:	f000 ff4d 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 8005a36:	1e03      	subs	r3, r0, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_I2C_Slave_Transmit+0xf8>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2180      	movs	r1, #128	; 0x80
 8005a46:	0209      	lsls	r1, r1, #8
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e092      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2208      	movs	r2, #8
 8005a56:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	0259      	lsls	r1, r3, #9
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	0013      	movs	r3, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	f000 ff32 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 8005a6c:	1e03      	subs	r3, r0, #0
 8005a6e:	d02f      	beq.n	8005ad0 <HAL_I2C_Slave_Transmit+0x178>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2180      	movs	r1, #128	; 0x80
 8005a7c:	0209      	lsls	r1, r1, #8
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e077      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 ff5e 	bl	800694e <I2C_WaitOnTXISFlagUntilTimeout>
 8005a92:	1e03      	subs	r3, r0, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_I2C_Slave_Transmit+0x154>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2180      	movs	r1, #128	; 0x80
 8005aa2:	0209      	lsls	r1, r1, #8
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e064      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1d5      	bne.n	8005a86 <HAL_I2C_Slave_Transmit+0x12e>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f000 ff73 	bl	80069cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ae6:	1e03      	subs	r3, r0, #0
 8005ae8:	d012      	beq.n	8005b10 <HAL_I2C_Slave_Transmit+0x1b8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2180      	movs	r1, #128	; 0x80
 8005af6:	0209      	lsls	r1, r1, #8
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d103      	bne.n	8005b0c <HAL_I2C_Slave_Transmit+0x1b4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	645a      	str	r2, [r3, #68]	; 0x44
 8005b0a:	e001      	b.n	8005b10 <HAL_I2C_Slave_Transmit+0x1b8>
      }
      else
      {
        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e032      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2220      	movs	r2, #32
 8005b16:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	2380      	movs	r3, #128	; 0x80
 8005b1c:	0219      	lsls	r1, r3, #8
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	0013      	movs	r3, r2
 8005b26:	2201      	movs	r2, #1
 8005b28:	f000 fed2 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	1e03      	subs	r3, r0, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_I2C_Slave_Transmit+0x1ee>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	0209      	lsls	r1, r1, #8
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e017      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2180      	movs	r1, #128	; 0x80
 8005b52:	0209      	lsls	r1, r1, #8
 8005b54:	430a      	orrs	r2, r1
 8005b56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2241      	movs	r2, #65	; 0x41
 8005b5c:	2120      	movs	r1, #32
 8005b5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2242      	movs	r2, #66	; 0x42
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2240      	movs	r2, #64	; 0x40
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e000      	b.n	8005b76 <HAL_I2C_Slave_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b006      	add	sp, #24
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	ffff7fff 	.word	0xffff7fff

08005b84 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	1dbb      	adds	r3, r7, #6
 8005b92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2241      	movs	r2, #65	; 0x41
 8005b98:	5c9b      	ldrb	r3, [r3, r2]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d000      	beq.n	8005ba2 <HAL_I2C_Slave_Receive+0x1e>
 8005ba0:	e0f3      	b.n	8005d8a <HAL_I2C_Slave_Receive+0x206>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_I2C_Slave_Receive+0x2c>
 8005ba8:	1dbb      	adds	r3, r7, #6
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <HAL_I2C_Slave_Receive+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	0092      	lsls	r2, r2, #2
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0e7      	b.n	8005d8c <HAL_I2C_Slave_Receive+0x208>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2240      	movs	r2, #64	; 0x40
 8005bc0:	5c9b      	ldrb	r3, [r3, r2]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_I2C_Slave_Receive+0x46>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e0e0      	b.n	8005d8c <HAL_I2C_Slave_Receive+0x208>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2240      	movs	r2, #64	; 0x40
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bd2:	f7fd fce7 	bl	80035a4 <HAL_GetTick>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2241      	movs	r2, #65	; 0x41
 8005bde:	2122      	movs	r1, #34	; 0x22
 8005be0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2242      	movs	r2, #66	; 0x42
 8005be6:	2120      	movs	r1, #32
 8005be8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1dba      	adds	r2, r7, #6
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4961      	ldr	r1, [pc, #388]	; (8005d94 <HAL_I2C_Slave_Receive+0x210>)
 8005c10:	400a      	ands	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	0013      	movs	r3, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2108      	movs	r1, #8
 8005c22:	f000 fe55 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 8005c26:	1e03      	subs	r3, r0, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_I2C_Slave_Receive+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2180      	movs	r1, #128	; 0x80
 8005c36:	0209      	lsls	r1, r1, #8
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0a5      	b.n	8005d8c <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2208      	movs	r2, #8
 8005c46:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	0259      	lsls	r1, r3, #9
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	0013      	movs	r3, r2
 8005c56:	2201      	movs	r2, #1
 8005c58:	f000 fe3a 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 8005c5c:	1e03      	subs	r3, r0, #0
 8005c5e:	d04a      	beq.n	8005cf6 <HAL_I2C_Slave_Receive+0x172>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2180      	movs	r1, #128	; 0x80
 8005c6c:	0209      	lsls	r1, r1, #8
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e08a      	b.n	8005d8c <HAL_I2C_Slave_Receive+0x208>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f000 fee1 	bl	8006a44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c82:	1e03      	subs	r3, r0, #0
 8005c84:	d024      	beq.n	8005cd0 <HAL_I2C_Slave_Receive+0x14c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2180      	movs	r1, #128	; 0x80
 8005c92:	0209      	lsls	r1, r1, #8
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d112      	bne.n	8005ccc <HAL_I2C_Slave_Receive+0x148>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e05d      	b.n	8005d8c <HAL_I2C_Slave_Receive+0x208>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ba      	bne.n	8005c76 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 fe60 	bl	80069cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d0c:	1e03      	subs	r3, r0, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_I2C_Slave_Receive+0x1a2>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	0209      	lsls	r1, r1, #8
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e032      	b.n	8005d8c <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	0219      	lsls	r1, r3, #8
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	0013      	movs	r3, r2
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f000 fdc7 	bl	80068d0 <I2C_WaitOnFlagUntilTimeout>
 8005d42:	1e03      	subs	r3, r0, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_I2C_Slave_Receive+0x1d8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2180      	movs	r1, #128	; 0x80
 8005d52:	0209      	lsls	r1, r1, #8
 8005d54:	430a      	orrs	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e017      	b.n	8005d8c <HAL_I2C_Slave_Receive+0x208>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2180      	movs	r1, #128	; 0x80
 8005d68:	0209      	lsls	r1, r1, #8
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2241      	movs	r2, #65	; 0x41
 8005d72:	2120      	movs	r1, #32
 8005d74:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2242      	movs	r2, #66	; 0x42
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2240      	movs	r2, #64	; 0x40
 8005d82:	2100      	movs	r1, #0
 8005d84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e000      	b.n	8005d8c <HAL_I2C_Slave_Receive+0x208>
  }
  else
  {
    return HAL_BUSY;
 8005d8a:	2302      	movs	r3, #2
  }
}
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b006      	add	sp, #24
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	ffff7fff 	.word	0xffff7fff

08005d98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
  }
}
 8005dc4:	46c0      	nop			; (mov r8, r8)
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b004      	add	sp, #16
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	0a1b      	lsrs	r3, r3, #8
 8005de8:	001a      	movs	r2, r3
 8005dea:	2301      	movs	r3, #1
 8005dec:	4013      	ands	r3, r2
 8005dee:	d010      	beq.n	8005e12 <HAL_I2C_ER_IRQHandler+0x46>
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	09db      	lsrs	r3, r3, #7
 8005df4:	001a      	movs	r2, r3
 8005df6:	2301      	movs	r3, #1
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d00a      	beq.n	8005e12 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e00:	2201      	movs	r2, #1
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2280      	movs	r2, #128	; 0x80
 8005e0e:	0052      	lsls	r2, r2, #1
 8005e10:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	0a9b      	lsrs	r3, r3, #10
 8005e16:	001a      	movs	r2, r3
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d010      	beq.n	8005e40 <HAL_I2C_ER_IRQHandler+0x74>
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	09db      	lsrs	r3, r3, #7
 8005e22:	001a      	movs	r2, r3
 8005e24:	2301      	movs	r3, #1
 8005e26:	4013      	ands	r3, r2
 8005e28:	d00a      	beq.n	8005e40 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	2208      	movs	r2, #8
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	00d2      	lsls	r2, r2, #3
 8005e3e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	0a5b      	lsrs	r3, r3, #9
 8005e44:	001a      	movs	r2, r3
 8005e46:	2301      	movs	r3, #1
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d010      	beq.n	8005e6e <HAL_I2C_ER_IRQHandler+0xa2>
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	001a      	movs	r2, r3
 8005e52:	2301      	movs	r3, #1
 8005e54:	4013      	ands	r3, r2
 8005e56:	d00a      	beq.n	8005e6e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	220b      	movs	r2, #11
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d005      	beq.n	8005e88 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	0011      	movs	r1, r2
 8005e82:	0018      	movs	r0, r3
 8005e84:	f000 fbd8 	bl	8006638 <I2C_ITError>
  }
}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b006      	add	sp, #24
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e98:	46c0      	nop			; (mov r8, r8)
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	b002      	add	sp, #8
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b002      	add	sp, #8
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	0008      	movs	r0, r1
 8005eba:	0011      	movs	r1, r2
 8005ebc:	1cfb      	adds	r3, r7, #3
 8005ebe:	1c02      	adds	r2, r0, #0
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	003b      	movs	r3, r7
 8005ec4:	1c0a      	adds	r2, r1, #0
 8005ec6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b002      	add	sp, #8
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ee8:	46c0      	nop			; (mov r8, r8)
 8005eea:	46bd      	mov	sp, r7
 8005eec:	b002      	add	sp, #8
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b002      	add	sp, #8
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2240      	movs	r2, #64	; 0x40
 8005f1a:	5c9b      	ldrb	r3, [r3, r2]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <I2C_Slave_ISR_IT+0x24>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e0fa      	b.n	800611a <I2C_Slave_ISR_IT+0x21a>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2240      	movs	r2, #64	; 0x40
 8005f28:	2101      	movs	r1, #1
 8005f2a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	001a      	movs	r2, r3
 8005f32:	2301      	movs	r3, #1
 8005f34:	4013      	ands	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <I2C_Slave_ISR_IT+0x50>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	001a      	movs	r2, r3
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4013      	ands	r3, r2
 8005f42:	d005      	beq.n	8005f50 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	0011      	movs	r1, r2
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f000 f9f6 	bl	800633c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	001a      	movs	r2, r3
 8005f56:	2301      	movs	r3, #1
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d054      	beq.n	8006006 <I2C_Slave_ISR_IT+0x106>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	091b      	lsrs	r3, r3, #4
 8005f60:	001a      	movs	r2, r3
 8005f62:	2301      	movs	r3, #1
 8005f64:	4013      	ands	r3, r2
 8005f66:	d04e      	beq.n	8006006 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d12d      	bne.n	8005fce <I2C_Slave_ISR_IT+0xce>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2241      	movs	r2, #65	; 0x41
 8005f76:	5c9b      	ldrb	r3, [r3, r2]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b28      	cmp	r3, #40	; 0x28
 8005f7c:	d10b      	bne.n	8005f96 <I2C_Slave_ISR_IT+0x96>
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	049b      	lsls	r3, r3, #18
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d106      	bne.n	8005f96 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	0011      	movs	r1, r2
 8005f8e:	0018      	movs	r0, r3
 8005f90:	f000 faf8 	bl	8006584 <I2C_ITListenCplt>
 8005f94:	e036      	b.n	8006004 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2241      	movs	r2, #65	; 0x41
 8005f9a:	5c9b      	ldrb	r3, [r3, r2]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b29      	cmp	r3, #41	; 0x29
 8005fa0:	d110      	bne.n	8005fc4 <I2C_Slave_ISR_IT+0xc4>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	4a5f      	ldr	r2, [pc, #380]	; (8006124 <I2C_Slave_ISR_IT+0x224>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00c      	beq.n	8005fc4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2210      	movs	r2, #16
 8005fb0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f000 fc4a 	bl	800684e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 f957 	bl	8006270 <I2C_ITSlaveSeqCplt>
 8005fc2:	e01f      	b.n	8006004 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2210      	movs	r2, #16
 8005fca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005fcc:	e09d      	b.n	800610a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fda:	2204      	movs	r2, #4
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <I2C_Slave_ISR_IT+0xf4>
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	045b      	lsls	r3, r3, #17
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d000      	beq.n	8005ff4 <I2C_Slave_ISR_IT+0xf4>
 8005ff2:	e08a      	b.n	800610a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	0011      	movs	r1, r2
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 fb1b 	bl	8006638 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006002:	e082      	b.n	800610a <I2C_Slave_ISR_IT+0x20a>
 8006004:	e081      	b.n	800610a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	089b      	lsrs	r3, r3, #2
 800600a:	001a      	movs	r2, r3
 800600c:	2301      	movs	r3, #1
 800600e:	4013      	ands	r3, r2
 8006010:	d031      	beq.n	8006076 <I2C_Slave_ISR_IT+0x176>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	089b      	lsrs	r3, r3, #2
 8006016:	001a      	movs	r2, r3
 8006018:	2301      	movs	r3, #1
 800601a:	4013      	ands	r3, r2
 800601c:	d02b      	beq.n	8006076 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d018      	beq.n	800605a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d154      	bne.n	800610e <I2C_Slave_ISR_IT+0x20e>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4a2f      	ldr	r2, [pc, #188]	; (8006124 <I2C_Slave_ISR_IT+0x224>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d050      	beq.n	800610e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	0018      	movs	r0, r3
 8006070:	f000 f8fe 	bl	8006270 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006074:	e04b      	b.n	800610e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	08db      	lsrs	r3, r3, #3
 800607a:	001a      	movs	r2, r3
 800607c:	2301      	movs	r3, #1
 800607e:	4013      	ands	r3, r2
 8006080:	d00c      	beq.n	800609c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	08db      	lsrs	r3, r3, #3
 8006086:	001a      	movs	r2, r3
 8006088:	2301      	movs	r3, #1
 800608a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800608c:	d006      	beq.n	800609c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	0011      	movs	r1, r2
 8006094:	0018      	movs	r0, r3
 8006096:	f000 f847 	bl	8006128 <I2C_ITAddrCplt>
 800609a:	e039      	b.n	8006110 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	001a      	movs	r2, r3
 80060a2:	2301      	movs	r3, #1
 80060a4:	4013      	ands	r3, r2
 80060a6:	d033      	beq.n	8006110 <I2C_Slave_ISR_IT+0x210>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	001a      	movs	r2, r3
 80060ae:	2301      	movs	r3, #1
 80060b0:	4013      	ands	r3, r2
 80060b2:	d02d      	beq.n	8006110 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d018      	beq.n	80060f0 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	781a      	ldrb	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80060ee:	e00f      	b.n	8006110 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	2380      	movs	r3, #128	; 0x80
 80060f4:	045b      	lsls	r3, r3, #17
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d002      	beq.n	8006100 <I2C_Slave_ISR_IT+0x200>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d107      	bne.n	8006110 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 f8b4 	bl	8006270 <I2C_ITSlaveSeqCplt>
 8006108:	e002      	b.n	8006110 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	e000      	b.n	8006110 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800610e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	2100      	movs	r1, #0
 8006116:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	0018      	movs	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	b006      	add	sp, #24
 8006120:	bd80      	pop	{r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	ffff0000 	.word	0xffff0000

08006128 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006128:	b5b0      	push	{r4, r5, r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2241      	movs	r2, #65	; 0x41
 8006136:	5c9b      	ldrb	r3, [r3, r2]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	001a      	movs	r2, r3
 800613c:	2328      	movs	r3, #40	; 0x28
 800613e:	4013      	ands	r3, r2
 8006140:	2b28      	cmp	r3, #40	; 0x28
 8006142:	d000      	beq.n	8006146 <I2C_ITAddrCplt+0x1e>
 8006144:	e088      	b.n	8006258 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	b2da      	uxtb	r2, r3
 8006150:	250f      	movs	r5, #15
 8006152:	197b      	adds	r3, r7, r5
 8006154:	2101      	movs	r1, #1
 8006156:	400a      	ands	r2, r1
 8006158:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	0c1b      	lsrs	r3, r3, #16
 8006162:	b29a      	uxth	r2, r3
 8006164:	200c      	movs	r0, #12
 8006166:	183b      	adds	r3, r7, r0
 8006168:	21fe      	movs	r1, #254	; 0xfe
 800616a:	400a      	ands	r2, r1
 800616c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	b29a      	uxth	r2, r3
 8006176:	240a      	movs	r4, #10
 8006178:	193b      	adds	r3, r7, r4
 800617a:	0592      	lsls	r2, r2, #22
 800617c:	0d92      	lsrs	r2, r2, #22
 800617e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	b29a      	uxth	r2, r3
 8006188:	2308      	movs	r3, #8
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	21fe      	movs	r1, #254	; 0xfe
 800618e:	400a      	ands	r2, r1
 8006190:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d148      	bne.n	800622c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800619a:	0021      	movs	r1, r4
 800619c:	187b      	adds	r3, r7, r1
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	09db      	lsrs	r3, r3, #7
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	183b      	adds	r3, r7, r0
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	4053      	eors	r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	001a      	movs	r2, r3
 80061ae:	2306      	movs	r3, #6
 80061b0:	4013      	ands	r3, r2
 80061b2:	d120      	bne.n	80061f6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80061b4:	183b      	adds	r3, r7, r0
 80061b6:	187a      	adds	r2, r7, r1
 80061b8:	8812      	ldrh	r2, [r2, #0]
 80061ba:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d14c      	bne.n	8006268 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2208      	movs	r2, #8
 80061da:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	2100      	movs	r1, #0
 80061e2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061e4:	183b      	adds	r3, r7, r0
 80061e6:	881a      	ldrh	r2, [r3, #0]
 80061e8:	197b      	adds	r3, r7, r5
 80061ea:	7819      	ldrb	r1, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	0018      	movs	r0, r3
 80061f0:	f7ff fe5e 	bl	8005eb0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80061f4:	e038      	b.n	8006268 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80061f6:	240c      	movs	r4, #12
 80061f8:	193b      	adds	r3, r7, r4
 80061fa:	2208      	movs	r2, #8
 80061fc:	18ba      	adds	r2, r7, r2
 80061fe:	8812      	ldrh	r2, [r2, #0]
 8006200:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0011      	movs	r1, r2
 800620a:	0018      	movs	r0, r3
 800620c:	f000 fcec 	bl	8006be8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2240      	movs	r2, #64	; 0x40
 8006214:	2100      	movs	r1, #0
 8006216:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006218:	193b      	adds	r3, r7, r4
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	230f      	movs	r3, #15
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	0018      	movs	r0, r3
 8006226:	f7ff fe43 	bl	8005eb0 <HAL_I2C_AddrCallback>
}
 800622a:	e01d      	b.n	8006268 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	021a      	lsls	r2, r3, #8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	0011      	movs	r1, r2
 8006234:	0018      	movs	r0, r3
 8006236:	f000 fcd7 	bl	8006be8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2240      	movs	r2, #64	; 0x40
 800623e:	2100      	movs	r1, #0
 8006240:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006242:	230c      	movs	r3, #12
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	881a      	ldrh	r2, [r3, #0]
 8006248:	230f      	movs	r3, #15
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	7819      	ldrb	r1, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	0018      	movs	r0, r3
 8006252:	f7ff fe2d 	bl	8005eb0 <HAL_I2C_AddrCallback>
}
 8006256:	e007      	b.n	8006268 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2208      	movs	r2, #8
 800625e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2240      	movs	r2, #64	; 0x40
 8006264:	2100      	movs	r1, #0
 8006266:	5499      	strb	r1, [r3, r2]
}
 8006268:	46c0      	nop			; (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b004      	add	sp, #16
 800626e:	bdb0      	pop	{r4, r5, r7, pc}

08006270 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2242      	movs	r2, #66	; 0x42
 8006284:	2100      	movs	r1, #0
 8006286:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	0b9b      	lsrs	r3, r3, #14
 800628c:	001a      	movs	r2, r3
 800628e:	2301      	movs	r3, #1
 8006290:	4013      	ands	r3, r2
 8006292:	d008      	beq.n	80062a6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4925      	ldr	r1, [pc, #148]	; (8006334 <I2C_ITSlaveSeqCplt+0xc4>)
 80062a0:	400a      	ands	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e00d      	b.n	80062c2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	0bdb      	lsrs	r3, r3, #15
 80062aa:	001a      	movs	r2, r3
 80062ac:	2301      	movs	r3, #1
 80062ae:	4013      	ands	r3, r2
 80062b0:	d007      	beq.n	80062c2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	491e      	ldr	r1, [pc, #120]	; (8006338 <I2C_ITSlaveSeqCplt+0xc8>)
 80062be:	400a      	ands	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2241      	movs	r2, #65	; 0x41
 80062c6:	5c9b      	ldrb	r3, [r3, r2]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b29      	cmp	r3, #41	; 0x29
 80062cc:	d114      	bne.n	80062f8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2241      	movs	r2, #65	; 0x41
 80062d2:	2128      	movs	r1, #40	; 0x28
 80062d4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2221      	movs	r2, #33	; 0x21
 80062da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2101      	movs	r1, #1
 80062e0:	0018      	movs	r0, r3
 80062e2:	f000 fc81 	bl	8006be8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2240      	movs	r2, #64	; 0x40
 80062ea:	2100      	movs	r1, #0
 80062ec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7ff fdcd 	bl	8005e90 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062f6:	e019      	b.n	800632c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2241      	movs	r2, #65	; 0x41
 80062fc:	5c9b      	ldrb	r3, [r3, r2]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b2a      	cmp	r3, #42	; 0x2a
 8006302:	d113      	bne.n	800632c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2241      	movs	r2, #65	; 0x41
 8006308:	2128      	movs	r1, #40	; 0x28
 800630a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2222      	movs	r2, #34	; 0x22
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2102      	movs	r1, #2
 8006316:	0018      	movs	r0, r3
 8006318:	f000 fc66 	bl	8006be8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2240      	movs	r2, #64	; 0x40
 8006320:	2100      	movs	r1, #0
 8006322:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	0018      	movs	r0, r3
 8006328:	f7ff fdba 	bl	8005ea0 <HAL_I2C_SlaveRxCpltCallback>
}
 800632c:	46c0      	nop			; (mov r8, r8)
 800632e:	46bd      	mov	sp, r7
 8006330:	b004      	add	sp, #16
 8006332:	bd80      	pop	{r7, pc}
 8006334:	ffffbfff 	.word	0xffffbfff
 8006338:	ffff7fff 	.word	0xffff7fff

0800633c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006352:	200f      	movs	r0, #15
 8006354:	183b      	adds	r3, r7, r0
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	2141      	movs	r1, #65	; 0x41
 800635a:	5c52      	ldrb	r2, [r2, r1]
 800635c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2220      	movs	r2, #32
 8006364:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006366:	183b      	adds	r3, r7, r0
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b21      	cmp	r3, #33	; 0x21
 800636c:	d003      	beq.n	8006376 <I2C_ITSlaveCplt+0x3a>
 800636e:	183b      	adds	r3, r7, r0
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b29      	cmp	r3, #41	; 0x29
 8006374:	d109      	bne.n	800638a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006376:	4a7d      	ldr	r2, [pc, #500]	; (800656c <I2C_ITSlaveCplt+0x230>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	0011      	movs	r1, r2
 800637c:	0018      	movs	r0, r3
 800637e:	f000 fc33 	bl	8006be8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2221      	movs	r2, #33	; 0x21
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
 8006388:	e011      	b.n	80063ae <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800638a:	220f      	movs	r2, #15
 800638c:	18bb      	adds	r3, r7, r2
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b22      	cmp	r3, #34	; 0x22
 8006392:	d003      	beq.n	800639c <I2C_ITSlaveCplt+0x60>
 8006394:	18bb      	adds	r3, r7, r2
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b2a      	cmp	r3, #42	; 0x2a
 800639a:	d108      	bne.n	80063ae <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800639c:	4a74      	ldr	r2, [pc, #464]	; (8006570 <I2C_ITSlaveCplt+0x234>)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0011      	movs	r1, r2
 80063a2:	0018      	movs	r0, r3
 80063a4:	f000 fc20 	bl	8006be8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2222      	movs	r2, #34	; 0x22
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	0209      	lsls	r1, r1, #8
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	496a      	ldr	r1, [pc, #424]	; (8006574 <I2C_ITSlaveCplt+0x238>)
 80063cc:	400a      	ands	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	0018      	movs	r0, r3
 80063d4:	f000 fa3b 	bl	800684e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	0b9b      	lsrs	r3, r3, #14
 80063dc:	001a      	movs	r2, r3
 80063de:	2301      	movs	r3, #1
 80063e0:	4013      	ands	r3, r2
 80063e2:	d013      	beq.n	800640c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4962      	ldr	r1, [pc, #392]	; (8006578 <I2C_ITSlaveCplt+0x23c>)
 80063f0:	400a      	ands	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	b29a      	uxth	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	855a      	strh	r2, [r3, #42]	; 0x2a
 800640a:	e018      	b.n	800643e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	0bdb      	lsrs	r3, r3, #15
 8006410:	001a      	movs	r2, r3
 8006412:	2301      	movs	r3, #1
 8006414:	4013      	ands	r3, r2
 8006416:	d012      	beq.n	800643e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4956      	ldr	r1, [pc, #344]	; (800657c <I2C_ITSlaveCplt+0x240>)
 8006424:	400a      	ands	r2, r1
 8006426:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d006      	beq.n	800643e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	b29a      	uxth	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	001a      	movs	r2, r3
 8006444:	2301      	movs	r3, #1
 8006446:	4013      	ands	r3, r2
 8006448:	d020      	beq.n	800648c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2204      	movs	r2, #4
 800644e:	4393      	bics	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649a:	2204      	movs	r2, #4
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2242      	movs	r2, #66	; 0x42
 80064a6:	2100      	movs	r1, #0
 80064a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d013      	beq.n	80064e0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0011      	movs	r1, r2
 80064c0:	0018      	movs	r0, r3
 80064c2:	f000 f8b9 	bl	8006638 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2241      	movs	r2, #65	; 0x41
 80064ca:	5c9b      	ldrb	r3, [r3, r2]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b28      	cmp	r3, #40	; 0x28
 80064d0:	d147      	bne.n	8006562 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	0011      	movs	r1, r2
 80064d8:	0018      	movs	r0, r3
 80064da:	f000 f853 	bl	8006584 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064de:	e040      	b.n	8006562 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	4a26      	ldr	r2, [pc, #152]	; (8006580 <I2C_ITSlaveCplt+0x244>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d016      	beq.n	8006518 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7ff febf 	bl	8006270 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a22      	ldr	r2, [pc, #136]	; (8006580 <I2C_ITSlaveCplt+0x244>)
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2241      	movs	r2, #65	; 0x41
 80064fc:	2120      	movs	r1, #32
 80064fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2240      	movs	r2, #64	; 0x40
 800650a:	2100      	movs	r1, #0
 800650c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0018      	movs	r0, r3
 8006512:	f7ff fcdd 	bl	8005ed0 <HAL_I2C_ListenCpltCallback>
}
 8006516:	e024      	b.n	8006562 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2241      	movs	r2, #65	; 0x41
 800651c:	5c9b      	ldrb	r3, [r3, r2]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b22      	cmp	r3, #34	; 0x22
 8006522:	d10f      	bne.n	8006544 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2241      	movs	r2, #65	; 0x41
 8006528:	2120      	movs	r1, #32
 800652a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2240      	movs	r2, #64	; 0x40
 8006536:	2100      	movs	r1, #0
 8006538:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0018      	movs	r0, r3
 800653e:	f7ff fcaf 	bl	8005ea0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006542:	e00e      	b.n	8006562 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2241      	movs	r2, #65	; 0x41
 8006548:	2120      	movs	r1, #32
 800654a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2240      	movs	r2, #64	; 0x40
 8006556:	2100      	movs	r1, #0
 8006558:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	0018      	movs	r0, r3
 800655e:	f7ff fc97 	bl	8005e90 <HAL_I2C_SlaveTxCpltCallback>
}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	46bd      	mov	sp, r7
 8006566:	b006      	add	sp, #24
 8006568:	bd80      	pop	{r7, pc}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	00008001 	.word	0x00008001
 8006570:	00008002 	.word	0x00008002
 8006574:	fe00e800 	.word	0xfe00e800
 8006578:	ffffbfff 	.word	0xffffbfff
 800657c:	ffff7fff 	.word	0xffff7fff
 8006580:	ffff0000 	.word	0xffff0000

08006584 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a27      	ldr	r2, [pc, #156]	; (8006630 <I2C_ITListenCplt+0xac>)
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2241      	movs	r2, #65	; 0x41
 800659e:	2120      	movs	r1, #32
 80065a0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2242      	movs	r2, #66	; 0x42
 80065a6:	2100      	movs	r1, #0
 80065a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	089b      	lsrs	r3, r3, #2
 80065b4:	001a      	movs	r2, r3
 80065b6:	2301      	movs	r3, #1
 80065b8:	4013      	ands	r3, r2
 80065ba:	d022      	beq.n	8006602 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d012      	beq.n	8006602 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	2204      	movs	r2, #4
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006602:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <I2C_ITListenCplt+0xb0>)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	0011      	movs	r1, r2
 8006608:	0018      	movs	r0, r3
 800660a:	f000 faed 	bl	8006be8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2210      	movs	r2, #16
 8006614:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2240      	movs	r2, #64	; 0x40
 800661a:	2100      	movs	r1, #0
 800661c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	0018      	movs	r0, r3
 8006622:	f7ff fc55 	bl	8005ed0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	46bd      	mov	sp, r7
 800662a:	b002      	add	sp, #8
 800662c:	bd80      	pop	{r7, pc}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	ffff0000 	.word	0xffff0000
 8006634:	00008003 	.word	0x00008003

08006638 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006642:	200f      	movs	r0, #15
 8006644:	183b      	adds	r3, r7, r0
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	2141      	movs	r1, #65	; 0x41
 800664a:	5c52      	ldrb	r2, [r2, r1]
 800664c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2242      	movs	r2, #66	; 0x42
 8006652:	2100      	movs	r1, #0
 8006654:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a62      	ldr	r2, [pc, #392]	; (80067e4 <I2C_ITError+0x1ac>)
 800665a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800666e:	183b      	adds	r3, r7, r0
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b28      	cmp	r3, #40	; 0x28
 8006674:	d007      	beq.n	8006686 <I2C_ITError+0x4e>
 8006676:	183b      	adds	r3, r7, r0
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b29      	cmp	r3, #41	; 0x29
 800667c:	d003      	beq.n	8006686 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800667e:	183b      	adds	r3, r7, r0
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b2a      	cmp	r3, #42	; 0x2a
 8006684:	d10c      	bne.n	80066a0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2103      	movs	r1, #3
 800668a:	0018      	movs	r0, r3
 800668c:	f000 faac 	bl	8006be8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2241      	movs	r2, #65	; 0x41
 8006694:	2128      	movs	r1, #40	; 0x28
 8006696:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a53      	ldr	r2, [pc, #332]	; (80067e8 <I2C_ITError+0x1b0>)
 800669c:	635a      	str	r2, [r3, #52]	; 0x34
 800669e:	e012      	b.n	80066c6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80066a0:	4a52      	ldr	r2, [pc, #328]	; (80067ec <I2C_ITError+0x1b4>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0011      	movs	r1, r2
 80066a6:	0018      	movs	r0, r3
 80066a8:	f000 fa9e 	bl	8006be8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2241      	movs	r2, #65	; 0x41
 80066b0:	5c9b      	ldrb	r3, [r3, r2]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b60      	cmp	r3, #96	; 0x60
 80066b6:	d003      	beq.n	80066c0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2241      	movs	r2, #65	; 0x41
 80066bc:	2120      	movs	r1, #32
 80066be:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d03b      	beq.n	800674c <I2C_ITError+0x114>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b11      	cmp	r3, #17
 80066d8:	d002      	beq.n	80066e0 <I2C_ITError+0xa8>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b21      	cmp	r3, #33	; 0x21
 80066de:	d135      	bne.n	800674c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	01db      	lsls	r3, r3, #7
 80066ea:	401a      	ands	r2, r3
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	01db      	lsls	r3, r3, #7
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d107      	bne.n	8006704 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	493c      	ldr	r1, [pc, #240]	; (80067f0 <I2C_ITError+0x1b8>)
 8006700:	400a      	ands	r2, r1
 8006702:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	0018      	movs	r0, r3
 800670a:	f7fe fe50 	bl	80053ae <HAL_DMA_GetState>
 800670e:	0003      	movs	r3, r0
 8006710:	2b01      	cmp	r3, #1
 8006712:	d016      	beq.n	8006742 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	4a36      	ldr	r2, [pc, #216]	; (80067f4 <I2C_ITError+0x1bc>)
 800671a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	2100      	movs	r1, #0
 8006722:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	0018      	movs	r0, r3
 800672a:	f7fe fd59 	bl	80051e0 <HAL_DMA_Abort_IT>
 800672e:	1e03      	subs	r3, r0, #0
 8006730:	d051      	beq.n	80067d6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	0018      	movs	r0, r3
 800673e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006740:	e049      	b.n	80067d6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0018      	movs	r0, r3
 8006746:	f000 f859 	bl	80067fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800674a:	e044      	b.n	80067d6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d03b      	beq.n	80067cc <I2C_ITError+0x194>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b12      	cmp	r3, #18
 8006758:	d002      	beq.n	8006760 <I2C_ITError+0x128>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b22      	cmp	r3, #34	; 0x22
 800675e:	d135      	bne.n	80067cc <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	401a      	ands	r2, r3
 800676c:	2380      	movs	r3, #128	; 0x80
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	429a      	cmp	r2, r3
 8006772:	d107      	bne.n	8006784 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	491e      	ldr	r1, [pc, #120]	; (80067f8 <I2C_ITError+0x1c0>)
 8006780:	400a      	ands	r2, r1
 8006782:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	0018      	movs	r0, r3
 800678a:	f7fe fe10 	bl	80053ae <HAL_DMA_GetState>
 800678e:	0003      	movs	r3, r0
 8006790:	2b01      	cmp	r3, #1
 8006792:	d016      	beq.n	80067c2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <I2C_ITError+0x1bc>)
 800679a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	2100      	movs	r1, #0
 80067a2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7fe fd19 	bl	80051e0 <HAL_DMA_Abort_IT>
 80067ae:	1e03      	subs	r3, r0, #0
 80067b0:	d013      	beq.n	80067da <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	0018      	movs	r0, r3
 80067be:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067c0:	e00b      	b.n	80067da <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 f819 	bl	80067fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067ca:	e006      	b.n	80067da <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 f814 	bl	80067fc <I2C_TreatErrorCallback>
  }
}
 80067d4:	e002      	b.n	80067dc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	e000      	b.n	80067dc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067da:	46c0      	nop			; (mov r8, r8)
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	b004      	add	sp, #16
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	ffff0000 	.word	0xffff0000
 80067e8:	08005f01 	.word	0x08005f01
 80067ec:	00008003 	.word	0x00008003
 80067f0:	ffffbfff 	.word	0xffffbfff
 80067f4:	08006893 	.word	0x08006893
 80067f8:	ffff7fff 	.word	0xffff7fff

080067fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2241      	movs	r2, #65	; 0x41
 8006808:	5c9b      	ldrb	r3, [r3, r2]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b60      	cmp	r3, #96	; 0x60
 800680e:	d10f      	bne.n	8006830 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2241      	movs	r2, #65	; 0x41
 8006814:	2120      	movs	r1, #32
 8006816:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2240      	movs	r2, #64	; 0x40
 8006822:	2100      	movs	r1, #0
 8006824:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0018      	movs	r0, r3
 800682a:	f7ff fb61 	bl	8005ef0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800682e:	e00a      	b.n	8006846 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2240      	movs	r2, #64	; 0x40
 800683a:	2100      	movs	r1, #0
 800683c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	0018      	movs	r0, r3
 8006842:	f7ff fb4d 	bl	8005ee0 <HAL_I2C_ErrorCallback>
}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	46bd      	mov	sp, r7
 800684a:	b002      	add	sp, #8
 800684c:	bd80      	pop	{r7, pc}

0800684e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	2202      	movs	r2, #2
 800685e:	4013      	ands	r3, r2
 8006860:	2b02      	cmp	r3, #2
 8006862:	d103      	bne.n	800686c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2200      	movs	r2, #0
 800686a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	2201      	movs	r2, #1
 8006874:	4013      	ands	r3, r2
 8006876:	2b01      	cmp	r3, #1
 8006878:	d007      	beq.n	800688a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2101      	movs	r1, #1
 8006886:	430a      	orrs	r2, r1
 8006888:	619a      	str	r2, [r3, #24]
  }
}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	46bd      	mov	sp, r7
 800688e:	b002      	add	sp, #8
 8006890:	bd80      	pop	{r7, pc}

08006892 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	2200      	movs	r2, #0
 80068ae:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	2200      	movs	r2, #0
 80068be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	0018      	movs	r0, r3
 80068c4:	f7ff ff9a 	bl	80067fc <I2C_TreatErrorCallback>
}
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b004      	add	sp, #16
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	1dfb      	adds	r3, r7, #7
 80068de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e0:	e021      	b.n	8006926 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	d01e      	beq.n	8006926 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e8:	f7fc fe5c 	bl	80035a4 <HAL_GetTick>
 80068ec:	0002      	movs	r2, r0
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d302      	bcc.n	80068fe <I2C_WaitOnFlagUntilTimeout+0x2e>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d113      	bne.n	8006926 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006902:	2220      	movs	r2, #32
 8006904:	431a      	orrs	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2241      	movs	r2, #65	; 0x41
 800690e:	2120      	movs	r1, #32
 8006910:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2242      	movs	r2, #66	; 0x42
 8006916:	2100      	movs	r1, #0
 8006918:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2240      	movs	r2, #64	; 0x40
 800691e:	2100      	movs	r1, #0
 8006920:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e00f      	b.n	8006946 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	4013      	ands	r3, r2
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	425a      	negs	r2, r3
 8006936:	4153      	adcs	r3, r2
 8006938:	b2db      	uxtb	r3, r3
 800693a:	001a      	movs	r2, r3
 800693c:	1dfb      	adds	r3, r7, #7
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d0ce      	beq.n	80068e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b004      	add	sp, #16
 800694c:	bd80      	pop	{r7, pc}

0800694e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800695a:	e02b      	b.n	80069b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	0018      	movs	r0, r3
 8006964:	f000 f8da 	bl	8006b1c <I2C_IsAcknowledgeFailed>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d001      	beq.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e029      	b.n	80069c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	3301      	adds	r3, #1
 8006974:	d01e      	beq.n	80069b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006976:	f7fc fe15 	bl	80035a4 <HAL_GetTick>
 800697a:	0002      	movs	r2, r0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	429a      	cmp	r2, r3
 8006984:	d302      	bcc.n	800698c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d113      	bne.n	80069b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006990:	2220      	movs	r2, #32
 8006992:	431a      	orrs	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2241      	movs	r2, #65	; 0x41
 800699c:	2120      	movs	r1, #32
 800699e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2242      	movs	r2, #66	; 0x42
 80069a4:	2100      	movs	r1, #0
 80069a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2240      	movs	r2, #64	; 0x40
 80069ac:	2100      	movs	r1, #0
 80069ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e007      	b.n	80069c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	2202      	movs	r2, #2
 80069bc:	4013      	ands	r3, r2
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d1cc      	bne.n	800695c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	0018      	movs	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b004      	add	sp, #16
 80069ca:	bd80      	pop	{r7, pc}

080069cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069d8:	e028      	b.n	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 f89b 	bl	8006b1c <I2C_IsAcknowledgeFailed>
 80069e6:	1e03      	subs	r3, r0, #0
 80069e8:	d001      	beq.n	80069ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e026      	b.n	8006a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fc fdd9 	bl	80035a4 <HAL_GetTick>
 80069f2:	0002      	movs	r2, r0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d113      	bne.n	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a08:	2220      	movs	r2, #32
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2241      	movs	r2, #65	; 0x41
 8006a14:	2120      	movs	r1, #32
 8006a16:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2242      	movs	r2, #66	; 0x42
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2240      	movs	r2, #64	; 0x40
 8006a24:	2100      	movs	r1, #0
 8006a26:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e007      	b.n	8006a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2220      	movs	r2, #32
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d1cf      	bne.n	80069da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	b004      	add	sp, #16
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a50:	e055      	b.n	8006afe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f000 f85f 	bl	8006b1c <I2C_IsAcknowledgeFailed>
 8006a5e:	1e03      	subs	r3, r0, #0
 8006a60:	d001      	beq.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e053      	b.n	8006b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d129      	bne.n	8006ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d105      	bne.n	8006a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e03f      	b.n	8006b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2220      	movs	r2, #32
 8006a94:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	491d      	ldr	r1, [pc, #116]	; (8006b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006aa2:	400a      	ands	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2241      	movs	r2, #65	; 0x41
 8006ab0:	2120      	movs	r1, #32
 8006ab2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2242      	movs	r2, #66	; 0x42
 8006ab8:	2100      	movs	r1, #0
 8006aba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2240      	movs	r2, #64	; 0x40
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e022      	b.n	8006b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac8:	f7fc fd6c 	bl	80035a4 <HAL_GetTick>
 8006acc:	0002      	movs	r2, r0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d302      	bcc.n	8006ade <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10f      	bne.n	8006afe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2241      	movs	r2, #65	; 0x41
 8006aee:	2120      	movs	r1, #32
 8006af0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2240      	movs	r2, #64	; 0x40
 8006af6:	2100      	movs	r1, #0
 8006af8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e007      	b.n	8006b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	2204      	movs	r2, #4
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d1a2      	bne.n	8006a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	0018      	movs	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	b004      	add	sp, #16
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	fe00e800 	.word	0xfe00e800

08006b1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b10      	cmp	r3, #16
 8006b34:	d151      	bne.n	8006bda <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b36:	e021      	b.n	8006b7c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	d01e      	beq.n	8006b7c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3e:	f7fc fd31 	bl	80035a4 <HAL_GetTick>
 8006b42:	0002      	movs	r2, r0
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d302      	bcc.n	8006b54 <I2C_IsAcknowledgeFailed+0x38>
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d113      	bne.n	8006b7c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b58:	2220      	movs	r2, #32
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2241      	movs	r2, #65	; 0x41
 8006b64:	2120      	movs	r1, #32
 8006b66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2242      	movs	r2, #66	; 0x42
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2240      	movs	r2, #64	; 0x40
 8006b74:	2100      	movs	r1, #0
 8006b76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e02f      	b.n	8006bdc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2220      	movs	r2, #32
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d1d6      	bne.n	8006b38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2210      	movs	r2, #16
 8006b90:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2220      	movs	r2, #32
 8006b98:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7ff fe56 	bl	800684e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	490d      	ldr	r1, [pc, #52]	; (8006be4 <I2C_IsAcknowledgeFailed+0xc8>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2241      	movs	r2, #65	; 0x41
 8006bc2:	2120      	movs	r1, #32
 8006bc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2242      	movs	r2, #66	; 0x42
 8006bca:	2100      	movs	r1, #0
 8006bcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2240      	movs	r2, #64	; 0x40
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	0018      	movs	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b004      	add	sp, #16
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	fe00e800 	.word	0xfe00e800

08006be8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	000a      	movs	r2, r1
 8006bf2:	1cbb      	adds	r3, r7, #2
 8006bf4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006bfa:	1cbb      	adds	r3, r7, #2
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	4013      	ands	r3, r2
 8006c02:	d010      	beq.n	8006c26 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2242      	movs	r2, #66	; 0x42
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2241      	movs	r2, #65	; 0x41
 8006c10:	5c9b      	ldrb	r3, [r3, r2]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	001a      	movs	r2, r3
 8006c16:	2328      	movs	r3, #40	; 0x28
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b28      	cmp	r3, #40	; 0x28
 8006c1c:	d003      	beq.n	8006c26 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	22b0      	movs	r2, #176	; 0xb0
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c26:	1cbb      	adds	r3, r7, #2
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d010      	beq.n	8006c52 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2244      	movs	r2, #68	; 0x44
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2241      	movs	r2, #65	; 0x41
 8006c3c:	5c9b      	ldrb	r3, [r3, r2]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	001a      	movs	r2, r3
 8006c42:	2328      	movs	r3, #40	; 0x28
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b28      	cmp	r3, #40	; 0x28
 8006c48:	d003      	beq.n	8006c52 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	22b0      	movs	r2, #176	; 0xb0
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c52:	1cbb      	adds	r3, r7, #2
 8006c54:	2200      	movs	r2, #0
 8006c56:	5e9b      	ldrsh	r3, [r3, r2]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da03      	bge.n	8006c64 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	22b8      	movs	r2, #184	; 0xb8
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c64:	1cbb      	adds	r3, r7, #2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	2b10      	cmp	r3, #16
 8006c6a:	d103      	bne.n	8006c74 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2290      	movs	r2, #144	; 0x90
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c74:	1cbb      	adds	r3, r7, #2
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d103      	bne.n	8006c84 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c84:	1cbb      	adds	r3, r7, #2
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d103      	bne.n	8006c94 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2240      	movs	r2, #64	; 0x40
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	43d9      	mvns	r1, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	400a      	ands	r2, r1
 8006ca4:	601a      	str	r2, [r3, #0]
}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b004      	add	sp, #16
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2241      	movs	r2, #65	; 0x41
 8006cbe:	5c9b      	ldrb	r3, [r3, r2]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d138      	bne.n	8006d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2240      	movs	r2, #64	; 0x40
 8006cca:	5c9b      	ldrb	r3, [r3, r2]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e032      	b.n	8006d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2240      	movs	r2, #64	; 0x40
 8006cd8:	2101      	movs	r1, #1
 8006cda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2241      	movs	r2, #65	; 0x41
 8006ce0:	2124      	movs	r1, #36	; 0x24
 8006ce2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2101      	movs	r1, #1
 8006cf0:	438a      	bics	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4911      	ldr	r1, [pc, #68]	; (8006d44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006d00:	400a      	ands	r2, r1
 8006d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2101      	movs	r1, #1
 8006d20:	430a      	orrs	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2241      	movs	r2, #65	; 0x41
 8006d28:	2120      	movs	r1, #32
 8006d2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2240      	movs	r2, #64	; 0x40
 8006d30:	2100      	movs	r1, #0
 8006d32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e000      	b.n	8006d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d38:	2302      	movs	r3, #2
  }
}
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	b002      	add	sp, #8
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	ffffefff 	.word	0xffffefff

08006d48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2241      	movs	r2, #65	; 0x41
 8006d56:	5c9b      	ldrb	r3, [r3, r2]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d139      	bne.n	8006dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2240      	movs	r2, #64	; 0x40
 8006d62:	5c9b      	ldrb	r3, [r3, r2]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e033      	b.n	8006dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2240      	movs	r2, #64	; 0x40
 8006d70:	2101      	movs	r1, #1
 8006d72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2241      	movs	r2, #65	; 0x41
 8006d78:	2124      	movs	r1, #36	; 0x24
 8006d7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2101      	movs	r1, #1
 8006d88:	438a      	bics	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4a11      	ldr	r2, [pc, #68]	; (8006ddc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2101      	movs	r1, #1
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2241      	movs	r2, #65	; 0x41
 8006dc2:	2120      	movs	r1, #32
 8006dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2240      	movs	r2, #64	; 0x40
 8006dca:	2100      	movs	r1, #0
 8006dcc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e000      	b.n	8006dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dd2:	2302      	movs	r3, #2
  }
}
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b004      	add	sp, #16
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	fffff0ff 	.word	0xfffff0ff

08006de0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de2:	b08b      	sub	sp, #44	; 0x2c
 8006de4:	af06      	add	r7, sp, #24
 8006de6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e0ff      	b.n	8006ff2 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a81      	ldr	r2, [pc, #516]	; (8006ffc <HAL_PCD_Init+0x21c>)
 8006df6:	5c9b      	ldrb	r3, [r3, r2]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d108      	bne.n	8006e10 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	23aa      	movs	r3, #170	; 0xaa
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	2100      	movs	r1, #0
 8006e06:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f008 f84a 	bl	800eea4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a7a      	ldr	r2, [pc, #488]	; (8006ffc <HAL_PCD_Init+0x21c>)
 8006e14:	2103      	movs	r1, #3
 8006e16:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f004 f8bb 	bl	800af98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e22:	230f      	movs	r3, #15
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	e058      	b.n	8006ede <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e2c:	200f      	movs	r0, #15
 8006e2e:	183b      	adds	r3, r7, r0
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	0013      	movs	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	18cb      	adds	r3, r1, r3
 8006e40:	3301      	adds	r3, #1
 8006e42:	2201      	movs	r2, #1
 8006e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e46:	183b      	adds	r3, r7, r0
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	0013      	movs	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	189b      	adds	r3, r3, r2
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	183a      	adds	r2, r7, r0
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e5c:	0004      	movs	r4, r0
 8006e5e:	183b      	adds	r3, r7, r0
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	193b      	adds	r3, r7, r4
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	b298      	uxth	r0, r3
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	0013      	movs	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	189b      	adds	r3, r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	18cb      	adds	r3, r1, r3
 8006e74:	3336      	adds	r3, #54	; 0x36
 8006e76:	1c02      	adds	r2, r0, #0
 8006e78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e7a:	193b      	adds	r3, r7, r4
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	0013      	movs	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	189b      	adds	r3, r3, r2
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	18cb      	adds	r3, r1, r3
 8006e8c:	3303      	adds	r3, #3
 8006e8e:	2200      	movs	r2, #0
 8006e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e92:	193b      	adds	r3, r7, r4
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	0013      	movs	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	189b      	adds	r3, r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	18cb      	adds	r3, r1, r3
 8006ea2:	3338      	adds	r3, #56	; 0x38
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ea8:	193b      	adds	r3, r7, r4
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	0013      	movs	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	189b      	adds	r3, r3, r2
 8006eb4:	00db      	lsls	r3, r3, #3
 8006eb6:	18cb      	adds	r3, r1, r3
 8006eb8:	333c      	adds	r3, #60	; 0x3c
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ebe:	193b      	adds	r3, r7, r4
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	0013      	movs	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	189b      	adds	r3, r3, r2
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	18cb      	adds	r3, r1, r3
 8006ece:	3340      	adds	r3, #64	; 0x40
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ed4:	193b      	adds	r3, r7, r4
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	193b      	adds	r3, r7, r4
 8006eda:	3201      	adds	r2, #1
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	210f      	movs	r1, #15
 8006ee0:	187b      	adds	r3, r7, r1
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d39f      	bcc.n	8006e2c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eec:	187b      	adds	r3, r7, r1
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e056      	b.n	8006fa2 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ef4:	240f      	movs	r4, #15
 8006ef6:	193b      	adds	r3, r7, r4
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	236a      	movs	r3, #106	; 0x6a
 8006efe:	33ff      	adds	r3, #255	; 0xff
 8006f00:	0019      	movs	r1, r3
 8006f02:	0013      	movs	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	189b      	adds	r3, r3, r2
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	18c3      	adds	r3, r0, r3
 8006f0c:	185b      	adds	r3, r3, r1
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f12:	193b      	adds	r3, r7, r4
 8006f14:	781a      	ldrb	r2, [r3, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	23b4      	movs	r3, #180	; 0xb4
 8006f1a:	0059      	lsls	r1, r3, #1
 8006f1c:	0013      	movs	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	189b      	adds	r3, r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	18c3      	adds	r3, r0, r3
 8006f26:	185b      	adds	r3, r3, r1
 8006f28:	193a      	adds	r2, r7, r4
 8006f2a:	7812      	ldrb	r2, [r2, #0]
 8006f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f2e:	193b      	adds	r3, r7, r4
 8006f30:	781a      	ldrb	r2, [r3, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	236c      	movs	r3, #108	; 0x6c
 8006f36:	33ff      	adds	r3, #255	; 0xff
 8006f38:	0019      	movs	r1, r3
 8006f3a:	0013      	movs	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	189b      	adds	r3, r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	18c3      	adds	r3, r0, r3
 8006f44:	185b      	adds	r3, r3, r1
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f4a:	193b      	adds	r3, r7, r4
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	23bc      	movs	r3, #188	; 0xbc
 8006f52:	0059      	lsls	r1, r3, #1
 8006f54:	0013      	movs	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	189b      	adds	r3, r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	18c3      	adds	r3, r0, r3
 8006f5e:	185b      	adds	r3, r3, r1
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	23be      	movs	r3, #190	; 0xbe
 8006f6c:	0059      	lsls	r1, r3, #1
 8006f6e:	0013      	movs	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	189b      	adds	r3, r3, r2
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	18c3      	adds	r3, r0, r3
 8006f78:	185b      	adds	r3, r3, r1
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f7e:	193b      	adds	r3, r7, r4
 8006f80:	781a      	ldrb	r2, [r3, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	23c0      	movs	r3, #192	; 0xc0
 8006f86:	0059      	lsls	r1, r3, #1
 8006f88:	0013      	movs	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	189b      	adds	r3, r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	18c3      	adds	r3, r0, r3
 8006f92:	185b      	adds	r3, r3, r1
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f98:	193b      	adds	r3, r7, r4
 8006f9a:	781a      	ldrb	r2, [r3, #0]
 8006f9c:	193b      	adds	r3, r7, r4
 8006f9e:	3201      	adds	r2, #1
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	230f      	movs	r3, #15
 8006fa4:	18fb      	adds	r3, r7, r3
 8006fa6:	781a      	ldrb	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d3a1      	bcc.n	8006ef4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	466a      	mov	r2, sp
 8006fb8:	0011      	movs	r1, r2
 8006fba:	001a      	movs	r2, r3
 8006fbc:	3210      	adds	r2, #16
 8006fbe:	ca70      	ldmia	r2!, {r4, r5, r6}
 8006fc0:	c170      	stmia	r1!, {r4, r5, r6}
 8006fc2:	ca30      	ldmia	r2!, {r4, r5}
 8006fc4:	c130      	stmia	r1!, {r4, r5}
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f003 fffe 	bl	800afcc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2224      	movs	r2, #36	; 0x24
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <HAL_PCD_Init+0x21c>)
 8006fdc:	2101      	movs	r1, #1
 8006fde:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d103      	bne.n	8006ff0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	0018      	movs	r0, r3
 8006fec:	f001 fb56 	bl	800869c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b005      	add	sp, #20
 8006ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	000002a9 	.word	0x000002a9

08007000 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	23aa      	movs	r3, #170	; 0xaa
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	5cd3      	ldrb	r3, [r2, r3]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_PCD_Start+0x18>
 8007014:	2302      	movs	r3, #2
 8007016:	e014      	b.n	8007042 <HAL_PCD_Start+0x42>
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	23aa      	movs	r3, #170	; 0xaa
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	2101      	movs	r1, #1
 8007020:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	0018      	movs	r0, r3
 8007028:	f003 ffa0 	bl	800af6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	0018      	movs	r0, r3
 8007032:	f005 ff45 	bl	800cec0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	23aa      	movs	r3, #170	; 0xaa
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	2100      	movs	r1, #0
 800703e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	0018      	movs	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	b002      	add	sp, #8
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0018      	movs	r0, r3
 800705a:	f005 ff47 	bl	800ceec <USB_ReadInterrupts>
 800705e:	0002      	movs	r2, r0
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	401a      	ands	r2, r3
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	429a      	cmp	r2, r3
 800706c:	d103      	bne.n	8007076 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f000 fbbb 	bl	80077ec <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	0018      	movs	r0, r3
 800707c:	f005 ff36 	bl	800ceec <USB_ReadInterrupts>
 8007080:	0002      	movs	r2, r0
 8007082:	2380      	movs	r3, #128	; 0x80
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	401a      	ands	r2, r3
 8007088:	2380      	movs	r3, #128	; 0x80
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	429a      	cmp	r2, r3
 800708e:	d114      	bne.n	80070ba <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2244      	movs	r2, #68	; 0x44
 8007096:	5a9b      	ldrh	r3, [r3, r2]
 8007098:	b29a      	uxth	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	49a2      	ldr	r1, [pc, #648]	; (8007328 <HAL_PCD_IRQHandler+0x2dc>)
 80070a0:	400a      	ands	r2, r1
 80070a2:	b291      	uxth	r1, r2
 80070a4:	2244      	movs	r2, #68	; 0x44
 80070a6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0018      	movs	r0, r3
 80070ac:	f007 ff85 	bl	800efba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2100      	movs	r1, #0
 80070b4:	0018      	movs	r0, r3
 80070b6:	f000 f945 	bl	8007344 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	0018      	movs	r0, r3
 80070c0:	f005 ff14 	bl	800ceec <USB_ReadInterrupts>
 80070c4:	0002      	movs	r2, r0
 80070c6:	2380      	movs	r3, #128	; 0x80
 80070c8:	01db      	lsls	r3, r3, #7
 80070ca:	401a      	ands	r2, r3
 80070cc:	2380      	movs	r3, #128	; 0x80
 80070ce:	01db      	lsls	r3, r3, #7
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d10b      	bne.n	80070ec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2244      	movs	r2, #68	; 0x44
 80070da:	5a9b      	ldrh	r3, [r3, r2]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4992      	ldr	r1, [pc, #584]	; (800732c <HAL_PCD_IRQHandler+0x2e0>)
 80070e4:	400a      	ands	r2, r1
 80070e6:	b291      	uxth	r1, r2
 80070e8:	2244      	movs	r2, #68	; 0x44
 80070ea:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	0018      	movs	r0, r3
 80070f2:	f005 fefb 	bl	800ceec <USB_ReadInterrupts>
 80070f6:	0002      	movs	r2, r0
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	019b      	lsls	r3, r3, #6
 80070fc:	401a      	ands	r2, r3
 80070fe:	2380      	movs	r3, #128	; 0x80
 8007100:	019b      	lsls	r3, r3, #6
 8007102:	429a      	cmp	r2, r3
 8007104:	d10b      	bne.n	800711e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2244      	movs	r2, #68	; 0x44
 800710c:	5a9b      	ldrh	r3, [r3, r2]
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4986      	ldr	r1, [pc, #536]	; (8007330 <HAL_PCD_IRQHandler+0x2e4>)
 8007116:	400a      	ands	r2, r1
 8007118:	b291      	uxth	r1, r2
 800711a:	2244      	movs	r2, #68	; 0x44
 800711c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	0018      	movs	r0, r3
 8007124:	f005 fee2 	bl	800ceec <USB_ReadInterrupts>
 8007128:	0002      	movs	r2, r0
 800712a:	2380      	movs	r3, #128	; 0x80
 800712c:	015b      	lsls	r3, r3, #5
 800712e:	401a      	ands	r2, r3
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	015b      	lsls	r3, r3, #5
 8007134:	429a      	cmp	r2, r3
 8007136:	d137      	bne.n	80071a8 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2240      	movs	r2, #64	; 0x40
 800713e:	5a9b      	ldrh	r3, [r3, r2]
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2104      	movs	r1, #4
 8007148:	438a      	bics	r2, r1
 800714a:	b291      	uxth	r1, r2
 800714c:	2240      	movs	r2, #64	; 0x40
 800714e:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2240      	movs	r2, #64	; 0x40
 8007156:	5a9b      	ldrh	r3, [r3, r2]
 8007158:	b29a      	uxth	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2108      	movs	r1, #8
 8007160:	438a      	bics	r2, r1
 8007162:	b291      	uxth	r1, r2
 8007164:	2240      	movs	r2, #64	; 0x40
 8007166:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	23b8      	movs	r3, #184	; 0xb8
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	5cd3      	ldrb	r3, [r2, r3]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d109      	bne.n	8007188 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	23b8      	movs	r3, #184	; 0xb8
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	2100      	movs	r1, #0
 800717c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2100      	movs	r1, #0
 8007182:	0018      	movs	r0, r3
 8007184:	f001 fab4 	bl	80086f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	0018      	movs	r0, r3
 800718c:	f007 ff56 	bl	800f03c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2244      	movs	r2, #68	; 0x44
 8007196:	5a9b      	ldrh	r3, [r3, r2]
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4965      	ldr	r1, [pc, #404]	; (8007334 <HAL_PCD_IRQHandler+0x2e8>)
 80071a0:	400a      	ands	r2, r1
 80071a2:	b291      	uxth	r1, r2
 80071a4:	2244      	movs	r2, #68	; 0x44
 80071a6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	0018      	movs	r0, r3
 80071ae:	f005 fe9d 	bl	800ceec <USB_ReadInterrupts>
 80071b2:	0002      	movs	r2, r0
 80071b4:	2380      	movs	r3, #128	; 0x80
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	401a      	ands	r2, r3
 80071ba:	2380      	movs	r3, #128	; 0x80
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	429a      	cmp	r2, r3
 80071c0:	d127      	bne.n	8007212 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2240      	movs	r2, #64	; 0x40
 80071c8:	5a9b      	ldrh	r3, [r3, r2]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2108      	movs	r1, #8
 80071d2:	430a      	orrs	r2, r1
 80071d4:	b291      	uxth	r1, r2
 80071d6:	2240      	movs	r2, #64	; 0x40
 80071d8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2244      	movs	r2, #68	; 0x44
 80071e0:	5a9b      	ldrh	r3, [r3, r2]
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4953      	ldr	r1, [pc, #332]	; (8007338 <HAL_PCD_IRQHandler+0x2ec>)
 80071ea:	400a      	ands	r2, r1
 80071ec:	b291      	uxth	r1, r2
 80071ee:	2244      	movs	r2, #68	; 0x44
 80071f0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2240      	movs	r2, #64	; 0x40
 80071f8:	5a9b      	ldrh	r3, [r3, r2]
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2104      	movs	r1, #4
 8007202:	430a      	orrs	r2, r1
 8007204:	b291      	uxth	r1, r2
 8007206:	2240      	movs	r2, #64	; 0x40
 8007208:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	0018      	movs	r0, r3
 800720e:	f007 fef9 	bl	800f004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	0018      	movs	r0, r3
 8007218:	f005 fe68 	bl	800ceec <USB_ReadInterrupts>
 800721c:	0003      	movs	r3, r0
 800721e:	2280      	movs	r2, #128	; 0x80
 8007220:	4013      	ands	r3, r2
 8007222:	2b80      	cmp	r3, #128	; 0x80
 8007224:	d145      	bne.n	80072b2 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2244      	movs	r2, #68	; 0x44
 800722c:	5a9b      	ldrh	r3, [r3, r2]
 800722e:	b29a      	uxth	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2180      	movs	r1, #128	; 0x80
 8007236:	438a      	bics	r2, r1
 8007238:	b291      	uxth	r1, r2
 800723a:	2244      	movs	r2, #68	; 0x44
 800723c:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	23b8      	movs	r3, #184	; 0xb8
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	5cd3      	ldrb	r3, [r2, r3]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d12f      	bne.n	80072aa <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2240      	movs	r2, #64	; 0x40
 8007250:	5a9b      	ldrh	r3, [r3, r2]
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2104      	movs	r1, #4
 800725a:	430a      	orrs	r2, r1
 800725c:	b291      	uxth	r1, r2
 800725e:	2240      	movs	r2, #64	; 0x40
 8007260:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2240      	movs	r2, #64	; 0x40
 8007268:	5a9b      	ldrh	r3, [r3, r2]
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2108      	movs	r1, #8
 8007272:	430a      	orrs	r2, r1
 8007274:	b291      	uxth	r1, r2
 8007276:	2240      	movs	r2, #64	; 0x40
 8007278:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	23b8      	movs	r3, #184	; 0xb8
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	2101      	movs	r1, #1
 8007282:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2254      	movs	r2, #84	; 0x54
 800728a:	5a9b      	ldrh	r3, [r3, r2]
 800728c:	b29b      	uxth	r3, r3
 800728e:	089b      	lsrs	r3, r3, #2
 8007290:	223c      	movs	r2, #60	; 0x3c
 8007292:	4013      	ands	r3, r2
 8007294:	0019      	movs	r1, r3
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	23b9      	movs	r3, #185	; 0xb9
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2101      	movs	r1, #1
 80072a2:	0018      	movs	r0, r3
 80072a4:	f001 fa24 	bl	80086f0 <HAL_PCDEx_LPM_Callback>
 80072a8:	e003      	b.n	80072b2 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	0018      	movs	r0, r3
 80072ae:	f007 fea9 	bl	800f004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	0018      	movs	r0, r3
 80072b8:	f005 fe18 	bl	800ceec <USB_ReadInterrupts>
 80072bc:	0002      	movs	r2, r0
 80072be:	2380      	movs	r3, #128	; 0x80
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	401a      	ands	r2, r3
 80072c4:	2380      	movs	r3, #128	; 0x80
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d10f      	bne.n	80072ec <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2244      	movs	r2, #68	; 0x44
 80072d2:	5a9b      	ldrh	r3, [r3, r2]
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4918      	ldr	r1, [pc, #96]	; (800733c <HAL_PCD_IRQHandler+0x2f0>)
 80072dc:	400a      	ands	r2, r1
 80072de:	b291      	uxth	r1, r2
 80072e0:	2244      	movs	r2, #68	; 0x44
 80072e2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f007 fe58 	bl	800ef9c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f005 fdfb 	bl	800ceec <USB_ReadInterrupts>
 80072f6:	0002      	movs	r2, r0
 80072f8:	2380      	movs	r3, #128	; 0x80
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	401a      	ands	r2, r3
 80072fe:	2380      	movs	r3, #128	; 0x80
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	429a      	cmp	r2, r3
 8007304:	d10b      	bne.n	800731e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2244      	movs	r2, #68	; 0x44
 800730c:	5a9b      	ldrh	r3, [r3, r2]
 800730e:	b29a      	uxth	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	490a      	ldr	r1, [pc, #40]	; (8007340 <HAL_PCD_IRQHandler+0x2f4>)
 8007316:	400a      	ands	r2, r1
 8007318:	b291      	uxth	r1, r2
 800731a:	2244      	movs	r2, #68	; 0x44
 800731c:	5299      	strh	r1, [r3, r2]
  }
}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	46bd      	mov	sp, r7
 8007322:	b002      	add	sp, #8
 8007324:	bd80      	pop	{r7, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	fffffbff 	.word	0xfffffbff
 800732c:	ffffbfff 	.word	0xffffbfff
 8007330:	ffffdfff 	.word	0xffffdfff
 8007334:	ffffefff 	.word	0xffffefff
 8007338:	fffff7ff 	.word	0xfffff7ff
 800733c:	fffffdff 	.word	0xfffffdff
 8007340:	fffffeff 	.word	0xfffffeff

08007344 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	000a      	movs	r2, r1
 800734e:	1cfb      	adds	r3, r7, #3
 8007350:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	23aa      	movs	r3, #170	; 0xaa
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	5cd3      	ldrb	r3, [r2, r3]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d101      	bne.n	8007362 <HAL_PCD_SetAddress+0x1e>
 800735e:	2302      	movs	r3, #2
 8007360:	e017      	b.n	8007392 <HAL_PCD_SetAddress+0x4e>
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	23aa      	movs	r3, #170	; 0xaa
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	2101      	movs	r1, #1
 800736a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1cfa      	adds	r2, r7, #3
 8007370:	2124      	movs	r1, #36	; 0x24
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	1cfb      	adds	r3, r7, #3
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	0019      	movs	r1, r3
 8007380:	0010      	movs	r0, r2
 8007382:	f005 fd89 	bl	800ce98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	23aa      	movs	r3, #170	; 0xaa
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	2100      	movs	r1, #0
 800738e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	0018      	movs	r0, r3
 8007394:	46bd      	mov	sp, r7
 8007396:	b002      	add	sp, #8
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800739a:	b590      	push	{r4, r7, lr}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	000c      	movs	r4, r1
 80073a4:	0010      	movs	r0, r2
 80073a6:	0019      	movs	r1, r3
 80073a8:	1cfb      	adds	r3, r7, #3
 80073aa:	1c22      	adds	r2, r4, #0
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	003b      	movs	r3, r7
 80073b0:	1c02      	adds	r2, r0, #0
 80073b2:	801a      	strh	r2, [r3, #0]
 80073b4:	1cbb      	adds	r3, r7, #2
 80073b6:	1c0a      	adds	r2, r1, #0
 80073b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80073ba:	230b      	movs	r3, #11
 80073bc:	18fb      	adds	r3, r7, r3
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80073c2:	1cfb      	adds	r3, r7, #3
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	b25b      	sxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	da0f      	bge.n	80073ec <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073cc:	1cfb      	adds	r3, r7, #3
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2207      	movs	r2, #7
 80073d2:	4013      	ands	r3, r2
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	0013      	movs	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	189b      	adds	r3, r3, r2
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	18d3      	adds	r3, r2, r3
 80073e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	705a      	strb	r2, [r3, #1]
 80073ea:	e00f      	b.n	800740c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073ec:	1cfb      	adds	r3, r7, #3
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2207      	movs	r2, #7
 80073f2:	401a      	ands	r2, r3
 80073f4:	0013      	movs	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	189b      	adds	r3, r3, r2
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	3369      	adds	r3, #105	; 0x69
 80073fe:	33ff      	adds	r3, #255	; 0xff
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	18d3      	adds	r3, r2, r3
 8007404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800740c:	1cfb      	adds	r3, r7, #3
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2207      	movs	r2, #7
 8007412:	4013      	ands	r3, r2
 8007414:	b2da      	uxtb	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800741a:	003b      	movs	r3, r7
 800741c:	881a      	ldrh	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1cba      	adds	r2, r7, #2
 8007426:	7812      	ldrb	r2, [r2, #0]
 8007428:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800743c:	1cbb      	adds	r3, r7, #2
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d102      	bne.n	800744a <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	23aa      	movs	r3, #170	; 0xaa
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	5cd3      	ldrb	r3, [r2, r3]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_PCD_EP_Open+0xc0>
 8007456:	2302      	movs	r3, #2
 8007458:	e013      	b.n	8007482 <HAL_PCD_EP_Open+0xe8>
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	23aa      	movs	r3, #170	; 0xaa
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	2101      	movs	r1, #1
 8007462:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	0011      	movs	r1, r2
 800746c:	0018      	movs	r0, r3
 800746e:	f003 fdd9 	bl	800b024 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	23aa      	movs	r3, #170	; 0xaa
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	2100      	movs	r1, #0
 800747a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800747c:	230b      	movs	r3, #11
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	781b      	ldrb	r3, [r3, #0]
}
 8007482:	0018      	movs	r0, r3
 8007484:	46bd      	mov	sp, r7
 8007486:	b005      	add	sp, #20
 8007488:	bd90      	pop	{r4, r7, pc}

0800748a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	000a      	movs	r2, r1
 8007494:	1cfb      	adds	r3, r7, #3
 8007496:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007498:	1cfb      	adds	r3, r7, #3
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b25b      	sxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da0f      	bge.n	80074c2 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074a2:	1cfb      	adds	r3, r7, #3
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2207      	movs	r2, #7
 80074a8:	4013      	ands	r3, r2
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	0013      	movs	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	189b      	adds	r3, r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	18d3      	adds	r3, r2, r3
 80074b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	705a      	strb	r2, [r3, #1]
 80074c0:	e00f      	b.n	80074e2 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074c2:	1cfb      	adds	r3, r7, #3
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2207      	movs	r2, #7
 80074c8:	401a      	ands	r2, r3
 80074ca:	0013      	movs	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	3369      	adds	r3, #105	; 0x69
 80074d4:	33ff      	adds	r3, #255	; 0xff
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	18d3      	adds	r3, r2, r3
 80074da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80074e2:	1cfb      	adds	r3, r7, #3
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2207      	movs	r2, #7
 80074e8:	4013      	ands	r3, r2
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	23aa      	movs	r3, #170	; 0xaa
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	5cd3      	ldrb	r3, [r2, r3]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_PCD_EP_Close+0x76>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e011      	b.n	8007524 <HAL_PCD_EP_Close+0x9a>
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	23aa      	movs	r3, #170	; 0xaa
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	2101      	movs	r1, #1
 8007508:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	0011      	movs	r1, r2
 8007512:	0018      	movs	r0, r3
 8007514:	f004 f8dc 	bl	800b6d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	23aa      	movs	r3, #170	; 0xaa
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	2100      	movs	r1, #0
 8007520:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	0018      	movs	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	b004      	add	sp, #16
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	200b      	movs	r0, #11
 800753a:	183b      	adds	r3, r7, r0
 800753c:	1c0a      	adds	r2, r1, #0
 800753e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007540:	0001      	movs	r1, r0
 8007542:	187b      	adds	r3, r7, r1
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2207      	movs	r2, #7
 8007548:	401a      	ands	r2, r3
 800754a:	0013      	movs	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	189b      	adds	r3, r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	3369      	adds	r3, #105	; 0x69
 8007554:	33ff      	adds	r3, #255	; 0xff
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	18d3      	adds	r3, r2, r3
 800755a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2200      	movs	r2, #0
 800756c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2200      	movs	r2, #0
 8007572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007574:	187b      	adds	r3, r7, r1
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2207      	movs	r2, #7
 800757a:	4013      	ands	r3, r2
 800757c:	b2da      	uxtb	r2, r3
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007582:	187b      	adds	r3, r7, r1
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2207      	movs	r2, #7
 8007588:	4013      	ands	r3, r2
 800758a:	d107      	bne.n	800759c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	0011      	movs	r1, r2
 8007594:	0018      	movs	r0, r3
 8007596:	f004 fa5b 	bl	800ba50 <USB_EPStartXfer>
 800759a:	e006      	b.n	80075aa <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	0011      	movs	r1, r2
 80075a4:	0018      	movs	r0, r3
 80075a6:	f004 fa53 	bl	800ba50 <USB_EPStartXfer>
  }

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	0018      	movs	r0, r3
 80075ae:	46bd      	mov	sp, r7
 80075b0:	b006      	add	sp, #24
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	000a      	movs	r2, r1
 80075be:	1cfb      	adds	r3, r7, #3
 80075c0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80075c2:	1cfb      	adds	r3, r7, #3
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2207      	movs	r2, #7
 80075c8:	401a      	ands	r2, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	23c2      	movs	r3, #194	; 0xc2
 80075ce:	0059      	lsls	r1, r3, #1
 80075d0:	0013      	movs	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	189b      	adds	r3, r3, r2
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	18c3      	adds	r3, r0, r3
 80075da:	185b      	adds	r3, r3, r1
 80075dc:	681b      	ldr	r3, [r3, #0]
}
 80075de:	0018      	movs	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	b002      	add	sp, #8
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b086      	sub	sp, #24
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
 80075f2:	200b      	movs	r0, #11
 80075f4:	183b      	adds	r3, r7, r0
 80075f6:	1c0a      	adds	r2, r1, #0
 80075f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075fa:	183b      	adds	r3, r7, r0
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2207      	movs	r2, #7
 8007600:	4013      	ands	r3, r2
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	0013      	movs	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	189b      	adds	r3, r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	18d3      	adds	r3, r2, r3
 8007610:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2224      	movs	r2, #36	; 0x24
 8007622:	2101      	movs	r1, #1
 8007624:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2200      	movs	r2, #0
 8007630:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2201      	movs	r2, #1
 8007636:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007638:	183b      	adds	r3, r7, r0
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2207      	movs	r2, #7
 800763e:	4013      	ands	r3, r2
 8007640:	b2da      	uxtb	r2, r3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007646:	183b      	adds	r3, r7, r0
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2207      	movs	r2, #7
 800764c:	4013      	ands	r3, r2
 800764e:	d107      	bne.n	8007660 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	0011      	movs	r1, r2
 8007658:	0018      	movs	r0, r3
 800765a:	f004 f9f9 	bl	800ba50 <USB_EPStartXfer>
 800765e:	e006      	b.n	800766e <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	0011      	movs	r1, r2
 8007668:	0018      	movs	r0, r3
 800766a:	f004 f9f1 	bl	800ba50 <USB_EPStartXfer>
  }

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	0018      	movs	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	b006      	add	sp, #24
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	000a      	movs	r2, r1
 8007682:	1cfb      	adds	r3, r7, #3
 8007684:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007686:	1cfb      	adds	r3, r7, #3
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2207      	movs	r2, #7
 800768c:	401a      	ands	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d901      	bls.n	800769a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e046      	b.n	8007728 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800769a:	1cfb      	adds	r3, r7, #3
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b25b      	sxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	da0f      	bge.n	80076c4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076a4:	1cfb      	adds	r3, r7, #3
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2207      	movs	r2, #7
 80076aa:	4013      	ands	r3, r2
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	0013      	movs	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	18d3      	adds	r3, r2, r3
 80076ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	705a      	strb	r2, [r3, #1]
 80076c2:	e00d      	b.n	80076e0 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076c4:	1cfb      	adds	r3, r7, #3
 80076c6:	781a      	ldrb	r2, [r3, #0]
 80076c8:	0013      	movs	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	189b      	adds	r3, r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	3369      	adds	r3, #105	; 0x69
 80076d2:	33ff      	adds	r3, #255	; 0xff
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	18d3      	adds	r3, r2, r3
 80076d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076e6:	1cfb      	adds	r3, r7, #3
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2207      	movs	r2, #7
 80076ec:	4013      	ands	r3, r2
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	23aa      	movs	r3, #170	; 0xaa
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	5cd3      	ldrb	r3, [r2, r3]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_PCD_EP_SetStall+0x8c>
 8007700:	2302      	movs	r3, #2
 8007702:	e011      	b.n	8007728 <HAL_PCD_EP_SetStall+0xb0>
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	23aa      	movs	r3, #170	; 0xaa
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	2101      	movs	r1, #1
 800770c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	0011      	movs	r1, r2
 8007716:	0018      	movs	r0, r3
 8007718:	f005 fabc 	bl	800cc94 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	23aa      	movs	r3, #170	; 0xaa
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	2100      	movs	r1, #0
 8007724:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	0018      	movs	r0, r3
 800772a:	46bd      	mov	sp, r7
 800772c:	b004      	add	sp, #16
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	000a      	movs	r2, r1
 800773a:	1cfb      	adds	r3, r7, #3
 800773c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800773e:	1cfb      	adds	r3, r7, #3
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	220f      	movs	r2, #15
 8007744:	401a      	ands	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	429a      	cmp	r2, r3
 800774c:	d901      	bls.n	8007752 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e048      	b.n	80077e4 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007752:	1cfb      	adds	r3, r7, #3
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b25b      	sxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	da0f      	bge.n	800777c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800775c:	1cfb      	adds	r3, r7, #3
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2207      	movs	r2, #7
 8007762:	4013      	ands	r3, r2
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	0013      	movs	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	189b      	adds	r3, r3, r2
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	18d3      	adds	r3, r2, r3
 8007772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	705a      	strb	r2, [r3, #1]
 800777a:	e00f      	b.n	800779c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800777c:	1cfb      	adds	r3, r7, #3
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2207      	movs	r2, #7
 8007782:	401a      	ands	r2, r3
 8007784:	0013      	movs	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	189b      	adds	r3, r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	3369      	adds	r3, #105	; 0x69
 800778e:	33ff      	adds	r3, #255	; 0xff
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	18d3      	adds	r3, r2, r3
 8007794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077a2:	1cfb      	adds	r3, r7, #3
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2207      	movs	r2, #7
 80077a8:	4013      	ands	r3, r2
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	23aa      	movs	r3, #170	; 0xaa
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	5cd3      	ldrb	r3, [r2, r3]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_PCD_EP_ClrStall+0x90>
 80077bc:	2302      	movs	r3, #2
 80077be:	e011      	b.n	80077e4 <HAL_PCD_EP_ClrStall+0xb4>
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	23aa      	movs	r3, #170	; 0xaa
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	2101      	movs	r1, #1
 80077c8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	0011      	movs	r1, r2
 80077d2:	0018      	movs	r0, r3
 80077d4:	f005 faae 	bl	800cd34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	23aa      	movs	r3, #170	; 0xaa
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	2100      	movs	r1, #0
 80077e0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	0018      	movs	r0, r3
 80077e6:	46bd      	mov	sp, r7
 80077e8:	b004      	add	sp, #16
 80077ea:	bd80      	pop	{r7, pc}

080077ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80077ec:	b5b0      	push	{r4, r5, r7, lr}
 80077ee:	b08e      	sub	sp, #56	; 0x38
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80077f4:	e31c      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
  {
    wIstr = hpcd->Instance->ISTR;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	202e      	movs	r0, #46	; 0x2e
 80077fc:	183b      	adds	r3, r7, r0
 80077fe:	2144      	movs	r1, #68	; 0x44
 8007800:	5a52      	ldrh	r2, [r2, r1]
 8007802:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007804:	183b      	adds	r3, r7, r0
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b2da      	uxtb	r2, r3
 800780a:	242d      	movs	r4, #45	; 0x2d
 800780c:	193b      	adds	r3, r7, r4
 800780e:	210f      	movs	r1, #15
 8007810:	400a      	ands	r2, r1
 8007812:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8007814:	193b      	adds	r3, r7, r4
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d000      	beq.n	800781e <PCD_EP_ISR_Handler+0x32>
 800781c:	e15d      	b.n	8007ada <PCD_EP_ISR_Handler+0x2ee>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800781e:	183b      	adds	r3, r7, r0
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	2210      	movs	r2, #16
 8007824:	4013      	ands	r3, r2
 8007826:	d152      	bne.n	80078ce <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29a      	uxth	r2, r3
 8007830:	200e      	movs	r0, #14
 8007832:	183b      	adds	r3, r7, r0
 8007834:	49da      	ldr	r1, [pc, #872]	; (8007ba0 <PCD_EP_ISR_Handler+0x3b4>)
 8007836:	400a      	ands	r2, r1
 8007838:	801a      	strh	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	183a      	adds	r2, r7, r0
 8007840:	8812      	ldrh	r2, [r2, #0]
 8007842:	49d8      	ldr	r1, [pc, #864]	; (8007ba4 <PCD_EP_ISR_Handler+0x3b8>)
 8007844:	430a      	orrs	r2, r1
 8007846:	b292      	uxth	r2, r2
 8007848:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3328      	adds	r3, #40	; 0x28
 800784e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2250      	movs	r2, #80	; 0x50
 8007856:	5a9b      	ldrh	r3, [r3, r2]
 8007858:	b29b      	uxth	r3, r3
 800785a:	001a      	movs	r2, r3
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	18d2      	adds	r2, r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	18d3      	adds	r3, r2, r3
 800786a:	4acf      	ldr	r2, [pc, #828]	; (8007ba8 <PCD_EP_ISR_Handler+0x3bc>)
 800786c:	4694      	mov	ip, r2
 800786e:	4463      	add	r3, ip
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	059b      	lsls	r3, r3, #22
 8007874:	0d9a      	lsrs	r2, r3, #22
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	18d2      	adds	r2, r2, r3
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2100      	movs	r1, #0
 800788c:	0018      	movs	r0, r3
 800788e:	f007 fb67 	bl	800ef60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2224      	movs	r2, #36	; 0x24
 8007896:	5c9b      	ldrb	r3, [r3, r2]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d100      	bne.n	80078a0 <PCD_EP_ISR_Handler+0xb4>
 800789e:	e2c7      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d000      	beq.n	80078aa <PCD_EP_ISR_Handler+0xbe>
 80078a8:	e2c2      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2224      	movs	r2, #36	; 0x24
 80078ae:	5c9b      	ldrb	r3, [r3, r2]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	4252      	negs	r2, r2
 80078b6:	4313      	orrs	r3, r2
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	b291      	uxth	r1, r2
 80078c0:	224c      	movs	r2, #76	; 0x4c
 80078c2:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2224      	movs	r2, #36	; 0x24
 80078c8:	2100      	movs	r1, #0
 80078ca:	5499      	strb	r1, [r3, r2]
 80078cc:	e2b0      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3369      	adds	r3, #105	; 0x69
 80078d2:	33ff      	adds	r3, #255	; 0xff
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	212a      	movs	r1, #42	; 0x2a
 80078dc:	187b      	adds	r3, r7, r1
 80078de:	8812      	ldrh	r2, [r2, #0]
 80078e0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80078e2:	187b      	adds	r3, r7, r1
 80078e4:	881a      	ldrh	r2, [r3, #0]
 80078e6:	2380      	movs	r3, #128	; 0x80
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	4013      	ands	r3, r2
 80078ec:	d037      	beq.n	800795e <PCD_EP_ISR_Handler+0x172>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2250      	movs	r2, #80	; 0x50
 80078f4:	5a9b      	ldrh	r3, [r3, r2]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	001a      	movs	r2, r3
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	18d2      	adds	r2, r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	18d3      	adds	r3, r2, r3
 8007908:	4aa8      	ldr	r2, [pc, #672]	; (8007bac <PCD_EP_ISR_Handler+0x3c0>)
 800790a:	4694      	mov	ip, r2
 800790c:	4463      	add	r3, ip
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	059b      	lsls	r3, r3, #22
 8007912:	0d9a      	lsrs	r2, r3, #22
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	22ac      	movs	r2, #172	; 0xac
 8007920:	0092      	lsls	r2, r2, #2
 8007922:	1899      	adds	r1, r3, r2
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800792c:	b29b      	uxth	r3, r3
 800792e:	f005 fb2f 	bl	800cf90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29a      	uxth	r2, r3
 800793a:	2010      	movs	r0, #16
 800793c:	183b      	adds	r3, r7, r0
 800793e:	499c      	ldr	r1, [pc, #624]	; (8007bb0 <PCD_EP_ISR_Handler+0x3c4>)
 8007940:	400a      	ands	r2, r1
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	183a      	adds	r2, r7, r0
 800794a:	8812      	ldrh	r2, [r2, #0]
 800794c:	2180      	movs	r1, #128	; 0x80
 800794e:	430a      	orrs	r2, r1
 8007950:	b292      	uxth	r2, r2
 8007952:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	0018      	movs	r0, r3
 8007958:	f007 facc 	bl	800eef4 <HAL_PCD_SetupStageCallback>
 800795c:	e268      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800795e:	232a      	movs	r3, #42	; 0x2a
 8007960:	18fb      	adds	r3, r7, r3
 8007962:	2200      	movs	r2, #0
 8007964:	5e9b      	ldrsh	r3, [r3, r2]
 8007966:	2b00      	cmp	r3, #0
 8007968:	db00      	blt.n	800796c <PCD_EP_ISR_Handler+0x180>
 800796a:	e261      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29a      	uxth	r2, r3
 8007974:	201c      	movs	r0, #28
 8007976:	183b      	adds	r3, r7, r0
 8007978:	498d      	ldr	r1, [pc, #564]	; (8007bb0 <PCD_EP_ISR_Handler+0x3c4>)
 800797a:	400a      	ands	r2, r1
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	183a      	adds	r2, r7, r0
 8007984:	8812      	ldrh	r2, [r2, #0]
 8007986:	2180      	movs	r1, #128	; 0x80
 8007988:	430a      	orrs	r2, r1
 800798a:	b292      	uxth	r2, r2
 800798c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2250      	movs	r2, #80	; 0x50
 8007994:	5a9b      	ldrh	r3, [r3, r2]
 8007996:	b29b      	uxth	r3, r3
 8007998:	001a      	movs	r2, r3
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	18d2      	adds	r2, r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	18d3      	adds	r3, r2, r3
 80079a8:	4a80      	ldr	r2, [pc, #512]	; (8007bac <PCD_EP_ISR_Handler+0x3c0>)
 80079aa:	4694      	mov	ip, r2
 80079ac:	4463      	add	r3, ip
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	059b      	lsls	r3, r3, #22
 80079b2:	0d9a      	lsrs	r2, r3, #22
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01a      	beq.n	80079f6 <PCD_EP_ISR_Handler+0x20a>
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d016      	beq.n	80079f6 <PCD_EP_ISR_Handler+0x20a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	6959      	ldr	r1, [r3, #20]
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f005 fad9 	bl	800cf90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	695a      	ldr	r2, [r3, #20]
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	18d2      	adds	r2, r2, r3
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2100      	movs	r1, #0
 80079f0:	0018      	movs	r0, r3
 80079f2:	f007 fa94 	bl	800ef1e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2250      	movs	r2, #80	; 0x50
 8007a02:	5a9b      	ldrh	r3, [r3, r2]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	001a      	movs	r2, r3
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	189b      	adds	r3, r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	4a66      	ldr	r2, [pc, #408]	; (8007bac <PCD_EP_ISR_Handler+0x3c0>)
 8007a12:	4694      	mov	ip, r2
 8007a14:	4463      	add	r3, ip
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d110      	bne.n	8007a42 <PCD_EP_ISR_Handler+0x256>
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	4a63      	ldr	r2, [pc, #396]	; (8007bb4 <PCD_EP_ISR_Handler+0x3c8>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4a5b      	ldr	r2, [pc, #364]	; (8007ba4 <PCD_EP_ISR_Handler+0x3b8>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e02b      	b.n	8007a9a <PCD_EP_ISR_Handler+0x2ae>
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b3e      	cmp	r3, #62	; 0x3e
 8007a48:	d812      	bhi.n	8007a70 <PCD_EP_ISR_Handler+0x284>
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	633b      	str	r3, [r7, #48]	; 0x30
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2201      	movs	r2, #1
 8007a58:	4013      	ands	r3, r2
 8007a5a:	d002      	beq.n	8007a62 <PCD_EP_ISR_Handler+0x276>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	3301      	adds	r3, #1
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	029b      	lsls	r3, r3, #10
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	801a      	strh	r2, [r3, #0]
 8007a6e:	e014      	b.n	8007a9a <PCD_EP_ISR_Handler+0x2ae>
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	633b      	str	r3, [r7, #48]	; 0x30
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	221f      	movs	r2, #31
 8007a7e:	4013      	ands	r3, r2
 8007a80:	d102      	bne.n	8007a88 <PCD_EP_ISR_Handler+0x29c>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	3b01      	subs	r3, #1
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	029b      	lsls	r3, r3, #10
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4a44      	ldr	r2, [pc, #272]	; (8007ba4 <PCD_EP_ISR_Handler+0x3b8>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	2012      	movs	r0, #18
 8007aa4:	183b      	adds	r3, r7, r0
 8007aa6:	4944      	ldr	r1, [pc, #272]	; (8007bb8 <PCD_EP_ISR_Handler+0x3cc>)
 8007aa8:	400a      	ands	r2, r1
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	183b      	adds	r3, r7, r0
 8007aae:	183a      	adds	r2, r7, r0
 8007ab0:	8812      	ldrh	r2, [r2, #0]
 8007ab2:	2180      	movs	r1, #128	; 0x80
 8007ab4:	0149      	lsls	r1, r1, #5
 8007ab6:	404a      	eors	r2, r1
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	183b      	adds	r3, r7, r0
 8007abc:	183a      	adds	r2, r7, r0
 8007abe:	8812      	ldrh	r2, [r2, #0]
 8007ac0:	2180      	movs	r1, #128	; 0x80
 8007ac2:	0189      	lsls	r1, r1, #6
 8007ac4:	404a      	eors	r2, r1
 8007ac6:	801a      	strh	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	183a      	adds	r2, r7, r0
 8007ace:	8812      	ldrh	r2, [r2, #0]
 8007ad0:	493a      	ldr	r1, [pc, #232]	; (8007bbc <PCD_EP_ISR_Handler+0x3d0>)
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	b292      	uxth	r2, r2
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	e1aa      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	001a      	movs	r2, r3
 8007ae0:	202d      	movs	r0, #45	; 0x2d
 8007ae2:	183b      	adds	r3, r7, r0
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	18d2      	adds	r2, r2, r3
 8007aea:	212a      	movs	r1, #42	; 0x2a
 8007aec:	187b      	adds	r3, r7, r1
 8007aee:	8812      	ldrh	r2, [r2, #0]
 8007af0:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007af2:	187b      	adds	r3, r7, r1
 8007af4:	2200      	movs	r2, #0
 8007af6:	5e9b      	ldrsh	r3, [r3, r2]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	db00      	blt.n	8007afe <PCD_EP_ISR_Handler+0x312>
 8007afc:	e10b      	b.n	8007d16 <PCD_EP_ISR_Handler+0x52a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	001a      	movs	r2, r3
 8007b04:	183b      	adds	r3, r7, r0
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	18d3      	adds	r3, r2, r3
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	2428      	movs	r4, #40	; 0x28
 8007b12:	193b      	adds	r3, r7, r4
 8007b14:	4926      	ldr	r1, [pc, #152]	; (8007bb0 <PCD_EP_ISR_Handler+0x3c4>)
 8007b16:	400a      	ands	r2, r1
 8007b18:	801a      	strh	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	001a      	movs	r2, r3
 8007b20:	183b      	adds	r3, r7, r0
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	18d3      	adds	r3, r2, r3
 8007b28:	193a      	adds	r2, r7, r4
 8007b2a:	8812      	ldrh	r2, [r2, #0]
 8007b2c:	2180      	movs	r1, #128	; 0x80
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	b292      	uxth	r2, r2
 8007b32:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007b34:	183b      	adds	r3, r7, r0
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	0013      	movs	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	189b      	adds	r3, r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	3369      	adds	r3, #105	; 0x69
 8007b42:	33ff      	adds	r3, #255	; 0xff
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	18d3      	adds	r3, r2, r3
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	7b1b      	ldrb	r3, [r3, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d136      	bne.n	8007bc0 <PCD_EP_ISR_Handler+0x3d4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2250      	movs	r2, #80	; 0x50
 8007b58:	5a9b      	ldrh	r3, [r3, r2]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	001a      	movs	r2, r3
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	18d2      	adds	r2, r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	18d3      	adds	r3, r2, r3
 8007b6c:	4a0f      	ldr	r2, [pc, #60]	; (8007bac <PCD_EP_ISR_Handler+0x3c0>)
 8007b6e:	4694      	mov	ip, r2
 8007b70:	4463      	add	r3, ip
 8007b72:	881a      	ldrh	r2, [r3, #0]
 8007b74:	2436      	movs	r4, #54	; 0x36
 8007b76:	193b      	adds	r3, r7, r4
 8007b78:	0592      	lsls	r2, r2, #22
 8007b7a:	0d92      	lsrs	r2, r2, #22
 8007b7c:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8007b7e:	193b      	adds	r3, r7, r4
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d100      	bne.n	8007b88 <PCD_EP_ISR_Handler+0x39c>
 8007b86:	e09e      	b.n	8007cc6 <PCD_EP_ISR_Handler+0x4da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	6959      	ldr	r1, [r3, #20]
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	88da      	ldrh	r2, [r3, #6]
 8007b94:	193b      	adds	r3, r7, r4
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	f005 f9fa 	bl	800cf90 <USB_ReadPMA>
 8007b9c:	e093      	b.n	8007cc6 <PCD_EP_ISR_Handler+0x4da>
 8007b9e:	46c0      	nop			; (mov r8, r8)
 8007ba0:	ffff8f0f 	.word	0xffff8f0f
 8007ba4:	ffff8000 	.word	0xffff8000
 8007ba8:	00000402 	.word	0x00000402
 8007bac:	00000406 	.word	0x00000406
 8007bb0:	00000f8f 	.word	0x00000f8f
 8007bb4:	ffff83ff 	.word	0xffff83ff
 8007bb8:	ffffbf8f 	.word	0xffffbf8f
 8007bbc:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	78db      	ldrb	r3, [r3, #3]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d10c      	bne.n	8007be2 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007bc8:	2336      	movs	r3, #54	; 0x36
 8007bca:	18fc      	adds	r4, r7, r3
 8007bcc:	232a      	movs	r3, #42	; 0x2a
 8007bce:	18fb      	adds	r3, r7, r3
 8007bd0:	881a      	ldrh	r2, [r3, #0]
 8007bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f000 f944 	bl	8007e64 <HAL_PCD_EP_DB_Receive>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	8023      	strh	r3, [r4, #0]
 8007be0:	e071      	b.n	8007cc6 <PCD_EP_ISR_Handler+0x4da>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	001a      	movs	r2, r3
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	18d3      	adds	r3, r2, r3
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	2022      	movs	r0, #34	; 0x22
 8007bf6:	183b      	adds	r3, r7, r0
 8007bf8:	4994      	ldr	r1, [pc, #592]	; (8007e4c <PCD_EP_ISR_Handler+0x660>)
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	801a      	strh	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	001a      	movs	r2, r3
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	18d3      	adds	r3, r2, r3
 8007c0c:	183a      	adds	r2, r7, r0
 8007c0e:	8812      	ldrh	r2, [r2, #0]
 8007c10:	498f      	ldr	r1, [pc, #572]	; (8007e50 <PCD_EP_ISR_Handler+0x664>)
 8007c12:	430a      	orrs	r2, r1
 8007c14:	b292      	uxth	r2, r2
 8007c16:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	001a      	movs	r2, r3
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	18d3      	adds	r3, r2, r3
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	001a      	movs	r2, r3
 8007c2c:	2380      	movs	r3, #128	; 0x80
 8007c2e:	01db      	lsls	r3, r3, #7
 8007c30:	4013      	ands	r3, r2
 8007c32:	d024      	beq.n	8007c7e <PCD_EP_ISR_Handler+0x492>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2250      	movs	r2, #80	; 0x50
 8007c3a:	5a9b      	ldrh	r3, [r3, r2]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	001a      	movs	r2, r3
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	18d2      	adds	r2, r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	18d3      	adds	r3, r2, r3
 8007c4e:	4a81      	ldr	r2, [pc, #516]	; (8007e54 <PCD_EP_ISR_Handler+0x668>)
 8007c50:	4694      	mov	ip, r2
 8007c52:	4463      	add	r3, ip
 8007c54:	881a      	ldrh	r2, [r3, #0]
 8007c56:	2436      	movs	r4, #54	; 0x36
 8007c58:	193b      	adds	r3, r7, r4
 8007c5a:	0592      	lsls	r2, r2, #22
 8007c5c:	0d92      	lsrs	r2, r2, #22
 8007c5e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8007c60:	193b      	adds	r3, r7, r4
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d02e      	beq.n	8007cc6 <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	6959      	ldr	r1, [r3, #20]
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	891a      	ldrh	r2, [r3, #8]
 8007c74:	193b      	adds	r3, r7, r4
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	f005 f98a 	bl	800cf90 <USB_ReadPMA>
 8007c7c:	e023      	b.n	8007cc6 <PCD_EP_ISR_Handler+0x4da>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2250      	movs	r2, #80	; 0x50
 8007c84:	5a9b      	ldrh	r3, [r3, r2]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	001a      	movs	r2, r3
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	18d2      	adds	r2, r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	18d3      	adds	r3, r2, r3
 8007c98:	4a6f      	ldr	r2, [pc, #444]	; (8007e58 <PCD_EP_ISR_Handler+0x66c>)
 8007c9a:	4694      	mov	ip, r2
 8007c9c:	4463      	add	r3, ip
 8007c9e:	881a      	ldrh	r2, [r3, #0]
 8007ca0:	2436      	movs	r4, #54	; 0x36
 8007ca2:	193b      	adds	r3, r7, r4
 8007ca4:	0592      	lsls	r2, r2, #22
 8007ca6:	0d92      	lsrs	r2, r2, #22
 8007ca8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8007caa:	193b      	adds	r3, r7, r4
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	6959      	ldr	r1, [r3, #20]
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	895a      	ldrh	r2, [r3, #10]
 8007cbe:	193b      	adds	r3, r7, r4
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	f005 f965 	bl	800cf90 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	69da      	ldr	r2, [r3, #28]
 8007cca:	2136      	movs	r1, #54	; 0x36
 8007ccc:	187b      	adds	r3, r7, r1
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	18d2      	adds	r2, r2, r3
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	695a      	ldr	r2, [r3, #20]
 8007cda:	187b      	adds	r3, r7, r1
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	18d2      	adds	r2, r2, r3
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <PCD_EP_ISR_Handler+0x50c>
 8007cec:	187b      	adds	r3, r7, r1
 8007cee:	881a      	ldrh	r2, [r3, #0]
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d207      	bcs.n	8007d08 <PCD_EP_ISR_Handler+0x51c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0011      	movs	r1, r2
 8007d00:	0018      	movs	r0, r3
 8007d02:	f007 f90c 	bl	800ef1e <HAL_PCD_DataOutStageCallback>
 8007d06:	e006      	b.n	8007d16 <PCD_EP_ISR_Handler+0x52a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0e:	0011      	movs	r1, r2
 8007d10:	0018      	movs	r0, r3
 8007d12:	f003 fe9d 	bl	800ba50 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007d16:	242a      	movs	r4, #42	; 0x2a
 8007d18:	193b      	adds	r3, r7, r4
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	2280      	movs	r2, #128	; 0x80
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d100      	bne.n	8007d24 <PCD_EP_ISR_Handler+0x538>
 8007d22:	e085      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
      {
        ep = &hpcd->IN_ep[epindex];
 8007d24:	202d      	movs	r0, #45	; 0x2d
 8007d26:	183b      	adds	r3, r7, r0
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	0013      	movs	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	189b      	adds	r3, r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	18d3      	adds	r3, r2, r3
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	001a      	movs	r2, r3
 8007d40:	183b      	adds	r3, r7, r0
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	18d3      	adds	r3, r2, r3
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	2520      	movs	r5, #32
 8007d4e:	197b      	adds	r3, r7, r5
 8007d50:	4942      	ldr	r1, [pc, #264]	; (8007e5c <PCD_EP_ISR_Handler+0x670>)
 8007d52:	400a      	ands	r2, r1
 8007d54:	801a      	strh	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	001a      	movs	r2, r3
 8007d5c:	183b      	adds	r3, r7, r0
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	18d3      	adds	r3, r2, r3
 8007d64:	197a      	adds	r2, r7, r5
 8007d66:	8812      	ldrh	r2, [r2, #0]
 8007d68:	493d      	ldr	r1, [pc, #244]	; (8007e60 <PCD_EP_ISR_Handler+0x674>)
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	b292      	uxth	r2, r2
 8007d6e:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	78db      	ldrb	r3, [r3, #3]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d109      	bne.n	8007d8c <PCD_EP_ISR_Handler+0x5a0>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d14f      	bne.n	8007e20 <PCD_EP_ISR_Handler+0x634>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007d80:	193b      	adds	r3, r7, r4
 8007d82:	881a      	ldrh	r2, [r3, #0]
 8007d84:	2380      	movs	r3, #128	; 0x80
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	4013      	ands	r3, r2
 8007d8a:	d149      	bne.n	8007e20 <PCD_EP_ISR_Handler+0x634>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2250      	movs	r2, #80	; 0x50
 8007d92:	5a9b      	ldrh	r3, [r3, r2]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	001a      	movs	r2, r3
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	18d2      	adds	r2, r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	18d3      	adds	r3, r2, r3
 8007da6:	4a2b      	ldr	r2, [pc, #172]	; (8007e54 <PCD_EP_ISR_Handler+0x668>)
 8007da8:	4694      	mov	ip, r2
 8007daa:	4463      	add	r3, ip
 8007dac:	881a      	ldrh	r2, [r3, #0]
 8007dae:	211e      	movs	r1, #30
 8007db0:	187b      	adds	r3, r7, r1
 8007db2:	0592      	lsls	r2, r2, #22
 8007db4:	0d92      	lsrs	r2, r2, #22
 8007db6:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	699a      	ldr	r2, [r3, #24]
 8007dbc:	187b      	adds	r3, r7, r1
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d907      	bls.n	8007dd4 <PCD_EP_ISR_Handler+0x5e8>
          {
            ep->xfer_len -= TxByteNbre;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	699a      	ldr	r2, [r3, #24]
 8007dc8:	187b      	adds	r3, r7, r1
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	1ad2      	subs	r2, r2, r3
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	619a      	str	r2, [r3, #24]
 8007dd2:	e002      	b.n	8007dda <PCD_EP_ISR_Handler+0x5ee>
          }
          else
          {
            ep->xfer_len = 0U;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d107      	bne.n	8007df2 <PCD_EP_ISR_Handler+0x606>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	0011      	movs	r1, r2
 8007dea:	0018      	movs	r0, r3
 8007dec:	f007 f8b8 	bl	800ef60 <HAL_PCD_DataInStageCallback>
 8007df0:	e01e      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	211e      	movs	r1, #30
 8007df8:	187b      	adds	r3, r7, r1
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	18d2      	adds	r2, r2, r3
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	69da      	ldr	r2, [r3, #28]
 8007e06:	187b      	adds	r3, r7, r1
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	18d2      	adds	r2, r2, r3
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e16:	0011      	movs	r1, r2
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f003 fe19 	bl	800ba50 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8007e1e:	e007      	b.n	8007e30 <PCD_EP_ISR_Handler+0x644>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007e20:	232a      	movs	r3, #42	; 0x2a
 8007e22:	18fb      	adds	r3, r7, r3
 8007e24:	881a      	ldrh	r2, [r3, #0]
 8007e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f000 f936 	bl	800809c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2244      	movs	r2, #68	; 0x44
 8007e36:	5a9b      	ldrh	r3, [r3, r2]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	b21b      	sxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	da00      	bge.n	8007e42 <PCD_EP_ISR_Handler+0x656>
 8007e40:	e4d9      	b.n	80077f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	0018      	movs	r0, r3
 8007e46:	46bd      	mov	sp, r7
 8007e48:	b00e      	add	sp, #56	; 0x38
 8007e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e4c:	ffff8f8f 	.word	0xffff8f8f
 8007e50:	ffff80c0 	.word	0xffff80c0
 8007e54:	00000402 	.word	0x00000402
 8007e58:	00000406 	.word	0x00000406
 8007e5c:	ffff8f0f 	.word	0xffff8f0f
 8007e60:	ffff8000 	.word	0xffff8000

08007e64 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b089      	sub	sp, #36	; 0x24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	1dbb      	adds	r3, r7, #6
 8007e70:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007e72:	1dbb      	adds	r3, r7, #6
 8007e74:	881a      	ldrh	r2, [r3, #0]
 8007e76:	2380      	movs	r3, #128	; 0x80
 8007e78:	01db      	lsls	r3, r3, #7
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d100      	bne.n	8007e80 <HAL_PCD_EP_DB_Receive+0x1c>
 8007e7e:	e07d      	b.n	8007f7c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2250      	movs	r2, #80	; 0x50
 8007e86:	5a9b      	ldrh	r3, [r3, r2]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	001a      	movs	r2, r3
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	18d2      	adds	r2, r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	18d3      	adds	r3, r2, r3
 8007e9a:	4a7a      	ldr	r2, [pc, #488]	; (8008084 <HAL_PCD_EP_DB_Receive+0x220>)
 8007e9c:	4694      	mov	ip, r2
 8007e9e:	4463      	add	r3, ip
 8007ea0:	881a      	ldrh	r2, [r3, #0]
 8007ea2:	211a      	movs	r1, #26
 8007ea4:	187b      	adds	r3, r7, r1
 8007ea6:	0592      	lsls	r2, r2, #22
 8007ea8:	0d92      	lsrs	r2, r2, #22
 8007eaa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	699a      	ldr	r2, [r3, #24]
 8007eb0:	187b      	adds	r3, r7, r1
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d307      	bcc.n	8007ec8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	699a      	ldr	r2, [r3, #24]
 8007ebc:	187b      	adds	r3, r7, r1
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	619a      	str	r2, [r3, #24]
 8007ec6:	e002      	b.n	8007ece <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d121      	bne.n	8007f1a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	001a      	movs	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	18d3      	adds	r3, r2, r3
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	2018      	movs	r0, #24
 8007eea:	183b      	adds	r3, r7, r0
 8007eec:	4966      	ldr	r1, [pc, #408]	; (8008088 <HAL_PCD_EP_DB_Receive+0x224>)
 8007eee:	400a      	ands	r2, r1
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	183b      	adds	r3, r7, r0
 8007ef4:	183a      	adds	r2, r7, r0
 8007ef6:	8812      	ldrh	r2, [r2, #0]
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	0189      	lsls	r1, r1, #6
 8007efc:	404a      	eors	r2, r1
 8007efe:	801a      	strh	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	001a      	movs	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	18d3      	adds	r3, r2, r3
 8007f0e:	183a      	adds	r2, r7, r0
 8007f10:	8812      	ldrh	r2, [r2, #0]
 8007f12:	495e      	ldr	r1, [pc, #376]	; (800808c <HAL_PCD_EP_DB_Receive+0x228>)
 8007f14:	430a      	orrs	r2, r1
 8007f16:	b292      	uxth	r2, r2
 8007f18:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f1a:	1dbb      	adds	r3, r7, #6
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	2240      	movs	r2, #64	; 0x40
 8007f20:	4013      	ands	r3, r2
 8007f22:	d01a      	beq.n	8007f5a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	001a      	movs	r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	18d3      	adds	r3, r2, r3
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	2016      	movs	r0, #22
 8007f38:	183b      	adds	r3, r7, r0
 8007f3a:	4955      	ldr	r1, [pc, #340]	; (8008090 <HAL_PCD_EP_DB_Receive+0x22c>)
 8007f3c:	400a      	ands	r2, r1
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	001a      	movs	r2, r3
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	18d3      	adds	r3, r2, r3
 8007f4e:	183a      	adds	r2, r7, r0
 8007f50:	8812      	ldrh	r2, [r2, #0]
 8007f52:	4950      	ldr	r1, [pc, #320]	; (8008094 <HAL_PCD_EP_DB_Receive+0x230>)
 8007f54:	430a      	orrs	r2, r1
 8007f56:	b292      	uxth	r2, r2
 8007f58:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8007f5a:	241a      	movs	r4, #26
 8007f5c:	193b      	adds	r3, r7, r4
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d100      	bne.n	8007f66 <HAL_PCD_EP_DB_Receive+0x102>
 8007f64:	e086      	b.n	8008074 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6959      	ldr	r1, [r3, #20]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	891a      	ldrh	r2, [r3, #8]
 8007f72:	193b      	adds	r3, r7, r4
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	f005 f80b 	bl	800cf90 <USB_ReadPMA>
 8007f7a:	e07b      	b.n	8008074 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2250      	movs	r2, #80	; 0x50
 8007f82:	5a9b      	ldrh	r3, [r3, r2]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	001a      	movs	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	18d2      	adds	r2, r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	18d3      	adds	r3, r2, r3
 8007f96:	4a40      	ldr	r2, [pc, #256]	; (8008098 <HAL_PCD_EP_DB_Receive+0x234>)
 8007f98:	4694      	mov	ip, r2
 8007f9a:	4463      	add	r3, ip
 8007f9c:	881a      	ldrh	r2, [r3, #0]
 8007f9e:	211a      	movs	r1, #26
 8007fa0:	187b      	adds	r3, r7, r1
 8007fa2:	0592      	lsls	r2, r2, #22
 8007fa4:	0d92      	lsrs	r2, r2, #22
 8007fa6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	699a      	ldr	r2, [r3, #24]
 8007fac:	187b      	adds	r3, r7, r1
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d307      	bcc.n	8007fc4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	187b      	adds	r3, r7, r1
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	1ad2      	subs	r2, r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	619a      	str	r2, [r3, #24]
 8007fc2:	e002      	b.n	8007fca <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d121      	bne.n	8008016 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	001a      	movs	r2, r3
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	18d3      	adds	r3, r2, r3
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	201e      	movs	r0, #30
 8007fe6:	183b      	adds	r3, r7, r0
 8007fe8:	4927      	ldr	r1, [pc, #156]	; (8008088 <HAL_PCD_EP_DB_Receive+0x224>)
 8007fea:	400a      	ands	r2, r1
 8007fec:	801a      	strh	r2, [r3, #0]
 8007fee:	183b      	adds	r3, r7, r0
 8007ff0:	183a      	adds	r2, r7, r0
 8007ff2:	8812      	ldrh	r2, [r2, #0]
 8007ff4:	2180      	movs	r1, #128	; 0x80
 8007ff6:	0189      	lsls	r1, r1, #6
 8007ff8:	404a      	eors	r2, r1
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	001a      	movs	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	18d3      	adds	r3, r2, r3
 800800a:	183a      	adds	r2, r7, r0
 800800c:	8812      	ldrh	r2, [r2, #0]
 800800e:	491f      	ldr	r1, [pc, #124]	; (800808c <HAL_PCD_EP_DB_Receive+0x228>)
 8008010:	430a      	orrs	r2, r1
 8008012:	b292      	uxth	r2, r2
 8008014:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008016:	1dbb      	adds	r3, r7, #6
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	2240      	movs	r2, #64	; 0x40
 800801c:	4013      	ands	r3, r2
 800801e:	d11a      	bne.n	8008056 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	001a      	movs	r2, r3
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	18d3      	adds	r3, r2, r3
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29a      	uxth	r2, r3
 8008032:	201c      	movs	r0, #28
 8008034:	183b      	adds	r3, r7, r0
 8008036:	4916      	ldr	r1, [pc, #88]	; (8008090 <HAL_PCD_EP_DB_Receive+0x22c>)
 8008038:	400a      	ands	r2, r1
 800803a:	801a      	strh	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	001a      	movs	r2, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	18d3      	adds	r3, r2, r3
 800804a:	183a      	adds	r2, r7, r0
 800804c:	8812      	ldrh	r2, [r2, #0]
 800804e:	4911      	ldr	r1, [pc, #68]	; (8008094 <HAL_PCD_EP_DB_Receive+0x230>)
 8008050:	430a      	orrs	r2, r1
 8008052:	b292      	uxth	r2, r2
 8008054:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8008056:	241a      	movs	r4, #26
 8008058:	193b      	adds	r3, r7, r4
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d009      	beq.n	8008074 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	6959      	ldr	r1, [r3, #20]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	895a      	ldrh	r2, [r3, #10]
 800806c:	193b      	adds	r3, r7, r4
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	f004 ff8e 	bl	800cf90 <USB_ReadPMA>
    }
  }

  return count;
 8008074:	231a      	movs	r3, #26
 8008076:	18fb      	adds	r3, r7, r3
 8008078:	881b      	ldrh	r3, [r3, #0]
}
 800807a:	0018      	movs	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	b009      	add	sp, #36	; 0x24
 8008080:	bd90      	pop	{r4, r7, pc}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	00000402 	.word	0x00000402
 8008088:	ffffbf8f 	.word	0xffffbf8f
 800808c:	ffff8080 	.word	0xffff8080
 8008090:	ffff8f8f 	.word	0xffff8f8f
 8008094:	ffff80c0 	.word	0xffff80c0
 8008098:	00000406 	.word	0x00000406

0800809c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b094      	sub	sp, #80	; 0x50
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	1dbb      	adds	r3, r7, #6
 80080a8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80080aa:	1dbb      	adds	r3, r7, #6
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	2240      	movs	r2, #64	; 0x40
 80080b0:	4013      	ands	r3, r2
 80080b2:	d100      	bne.n	80080b6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80080b4:	e12e      	b.n	8008314 <HAL_PCD_EP_DB_Transmit+0x278>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2250      	movs	r2, #80	; 0x50
 80080bc:	5a9b      	ldrh	r3, [r3, r2]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	001a      	movs	r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	18d2      	adds	r2, r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	18d3      	adds	r3, r2, r3
 80080d0:	4abb      	ldr	r2, [pc, #748]	; (80083c0 <HAL_PCD_EP_DB_Transmit+0x324>)
 80080d2:	4694      	mov	ip, r2
 80080d4:	4463      	add	r3, ip
 80080d6:	881a      	ldrh	r2, [r3, #0]
 80080d8:	2148      	movs	r1, #72	; 0x48
 80080da:	187b      	adds	r3, r7, r1
 80080dc:	0592      	lsls	r2, r2, #22
 80080de:	0d92      	lsrs	r2, r2, #22
 80080e0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	187b      	adds	r3, r7, r1
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d907      	bls.n	80080fe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	619a      	str	r2, [r3, #24]
 80080fc:	e002      	b.n	8008104 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2200      	movs	r2, #0
 8008102:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d129      	bne.n	8008160 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	0011      	movs	r1, r2
 8008114:	0018      	movs	r0, r3
 8008116:	f006 ff23 	bl	800ef60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800811a:	1dbb      	adds	r3, r7, #6
 800811c:	881a      	ldrh	r2, [r3, #0]
 800811e:	2380      	movs	r3, #128	; 0x80
 8008120:	01db      	lsls	r3, r3, #7
 8008122:	4013      	ands	r3, r2
 8008124:	d100      	bne.n	8008128 <HAL_PCD_EP_DB_Transmit+0x8c>
 8008126:	e230      	b.n	800858a <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	001a      	movs	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	18d3      	adds	r3, r2, r3
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	b29a      	uxth	r2, r3
 800813a:	2016      	movs	r0, #22
 800813c:	183b      	adds	r3, r7, r0
 800813e:	49a1      	ldr	r1, [pc, #644]	; (80083c4 <HAL_PCD_EP_DB_Transmit+0x328>)
 8008140:	400a      	ands	r2, r1
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	001a      	movs	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	18d3      	adds	r3, r2, r3
 8008152:	183a      	adds	r2, r7, r0
 8008154:	8812      	ldrh	r2, [r2, #0]
 8008156:	499c      	ldr	r1, [pc, #624]	; (80083c8 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8008158:	430a      	orrs	r2, r1
 800815a:	b292      	uxth	r2, r2
 800815c:	801a      	strh	r2, [r3, #0]
 800815e:	e214      	b.n	800858a <HAL_PCD_EP_DB_Transmit+0x4ee>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008160:	1dbb      	adds	r3, r7, #6
 8008162:	881a      	ldrh	r2, [r3, #0]
 8008164:	2380      	movs	r3, #128	; 0x80
 8008166:	01db      	lsls	r3, r3, #7
 8008168:	4013      	ands	r3, r2
 800816a:	d01a      	beq.n	80081a2 <HAL_PCD_EP_DB_Transmit+0x106>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	001a      	movs	r2, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	18d3      	adds	r3, r2, r3
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29a      	uxth	r2, r3
 800817e:	202a      	movs	r0, #42	; 0x2a
 8008180:	183b      	adds	r3, r7, r0
 8008182:	4990      	ldr	r1, [pc, #576]	; (80083c4 <HAL_PCD_EP_DB_Transmit+0x328>)
 8008184:	400a      	ands	r2, r1
 8008186:	801a      	strh	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	001a      	movs	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	18d3      	adds	r3, r2, r3
 8008196:	183a      	adds	r2, r7, r0
 8008198:	8812      	ldrh	r2, [r2, #0]
 800819a:	498b      	ldr	r1, [pc, #556]	; (80083c8 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800819c:	430a      	orrs	r2, r1
 800819e:	b292      	uxth	r2, r2
 80081a0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2224      	movs	r2, #36	; 0x24
 80081a6:	5c9b      	ldrb	r3, [r3, r2]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d000      	beq.n	80081ae <HAL_PCD_EP_DB_Transmit+0x112>
 80081ac:	e1ed      	b.n	800858a <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	695a      	ldr	r2, [r3, #20]
 80081b2:	2148      	movs	r1, #72	; 0x48
 80081b4:	187b      	adds	r3, r7, r1
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	18d2      	adds	r2, r2, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	69da      	ldr	r2, [r3, #28]
 80081c2:	187b      	adds	r3, r7, r1
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	18d2      	adds	r2, r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6a1a      	ldr	r2, [r3, #32]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d309      	bcc.n	80081ec <HAL_PCD_EP_DB_Transmit+0x150>
        {
          len = ep->maxpacket;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	6a1a      	ldr	r2, [r3, #32]
 80081e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e4:	1ad2      	subs	r2, r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	621a      	str	r2, [r3, #32]
 80081ea:	e016      	b.n	800821a <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else if (ep->xfer_len_db == 0U)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d108      	bne.n	8008206 <HAL_PCD_EP_DB_Transmit+0x16a>
        {
          len = TxByteNbre;
 80081f4:	2348      	movs	r3, #72	; 0x48
 80081f6:	18fb      	adds	r3, r7, r3
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2224      	movs	r2, #36	; 0x24
 8008200:	2100      	movs	r1, #0
 8008202:	5499      	strb	r1, [r3, r2]
 8008204:	e009      	b.n	800821a <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2224      	movs	r2, #36	; 0x24
 800820a:	2100      	movs	r1, #0
 800820c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2200      	movs	r2, #0
 8008218:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d150      	bne.n	80082c4 <HAL_PCD_EP_DB_Transmit+0x228>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2250      	movs	r2, #80	; 0x50
 800822e:	5a9b      	ldrh	r3, [r3, r2]
 8008230:	b29b      	uxth	r3, r3
 8008232:	001a      	movs	r2, r3
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	189b      	adds	r3, r3, r2
 8008238:	61fb      	str	r3, [r7, #28]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	00da      	lsls	r2, r3, #3
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	18d3      	adds	r3, r2, r3
 8008244:	4a5e      	ldr	r2, [pc, #376]	; (80083c0 <HAL_PCD_EP_DB_Transmit+0x324>)
 8008246:	4694      	mov	ip, r2
 8008248:	4463      	add	r3, ip
 800824a:	61bb      	str	r3, [r7, #24]
 800824c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800824e:	2b00      	cmp	r3, #0
 8008250:	d110      	bne.n	8008274 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29b      	uxth	r3, r3
 8008258:	4a5c      	ldr	r2, [pc, #368]	; (80083cc <HAL_PCD_EP_DB_Transmit+0x330>)
 800825a:	4013      	ands	r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	4a59      	ldr	r2, [pc, #356]	; (80083d0 <HAL_PCD_EP_DB_Transmit+0x334>)
 800826a:	4313      	orrs	r3, r2
 800826c:	b29a      	uxth	r2, r3
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	e044      	b.n	80082fe <HAL_PCD_EP_DB_Transmit+0x262>
 8008274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008276:	2b3e      	cmp	r3, #62	; 0x3e
 8008278:	d810      	bhi.n	800829c <HAL_PCD_EP_DB_Transmit+0x200>
 800827a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800827c:	085b      	lsrs	r3, r3, #1
 800827e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008282:	2201      	movs	r2, #1
 8008284:	4013      	ands	r3, r2
 8008286:	d002      	beq.n	800828e <HAL_PCD_EP_DB_Transmit+0x1f2>
 8008288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828a:	3301      	adds	r3, #1
 800828c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	b29b      	uxth	r3, r3
 8008292:	029b      	lsls	r3, r3, #10
 8008294:	b29a      	uxth	r2, r3
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	e030      	b.n	80082fe <HAL_PCD_EP_DB_Transmit+0x262>
 800829c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082a4:	221f      	movs	r2, #31
 80082a6:	4013      	ands	r3, r2
 80082a8:	d102      	bne.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x214>
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	3b01      	subs	r3, #1
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	029b      	lsls	r3, r3, #10
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	4a45      	ldr	r2, [pc, #276]	; (80083d0 <HAL_PCD_EP_DB_Transmit+0x334>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	b29a      	uxth	r2, r3
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	801a      	strh	r2, [r3, #0]
 80082c2:	e01c      	b.n	80082fe <HAL_PCD_EP_DB_Transmit+0x262>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d118      	bne.n	80082fe <HAL_PCD_EP_DB_Transmit+0x262>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2250      	movs	r2, #80	; 0x50
 80082d8:	5a9b      	ldrh	r3, [r3, r2]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	001a      	movs	r2, r3
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	189b      	adds	r3, r3, r2
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	00da      	lsls	r2, r3, #3
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	18d3      	adds	r3, r2, r3
 80082ee:	4a34      	ldr	r2, [pc, #208]	; (80083c0 <HAL_PCD_EP_DB_Transmit+0x324>)
 80082f0:	4694      	mov	ip, r2
 80082f2:	4463      	add	r3, ip
 80082f4:	623b      	str	r3, [r7, #32]
 80082f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6959      	ldr	r1, [r3, #20]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	891a      	ldrh	r2, [r3, #8]
 800830a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800830c:	b29b      	uxth	r3, r3
 800830e:	f004 fdfb 	bl	800cf08 <USB_WritePMA>
 8008312:	e13a      	b.n	800858a <HAL_PCD_EP_DB_Transmit+0x4ee>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2250      	movs	r2, #80	; 0x50
 800831a:	5a9b      	ldrh	r3, [r3, r2]
 800831c:	b29b      	uxth	r3, r3
 800831e:	001a      	movs	r2, r3
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	18d2      	adds	r2, r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	18d3      	adds	r3, r2, r3
 800832e:	4a29      	ldr	r2, [pc, #164]	; (80083d4 <HAL_PCD_EP_DB_Transmit+0x338>)
 8008330:	4694      	mov	ip, r2
 8008332:	4463      	add	r3, ip
 8008334:	881a      	ldrh	r2, [r3, #0]
 8008336:	2148      	movs	r1, #72	; 0x48
 8008338:	187b      	adds	r3, r7, r1
 800833a:	0592      	lsls	r2, r2, #22
 800833c:	0d92      	lsrs	r2, r2, #22
 800833e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	699a      	ldr	r2, [r3, #24]
 8008344:	187b      	adds	r3, r7, r1
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	429a      	cmp	r2, r3
 800834a:	d307      	bcc.n	800835c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	699a      	ldr	r2, [r3, #24]
 8008350:	187b      	adds	r3, r7, r1
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	619a      	str	r2, [r3, #24]
 800835a:	e002      	b.n	8008362 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d136      	bne.n	80083d8 <HAL_PCD_EP_DB_Transmit+0x33c>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	0011      	movs	r1, r2
 8008372:	0018      	movs	r0, r3
 8008374:	f006 fdf4 	bl	800ef60 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008378:	1dbb      	adds	r3, r7, #6
 800837a:	881a      	ldrh	r2, [r3, #0]
 800837c:	2380      	movs	r3, #128	; 0x80
 800837e:	01db      	lsls	r3, r3, #7
 8008380:	4013      	ands	r3, r2
 8008382:	d000      	beq.n	8008386 <HAL_PCD_EP_DB_Transmit+0x2ea>
 8008384:	e101      	b.n	800858a <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	001a      	movs	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	18d3      	adds	r3, r2, r3
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29a      	uxth	r2, r3
 8008398:	204a      	movs	r0, #74	; 0x4a
 800839a:	183b      	adds	r3, r7, r0
 800839c:	4909      	ldr	r1, [pc, #36]	; (80083c4 <HAL_PCD_EP_DB_Transmit+0x328>)
 800839e:	400a      	ands	r2, r1
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	001a      	movs	r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	18d3      	adds	r3, r2, r3
 80083b0:	183a      	adds	r2, r7, r0
 80083b2:	8812      	ldrh	r2, [r2, #0]
 80083b4:	4904      	ldr	r1, [pc, #16]	; (80083c8 <HAL_PCD_EP_DB_Transmit+0x32c>)
 80083b6:	430a      	orrs	r2, r1
 80083b8:	b292      	uxth	r2, r2
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	e0e5      	b.n	800858a <HAL_PCD_EP_DB_Transmit+0x4ee>
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	00000402 	.word	0x00000402
 80083c4:	ffff8f8f 	.word	0xffff8f8f
 80083c8:	ffffc080 	.word	0xffffc080
 80083cc:	ffff83ff 	.word	0xffff83ff
 80083d0:	ffff8000 	.word	0xffff8000
 80083d4:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80083d8:	1dbb      	adds	r3, r7, #6
 80083da:	881a      	ldrh	r2, [r3, #0]
 80083dc:	2380      	movs	r3, #128	; 0x80
 80083de:	01db      	lsls	r3, r3, #7
 80083e0:	4013      	ands	r3, r2
 80083e2:	d11a      	bne.n	800841a <HAL_PCD_EP_DB_Transmit+0x37e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	001a      	movs	r2, r3
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	18d3      	adds	r3, r2, r3
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	2032      	movs	r0, #50	; 0x32
 80083f8:	183b      	adds	r3, r7, r0
 80083fa:	497a      	ldr	r1, [pc, #488]	; (80085e4 <HAL_PCD_EP_DB_Transmit+0x548>)
 80083fc:	400a      	ands	r2, r1
 80083fe:	801a      	strh	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	001a      	movs	r2, r3
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	18d3      	adds	r3, r2, r3
 800840e:	183a      	adds	r2, r7, r0
 8008410:	8812      	ldrh	r2, [r2, #0]
 8008412:	4975      	ldr	r1, [pc, #468]	; (80085e8 <HAL_PCD_EP_DB_Transmit+0x54c>)
 8008414:	430a      	orrs	r2, r1
 8008416:	b292      	uxth	r2, r2
 8008418:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2224      	movs	r2, #36	; 0x24
 800841e:	5c9b      	ldrb	r3, [r3, r2]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d000      	beq.n	8008426 <HAL_PCD_EP_DB_Transmit+0x38a>
 8008424:	e0b1      	b.n	800858a <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	2148      	movs	r1, #72	; 0x48
 800842c:	187b      	adds	r3, r7, r1
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	18d2      	adds	r2, r2, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	69da      	ldr	r2, [r3, #28]
 800843a:	187b      	adds	r3, r7, r1
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	18d2      	adds	r2, r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	6a1a      	ldr	r2, [r3, #32]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	429a      	cmp	r2, r3
 800844e:	d309      	bcc.n	8008464 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6a1a      	ldr	r2, [r3, #32]
 800845a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800845c:	1ad2      	subs	r2, r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	621a      	str	r2, [r3, #32]
 8008462:	e016      	b.n	8008492 <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else if (ep->xfer_len_db == 0U)
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <HAL_PCD_EP_DB_Transmit+0x3e2>
        {
          len = TxByteNbre;
 800846c:	2348      	movs	r3, #72	; 0x48
 800846e:	18fb      	adds	r3, r7, r3
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2224      	movs	r2, #36	; 0x24
 8008478:	2100      	movs	r1, #0
 800847a:	5499      	strb	r1, [r3, r2]
 800847c:	e009      	b.n	8008492 <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else
        {
          len = ep->xfer_len_db;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2224      	movs	r2, #36	; 0x24
 800848e:	2100      	movs	r1, #0
 8008490:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	643b      	str	r3, [r7, #64]	; 0x40
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d150      	bne.n	8008542 <HAL_PCD_EP_DB_Transmit+0x4a6>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2250      	movs	r2, #80	; 0x50
 80084ac:	5a9b      	ldrh	r3, [r3, r2]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	001a      	movs	r2, r3
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	189b      	adds	r3, r3, r2
 80084b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	00da      	lsls	r2, r3, #3
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	18d3      	adds	r3, r2, r3
 80084c2:	4a4a      	ldr	r2, [pc, #296]	; (80085ec <HAL_PCD_EP_DB_Transmit+0x550>)
 80084c4:	4694      	mov	ip, r2
 80084c6:	4463      	add	r3, ip
 80084c8:	637b      	str	r3, [r7, #52]	; 0x34
 80084ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d110      	bne.n	80084f2 <HAL_PCD_EP_DB_Transmit+0x456>
 80084d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4a46      	ldr	r2, [pc, #280]	; (80085f0 <HAL_PCD_EP_DB_Transmit+0x554>)
 80084d8:	4013      	ands	r3, r2
 80084da:	b29a      	uxth	r2, r3
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	4a43      	ldr	r2, [pc, #268]	; (80085f4 <HAL_PCD_EP_DB_Transmit+0x558>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	801a      	strh	r2, [r3, #0]
 80084f0:	e041      	b.n	8008576 <HAL_PCD_EP_DB_Transmit+0x4da>
 80084f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f4:	2b3e      	cmp	r3, #62	; 0x3e
 80084f6:	d810      	bhi.n	800851a <HAL_PCD_EP_DB_Transmit+0x47e>
 80084f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008500:	2201      	movs	r2, #1
 8008502:	4013      	ands	r3, r2
 8008504:	d002      	beq.n	800850c <HAL_PCD_EP_DB_Transmit+0x470>
 8008506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008508:	3301      	adds	r3, #1
 800850a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800850e:	b29b      	uxth	r3, r3
 8008510:	029b      	lsls	r3, r3, #10
 8008512:	b29a      	uxth	r2, r3
 8008514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e02d      	b.n	8008576 <HAL_PCD_EP_DB_Transmit+0x4da>
 800851a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008522:	221f      	movs	r2, #31
 8008524:	4013      	ands	r3, r2
 8008526:	d102      	bne.n	800852e <HAL_PCD_EP_DB_Transmit+0x492>
 8008528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800852a:	3b01      	subs	r3, #1
 800852c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800852e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008530:	b29b      	uxth	r3, r3
 8008532:	029b      	lsls	r3, r3, #10
 8008534:	b29b      	uxth	r3, r3
 8008536:	4a2f      	ldr	r2, [pc, #188]	; (80085f4 <HAL_PCD_EP_DB_Transmit+0x558>)
 8008538:	4313      	orrs	r3, r2
 800853a:	b29a      	uxth	r2, r3
 800853c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e019      	b.n	8008576 <HAL_PCD_EP_DB_Transmit+0x4da>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d115      	bne.n	8008576 <HAL_PCD_EP_DB_Transmit+0x4da>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2250      	movs	r2, #80	; 0x50
 8008550:	5a9b      	ldrh	r3, [r3, r2]
 8008552:	b29b      	uxth	r3, r3
 8008554:	001a      	movs	r2, r3
 8008556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008558:	189b      	adds	r3, r3, r2
 800855a:	643b      	str	r3, [r7, #64]	; 0x40
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	00da      	lsls	r2, r3, #3
 8008562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008564:	18d3      	adds	r3, r2, r3
 8008566:	4a21      	ldr	r2, [pc, #132]	; (80085ec <HAL_PCD_EP_DB_Transmit+0x550>)
 8008568:	4694      	mov	ip, r2
 800856a:	4463      	add	r3, ip
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800856e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008570:	b29a      	uxth	r2, r3
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6959      	ldr	r1, [r3, #20]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	895a      	ldrh	r2, [r3, #10]
 8008582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008584:	b29b      	uxth	r3, r3
 8008586:	f004 fcbf 	bl	800cf08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	001a      	movs	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	18d3      	adds	r3, r2, r3
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29a      	uxth	r2, r3
 800859c:	2014      	movs	r0, #20
 800859e:	183b      	adds	r3, r7, r0
 80085a0:	4915      	ldr	r1, [pc, #84]	; (80085f8 <HAL_PCD_EP_DB_Transmit+0x55c>)
 80085a2:	400a      	ands	r2, r1
 80085a4:	801a      	strh	r2, [r3, #0]
 80085a6:	183b      	adds	r3, r7, r0
 80085a8:	183a      	adds	r2, r7, r0
 80085aa:	8812      	ldrh	r2, [r2, #0]
 80085ac:	2110      	movs	r1, #16
 80085ae:	404a      	eors	r2, r1
 80085b0:	801a      	strh	r2, [r3, #0]
 80085b2:	183b      	adds	r3, r7, r0
 80085b4:	183a      	adds	r2, r7, r0
 80085b6:	8812      	ldrh	r2, [r2, #0]
 80085b8:	2120      	movs	r1, #32
 80085ba:	404a      	eors	r2, r1
 80085bc:	801a      	strh	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	001a      	movs	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	18d3      	adds	r3, r2, r3
 80085cc:	183a      	adds	r2, r7, r0
 80085ce:	8812      	ldrh	r2, [r2, #0]
 80085d0:	490a      	ldr	r1, [pc, #40]	; (80085fc <HAL_PCD_EP_DB_Transmit+0x560>)
 80085d2:	430a      	orrs	r2, r1
 80085d4:	b292      	uxth	r2, r2
 80085d6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	0018      	movs	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	b014      	add	sp, #80	; 0x50
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	ffff8f8f 	.word	0xffff8f8f
 80085e8:	ffffc080 	.word	0xffffc080
 80085ec:	00000406 	.word	0x00000406
 80085f0:	ffff83ff 	.word	0xffff83ff
 80085f4:	ffff8000 	.word	0xffff8000
 80085f8:	ffff8fbf 	.word	0xffff8fbf
 80085fc:	ffff8080 	.word	0xffff8080

08008600 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	0008      	movs	r0, r1
 800860a:	0011      	movs	r1, r2
 800860c:	607b      	str	r3, [r7, #4]
 800860e:	240a      	movs	r4, #10
 8008610:	193b      	adds	r3, r7, r4
 8008612:	1c02      	adds	r2, r0, #0
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	2308      	movs	r3, #8
 8008618:	18fb      	adds	r3, r7, r3
 800861a:	1c0a      	adds	r2, r1, #0
 800861c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800861e:	0021      	movs	r1, r4
 8008620:	187b      	adds	r3, r7, r1
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	2280      	movs	r2, #128	; 0x80
 8008626:	4013      	ands	r3, r2
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00c      	beq.n	8008648 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800862e:	187b      	adds	r3, r7, r1
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	2207      	movs	r2, #7
 8008634:	4013      	ands	r3, r2
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	0013      	movs	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	189b      	adds	r3, r3, r2
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	18d3      	adds	r3, r2, r3
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	e00b      	b.n	8008660 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008648:	230a      	movs	r3, #10
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	881a      	ldrh	r2, [r3, #0]
 800864e:	0013      	movs	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	189b      	adds	r3, r3, r2
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	3369      	adds	r3, #105	; 0x69
 8008658:	33ff      	adds	r3, #255	; 0xff
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	18d3      	adds	r3, r2, r3
 800865e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008660:	2308      	movs	r3, #8
 8008662:	18fb      	adds	r3, r7, r3
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d107      	bne.n	800867a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2200      	movs	r2, #0
 800866e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	b29a      	uxth	r2, r3
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	80da      	strh	r2, [r3, #6]
 8008678:	e00b      	b.n	8008692 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2201      	movs	r2, #1
 800867e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	b29a      	uxth	r2, r3
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	0c1b      	lsrs	r3, r3, #16
 800868c:	b29a      	uxth	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	0018      	movs	r0, r3
 8008696:	46bd      	mov	sp, r7
 8008698:	b007      	add	sp, #28
 800869a:	bd90      	pop	{r4, r7, pc}

0800869c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	23ba      	movs	r3, #186	; 0xba
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	2101      	movs	r1, #1
 80086b2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	23b8      	movs	r3, #184	; 0xb8
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	2100      	movs	r1, #0
 80086bc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2254      	movs	r2, #84	; 0x54
 80086c2:	5a9b      	ldrh	r3, [r3, r2]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2201      	movs	r2, #1
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b299      	uxth	r1, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2254      	movs	r2, #84	; 0x54
 80086d0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2254      	movs	r2, #84	; 0x54
 80086d6:	5a9b      	ldrh	r3, [r3, r2]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2202      	movs	r2, #2
 80086dc:	4313      	orrs	r3, r2
 80086de:	b299      	uxth	r1, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2254      	movs	r2, #84	; 0x54
 80086e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	0018      	movs	r0, r3
 80086ea:	46bd      	mov	sp, r7
 80086ec:	b004      	add	sp, #16
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	000a      	movs	r2, r1
 80086fa:	1cfb      	adds	r3, r7, #3
 80086fc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	46bd      	mov	sp, r7
 8008702:	b002      	add	sp, #8
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	f000 fb76 	bl	8008e08 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2201      	movs	r2, #1
 8008722:	4013      	ands	r3, r2
 8008724:	d100      	bne.n	8008728 <HAL_RCC_OscConfig+0x20>
 8008726:	e08e      	b.n	8008846 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008728:	4bc5      	ldr	r3, [pc, #788]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	220c      	movs	r2, #12
 800872e:	4013      	ands	r3, r2
 8008730:	2b04      	cmp	r3, #4
 8008732:	d00e      	beq.n	8008752 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008734:	4bc2      	ldr	r3, [pc, #776]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	220c      	movs	r2, #12
 800873a:	4013      	ands	r3, r2
 800873c:	2b08      	cmp	r3, #8
 800873e:	d117      	bne.n	8008770 <HAL_RCC_OscConfig+0x68>
 8008740:	4bbf      	ldr	r3, [pc, #764]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	23c0      	movs	r3, #192	; 0xc0
 8008746:	025b      	lsls	r3, r3, #9
 8008748:	401a      	ands	r2, r3
 800874a:	2380      	movs	r3, #128	; 0x80
 800874c:	025b      	lsls	r3, r3, #9
 800874e:	429a      	cmp	r2, r3
 8008750:	d10e      	bne.n	8008770 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008752:	4bbb      	ldr	r3, [pc, #748]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	2380      	movs	r3, #128	; 0x80
 8008758:	029b      	lsls	r3, r3, #10
 800875a:	4013      	ands	r3, r2
 800875c:	d100      	bne.n	8008760 <HAL_RCC_OscConfig+0x58>
 800875e:	e071      	b.n	8008844 <HAL_RCC_OscConfig+0x13c>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d000      	beq.n	800876a <HAL_RCC_OscConfig+0x62>
 8008768:	e06c      	b.n	8008844 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f000 fb4c 	bl	8008e08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d107      	bne.n	8008788 <HAL_RCC_OscConfig+0x80>
 8008778:	4bb1      	ldr	r3, [pc, #708]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4bb0      	ldr	r3, [pc, #704]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800877e:	2180      	movs	r1, #128	; 0x80
 8008780:	0249      	lsls	r1, r1, #9
 8008782:	430a      	orrs	r2, r1
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e02f      	b.n	80087e8 <HAL_RCC_OscConfig+0xe0>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10c      	bne.n	80087aa <HAL_RCC_OscConfig+0xa2>
 8008790:	4bab      	ldr	r3, [pc, #684]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	4baa      	ldr	r3, [pc, #680]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008796:	49ab      	ldr	r1, [pc, #684]	; (8008a44 <HAL_RCC_OscConfig+0x33c>)
 8008798:	400a      	ands	r2, r1
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	4ba8      	ldr	r3, [pc, #672]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	4ba7      	ldr	r3, [pc, #668]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087a2:	49a9      	ldr	r1, [pc, #676]	; (8008a48 <HAL_RCC_OscConfig+0x340>)
 80087a4:	400a      	ands	r2, r1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	e01e      	b.n	80087e8 <HAL_RCC_OscConfig+0xe0>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d10e      	bne.n	80087d0 <HAL_RCC_OscConfig+0xc8>
 80087b2:	4ba3      	ldr	r3, [pc, #652]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	4ba2      	ldr	r3, [pc, #648]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087b8:	2180      	movs	r1, #128	; 0x80
 80087ba:	02c9      	lsls	r1, r1, #11
 80087bc:	430a      	orrs	r2, r1
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	4b9f      	ldr	r3, [pc, #636]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	4b9e      	ldr	r3, [pc, #632]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087c6:	2180      	movs	r1, #128	; 0x80
 80087c8:	0249      	lsls	r1, r1, #9
 80087ca:	430a      	orrs	r2, r1
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e00b      	b.n	80087e8 <HAL_RCC_OscConfig+0xe0>
 80087d0:	4b9b      	ldr	r3, [pc, #620]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	4b9a      	ldr	r3, [pc, #616]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087d6:	499b      	ldr	r1, [pc, #620]	; (8008a44 <HAL_RCC_OscConfig+0x33c>)
 80087d8:	400a      	ands	r2, r1
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	4b98      	ldr	r3, [pc, #608]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	4b97      	ldr	r3, [pc, #604]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80087e2:	4999      	ldr	r1, [pc, #612]	; (8008a48 <HAL_RCC_OscConfig+0x340>)
 80087e4:	400a      	ands	r2, r1
 80087e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d014      	beq.n	800881a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f0:	f7fa fed8 	bl	80035a4 <HAL_GetTick>
 80087f4:	0003      	movs	r3, r0
 80087f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087f8:	e008      	b.n	800880c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087fa:	f7fa fed3 	bl	80035a4 <HAL_GetTick>
 80087fe:	0002      	movs	r2, r0
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b64      	cmp	r3, #100	; 0x64
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e2fd      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800880c:	4b8c      	ldr	r3, [pc, #560]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	2380      	movs	r3, #128	; 0x80
 8008812:	029b      	lsls	r3, r3, #10
 8008814:	4013      	ands	r3, r2
 8008816:	d0f0      	beq.n	80087fa <HAL_RCC_OscConfig+0xf2>
 8008818:	e015      	b.n	8008846 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800881a:	f7fa fec3 	bl	80035a4 <HAL_GetTick>
 800881e:	0003      	movs	r3, r0
 8008820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008824:	f7fa febe 	bl	80035a4 <HAL_GetTick>
 8008828:	0002      	movs	r2, r0
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b64      	cmp	r3, #100	; 0x64
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e2e8      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008836:	4b82      	ldr	r3, [pc, #520]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	2380      	movs	r3, #128	; 0x80
 800883c:	029b      	lsls	r3, r3, #10
 800883e:	4013      	ands	r3, r2
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x11c>
 8008842:	e000      	b.n	8008846 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008844:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2202      	movs	r2, #2
 800884c:	4013      	ands	r3, r2
 800884e:	d100      	bne.n	8008852 <HAL_RCC_OscConfig+0x14a>
 8008850:	e06c      	b.n	800892c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008852:	4b7b      	ldr	r3, [pc, #492]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	220c      	movs	r2, #12
 8008858:	4013      	ands	r3, r2
 800885a:	d00e      	beq.n	800887a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800885c:	4b78      	ldr	r3, [pc, #480]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	220c      	movs	r2, #12
 8008862:	4013      	ands	r3, r2
 8008864:	2b08      	cmp	r3, #8
 8008866:	d11f      	bne.n	80088a8 <HAL_RCC_OscConfig+0x1a0>
 8008868:	4b75      	ldr	r3, [pc, #468]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	23c0      	movs	r3, #192	; 0xc0
 800886e:	025b      	lsls	r3, r3, #9
 8008870:	401a      	ands	r2, r3
 8008872:	2380      	movs	r3, #128	; 0x80
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	429a      	cmp	r2, r3
 8008878:	d116      	bne.n	80088a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800887a:	4b71      	ldr	r3, [pc, #452]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2202      	movs	r2, #2
 8008880:	4013      	ands	r3, r2
 8008882:	d005      	beq.n	8008890 <HAL_RCC_OscConfig+0x188>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d001      	beq.n	8008890 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e2bb      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008890:	4b6b      	ldr	r3, [pc, #428]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	22f8      	movs	r2, #248	; 0xf8
 8008896:	4393      	bics	r3, r2
 8008898:	0019      	movs	r1, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	00da      	lsls	r2, r3, #3
 80088a0:	4b67      	ldr	r3, [pc, #412]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80088a2:	430a      	orrs	r2, r1
 80088a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088a6:	e041      	b.n	800892c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d024      	beq.n	80088fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088b0:	4b63      	ldr	r3, [pc, #396]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	4b62      	ldr	r3, [pc, #392]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80088b6:	2101      	movs	r1, #1
 80088b8:	430a      	orrs	r2, r1
 80088ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088bc:	f7fa fe72 	bl	80035a4 <HAL_GetTick>
 80088c0:	0003      	movs	r3, r0
 80088c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088c4:	e008      	b.n	80088d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088c6:	f7fa fe6d 	bl	80035a4 <HAL_GetTick>
 80088ca:	0002      	movs	r2, r0
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d901      	bls.n	80088d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e297      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088d8:	4b59      	ldr	r3, [pc, #356]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2202      	movs	r2, #2
 80088de:	4013      	ands	r3, r2
 80088e0:	d0f1      	beq.n	80088c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088e2:	4b57      	ldr	r3, [pc, #348]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	22f8      	movs	r2, #248	; 0xf8
 80088e8:	4393      	bics	r3, r2
 80088ea:	0019      	movs	r1, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	00da      	lsls	r2, r3, #3
 80088f2:	4b53      	ldr	r3, [pc, #332]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80088f4:	430a      	orrs	r2, r1
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e018      	b.n	800892c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088fa:	4b51      	ldr	r3, [pc, #324]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	4b50      	ldr	r3, [pc, #320]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008900:	2101      	movs	r1, #1
 8008902:	438a      	bics	r2, r1
 8008904:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008906:	f7fa fe4d 	bl	80035a4 <HAL_GetTick>
 800890a:	0003      	movs	r3, r0
 800890c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800890e:	e008      	b.n	8008922 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008910:	f7fa fe48 	bl	80035a4 <HAL_GetTick>
 8008914:	0002      	movs	r2, r0
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b02      	cmp	r3, #2
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e272      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008922:	4b47      	ldr	r3, [pc, #284]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2202      	movs	r2, #2
 8008928:	4013      	ands	r3, r2
 800892a:	d1f1      	bne.n	8008910 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2208      	movs	r2, #8
 8008932:	4013      	ands	r3, r2
 8008934:	d036      	beq.n	80089a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d019      	beq.n	8008972 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800893e:	4b40      	ldr	r3, [pc, #256]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008942:	4b3f      	ldr	r3, [pc, #252]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008944:	2101      	movs	r1, #1
 8008946:	430a      	orrs	r2, r1
 8008948:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800894a:	f7fa fe2b 	bl	80035a4 <HAL_GetTick>
 800894e:	0003      	movs	r3, r0
 8008950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008952:	e008      	b.n	8008966 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008954:	f7fa fe26 	bl	80035a4 <HAL_GetTick>
 8008958:	0002      	movs	r2, r0
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e250      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008966:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	2202      	movs	r2, #2
 800896c:	4013      	ands	r3, r2
 800896e:	d0f1      	beq.n	8008954 <HAL_RCC_OscConfig+0x24c>
 8008970:	e018      	b.n	80089a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008972:	4b33      	ldr	r3, [pc, #204]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008976:	4b32      	ldr	r3, [pc, #200]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008978:	2101      	movs	r1, #1
 800897a:	438a      	bics	r2, r1
 800897c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800897e:	f7fa fe11 	bl	80035a4 <HAL_GetTick>
 8008982:	0003      	movs	r3, r0
 8008984:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008986:	e008      	b.n	800899a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008988:	f7fa fe0c 	bl	80035a4 <HAL_GetTick>
 800898c:	0002      	movs	r2, r0
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e236      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800899a:	4b29      	ldr	r3, [pc, #164]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	2202      	movs	r2, #2
 80089a0:	4013      	ands	r3, r2
 80089a2:	d1f1      	bne.n	8008988 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2204      	movs	r2, #4
 80089aa:	4013      	ands	r3, r2
 80089ac:	d100      	bne.n	80089b0 <HAL_RCC_OscConfig+0x2a8>
 80089ae:	e0b5      	b.n	8008b1c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089b0:	201f      	movs	r0, #31
 80089b2:	183b      	adds	r3, r7, r0
 80089b4:	2200      	movs	r2, #0
 80089b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089b8:	4b21      	ldr	r3, [pc, #132]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80089ba:	69da      	ldr	r2, [r3, #28]
 80089bc:	2380      	movs	r3, #128	; 0x80
 80089be:	055b      	lsls	r3, r3, #21
 80089c0:	4013      	ands	r3, r2
 80089c2:	d110      	bne.n	80089e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089c4:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80089c6:	69da      	ldr	r2, [r3, #28]
 80089c8:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80089ca:	2180      	movs	r1, #128	; 0x80
 80089cc:	0549      	lsls	r1, r1, #21
 80089ce:	430a      	orrs	r2, r1
 80089d0:	61da      	str	r2, [r3, #28]
 80089d2:	4b1b      	ldr	r3, [pc, #108]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 80089d4:	69da      	ldr	r2, [r3, #28]
 80089d6:	2380      	movs	r3, #128	; 0x80
 80089d8:	055b      	lsls	r3, r3, #21
 80089da:	4013      	ands	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80089e0:	183b      	adds	r3, r7, r0
 80089e2:	2201      	movs	r2, #1
 80089e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e6:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <HAL_RCC_OscConfig+0x344>)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	4013      	ands	r3, r2
 80089f0:	d11a      	bne.n	8008a28 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089f2:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <HAL_RCC_OscConfig+0x344>)
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <HAL_RCC_OscConfig+0x344>)
 80089f8:	2180      	movs	r1, #128	; 0x80
 80089fa:	0049      	lsls	r1, r1, #1
 80089fc:	430a      	orrs	r2, r1
 80089fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a00:	f7fa fdd0 	bl	80035a4 <HAL_GetTick>
 8008a04:	0003      	movs	r3, r0
 8008a06:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a08:	e008      	b.n	8008a1c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a0a:	f7fa fdcb 	bl	80035a4 <HAL_GetTick>
 8008a0e:	0002      	movs	r2, r0
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	2b64      	cmp	r3, #100	; 0x64
 8008a16:	d901      	bls.n	8008a1c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e1f5      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <HAL_RCC_OscConfig+0x344>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	2380      	movs	r3, #128	; 0x80
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	4013      	ands	r3, r2
 8008a26:	d0f0      	beq.n	8008a0a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d10f      	bne.n	8008a50 <HAL_RCC_OscConfig+0x348>
 8008a30:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	4b02      	ldr	r3, [pc, #8]	; (8008a40 <HAL_RCC_OscConfig+0x338>)
 8008a36:	2101      	movs	r1, #1
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	621a      	str	r2, [r3, #32]
 8008a3c:	e036      	b.n	8008aac <HAL_RCC_OscConfig+0x3a4>
 8008a3e:	46c0      	nop			; (mov r8, r8)
 8008a40:	40021000 	.word	0x40021000
 8008a44:	fffeffff 	.word	0xfffeffff
 8008a48:	fffbffff 	.word	0xfffbffff
 8008a4c:	40007000 	.word	0x40007000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10c      	bne.n	8008a72 <HAL_RCC_OscConfig+0x36a>
 8008a58:	4bca      	ldr	r3, [pc, #808]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a5a:	6a1a      	ldr	r2, [r3, #32]
 8008a5c:	4bc9      	ldr	r3, [pc, #804]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a5e:	2101      	movs	r1, #1
 8008a60:	438a      	bics	r2, r1
 8008a62:	621a      	str	r2, [r3, #32]
 8008a64:	4bc7      	ldr	r3, [pc, #796]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a66:	6a1a      	ldr	r2, [r3, #32]
 8008a68:	4bc6      	ldr	r3, [pc, #792]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	438a      	bics	r2, r1
 8008a6e:	621a      	str	r2, [r3, #32]
 8008a70:	e01c      	b.n	8008aac <HAL_RCC_OscConfig+0x3a4>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	d10c      	bne.n	8008a94 <HAL_RCC_OscConfig+0x38c>
 8008a7a:	4bc2      	ldr	r3, [pc, #776]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a7c:	6a1a      	ldr	r2, [r3, #32]
 8008a7e:	4bc1      	ldr	r3, [pc, #772]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a80:	2104      	movs	r1, #4
 8008a82:	430a      	orrs	r2, r1
 8008a84:	621a      	str	r2, [r3, #32]
 8008a86:	4bbf      	ldr	r3, [pc, #764]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a88:	6a1a      	ldr	r2, [r3, #32]
 8008a8a:	4bbe      	ldr	r3, [pc, #760]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	621a      	str	r2, [r3, #32]
 8008a92:	e00b      	b.n	8008aac <HAL_RCC_OscConfig+0x3a4>
 8008a94:	4bbb      	ldr	r3, [pc, #748]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a96:	6a1a      	ldr	r2, [r3, #32]
 8008a98:	4bba      	ldr	r3, [pc, #744]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	438a      	bics	r2, r1
 8008a9e:	621a      	str	r2, [r3, #32]
 8008aa0:	4bb8      	ldr	r3, [pc, #736]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008aa2:	6a1a      	ldr	r2, [r3, #32]
 8008aa4:	4bb7      	ldr	r3, [pc, #732]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008aa6:	2104      	movs	r1, #4
 8008aa8:	438a      	bics	r2, r1
 8008aaa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d014      	beq.n	8008ade <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ab4:	f7fa fd76 	bl	80035a4 <HAL_GetTick>
 8008ab8:	0003      	movs	r3, r0
 8008aba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008abc:	e009      	b.n	8008ad2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008abe:	f7fa fd71 	bl	80035a4 <HAL_GetTick>
 8008ac2:	0002      	movs	r2, r0
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	4aaf      	ldr	r2, [pc, #700]	; (8008d88 <HAL_RCC_OscConfig+0x680>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e19a      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ad2:	4bac      	ldr	r3, [pc, #688]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	4013      	ands	r3, r2
 8008ada:	d0f0      	beq.n	8008abe <HAL_RCC_OscConfig+0x3b6>
 8008adc:	e013      	b.n	8008b06 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ade:	f7fa fd61 	bl	80035a4 <HAL_GetTick>
 8008ae2:	0003      	movs	r3, r0
 8008ae4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ae6:	e009      	b.n	8008afc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ae8:	f7fa fd5c 	bl	80035a4 <HAL_GetTick>
 8008aec:	0002      	movs	r2, r0
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	4aa5      	ldr	r2, [pc, #660]	; (8008d88 <HAL_RCC_OscConfig+0x680>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d901      	bls.n	8008afc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e185      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008afc:	4ba1      	ldr	r3, [pc, #644]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	2202      	movs	r2, #2
 8008b02:	4013      	ands	r3, r2
 8008b04:	d1f0      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b06:	231f      	movs	r3, #31
 8008b08:	18fb      	adds	r3, r7, r3
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d105      	bne.n	8008b1c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b10:	4b9c      	ldr	r3, [pc, #624]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	4b9b      	ldr	r3, [pc, #620]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b16:	499d      	ldr	r1, [pc, #628]	; (8008d8c <HAL_RCC_OscConfig+0x684>)
 8008b18:	400a      	ands	r2, r1
 8008b1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2210      	movs	r2, #16
 8008b22:	4013      	ands	r3, r2
 8008b24:	d063      	beq.n	8008bee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d12a      	bne.n	8008b84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008b2e:	4b95      	ldr	r3, [pc, #596]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b32:	4b94      	ldr	r3, [pc, #592]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b34:	2104      	movs	r1, #4
 8008b36:	430a      	orrs	r2, r1
 8008b38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8008b3a:	4b92      	ldr	r3, [pc, #584]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b3e:	4b91      	ldr	r3, [pc, #580]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b40:	2101      	movs	r1, #1
 8008b42:	430a      	orrs	r2, r1
 8008b44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b46:	f7fa fd2d 	bl	80035a4 <HAL_GetTick>
 8008b4a:	0003      	movs	r3, r0
 8008b4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008b50:	f7fa fd28 	bl	80035a4 <HAL_GetTick>
 8008b54:	0002      	movs	r2, r0
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e152      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008b62:	4b88      	ldr	r3, [pc, #544]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b66:	2202      	movs	r2, #2
 8008b68:	4013      	ands	r3, r2
 8008b6a:	d0f1      	beq.n	8008b50 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008b6c:	4b85      	ldr	r3, [pc, #532]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	22f8      	movs	r2, #248	; 0xf8
 8008b72:	4393      	bics	r3, r2
 8008b74:	0019      	movs	r1, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	00da      	lsls	r2, r3, #3
 8008b7c:	4b81      	ldr	r3, [pc, #516]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	635a      	str	r2, [r3, #52]	; 0x34
 8008b82:	e034      	b.n	8008bee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	3305      	adds	r3, #5
 8008b8a:	d111      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8008b8c:	4b7d      	ldr	r3, [pc, #500]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b90:	4b7c      	ldr	r3, [pc, #496]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b92:	2104      	movs	r1, #4
 8008b94:	438a      	bics	r2, r1
 8008b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008b98:	4b7a      	ldr	r3, [pc, #488]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9c:	22f8      	movs	r2, #248	; 0xf8
 8008b9e:	4393      	bics	r3, r2
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	00da      	lsls	r2, r3, #3
 8008ba8:	4b76      	ldr	r3, [pc, #472]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008baa:	430a      	orrs	r2, r1
 8008bac:	635a      	str	r2, [r3, #52]	; 0x34
 8008bae:	e01e      	b.n	8008bee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008bb0:	4b74      	ldr	r3, [pc, #464]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb4:	4b73      	ldr	r3, [pc, #460]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8008bbc:	4b71      	ldr	r3, [pc, #452]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bc0:	4b70      	ldr	r3, [pc, #448]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	438a      	bics	r2, r1
 8008bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bc8:	f7fa fcec 	bl	80035a4 <HAL_GetTick>
 8008bcc:	0003      	movs	r3, r0
 8008bce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008bd0:	e008      	b.n	8008be4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008bd2:	f7fa fce7 	bl	80035a4 <HAL_GetTick>
 8008bd6:	0002      	movs	r2, r0
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d901      	bls.n	8008be4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e111      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008be4:	4b67      	ldr	r3, [pc, #412]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be8:	2202      	movs	r2, #2
 8008bea:	4013      	ands	r3, r2
 8008bec:	d1f1      	bne.n	8008bd2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	d05c      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008bf8:	4b62      	ldr	r3, [pc, #392]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	220c      	movs	r2, #12
 8008bfe:	4013      	ands	r3, r2
 8008c00:	2b0c      	cmp	r3, #12
 8008c02:	d00e      	beq.n	8008c22 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008c04:	4b5f      	ldr	r3, [pc, #380]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	220c      	movs	r2, #12
 8008c0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d114      	bne.n	8008c3a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008c10:	4b5c      	ldr	r3, [pc, #368]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	23c0      	movs	r3, #192	; 0xc0
 8008c16:	025b      	lsls	r3, r3, #9
 8008c18:	401a      	ands	r2, r3
 8008c1a:	23c0      	movs	r3, #192	; 0xc0
 8008c1c:	025b      	lsls	r3, r3, #9
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d10b      	bne.n	8008c3a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008c22:	4b58      	ldr	r3, [pc, #352]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c26:	2380      	movs	r3, #128	; 0x80
 8008c28:	025b      	lsls	r3, r3, #9
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	d040      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x5a8>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d03c      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e0e6      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01b      	beq.n	8008c7a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008c42:	4b50      	ldr	r3, [pc, #320]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c46:	4b4f      	ldr	r3, [pc, #316]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008c48:	2180      	movs	r1, #128	; 0x80
 8008c4a:	0249      	lsls	r1, r1, #9
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c50:	f7fa fca8 	bl	80035a4 <HAL_GetTick>
 8008c54:	0003      	movs	r3, r0
 8008c56:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008c58:	e008      	b.n	8008c6c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c5a:	f7fa fca3 	bl	80035a4 <HAL_GetTick>
 8008c5e:	0002      	movs	r2, r0
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d901      	bls.n	8008c6c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e0cd      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008c6c:	4b45      	ldr	r3, [pc, #276]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c70:	2380      	movs	r3, #128	; 0x80
 8008c72:	025b      	lsls	r3, r3, #9
 8008c74:	4013      	ands	r3, r2
 8008c76:	d0f0      	beq.n	8008c5a <HAL_RCC_OscConfig+0x552>
 8008c78:	e01b      	b.n	8008cb2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008c7a:	4b42      	ldr	r3, [pc, #264]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c7e:	4b41      	ldr	r3, [pc, #260]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008c80:	4943      	ldr	r1, [pc, #268]	; (8008d90 <HAL_RCC_OscConfig+0x688>)
 8008c82:	400a      	ands	r2, r1
 8008c84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c86:	f7fa fc8d 	bl	80035a4 <HAL_GetTick>
 8008c8a:	0003      	movs	r3, r0
 8008c8c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c90:	f7fa fc88 	bl	80035a4 <HAL_GetTick>
 8008c94:	0002      	movs	r2, r0
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d901      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e0b2      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008ca2:	4b38      	ldr	r3, [pc, #224]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ca6:	2380      	movs	r3, #128	; 0x80
 8008ca8:	025b      	lsls	r3, r3, #9
 8008caa:	4013      	ands	r3, r2
 8008cac:	d1f0      	bne.n	8008c90 <HAL_RCC_OscConfig+0x588>
 8008cae:	e000      	b.n	8008cb2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008cb0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d100      	bne.n	8008cbc <HAL_RCC_OscConfig+0x5b4>
 8008cba:	e0a4      	b.n	8008e06 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cbc:	4b31      	ldr	r3, [pc, #196]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	220c      	movs	r2, #12
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d100      	bne.n	8008cca <HAL_RCC_OscConfig+0x5c2>
 8008cc8:	e078      	b.n	8008dbc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d14c      	bne.n	8008d6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cd2:	4b2c      	ldr	r3, [pc, #176]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	4b2b      	ldr	r3, [pc, #172]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008cd8:	492e      	ldr	r1, [pc, #184]	; (8008d94 <HAL_RCC_OscConfig+0x68c>)
 8008cda:	400a      	ands	r2, r1
 8008cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cde:	f7fa fc61 	bl	80035a4 <HAL_GetTick>
 8008ce2:	0003      	movs	r3, r0
 8008ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ce8:	f7fa fc5c 	bl	80035a4 <HAL_GetTick>
 8008cec:	0002      	movs	r2, r0
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e086      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cfa:	4b22      	ldr	r3, [pc, #136]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	2380      	movs	r3, #128	; 0x80
 8008d00:	049b      	lsls	r3, r3, #18
 8008d02:	4013      	ands	r3, r2
 8008d04:	d1f0      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d06:	4b1f      	ldr	r3, [pc, #124]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	220f      	movs	r2, #15
 8008d0c:	4393      	bics	r3, r2
 8008d0e:	0019      	movs	r1, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d14:	4b1b      	ldr	r3, [pc, #108]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d16:	430a      	orrs	r2, r1
 8008d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d1a:	4b1a      	ldr	r3, [pc, #104]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <HAL_RCC_OscConfig+0x690>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	0019      	movs	r1, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	4b15      	ldr	r3, [pc, #84]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d30:	430a      	orrs	r2, r1
 8008d32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d34:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	4b12      	ldr	r3, [pc, #72]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d3a:	2180      	movs	r1, #128	; 0x80
 8008d3c:	0449      	lsls	r1, r1, #17
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d42:	f7fa fc2f 	bl	80035a4 <HAL_GetTick>
 8008d46:	0003      	movs	r3, r0
 8008d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d4c:	f7fa fc2a 	bl	80035a4 <HAL_GetTick>
 8008d50:	0002      	movs	r2, r0
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e054      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d5e:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	2380      	movs	r3, #128	; 0x80
 8008d64:	049b      	lsls	r3, r3, #18
 8008d66:	4013      	ands	r3, r2
 8008d68:	d0f0      	beq.n	8008d4c <HAL_RCC_OscConfig+0x644>
 8008d6a:	e04c      	b.n	8008e06 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d6c:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	4b04      	ldr	r3, [pc, #16]	; (8008d84 <HAL_RCC_OscConfig+0x67c>)
 8008d72:	4908      	ldr	r1, [pc, #32]	; (8008d94 <HAL_RCC_OscConfig+0x68c>)
 8008d74:	400a      	ands	r2, r1
 8008d76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d78:	f7fa fc14 	bl	80035a4 <HAL_GetTick>
 8008d7c:	0003      	movs	r3, r0
 8008d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d80:	e015      	b.n	8008dae <HAL_RCC_OscConfig+0x6a6>
 8008d82:	46c0      	nop			; (mov r8, r8)
 8008d84:	40021000 	.word	0x40021000
 8008d88:	00001388 	.word	0x00001388
 8008d8c:	efffffff 	.word	0xefffffff
 8008d90:	fffeffff 	.word	0xfffeffff
 8008d94:	feffffff 	.word	0xfeffffff
 8008d98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d9c:	f7fa fc02 	bl	80035a4 <HAL_GetTick>
 8008da0:	0002      	movs	r2, r0
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e02c      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008dae:	4b18      	ldr	r3, [pc, #96]	; (8008e10 <HAL_RCC_OscConfig+0x708>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	2380      	movs	r3, #128	; 0x80
 8008db4:	049b      	lsls	r3, r3, #18
 8008db6:	4013      	ands	r3, r2
 8008db8:	d1f0      	bne.n	8008d9c <HAL_RCC_OscConfig+0x694>
 8008dba:	e024      	b.n	8008e06 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e01f      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8008dc8:	4b11      	ldr	r3, [pc, #68]	; (8008e10 <HAL_RCC_OscConfig+0x708>)
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8008dce:	4b10      	ldr	r3, [pc, #64]	; (8008e10 <HAL_RCC_OscConfig+0x708>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	23c0      	movs	r3, #192	; 0xc0
 8008dd8:	025b      	lsls	r3, r3, #9
 8008dda:	401a      	ands	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d10e      	bne.n	8008e02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	220f      	movs	r2, #15
 8008de8:	401a      	ands	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d107      	bne.n	8008e02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	23f0      	movs	r3, #240	; 0xf0
 8008df6:	039b      	lsls	r3, r3, #14
 8008df8:	401a      	ands	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d001      	beq.n	8008e06 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	0018      	movs	r0, r3
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	b008      	add	sp, #32
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	40021000 	.word	0x40021000

08008e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e0bf      	b.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e28:	4b61      	ldr	r3, [pc, #388]	; (8008fb0 <HAL_RCC_ClockConfig+0x19c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	4013      	ands	r3, r2
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d911      	bls.n	8008e5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e36:	4b5e      	ldr	r3, [pc, #376]	; (8008fb0 <HAL_RCC_ClockConfig+0x19c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4393      	bics	r3, r2
 8008e3e:	0019      	movs	r1, r3
 8008e40:	4b5b      	ldr	r3, [pc, #364]	; (8008fb0 <HAL_RCC_ClockConfig+0x19c>)
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e48:	4b59      	ldr	r3, [pc, #356]	; (8008fb0 <HAL_RCC_ClockConfig+0x19c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	4013      	ands	r3, r2
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d001      	beq.n	8008e5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e0a6      	b.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	4013      	ands	r3, r2
 8008e62:	d015      	beq.n	8008e90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2204      	movs	r2, #4
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	d006      	beq.n	8008e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008e6e:	4b51      	ldr	r3, [pc, #324]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	4b50      	ldr	r3, [pc, #320]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008e74:	21e0      	movs	r1, #224	; 0xe0
 8008e76:	00c9      	lsls	r1, r1, #3
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e7c:	4b4d      	ldr	r3, [pc, #308]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	22f0      	movs	r2, #240	; 0xf0
 8008e82:	4393      	bics	r3, r2
 8008e84:	0019      	movs	r1, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	4b4a      	ldr	r3, [pc, #296]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2201      	movs	r2, #1
 8008e96:	4013      	ands	r3, r2
 8008e98:	d04c      	beq.n	8008f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ea2:	4b44      	ldr	r3, [pc, #272]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	2380      	movs	r3, #128	; 0x80
 8008ea8:	029b      	lsls	r3, r3, #10
 8008eaa:	4013      	ands	r3, r2
 8008eac:	d120      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e07a      	b.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d107      	bne.n	8008eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008eba:	4b3e      	ldr	r3, [pc, #248]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	2380      	movs	r3, #128	; 0x80
 8008ec0:	049b      	lsls	r3, r3, #18
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	d114      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e06e      	b.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d107      	bne.n	8008ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008ed2:	4b38      	ldr	r3, [pc, #224]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed6:	2380      	movs	r3, #128	; 0x80
 8008ed8:	025b      	lsls	r3, r3, #9
 8008eda:	4013      	ands	r3, r2
 8008edc:	d108      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e062      	b.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ee2:	4b34      	ldr	r3, [pc, #208]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	4013      	ands	r3, r2
 8008eea:	d101      	bne.n	8008ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e05b      	b.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ef0:	4b30      	ldr	r3, [pc, #192]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2203      	movs	r2, #3
 8008ef6:	4393      	bics	r3, r2
 8008ef8:	0019      	movs	r1, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	4b2d      	ldr	r3, [pc, #180]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008f00:	430a      	orrs	r2, r1
 8008f02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f04:	f7fa fb4e 	bl	80035a4 <HAL_GetTick>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f0c:	e009      	b.n	8008f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f0e:	f7fa fb49 	bl	80035a4 <HAL_GetTick>
 8008f12:	0002      	movs	r2, r0
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	4a27      	ldr	r2, [pc, #156]	; (8008fb8 <HAL_RCC_ClockConfig+0x1a4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e042      	b.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	220c      	movs	r2, #12
 8008f28:	401a      	ands	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d1ec      	bne.n	8008f0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f34:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <HAL_RCC_ClockConfig+0x19c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d211      	bcs.n	8008f66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f42:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <HAL_RCC_ClockConfig+0x19c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2201      	movs	r2, #1
 8008f48:	4393      	bics	r3, r2
 8008f4a:	0019      	movs	r1, r3
 8008f4c:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <HAL_RCC_ClockConfig+0x19c>)
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f54:	4b16      	ldr	r3, [pc, #88]	; (8008fb0 <HAL_RCC_ClockConfig+0x19c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d001      	beq.n	8008f66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e020      	b.n	8008fa8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2204      	movs	r2, #4
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	d009      	beq.n	8008f84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008f70:	4b10      	ldr	r3, [pc, #64]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <HAL_RCC_ClockConfig+0x1a8>)
 8008f76:	4013      	ands	r3, r2
 8008f78:	0019      	movs	r1, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008f80:	430a      	orrs	r2, r1
 8008f82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008f84:	f000 f820 	bl	8008fc8 <HAL_RCC_GetSysClockFreq>
 8008f88:	0001      	movs	r1, r0
 8008f8a:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	220f      	movs	r2, #15
 8008f92:	4013      	ands	r3, r2
 8008f94:	4a0a      	ldr	r2, [pc, #40]	; (8008fc0 <HAL_RCC_ClockConfig+0x1ac>)
 8008f96:	5cd3      	ldrb	r3, [r2, r3]
 8008f98:	000a      	movs	r2, r1
 8008f9a:	40da      	lsrs	r2, r3
 8008f9c:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8008f9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f7fa fab9 	bl	8003518 <HAL_InitTick>
  
  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b004      	add	sp, #16
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	40022000 	.word	0x40022000
 8008fb4:	40021000 	.word	0x40021000
 8008fb8:	00001388 	.word	0x00001388
 8008fbc:	fffff8ff 	.word	0xfffff8ff
 8008fc0:	0800f750 	.word	0x0800f750
 8008fc4:	2000010c 	.word	0x2000010c

08008fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fc8:	b590      	push	{r4, r7, lr}
 8008fca:	b08f      	sub	sp, #60	; 0x3c
 8008fcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8008fce:	2314      	movs	r3, #20
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	4a38      	ldr	r2, [pc, #224]	; (80090b4 <HAL_RCC_GetSysClockFreq+0xec>)
 8008fd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008fd6:	c313      	stmia	r3!, {r0, r1, r4}
 8008fd8:	6812      	ldr	r2, [r2, #0]
 8008fda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8008fdc:	1d3b      	adds	r3, r7, #4
 8008fde:	4a36      	ldr	r2, [pc, #216]	; (80090b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8008fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8008fe4:	6812      	ldr	r2, [r2, #0]
 8008fe6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fec:	2300      	movs	r3, #0
 8008fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8008ffc:	4b2f      	ldr	r3, [pc, #188]	; (80090bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	220c      	movs	r2, #12
 8009006:	4013      	ands	r3, r2
 8009008:	2b0c      	cmp	r3, #12
 800900a:	d047      	beq.n	800909c <HAL_RCC_GetSysClockFreq+0xd4>
 800900c:	d849      	bhi.n	80090a2 <HAL_RCC_GetSysClockFreq+0xda>
 800900e:	2b04      	cmp	r3, #4
 8009010:	d002      	beq.n	8009018 <HAL_RCC_GetSysClockFreq+0x50>
 8009012:	2b08      	cmp	r3, #8
 8009014:	d003      	beq.n	800901e <HAL_RCC_GetSysClockFreq+0x56>
 8009016:	e044      	b.n	80090a2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009018:	4b29      	ldr	r3, [pc, #164]	; (80090c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800901a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800901c:	e044      	b.n	80090a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009020:	0c9b      	lsrs	r3, r3, #18
 8009022:	220f      	movs	r2, #15
 8009024:	4013      	ands	r3, r2
 8009026:	2214      	movs	r2, #20
 8009028:	18ba      	adds	r2, r7, r2
 800902a:	5cd3      	ldrb	r3, [r2, r3]
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800902e:	4b23      	ldr	r3, [pc, #140]	; (80090bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	220f      	movs	r2, #15
 8009034:	4013      	ands	r3, r2
 8009036:	1d3a      	adds	r2, r7, #4
 8009038:	5cd3      	ldrb	r3, [r2, r3]
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800903c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800903e:	23c0      	movs	r3, #192	; 0xc0
 8009040:	025b      	lsls	r3, r3, #9
 8009042:	401a      	ands	r2, r3
 8009044:	2380      	movs	r3, #128	; 0x80
 8009046:	025b      	lsls	r3, r3, #9
 8009048:	429a      	cmp	r2, r3
 800904a:	d109      	bne.n	8009060 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800904c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800904e:	481c      	ldr	r0, [pc, #112]	; (80090c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009050:	f7f7 f85a 	bl	8000108 <__udivsi3>
 8009054:	0003      	movs	r3, r0
 8009056:	001a      	movs	r2, r3
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	4353      	muls	r3, r2
 800905c:	637b      	str	r3, [r7, #52]	; 0x34
 800905e:	e01a      	b.n	8009096 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8009060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009062:	23c0      	movs	r3, #192	; 0xc0
 8009064:	025b      	lsls	r3, r3, #9
 8009066:	401a      	ands	r2, r3
 8009068:	23c0      	movs	r3, #192	; 0xc0
 800906a:	025b      	lsls	r3, r3, #9
 800906c:	429a      	cmp	r2, r3
 800906e:	d109      	bne.n	8009084 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009072:	4814      	ldr	r0, [pc, #80]	; (80090c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009074:	f7f7 f848 	bl	8000108 <__udivsi3>
 8009078:	0003      	movs	r3, r0
 800907a:	001a      	movs	r2, r3
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	4353      	muls	r3, r2
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
 8009082:	e008      	b.n	8009096 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009086:	480e      	ldr	r0, [pc, #56]	; (80090c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009088:	f7f7 f83e 	bl	8000108 <__udivsi3>
 800908c:	0003      	movs	r3, r0
 800908e:	001a      	movs	r2, r3
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	4353      	muls	r3, r2
 8009094:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8009096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009098:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800909a:	e005      	b.n	80090a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800909e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80090a0:	e002      	b.n	80090a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80090a2:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80090a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80090a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80090aa:	0018      	movs	r0, r3
 80090ac:	46bd      	mov	sp, r7
 80090ae:	b00f      	add	sp, #60	; 0x3c
 80090b0:	bd90      	pop	{r4, r7, pc}
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	0800f5d0 	.word	0x0800f5d0
 80090b8:	0800f5e0 	.word	0x0800f5e0
 80090bc:	40021000 	.word	0x40021000
 80090c0:	007a1200 	.word	0x007a1200
 80090c4:	02dc6c00 	.word	0x02dc6c00

080090c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80090ce:	681b      	ldr	r3, [r3, #0]
}
 80090d0:	0018      	movs	r0, r3
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	2000010c 	.word	0x2000010c

080090dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80090e0:	f7ff fff2 	bl	80090c8 <HAL_RCC_GetHCLKFreq>
 80090e4:	0001      	movs	r1, r0
 80090e6:	4b06      	ldr	r3, [pc, #24]	; (8009100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	0a1b      	lsrs	r3, r3, #8
 80090ec:	2207      	movs	r2, #7
 80090ee:	4013      	ands	r3, r2
 80090f0:	4a04      	ldr	r2, [pc, #16]	; (8009104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090f2:	5cd3      	ldrb	r3, [r2, r3]
 80090f4:	40d9      	lsrs	r1, r3
 80090f6:	000b      	movs	r3, r1
}    
 80090f8:	0018      	movs	r0, r3
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	40021000 	.word	0x40021000
 8009104:	0800f760 	.word	0x0800f760

08009108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	2380      	movs	r3, #128	; 0x80
 800911e:	025b      	lsls	r3, r3, #9
 8009120:	4013      	ands	r3, r2
 8009122:	d100      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8009124:	e08e      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8009126:	2017      	movs	r0, #23
 8009128:	183b      	adds	r3, r7, r0
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800912e:	4b6e      	ldr	r3, [pc, #440]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009130:	69da      	ldr	r2, [r3, #28]
 8009132:	2380      	movs	r3, #128	; 0x80
 8009134:	055b      	lsls	r3, r3, #21
 8009136:	4013      	ands	r3, r2
 8009138:	d110      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800913a:	4b6b      	ldr	r3, [pc, #428]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800913c:	69da      	ldr	r2, [r3, #28]
 800913e:	4b6a      	ldr	r3, [pc, #424]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009140:	2180      	movs	r1, #128	; 0x80
 8009142:	0549      	lsls	r1, r1, #21
 8009144:	430a      	orrs	r2, r1
 8009146:	61da      	str	r2, [r3, #28]
 8009148:	4b67      	ldr	r3, [pc, #412]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800914a:	69da      	ldr	r2, [r3, #28]
 800914c:	2380      	movs	r3, #128	; 0x80
 800914e:	055b      	lsls	r3, r3, #21
 8009150:	4013      	ands	r3, r2
 8009152:	60bb      	str	r3, [r7, #8]
 8009154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009156:	183b      	adds	r3, r7, r0
 8009158:	2201      	movs	r2, #1
 800915a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800915c:	4b63      	ldr	r3, [pc, #396]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	2380      	movs	r3, #128	; 0x80
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	4013      	ands	r3, r2
 8009166:	d11a      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009168:	4b60      	ldr	r3, [pc, #384]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	4b5f      	ldr	r3, [pc, #380]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800916e:	2180      	movs	r1, #128	; 0x80
 8009170:	0049      	lsls	r1, r1, #1
 8009172:	430a      	orrs	r2, r1
 8009174:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009176:	f7fa fa15 	bl	80035a4 <HAL_GetTick>
 800917a:	0003      	movs	r3, r0
 800917c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800917e:	e008      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009180:	f7fa fa10 	bl	80035a4 <HAL_GetTick>
 8009184:	0002      	movs	r2, r0
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b64      	cmp	r3, #100	; 0x64
 800918c:	d901      	bls.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e0a6      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009192:	4b56      	ldr	r3, [pc, #344]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	2380      	movs	r3, #128	; 0x80
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4013      	ands	r3, r2
 800919c:	d0f0      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800919e:	4b52      	ldr	r3, [pc, #328]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091a0:	6a1a      	ldr	r2, [r3, #32]
 80091a2:	23c0      	movs	r3, #192	; 0xc0
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4013      	ands	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d034      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	23c0      	movs	r3, #192	; 0xc0
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4013      	ands	r3, r2
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d02c      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091c0:	4b49      	ldr	r3, [pc, #292]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	4a4a      	ldr	r2, [pc, #296]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80091c6:	4013      	ands	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091ca:	4b47      	ldr	r3, [pc, #284]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091cc:	6a1a      	ldr	r2, [r3, #32]
 80091ce:	4b46      	ldr	r3, [pc, #280]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091d0:	2180      	movs	r1, #128	; 0x80
 80091d2:	0249      	lsls	r1, r1, #9
 80091d4:	430a      	orrs	r2, r1
 80091d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091d8:	4b43      	ldr	r3, [pc, #268]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091da:	6a1a      	ldr	r2, [r3, #32]
 80091dc:	4b42      	ldr	r3, [pc, #264]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091de:	4945      	ldr	r1, [pc, #276]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80091e0:	400a      	ands	r2, r1
 80091e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80091e4:	4b40      	ldr	r3, [pc, #256]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	4013      	ands	r3, r2
 80091f0:	d013      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091f2:	f7fa f9d7 	bl	80035a4 <HAL_GetTick>
 80091f6:	0003      	movs	r3, r0
 80091f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091fa:	e009      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091fc:	f7fa f9d2 	bl	80035a4 <HAL_GetTick>
 8009200:	0002      	movs	r2, r0
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	4a3c      	ldr	r2, [pc, #240]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d901      	bls.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e067      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009210:	4b35      	ldr	r3, [pc, #212]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	2202      	movs	r2, #2
 8009216:	4013      	ands	r3, r2
 8009218:	d0f0      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800921a:	4b33      	ldr	r3, [pc, #204]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	4a34      	ldr	r2, [pc, #208]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009220:	4013      	ands	r3, r2
 8009222:	0019      	movs	r1, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	4b2f      	ldr	r3, [pc, #188]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800922a:	430a      	orrs	r2, r1
 800922c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800922e:	2317      	movs	r3, #23
 8009230:	18fb      	adds	r3, r7, r3
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d105      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009238:	4b2b      	ldr	r3, [pc, #172]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800923a:	69da      	ldr	r2, [r3, #28]
 800923c:	4b2a      	ldr	r3, [pc, #168]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800923e:	492f      	ldr	r1, [pc, #188]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8009240:	400a      	ands	r2, r1
 8009242:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2201      	movs	r2, #1
 800924a:	4013      	ands	r3, r2
 800924c:	d009      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800924e:	4b26      	ldr	r3, [pc, #152]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009252:	2203      	movs	r2, #3
 8009254:	4393      	bics	r3, r2
 8009256:	0019      	movs	r1, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800925e:	430a      	orrs	r2, r1
 8009260:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2202      	movs	r2, #2
 8009268:	4013      	ands	r3, r2
 800926a:	d009      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800926c:	4b1e      	ldr	r3, [pc, #120]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800926e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009270:	4a23      	ldr	r2, [pc, #140]	; (8009300 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009272:	4013      	ands	r3, r2
 8009274:	0019      	movs	r1, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800927c:	430a      	orrs	r2, r1
 800927e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2220      	movs	r2, #32
 8009286:	4013      	ands	r3, r2
 8009288:	d009      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800928a:	4b17      	ldr	r3, [pc, #92]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	2210      	movs	r2, #16
 8009290:	4393      	bics	r3, r2
 8009292:	0019      	movs	r1, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	691a      	ldr	r2, [r3, #16]
 8009298:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800929a:	430a      	orrs	r2, r1
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	029b      	lsls	r3, r3, #10
 80092a6:	4013      	ands	r3, r2
 80092a8:	d009      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092aa:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	2280      	movs	r2, #128	; 0x80
 80092b0:	4393      	bics	r3, r2
 80092b2:	0019      	movs	r1, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699a      	ldr	r2, [r3, #24]
 80092b8:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80092ba:	430a      	orrs	r2, r1
 80092bc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	2380      	movs	r3, #128	; 0x80
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	4013      	ands	r3, r2
 80092c8:	d009      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	2240      	movs	r2, #64	; 0x40
 80092d0:	4393      	bics	r3, r2
 80092d2:	0019      	movs	r1, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695a      	ldr	r2, [r3, #20]
 80092d8:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80092da:	430a      	orrs	r2, r1
 80092dc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	0018      	movs	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b006      	add	sp, #24
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40021000 	.word	0x40021000
 80092ec:	40007000 	.word	0x40007000
 80092f0:	fffffcff 	.word	0xfffffcff
 80092f4:	fffeffff 	.word	0xfffeffff
 80092f8:	00001388 	.word	0x00001388
 80092fc:	efffffff 	.word	0xefffffff
 8009300:	fffcffff 	.word	0xfffcffff

08009304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e0a8      	b.n	8009468 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931a:	2b00      	cmp	r3, #0
 800931c:	d109      	bne.n	8009332 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	2382      	movs	r3, #130	; 0x82
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	429a      	cmp	r2, r3
 8009328:	d009      	beq.n	800933e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	61da      	str	r2, [r3, #28]
 8009330:	e005      	b.n	800933e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	225d      	movs	r2, #93	; 0x5d
 8009348:	5c9b      	ldrb	r3, [r3, r2]
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	d107      	bne.n	8009360 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	225c      	movs	r2, #92	; 0x5c
 8009354:	2100      	movs	r1, #0
 8009356:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	0018      	movs	r0, r3
 800935c:	f7f9 ff3a 	bl	80031d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	225d      	movs	r2, #93	; 0x5d
 8009364:	2102      	movs	r1, #2
 8009366:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2140      	movs	r1, #64	; 0x40
 8009374:	438a      	bics	r2, r1
 8009376:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	23e0      	movs	r3, #224	; 0xe0
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	429a      	cmp	r2, r3
 8009382:	d902      	bls.n	800938a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	e002      	b.n	8009390 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800938a:	2380      	movs	r3, #128	; 0x80
 800938c:	015b      	lsls	r3, r3, #5
 800938e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	23f0      	movs	r3, #240	; 0xf0
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	429a      	cmp	r2, r3
 800939a:	d008      	beq.n	80093ae <HAL_SPI_Init+0xaa>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	23e0      	movs	r3, #224	; 0xe0
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d002      	beq.n	80093ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	2382      	movs	r3, #130	; 0x82
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	401a      	ands	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6899      	ldr	r1, [r3, #8]
 80093bc:	2384      	movs	r3, #132	; 0x84
 80093be:	021b      	lsls	r3, r3, #8
 80093c0:	400b      	ands	r3, r1
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	2102      	movs	r1, #2
 80093ca:	400b      	ands	r3, r1
 80093cc:	431a      	orrs	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	2101      	movs	r1, #1
 80093d4:	400b      	ands	r3, r1
 80093d6:	431a      	orrs	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6999      	ldr	r1, [r3, #24]
 80093dc:	2380      	movs	r3, #128	; 0x80
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	400b      	ands	r3, r1
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	2138      	movs	r1, #56	; 0x38
 80093ea:	400b      	ands	r3, r1
 80093ec:	431a      	orrs	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	2180      	movs	r1, #128	; 0x80
 80093f4:	400b      	ands	r3, r1
 80093f6:	431a      	orrs	r2, r3
 80093f8:	0011      	movs	r1, r2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093fe:	2380      	movs	r3, #128	; 0x80
 8009400:	019b      	lsls	r3, r3, #6
 8009402:	401a      	ands	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	0c1b      	lsrs	r3, r3, #16
 8009412:	2204      	movs	r2, #4
 8009414:	401a      	ands	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	2110      	movs	r1, #16
 800941c:	400b      	ands	r3, r1
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009424:	2108      	movs	r1, #8
 8009426:	400b      	ands	r3, r1
 8009428:	431a      	orrs	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68d9      	ldr	r1, [r3, #12]
 800942e:	23f0      	movs	r3, #240	; 0xf0
 8009430:	011b      	lsls	r3, r3, #4
 8009432:	400b      	ands	r3, r1
 8009434:	431a      	orrs	r2, r3
 8009436:	0011      	movs	r1, r2
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	2380      	movs	r3, #128	; 0x80
 800943c:	015b      	lsls	r3, r3, #5
 800943e:	401a      	ands	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69da      	ldr	r2, [r3, #28]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4907      	ldr	r1, [pc, #28]	; (8009470 <HAL_SPI_Init+0x16c>)
 8009454:	400a      	ands	r2, r1
 8009456:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	225d      	movs	r2, #93	; 0x5d
 8009462:	2101      	movs	r1, #1
 8009464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	0018      	movs	r0, r3
 800946a:	46bd      	mov	sp, r7
 800946c:	b004      	add	sp, #16
 800946e:	bd80      	pop	{r7, pc}
 8009470:	fffff7ff 	.word	0xfffff7ff

08009474 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	1dbb      	adds	r3, r7, #6
 8009482:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009484:	231f      	movs	r3, #31
 8009486:	18fb      	adds	r3, r7, r3
 8009488:	2200      	movs	r2, #0
 800948a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	225c      	movs	r2, #92	; 0x5c
 8009490:	5c9b      	ldrb	r3, [r3, r2]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d101      	bne.n	800949a <HAL_SPI_Transmit+0x26>
 8009496:	2302      	movs	r3, #2
 8009498:	e140      	b.n	800971c <HAL_SPI_Transmit+0x2a8>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	225c      	movs	r2, #92	; 0x5c
 800949e:	2101      	movs	r1, #1
 80094a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094a2:	f7fa f87f 	bl	80035a4 <HAL_GetTick>
 80094a6:	0003      	movs	r3, r0
 80094a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80094aa:	2316      	movs	r3, #22
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	1dba      	adds	r2, r7, #6
 80094b0:	8812      	ldrh	r2, [r2, #0]
 80094b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	225d      	movs	r2, #93	; 0x5d
 80094b8:	5c9b      	ldrb	r3, [r3, r2]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d004      	beq.n	80094ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80094c0:	231f      	movs	r3, #31
 80094c2:	18fb      	adds	r3, r7, r3
 80094c4:	2202      	movs	r2, #2
 80094c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80094c8:	e11d      	b.n	8009706 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_SPI_Transmit+0x64>
 80094d0:	1dbb      	adds	r3, r7, #6
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d104      	bne.n	80094e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80094d8:	231f      	movs	r3, #31
 80094da:	18fb      	adds	r3, r7, r3
 80094dc:	2201      	movs	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
    goto error;
 80094e0:	e111      	b.n	8009706 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	225d      	movs	r2, #93	; 0x5d
 80094e6:	2103      	movs	r1, #3
 80094e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1dba      	adds	r2, r7, #6
 80094fa:	8812      	ldrh	r2, [r2, #0]
 80094fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	1dba      	adds	r2, r7, #6
 8009502:	8812      	ldrh	r2, [r2, #0]
 8009504:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2244      	movs	r2, #68	; 0x44
 8009510:	2100      	movs	r1, #0
 8009512:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2246      	movs	r2, #70	; 0x46
 8009518:	2100      	movs	r1, #0
 800951a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	2380      	movs	r3, #128	; 0x80
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	429a      	cmp	r2, r3
 8009532:	d110      	bne.n	8009556 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2140      	movs	r1, #64	; 0x40
 8009540:	438a      	bics	r2, r1
 8009542:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2180      	movs	r1, #128	; 0x80
 8009550:	01c9      	lsls	r1, r1, #7
 8009552:	430a      	orrs	r2, r1
 8009554:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2240      	movs	r2, #64	; 0x40
 800955e:	4013      	ands	r3, r2
 8009560:	2b40      	cmp	r3, #64	; 0x40
 8009562:	d007      	beq.n	8009574 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2140      	movs	r1, #64	; 0x40
 8009570:	430a      	orrs	r2, r1
 8009572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	23e0      	movs	r3, #224	; 0xe0
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	429a      	cmp	r2, r3
 800957e:	d94e      	bls.n	800961e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <HAL_SPI_Transmit+0x11e>
 8009588:	2316      	movs	r3, #22
 800958a:	18fb      	adds	r3, r7, r3
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d13f      	bne.n	8009612 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	881a      	ldrh	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	1c9a      	adds	r2, r3, #2
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095b6:	e02c      	b.n	8009612 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	2202      	movs	r2, #2
 80095c0:	4013      	ands	r3, r2
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d112      	bne.n	80095ec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ca:	881a      	ldrh	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d6:	1c9a      	adds	r2, r3, #2
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095ea:	e012      	b.n	8009612 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095ec:	f7f9 ffda 	bl	80035a4 <HAL_GetTick>
 80095f0:	0002      	movs	r2, r0
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d802      	bhi.n	8009602 <HAL_SPI_Transmit+0x18e>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	3301      	adds	r3, #1
 8009600:	d102      	bne.n	8009608 <HAL_SPI_Transmit+0x194>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8009608:	231f      	movs	r3, #31
 800960a:	18fb      	adds	r3, r7, r3
 800960c:	2203      	movs	r2, #3
 800960e:	701a      	strb	r2, [r3, #0]
          goto error;
 8009610:	e079      	b.n	8009706 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1cd      	bne.n	80095b8 <HAL_SPI_Transmit+0x144>
 800961c:	e04f      	b.n	80096be <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <HAL_SPI_Transmit+0x1bc>
 8009626:	2316      	movs	r3, #22
 8009628:	18fb      	adds	r3, r7, r3
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d141      	bne.n	80096b4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	330c      	adds	r3, #12
 800963a:	7812      	ldrb	r2, [r2, #0]
 800963c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964c:	b29b      	uxth	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	b29a      	uxth	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8009656:	e02d      	b.n	80096b4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	2202      	movs	r2, #2
 8009660:	4013      	ands	r3, r2
 8009662:	2b02      	cmp	r3, #2
 8009664:	d113      	bne.n	800968e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	330c      	adds	r3, #12
 8009670:	7812      	ldrb	r2, [r2, #0]
 8009672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009682:	b29b      	uxth	r3, r3
 8009684:	3b01      	subs	r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800968c:	e012      	b.n	80096b4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800968e:	f7f9 ff89 	bl	80035a4 <HAL_GetTick>
 8009692:	0002      	movs	r2, r0
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d802      	bhi.n	80096a4 <HAL_SPI_Transmit+0x230>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	3301      	adds	r3, #1
 80096a2:	d102      	bne.n	80096aa <HAL_SPI_Transmit+0x236>
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d104      	bne.n	80096b4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80096aa:	231f      	movs	r3, #31
 80096ac:	18fb      	adds	r3, r7, r3
 80096ae:	2203      	movs	r2, #3
 80096b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80096b2:	e028      	b.n	8009706 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1cc      	bne.n	8009658 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	0018      	movs	r0, r3
 80096c6:	f000 f951 	bl	800996c <SPI_EndRxTxTransaction>
 80096ca:	1e03      	subs	r3, r0, #0
 80096cc:	d002      	beq.n	80096d4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2220      	movs	r2, #32
 80096d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	613b      	str	r3, [r7, #16]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	613b      	str	r3, [r7, #16]
 80096f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d004      	beq.n	8009704 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80096fa:	231f      	movs	r3, #31
 80096fc:	18fb      	adds	r3, r7, r3
 80096fe:	2201      	movs	r2, #1
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	e000      	b.n	8009706 <HAL_SPI_Transmit+0x292>
  }

error:
 8009704:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	225d      	movs	r2, #93	; 0x5d
 800970a:	2101      	movs	r1, #1
 800970c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	225c      	movs	r2, #92	; 0x5c
 8009712:	2100      	movs	r1, #0
 8009714:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009716:	231f      	movs	r3, #31
 8009718:	18fb      	adds	r3, r7, r3
 800971a:	781b      	ldrb	r3, [r3, #0]
}
 800971c:	0018      	movs	r0, r3
 800971e:	46bd      	mov	sp, r7
 8009720:	b008      	add	sp, #32
 8009722:	bd80      	pop	{r7, pc}

08009724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	1dfb      	adds	r3, r7, #7
 8009732:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009734:	f7f9 ff36 	bl	80035a4 <HAL_GetTick>
 8009738:	0002      	movs	r2, r0
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	1a9b      	subs	r3, r3, r2
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	18d3      	adds	r3, r2, r3
 8009742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009744:	f7f9 ff2e 	bl	80035a4 <HAL_GetTick>
 8009748:	0003      	movs	r3, r0
 800974a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800974c:	4b3a      	ldr	r3, [pc, #232]	; (8009838 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	015b      	lsls	r3, r3, #5
 8009752:	0d1b      	lsrs	r3, r3, #20
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	4353      	muls	r3, r2
 8009758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800975a:	e058      	b.n	800980e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	3301      	adds	r3, #1
 8009760:	d055      	beq.n	800980e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009762:	f7f9 ff1f 	bl	80035a4 <HAL_GetTick>
 8009766:	0002      	movs	r2, r0
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	69fa      	ldr	r2, [r7, #28]
 800976e:	429a      	cmp	r2, r3
 8009770:	d902      	bls.n	8009778 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d142      	bne.n	80097fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	21e0      	movs	r1, #224	; 0xe0
 8009784:	438a      	bics	r2, r1
 8009786:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	2382      	movs	r3, #130	; 0x82
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	429a      	cmp	r2, r3
 8009792:	d113      	bne.n	80097bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	2380      	movs	r3, #128	; 0x80
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	429a      	cmp	r2, r3
 800979e:	d005      	beq.n	80097ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d107      	bne.n	80097bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2140      	movs	r1, #64	; 0x40
 80097b8:	438a      	bics	r2, r1
 80097ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097c0:	2380      	movs	r3, #128	; 0x80
 80097c2:	019b      	lsls	r3, r3, #6
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d110      	bne.n	80097ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	491a      	ldr	r1, [pc, #104]	; (800983c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80097d4:	400a      	ands	r2, r1
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2180      	movs	r1, #128	; 0x80
 80097e4:	0189      	lsls	r1, r1, #6
 80097e6:	430a      	orrs	r2, r1
 80097e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	225d      	movs	r2, #93	; 0x5d
 80097ee:	2101      	movs	r1, #1
 80097f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	225c      	movs	r2, #92	; 0x5c
 80097f6:	2100      	movs	r1, #0
 80097f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097fa:	2303      	movs	r3, #3
 80097fc:	e017      	b.n	800982e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	3b01      	subs	r3, #1
 800980c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	4013      	ands	r3, r2
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	425a      	negs	r2, r3
 800981e:	4153      	adcs	r3, r2
 8009820:	b2db      	uxtb	r3, r3
 8009822:	001a      	movs	r2, r3
 8009824:	1dfb      	adds	r3, r7, #7
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d197      	bne.n	800975c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	0018      	movs	r0, r3
 8009830:	46bd      	mov	sp, r7
 8009832:	b008      	add	sp, #32
 8009834:	bd80      	pop	{r7, pc}
 8009836:	46c0      	nop			; (mov r8, r8)
 8009838:	2000010c 	.word	0x2000010c
 800983c:	ffffdfff 	.word	0xffffdfff

08009840 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800984e:	f7f9 fea9 	bl	80035a4 <HAL_GetTick>
 8009852:	0002      	movs	r2, r0
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	1a9b      	subs	r3, r3, r2
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	18d3      	adds	r3, r2, r3
 800985c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800985e:	f7f9 fea1 	bl	80035a4 <HAL_GetTick>
 8009862:	0003      	movs	r3, r0
 8009864:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009866:	4b3f      	ldr	r3, [pc, #252]	; (8009964 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	0013      	movs	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	189b      	adds	r3, r3, r2
 8009870:	00da      	lsls	r2, r3, #3
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	0d1b      	lsrs	r3, r3, #20
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	4353      	muls	r3, r2
 800987a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800987c:	e064      	b.n	8009948 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	23c0      	movs	r3, #192	; 0xc0
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	429a      	cmp	r2, r3
 8009886:	d106      	bne.n	8009896 <SPI_WaitFifoStateUntilTimeout+0x56>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d103      	bne.n	8009896 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	330c      	adds	r3, #12
 8009894:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	3301      	adds	r3, #1
 800989a:	d055      	beq.n	8009948 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800989c:	f7f9 fe82 	bl	80035a4 <HAL_GetTick>
 80098a0:	0002      	movs	r2, r0
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d902      	bls.n	80098b2 <SPI_WaitFifoStateUntilTimeout+0x72>
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d142      	bne.n	8009938 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	21e0      	movs	r1, #224	; 0xe0
 80098be:	438a      	bics	r2, r1
 80098c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	2382      	movs	r3, #130	; 0x82
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d113      	bne.n	80098f6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	689a      	ldr	r2, [r3, #8]
 80098d2:	2380      	movs	r3, #128	; 0x80
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d005      	beq.n	80098e6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689a      	ldr	r2, [r3, #8]
 80098de:	2380      	movs	r3, #128	; 0x80
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d107      	bne.n	80098f6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2140      	movs	r1, #64	; 0x40
 80098f2:	438a      	bics	r2, r1
 80098f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098fa:	2380      	movs	r3, #128	; 0x80
 80098fc:	019b      	lsls	r3, r3, #6
 80098fe:	429a      	cmp	r2, r3
 8009900:	d110      	bne.n	8009924 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4916      	ldr	r1, [pc, #88]	; (8009968 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800990e:	400a      	ands	r2, r1
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2180      	movs	r1, #128	; 0x80
 800991e:	0189      	lsls	r1, r1, #6
 8009920:	430a      	orrs	r2, r1
 8009922:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	225d      	movs	r2, #93	; 0x5d
 8009928:	2101      	movs	r1, #1
 800992a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	225c      	movs	r2, #92	; 0x5c
 8009930:	2100      	movs	r1, #0
 8009932:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e010      	b.n	800995a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	3b01      	subs	r3, #1
 8009946:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4013      	ands	r3, r2
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	429a      	cmp	r2, r3
 8009956:	d192      	bne.n	800987e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	0018      	movs	r0, r3
 800995c:	46bd      	mov	sp, r7
 800995e:	b008      	add	sp, #32
 8009960:	bd80      	pop	{r7, pc}
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	2000010c 	.word	0x2000010c
 8009968:	ffffdfff 	.word	0xffffdfff

0800996c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af02      	add	r7, sp, #8
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	23c0      	movs	r3, #192	; 0xc0
 800997c:	0159      	lsls	r1, r3, #5
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	0013      	movs	r3, r2
 8009986:	2200      	movs	r2, #0
 8009988:	f7ff ff5a 	bl	8009840 <SPI_WaitFifoStateUntilTimeout>
 800998c:	1e03      	subs	r3, r0, #0
 800998e:	d007      	beq.n	80099a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009994:	2220      	movs	r2, #32
 8009996:	431a      	orrs	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e027      	b.n	80099f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	0013      	movs	r3, r2
 80099aa:	2200      	movs	r2, #0
 80099ac:	2180      	movs	r1, #128	; 0x80
 80099ae:	f7ff feb9 	bl	8009724 <SPI_WaitFlagStateUntilTimeout>
 80099b2:	1e03      	subs	r3, r0, #0
 80099b4:	d007      	beq.n	80099c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ba:	2220      	movs	r2, #32
 80099bc:	431a      	orrs	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e014      	b.n	80099f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	23c0      	movs	r3, #192	; 0xc0
 80099ca:	00d9      	lsls	r1, r3, #3
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	0013      	movs	r3, r2
 80099d4:	2200      	movs	r2, #0
 80099d6:	f7ff ff33 	bl	8009840 <SPI_WaitFifoStateUntilTimeout>
 80099da:	1e03      	subs	r3, r0, #0
 80099dc:	d007      	beq.n	80099ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099e2:	2220      	movs	r2, #32
 80099e4:	431a      	orrs	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e000      	b.n	80099f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	0018      	movs	r0, r3
 80099f2:	46bd      	mov	sp, r7
 80099f4:	b004      	add	sp, #16
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e042      	b.n	8009a90 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	223d      	movs	r2, #61	; 0x3d
 8009a0e:	5c9b      	ldrb	r3, [r3, r2]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d107      	bne.n	8009a26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	223c      	movs	r2, #60	; 0x3c
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	0018      	movs	r0, r3
 8009a22:	f7f9 fc23 	bl	800326c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	223d      	movs	r2, #61	; 0x3d
 8009a2a:	2102      	movs	r1, #2
 8009a2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3304      	adds	r3, #4
 8009a36:	0019      	movs	r1, r3
 8009a38:	0010      	movs	r0, r2
 8009a3a:	f000 fa87 	bl	8009f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2246      	movs	r2, #70	; 0x46
 8009a42:	2101      	movs	r1, #1
 8009a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	223e      	movs	r2, #62	; 0x3e
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	5499      	strb	r1, [r3, r2]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	223f      	movs	r2, #63	; 0x3f
 8009a52:	2101      	movs	r1, #1
 8009a54:	5499      	strb	r1, [r3, r2]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2240      	movs	r2, #64	; 0x40
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	5499      	strb	r1, [r3, r2]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2241      	movs	r2, #65	; 0x41
 8009a62:	2101      	movs	r1, #1
 8009a64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2242      	movs	r2, #66	; 0x42
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	5499      	strb	r1, [r3, r2]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2243      	movs	r2, #67	; 0x43
 8009a72:	2101      	movs	r1, #1
 8009a74:	5499      	strb	r1, [r3, r2]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2244      	movs	r2, #68	; 0x44
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	5499      	strb	r1, [r3, r2]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2245      	movs	r2, #69	; 0x45
 8009a82:	2101      	movs	r1, #1
 8009a84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	223d      	movs	r2, #61	; 0x3d
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	0018      	movs	r0, r3
 8009a92:	46bd      	mov	sp, r7
 8009a94:	b002      	add	sp, #8
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	223d      	movs	r2, #61	; 0x3d
 8009aa4:	5c9b      	ldrb	r3, [r3, r2]
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d001      	beq.n	8009ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e03b      	b.n	8009b28 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	223d      	movs	r2, #61	; 0x3d
 8009ab4:	2102      	movs	r1, #2
 8009ab6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a18      	ldr	r2, [pc, #96]	; (8009b30 <HAL_TIM_Base_Start_IT+0x98>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00f      	beq.n	8009af2 <HAL_TIM_Base_Start_IT+0x5a>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	2380      	movs	r3, #128	; 0x80
 8009ad8:	05db      	lsls	r3, r3, #23
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d009      	beq.n	8009af2 <HAL_TIM_Base_Start_IT+0x5a>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <HAL_TIM_Base_Start_IT+0x9c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d004      	beq.n	8009af2 <HAL_TIM_Base_Start_IT+0x5a>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a12      	ldr	r2, [pc, #72]	; (8009b38 <HAL_TIM_Base_Start_IT+0xa0>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d111      	bne.n	8009b16 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2207      	movs	r2, #7
 8009afa:	4013      	ands	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b06      	cmp	r3, #6
 8009b02:	d010      	beq.n	8009b26 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2101      	movs	r1, #1
 8009b10:	430a      	orrs	r2, r1
 8009b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b14:	e007      	b.n	8009b26 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2101      	movs	r1, #1
 8009b22:	430a      	orrs	r2, r1
 8009b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	0018      	movs	r0, r3
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	b004      	add	sp, #16
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	40012c00 	.word	0x40012c00
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40014000 	.word	0x40014000

08009b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d124      	bne.n	8009b9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d11d      	bne.n	8009b9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2203      	movs	r2, #3
 8009b66:	4252      	negs	r2, r2
 8009b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	2203      	movs	r2, #3
 8009b78:	4013      	ands	r3, r2
 8009b7a:	d004      	beq.n	8009b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f000 f9cc 	bl	8009f1c <HAL_TIM_IC_CaptureCallback>
 8009b84:	e007      	b.n	8009b96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f000 f9bf 	bl	8009f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	0018      	movs	r0, r3
 8009b92:	f000 f9cb 	bl	8009f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	2204      	movs	r2, #4
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	2b04      	cmp	r3, #4
 8009ba8:	d125      	bne.n	8009bf6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	2204      	movs	r2, #4
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d11e      	bne.n	8009bf6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2205      	movs	r2, #5
 8009bbe:	4252      	negs	r2, r2
 8009bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	23c0      	movs	r3, #192	; 0xc0
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	d004      	beq.n	8009be0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f000 f99f 	bl	8009f1c <HAL_TIM_IC_CaptureCallback>
 8009bde:	e007      	b.n	8009bf0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	0018      	movs	r0, r3
 8009be4:	f000 f992 	bl	8009f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	0018      	movs	r0, r3
 8009bec:	f000 f99e 	bl	8009f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	2208      	movs	r2, #8
 8009bfe:	4013      	ands	r3, r2
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d124      	bne.n	8009c4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2208      	movs	r2, #8
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	2b08      	cmp	r3, #8
 8009c10:	d11d      	bne.n	8009c4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2209      	movs	r2, #9
 8009c18:	4252      	negs	r2, r2
 8009c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2204      	movs	r2, #4
 8009c20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	2203      	movs	r2, #3
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	d004      	beq.n	8009c38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	0018      	movs	r0, r3
 8009c32:	f000 f973 	bl	8009f1c <HAL_TIM_IC_CaptureCallback>
 8009c36:	e007      	b.n	8009c48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f000 f966 	bl	8009f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	0018      	movs	r0, r3
 8009c44:	f000 f972 	bl	8009f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	2210      	movs	r2, #16
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b10      	cmp	r3, #16
 8009c5a:	d125      	bne.n	8009ca8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	2210      	movs	r2, #16
 8009c64:	4013      	ands	r3, r2
 8009c66:	2b10      	cmp	r3, #16
 8009c68:	d11e      	bne.n	8009ca8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2211      	movs	r2, #17
 8009c70:	4252      	negs	r2, r2
 8009c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2208      	movs	r2, #8
 8009c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	69da      	ldr	r2, [r3, #28]
 8009c80:	23c0      	movs	r3, #192	; 0xc0
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4013      	ands	r3, r2
 8009c86:	d004      	beq.n	8009c92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	f000 f946 	bl	8009f1c <HAL_TIM_IC_CaptureCallback>
 8009c90:	e007      	b.n	8009ca2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	0018      	movs	r0, r3
 8009c96:	f000 f939 	bl	8009f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f000 f945 	bl	8009f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d10f      	bne.n	8009cd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d108      	bne.n	8009cd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2202      	movs	r2, #2
 8009cca:	4252      	negs	r2, r2
 8009ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	0018      	movs	r0, r3
 8009cd2:	f000 f913 	bl	8009efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	2280      	movs	r2, #128	; 0x80
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b80      	cmp	r3, #128	; 0x80
 8009ce2:	d10f      	bne.n	8009d04 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	2280      	movs	r2, #128	; 0x80
 8009cec:	4013      	ands	r3, r2
 8009cee:	2b80      	cmp	r3, #128	; 0x80
 8009cf0:	d108      	bne.n	8009d04 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2281      	movs	r2, #129	; 0x81
 8009cf8:	4252      	negs	r2, r2
 8009cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	0018      	movs	r0, r3
 8009d00:	f000 faa4 	bl	800a24c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	2240      	movs	r2, #64	; 0x40
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	2b40      	cmp	r3, #64	; 0x40
 8009d10:	d10f      	bne.n	8009d32 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	2240      	movs	r2, #64	; 0x40
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	2b40      	cmp	r3, #64	; 0x40
 8009d1e:	d108      	bne.n	8009d32 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2241      	movs	r2, #65	; 0x41
 8009d26:	4252      	negs	r2, r2
 8009d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	f000 f905 	bl	8009f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	d10f      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2220      	movs	r2, #32
 8009d48:	4013      	ands	r3, r2
 8009d4a:	2b20      	cmp	r3, #32
 8009d4c:	d108      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2221      	movs	r2, #33	; 0x21
 8009d54:	4252      	negs	r2, r2
 8009d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f000 fa6e 	bl	800a23c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d60:	46c0      	nop			; (mov r8, r8)
 8009d62:	46bd      	mov	sp, r7
 8009d64:	b002      	add	sp, #8
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	223c      	movs	r2, #60	; 0x3c
 8009d76:	5c9b      	ldrb	r3, [r3, r2]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d101      	bne.n	8009d80 <HAL_TIM_ConfigClockSource+0x18>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e0b7      	b.n	8009ef0 <HAL_TIM_ConfigClockSource+0x188>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	223c      	movs	r2, #60	; 0x3c
 8009d84:	2101      	movs	r1, #1
 8009d86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	223d      	movs	r2, #61	; 0x3d
 8009d8c:	2102      	movs	r1, #2
 8009d8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2277      	movs	r2, #119	; 0x77
 8009d9c:	4393      	bics	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a55      	ldr	r2, [pc, #340]	; (8009ef8 <HAL_TIM_ConfigClockSource+0x190>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2280      	movs	r2, #128	; 0x80
 8009db6:	0192      	lsls	r2, r2, #6
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d040      	beq.n	8009e3e <HAL_TIM_ConfigClockSource+0xd6>
 8009dbc:	2280      	movs	r2, #128	; 0x80
 8009dbe:	0192      	lsls	r2, r2, #6
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d900      	bls.n	8009dc6 <HAL_TIM_ConfigClockSource+0x5e>
 8009dc4:	e088      	b.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
 8009dc6:	2280      	movs	r2, #128	; 0x80
 8009dc8:	0152      	lsls	r2, r2, #5
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d100      	bne.n	8009dd0 <HAL_TIM_ConfigClockSource+0x68>
 8009dce:	e085      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x174>
 8009dd0:	2280      	movs	r2, #128	; 0x80
 8009dd2:	0152      	lsls	r2, r2, #5
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d900      	bls.n	8009dda <HAL_TIM_ConfigClockSource+0x72>
 8009dd8:	e07e      	b.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
 8009dda:	2b70      	cmp	r3, #112	; 0x70
 8009ddc:	d018      	beq.n	8009e10 <HAL_TIM_ConfigClockSource+0xa8>
 8009dde:	d900      	bls.n	8009de2 <HAL_TIM_ConfigClockSource+0x7a>
 8009de0:	e07a      	b.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
 8009de2:	2b60      	cmp	r3, #96	; 0x60
 8009de4:	d04f      	beq.n	8009e86 <HAL_TIM_ConfigClockSource+0x11e>
 8009de6:	d900      	bls.n	8009dea <HAL_TIM_ConfigClockSource+0x82>
 8009de8:	e076      	b.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
 8009dea:	2b50      	cmp	r3, #80	; 0x50
 8009dec:	d03b      	beq.n	8009e66 <HAL_TIM_ConfigClockSource+0xfe>
 8009dee:	d900      	bls.n	8009df2 <HAL_TIM_ConfigClockSource+0x8a>
 8009df0:	e072      	b.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
 8009df2:	2b40      	cmp	r3, #64	; 0x40
 8009df4:	d057      	beq.n	8009ea6 <HAL_TIM_ConfigClockSource+0x13e>
 8009df6:	d900      	bls.n	8009dfa <HAL_TIM_ConfigClockSource+0x92>
 8009df8:	e06e      	b.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
 8009dfa:	2b30      	cmp	r3, #48	; 0x30
 8009dfc:	d063      	beq.n	8009ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8009dfe:	d86b      	bhi.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
 8009e00:	2b20      	cmp	r3, #32
 8009e02:	d060      	beq.n	8009ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8009e04:	d868      	bhi.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d05d      	beq.n	8009ec6 <HAL_TIM_ConfigClockSource+0x15e>
 8009e0a:	2b10      	cmp	r3, #16
 8009e0c:	d05b      	beq.n	8009ec6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009e0e:	e063      	b.n	8009ed8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	6899      	ldr	r1, [r3, #8]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f000 f98e 	bl	800a140 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2277      	movs	r2, #119	; 0x77
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	609a      	str	r2, [r3, #8]
      break;
 8009e3c:	e04f      	b.n	8009ede <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6818      	ldr	r0, [r3, #0]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	6899      	ldr	r1, [r3, #8]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f000 f977 	bl	800a140 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689a      	ldr	r2, [r3, #8]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2180      	movs	r1, #128	; 0x80
 8009e5e:	01c9      	lsls	r1, r1, #7
 8009e60:	430a      	orrs	r2, r1
 8009e62:	609a      	str	r2, [r3, #8]
      break;
 8009e64:	e03b      	b.n	8009ede <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6818      	ldr	r0, [r3, #0]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	6859      	ldr	r1, [r3, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	001a      	movs	r2, r3
 8009e74:	f000 f8ea 	bl	800a04c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2150      	movs	r1, #80	; 0x50
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 f944 	bl	800a10c <TIM_ITRx_SetConfig>
      break;
 8009e84:	e02b      	b.n	8009ede <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6818      	ldr	r0, [r3, #0]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	6859      	ldr	r1, [r3, #4]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	001a      	movs	r2, r3
 8009e94:	f000 f908 	bl	800a0a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2160      	movs	r1, #96	; 0x60
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f000 f934 	bl	800a10c <TIM_ITRx_SetConfig>
      break;
 8009ea4:	e01b      	b.n	8009ede <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	6859      	ldr	r1, [r3, #4]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	001a      	movs	r2, r3
 8009eb4:	f000 f8ca 	bl	800a04c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2140      	movs	r1, #64	; 0x40
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f000 f924 	bl	800a10c <TIM_ITRx_SetConfig>
      break;
 8009ec4:	e00b      	b.n	8009ede <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	0019      	movs	r1, r3
 8009ed0:	0010      	movs	r0, r2
 8009ed2:	f000 f91b 	bl	800a10c <TIM_ITRx_SetConfig>
        break;
 8009ed6:	e002      	b.n	8009ede <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009ed8:	46c0      	nop			; (mov r8, r8)
 8009eda:	e000      	b.n	8009ede <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009edc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	223d      	movs	r2, #61	; 0x3d
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	223c      	movs	r2, #60	; 0x3c
 8009eea:	2100      	movs	r1, #0
 8009eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b004      	add	sp, #16
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	ffff00ff 	.word	0xffff00ff

08009efc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f04:	46c0      	nop			; (mov r8, r8)
 8009f06:	46bd      	mov	sp, r7
 8009f08:	b002      	add	sp, #8
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f14:	46c0      	nop			; (mov r8, r8)
 8009f16:	46bd      	mov	sp, r7
 8009f18:	b002      	add	sp, #8
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f24:	46c0      	nop			; (mov r8, r8)
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b002      	add	sp, #8
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f34:	46c0      	nop			; (mov r8, r8)
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b002      	add	sp, #8
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f44:	46c0      	nop			; (mov r8, r8)
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b002      	add	sp, #8
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a34      	ldr	r2, [pc, #208]	; (800a030 <TIM_Base_SetConfig+0xe4>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d008      	beq.n	8009f76 <TIM_Base_SetConfig+0x2a>
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	2380      	movs	r3, #128	; 0x80
 8009f68:	05db      	lsls	r3, r3, #23
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d003      	beq.n	8009f76 <TIM_Base_SetConfig+0x2a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a30      	ldr	r2, [pc, #192]	; (800a034 <TIM_Base_SetConfig+0xe8>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d108      	bne.n	8009f88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2270      	movs	r2, #112	; 0x70
 8009f7a:	4393      	bics	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a29      	ldr	r2, [pc, #164]	; (800a030 <TIM_Base_SetConfig+0xe4>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d018      	beq.n	8009fc2 <TIM_Base_SetConfig+0x76>
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	2380      	movs	r3, #128	; 0x80
 8009f94:	05db      	lsls	r3, r3, #23
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d013      	beq.n	8009fc2 <TIM_Base_SetConfig+0x76>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a25      	ldr	r2, [pc, #148]	; (800a034 <TIM_Base_SetConfig+0xe8>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x76>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a24      	ldr	r2, [pc, #144]	; (800a038 <TIM_Base_SetConfig+0xec>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x76>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a23      	ldr	r2, [pc, #140]	; (800a03c <TIM_Base_SetConfig+0xf0>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d007      	beq.n	8009fc2 <TIM_Base_SetConfig+0x76>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a22      	ldr	r2, [pc, #136]	; (800a040 <TIM_Base_SetConfig+0xf4>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d003      	beq.n	8009fc2 <TIM_Base_SetConfig+0x76>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a21      	ldr	r2, [pc, #132]	; (800a044 <TIM_Base_SetConfig+0xf8>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d108      	bne.n	8009fd4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4a20      	ldr	r2, [pc, #128]	; (800a048 <TIM_Base_SetConfig+0xfc>)
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2280      	movs	r2, #128	; 0x80
 8009fd8:	4393      	bics	r3, r2
 8009fda:	001a      	movs	r2, r3
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a0c      	ldr	r2, [pc, #48]	; (800a030 <TIM_Base_SetConfig+0xe4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d00b      	beq.n	800a01a <TIM_Base_SetConfig+0xce>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a0d      	ldr	r2, [pc, #52]	; (800a03c <TIM_Base_SetConfig+0xf0>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d007      	beq.n	800a01a <TIM_Base_SetConfig+0xce>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a0c      	ldr	r2, [pc, #48]	; (800a040 <TIM_Base_SetConfig+0xf4>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d003      	beq.n	800a01a <TIM_Base_SetConfig+0xce>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a0b      	ldr	r2, [pc, #44]	; (800a044 <TIM_Base_SetConfig+0xf8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d103      	bne.n	800a022 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	615a      	str	r2, [r3, #20]
}
 800a028:	46c0      	nop			; (mov r8, r8)
 800a02a:	46bd      	mov	sp, r7
 800a02c:	b004      	add	sp, #16
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	40012c00 	.word	0x40012c00
 800a034:	40000400 	.word	0x40000400
 800a038:	40002000 	.word	0x40002000
 800a03c:	40014000 	.word	0x40014000
 800a040:	40014400 	.word	0x40014400
 800a044:	40014800 	.word	0x40014800
 800a048:	fffffcff 	.word	0xfffffcff

0800a04c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	2201      	movs	r2, #1
 800a064:	4393      	bics	r3, r2
 800a066:	001a      	movs	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	22f0      	movs	r2, #240	; 0xf0
 800a076:	4393      	bics	r3, r2
 800a078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	011b      	lsls	r3, r3, #4
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	220a      	movs	r2, #10
 800a088:	4393      	bics	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	4313      	orrs	r3, r2
 800a092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	621a      	str	r2, [r3, #32]
}
 800a0a0:	46c0      	nop			; (mov r8, r8)
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	b006      	add	sp, #24
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	2210      	movs	r2, #16
 800a0ba:	4393      	bics	r3, r2
 800a0bc:	001a      	movs	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	4a0d      	ldr	r2, [pc, #52]	; (800a108 <TIM_TI2_ConfigInputStage+0x60>)
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	031b      	lsls	r3, r3, #12
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	22a0      	movs	r2, #160	; 0xa0
 800a0e4:	4393      	bics	r3, r2
 800a0e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	621a      	str	r2, [r3, #32]
}
 800a0fe:	46c0      	nop			; (mov r8, r8)
 800a100:	46bd      	mov	sp, r7
 800a102:	b006      	add	sp, #24
 800a104:	bd80      	pop	{r7, pc}
 800a106:	46c0      	nop			; (mov r8, r8)
 800a108:	ffff0fff 	.word	0xffff0fff

0800a10c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2270      	movs	r2, #112	; 0x70
 800a120:	4393      	bics	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4313      	orrs	r3, r2
 800a12a:	2207      	movs	r2, #7
 800a12c:	4313      	orrs	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	609a      	str	r2, [r3, #8]
}
 800a136:	46c0      	nop			; (mov r8, r8)
 800a138:	46bd      	mov	sp, r7
 800a13a:	b004      	add	sp, #16
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	4a09      	ldr	r2, [pc, #36]	; (800a17c <TIM_ETR_SetConfig+0x3c>)
 800a158:	4013      	ands	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	021a      	lsls	r2, r3, #8
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	431a      	orrs	r2, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	4313      	orrs	r3, r2
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	609a      	str	r2, [r3, #8]
}
 800a174:	46c0      	nop			; (mov r8, r8)
 800a176:	46bd      	mov	sp, r7
 800a178:	b006      	add	sp, #24
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	ffff00ff 	.word	0xffff00ff

0800a180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	223c      	movs	r2, #60	; 0x3c
 800a18e:	5c9b      	ldrb	r3, [r3, r2]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d101      	bne.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a194:	2302      	movs	r3, #2
 800a196:	e047      	b.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	223c      	movs	r2, #60	; 0x3c
 800a19c:	2101      	movs	r1, #1
 800a19e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	223d      	movs	r2, #61	; 0x3d
 800a1a4:	2102      	movs	r1, #2
 800a1a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2270      	movs	r2, #112	; 0x70
 800a1bc:	4393      	bics	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a16      	ldr	r2, [pc, #88]	; (800a230 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00f      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	2380      	movs	r3, #128	; 0x80
 800a1e2:	05db      	lsls	r3, r3, #23
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d009      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a11      	ldr	r2, [pc, #68]	; (800a234 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d004      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a10      	ldr	r2, [pc, #64]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d10c      	bne.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2280      	movs	r2, #128	; 0x80
 800a200:	4393      	bics	r3, r2
 800a202:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	223d      	movs	r2, #61	; 0x3d
 800a21a:	2101      	movs	r1, #1
 800a21c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	223c      	movs	r2, #60	; 0x3c
 800a222:	2100      	movs	r1, #0
 800a224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	0018      	movs	r0, r3
 800a22a:	46bd      	mov	sp, r7
 800a22c:	b004      	add	sp, #16
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40012c00 	.word	0x40012c00
 800a234:	40000400 	.word	0x40000400
 800a238:	40014000 	.word	0x40014000

0800a23c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a244:	46c0      	nop			; (mov r8, r8)
 800a246:	46bd      	mov	sp, r7
 800a248:	b002      	add	sp, #8
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a254:	46c0      	nop			; (mov r8, r8)
 800a256:	46bd      	mov	sp, r7
 800a258:	b002      	add	sp, #8
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e044      	b.n	800a2f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a272:	2b00      	cmp	r3, #0
 800a274:	d107      	bne.n	800a286 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2274      	movs	r2, #116	; 0x74
 800a27a:	2100      	movs	r1, #0
 800a27c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	0018      	movs	r0, r3
 800a282:	f7f9 f82d 	bl	80032e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2224      	movs	r2, #36	; 0x24
 800a28a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2101      	movs	r1, #1
 800a298:	438a      	bics	r2, r1
 800a29a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	0018      	movs	r0, r3
 800a2a0:	f000 faf8 	bl	800a894 <UART_SetConfig>
 800a2a4:	0003      	movs	r3, r0
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d101      	bne.n	800a2ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e024      	b.n	800a2f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f000 fc73 	bl	800aba4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	490d      	ldr	r1, [pc, #52]	; (800a300 <HAL_UART_Init+0xa4>)
 800a2ca:	400a      	ands	r2, r1
 800a2cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	212a      	movs	r1, #42	; 0x2a
 800a2da:	438a      	bics	r2, r1
 800a2dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f000 fd0b 	bl	800ad0c <UART_CheckIdleState>
 800a2f6:	0003      	movs	r3, r0
}
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	b002      	add	sp, #8
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	ffffb7ff 	.word	0xffffb7ff

0800a304 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08a      	sub	sp, #40	; 0x28
 800a308:	af02      	add	r7, sp, #8
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	603b      	str	r3, [r7, #0]
 800a310:	1dbb      	adds	r3, r7, #6
 800a312:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a318:	2b20      	cmp	r3, #32
 800a31a:	d000      	beq.n	800a31e <HAL_UART_Transmit+0x1a>
 800a31c:	e096      	b.n	800a44c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d003      	beq.n	800a32c <HAL_UART_Transmit+0x28>
 800a324:	1dbb      	adds	r3, r7, #6
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d101      	bne.n	800a330 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e08e      	b.n	800a44e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	2380      	movs	r3, #128	; 0x80
 800a336:	015b      	lsls	r3, r3, #5
 800a338:	429a      	cmp	r2, r3
 800a33a:	d109      	bne.n	800a350 <HAL_UART_Transmit+0x4c>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d105      	bne.n	800a350 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2201      	movs	r2, #1
 800a348:	4013      	ands	r3, r2
 800a34a:	d001      	beq.n	800a350 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e07e      	b.n	800a44e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2274      	movs	r2, #116	; 0x74
 800a354:	5c9b      	ldrb	r3, [r3, r2]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_UART_Transmit+0x5a>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e077      	b.n	800a44e <HAL_UART_Transmit+0x14a>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2274      	movs	r2, #116	; 0x74
 800a362:	2101      	movs	r1, #1
 800a364:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2280      	movs	r2, #128	; 0x80
 800a36a:	2100      	movs	r1, #0
 800a36c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2221      	movs	r2, #33	; 0x21
 800a372:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a374:	f7f9 f916 	bl	80035a4 <HAL_GetTick>
 800a378:	0003      	movs	r3, r0
 800a37a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	1dba      	adds	r2, r7, #6
 800a380:	2150      	movs	r1, #80	; 0x50
 800a382:	8812      	ldrh	r2, [r2, #0]
 800a384:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	1dba      	adds	r2, r7, #6
 800a38a:	2152      	movs	r1, #82	; 0x52
 800a38c:	8812      	ldrh	r2, [r2, #0]
 800a38e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	2380      	movs	r3, #128	; 0x80
 800a396:	015b      	lsls	r3, r3, #5
 800a398:	429a      	cmp	r2, r3
 800a39a:	d108      	bne.n	800a3ae <HAL_UART_Transmit+0xaa>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d104      	bne.n	800a3ae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	61bb      	str	r3, [r7, #24]
 800a3ac:	e003      	b.n	800a3b6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2274      	movs	r2, #116	; 0x74
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800a3be:	e02d      	b.n	800a41c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	0013      	movs	r3, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	2180      	movs	r1, #128	; 0x80
 800a3ce:	f000 fce5 	bl	800ad9c <UART_WaitOnFlagUntilTimeout>
 800a3d2:	1e03      	subs	r3, r0, #0
 800a3d4:	d001      	beq.n	800a3da <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e039      	b.n	800a44e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10b      	bne.n	800a3f8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	881a      	ldrh	r2, [r3, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	05d2      	lsls	r2, r2, #23
 800a3ea:	0dd2      	lsrs	r2, r2, #23
 800a3ec:	b292      	uxth	r2, r2
 800a3ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	e008      	b.n	800a40a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	b292      	uxth	r2, r2
 800a402:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	3301      	adds	r3, #1
 800a408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2252      	movs	r2, #82	; 0x52
 800a40e:	5a9b      	ldrh	r3, [r3, r2]
 800a410:	b29b      	uxth	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	b299      	uxth	r1, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2252      	movs	r2, #82	; 0x52
 800a41a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2252      	movs	r2, #82	; 0x52
 800a420:	5a9b      	ldrh	r3, [r3, r2]
 800a422:	b29b      	uxth	r3, r3
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1cb      	bne.n	800a3c0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	0013      	movs	r3, r2
 800a432:	2200      	movs	r2, #0
 800a434:	2140      	movs	r1, #64	; 0x40
 800a436:	f000 fcb1 	bl	800ad9c <UART_WaitOnFlagUntilTimeout>
 800a43a:	1e03      	subs	r3, r0, #0
 800a43c:	d001      	beq.n	800a442 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e005      	b.n	800a44e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2220      	movs	r2, #32
 800a446:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	e000      	b.n	800a44e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a44c:	2302      	movs	r3, #2
  }
}
 800a44e:	0018      	movs	r0, r3
 800a450:	46bd      	mov	sp, r7
 800a452:	b008      	add	sp, #32
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4ab4      	ldr	r2, [pc, #720]	; (800a74c <HAL_UART_IRQHandler+0x2f4>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d112      	bne.n	800a4ac <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	2220      	movs	r2, #32
 800a48a:	4013      	ands	r3, r2
 800a48c:	d00e      	beq.n	800a4ac <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	2220      	movs	r2, #32
 800a492:	4013      	ands	r3, r2
 800a494:	d00a      	beq.n	800a4ac <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d100      	bne.n	800a4a0 <HAL_UART_IRQHandler+0x48>
 800a49e:	e1cf      	b.n	800a840 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	0010      	movs	r0, r2
 800a4a8:	4798      	blx	r3
      }
      return;
 800a4aa:	e1c9      	b.n	800a840 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d100      	bne.n	800a4b4 <HAL_UART_IRQHandler+0x5c>
 800a4b2:	e0d9      	b.n	800a668 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	d104      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	4aa4      	ldr	r2, [pc, #656]	; (800a750 <HAL_UART_IRQHandler+0x2f8>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	d100      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x6e>
 800a4c4:	e0d0      	b.n	800a668 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	d010      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x98>
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	2380      	movs	r3, #128	; 0x80
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	d00b      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2280      	movs	r2, #128	; 0x80
 800a4e4:	589b      	ldr	r3, [r3, r2]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2180      	movs	r1, #128	; 0x80
 800a4ee:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	d00f      	beq.n	800a518 <HAL_UART_IRQHandler+0xc0>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	d00b      	beq.n	800a518 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2202      	movs	r2, #2
 800a506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2280      	movs	r2, #128	; 0x80
 800a50c:	589b      	ldr	r3, [r3, r2]
 800a50e:	2204      	movs	r2, #4
 800a510:	431a      	orrs	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2180      	movs	r1, #128	; 0x80
 800a516:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	2204      	movs	r2, #4
 800a51c:	4013      	ands	r3, r2
 800a51e:	d00f      	beq.n	800a540 <HAL_UART_IRQHandler+0xe8>
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	2201      	movs	r2, #1
 800a524:	4013      	ands	r3, r2
 800a526:	d00b      	beq.n	800a540 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2204      	movs	r2, #4
 800a52e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2280      	movs	r2, #128	; 0x80
 800a534:	589b      	ldr	r3, [r3, r2]
 800a536:	2202      	movs	r2, #2
 800a538:	431a      	orrs	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2180      	movs	r1, #128	; 0x80
 800a53e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	2208      	movs	r2, #8
 800a544:	4013      	ands	r3, r2
 800a546:	d013      	beq.n	800a570 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	2220      	movs	r2, #32
 800a54c:	4013      	ands	r3, r2
 800a54e:	d103      	bne.n	800a558 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	2201      	movs	r2, #1
 800a554:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a556:	d00b      	beq.n	800a570 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2208      	movs	r2, #8
 800a55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2280      	movs	r2, #128	; 0x80
 800a564:	589b      	ldr	r3, [r3, r2]
 800a566:	2208      	movs	r2, #8
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2180      	movs	r1, #128	; 0x80
 800a56e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	2380      	movs	r3, #128	; 0x80
 800a574:	011b      	lsls	r3, r3, #4
 800a576:	4013      	ands	r3, r2
 800a578:	d011      	beq.n	800a59e <HAL_UART_IRQHandler+0x146>
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	2380      	movs	r3, #128	; 0x80
 800a57e:	04db      	lsls	r3, r3, #19
 800a580:	4013      	ands	r3, r2
 800a582:	d00c      	beq.n	800a59e <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2280      	movs	r2, #128	; 0x80
 800a58a:	0112      	lsls	r2, r2, #4
 800a58c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2280      	movs	r2, #128	; 0x80
 800a592:	589b      	ldr	r3, [r3, r2]
 800a594:	2220      	movs	r2, #32
 800a596:	431a      	orrs	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2180      	movs	r1, #128	; 0x80
 800a59c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2280      	movs	r2, #128	; 0x80
 800a5a2:	589b      	ldr	r3, [r3, r2]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d100      	bne.n	800a5aa <HAL_UART_IRQHandler+0x152>
 800a5a8:	e14c      	b.n	800a844 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	d00c      	beq.n	800a5cc <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	d008      	beq.n	800a5cc <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d004      	beq.n	800a5cc <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	0010      	movs	r0, r2
 800a5ca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2280      	movs	r2, #128	; 0x80
 800a5d0:	589b      	ldr	r3, [r3, r2]
 800a5d2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	2240      	movs	r2, #64	; 0x40
 800a5dc:	4013      	ands	r3, r2
 800a5de:	2b40      	cmp	r3, #64	; 0x40
 800a5e0:	d003      	beq.n	800a5ea <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2228      	movs	r2, #40	; 0x28
 800a5e6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5e8:	d033      	beq.n	800a652 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	f000 fc53 	bl	800ae98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	2240      	movs	r2, #64	; 0x40
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b40      	cmp	r3, #64	; 0x40
 800a5fe:	d123      	bne.n	800a648 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	689a      	ldr	r2, [r3, #8]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2140      	movs	r1, #64	; 0x40
 800a60c:	438a      	bics	r2, r1
 800a60e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a614:	2b00      	cmp	r3, #0
 800a616:	d012      	beq.n	800a63e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61c:	4a4d      	ldr	r2, [pc, #308]	; (800a754 <HAL_UART_IRQHandler+0x2fc>)
 800a61e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a624:	0018      	movs	r0, r3
 800a626:	f7fa fddb 	bl	80051e0 <HAL_DMA_Abort_IT>
 800a62a:	1e03      	subs	r3, r0, #0
 800a62c:	d01a      	beq.n	800a664 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a638:	0018      	movs	r0, r3
 800a63a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a63c:	e012      	b.n	800a664 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	0018      	movs	r0, r3
 800a642:	f000 f913 	bl	800a86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a646:	e00d      	b.n	800a664 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	0018      	movs	r0, r3
 800a64c:	f000 f90e 	bl	800a86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a650:	e008      	b.n	800a664 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	0018      	movs	r0, r3
 800a656:	f000 f909 	bl	800a86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2280      	movs	r2, #128	; 0x80
 800a65e:	2100      	movs	r1, #0
 800a660:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a662:	e0ef      	b.n	800a844 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a664:	46c0      	nop			; (mov r8, r8)
    return;
 800a666:	e0ed      	b.n	800a844 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d000      	beq.n	800a672 <HAL_UART_IRQHandler+0x21a>
 800a670:	e0b3      	b.n	800a7da <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	2210      	movs	r2, #16
 800a676:	4013      	ands	r3, r2
 800a678:	d100      	bne.n	800a67c <HAL_UART_IRQHandler+0x224>
 800a67a:	e0ae      	b.n	800a7da <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	2210      	movs	r2, #16
 800a680:	4013      	ands	r3, r2
 800a682:	d100      	bne.n	800a686 <HAL_UART_IRQHandler+0x22e>
 800a684:	e0a9      	b.n	800a7da <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2210      	movs	r2, #16
 800a68c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	2240      	movs	r2, #64	; 0x40
 800a696:	4013      	ands	r3, r2
 800a698:	2b40      	cmp	r3, #64	; 0x40
 800a69a:	d15f      	bne.n	800a75c <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	2108      	movs	r1, #8
 800a6a6:	187b      	adds	r3, r7, r1
 800a6a8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800a6aa:	187b      	adds	r3, r7, r1
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d100      	bne.n	800a6b4 <HAL_UART_IRQHandler+0x25c>
 800a6b2:	e0c9      	b.n	800a848 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2258      	movs	r2, #88	; 0x58
 800a6b8:	5a9b      	ldrh	r3, [r3, r2]
 800a6ba:	187a      	adds	r2, r7, r1
 800a6bc:	8812      	ldrh	r2, [r2, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d300      	bcc.n	800a6c4 <HAL_UART_IRQHandler+0x26c>
 800a6c2:	e0c1      	b.n	800a848 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	187a      	adds	r2, r7, r1
 800a6c8:	215a      	movs	r1, #90	; 0x5a
 800a6ca:	8812      	ldrh	r2, [r2, #0]
 800a6cc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	2b20      	cmp	r3, #32
 800a6d6:	d02a      	beq.n	800a72e <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	491d      	ldr	r1, [pc, #116]	; (800a758 <HAL_UART_IRQHandler+0x300>)
 800a6e4:	400a      	ands	r2, r1
 800a6e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	438a      	bics	r2, r1
 800a6f6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689a      	ldr	r2, [r3, #8]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2140      	movs	r1, #64	; 0x40
 800a704:	438a      	bics	r2, r1
 800a706:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2220      	movs	r2, #32
 800a70c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2110      	movs	r1, #16
 800a720:	438a      	bics	r2, r1
 800a722:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a728:	0018      	movs	r0, r3
 800a72a:	f7fa fd21 	bl	8005170 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2258      	movs	r2, #88	; 0x58
 800a732:	5a9a      	ldrh	r2, [r3, r2]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	215a      	movs	r1, #90	; 0x5a
 800a738:	5a5b      	ldrh	r3, [r3, r1]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	0011      	movs	r1, r2
 800a744:	0018      	movs	r0, r3
 800a746:	f000 f899 	bl	800a87c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a74a:	e07d      	b.n	800a848 <HAL_UART_IRQHandler+0x3f0>
 800a74c:	0000080f 	.word	0x0000080f
 800a750:	04000120 	.word	0x04000120
 800a754:	0800aef9 	.word	0x0800aef9
 800a758:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2258      	movs	r2, #88	; 0x58
 800a760:	5a99      	ldrh	r1, [r3, r2]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	225a      	movs	r2, #90	; 0x5a
 800a766:	5a9b      	ldrh	r3, [r3, r2]
 800a768:	b29a      	uxth	r2, r3
 800a76a:	200a      	movs	r0, #10
 800a76c:	183b      	adds	r3, r7, r0
 800a76e:	1a8a      	subs	r2, r1, r2
 800a770:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	225a      	movs	r2, #90	; 0x5a
 800a776:	5a9b      	ldrh	r3, [r3, r2]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d100      	bne.n	800a780 <HAL_UART_IRQHandler+0x328>
 800a77e:	e065      	b.n	800a84c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 800a780:	183b      	adds	r3, r7, r0
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d061      	beq.n	800a84c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4931      	ldr	r1, [pc, #196]	; (800a858 <HAL_UART_IRQHandler+0x400>)
 800a794:	400a      	ands	r2, r1
 800a796:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	689a      	ldr	r2, [r3, #8]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	438a      	bics	r2, r1
 800a7a6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2110      	movs	r1, #16
 800a7c6:	438a      	bics	r2, r1
 800a7c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7ca:	183b      	adds	r3, r7, r0
 800a7cc:	881a      	ldrh	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	0011      	movs	r1, r2
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f000 f852 	bl	800a87c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a7d8:	e038      	b.n	800a84c <HAL_UART_IRQHandler+0x3f4>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	2380      	movs	r3, #128	; 0x80
 800a7de:	035b      	lsls	r3, r3, #13
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	d00e      	beq.n	800a802 <HAL_UART_IRQHandler+0x3aa>
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	2380      	movs	r3, #128	; 0x80
 800a7e8:	03db      	lsls	r3, r3, #15
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	d009      	beq.n	800a802 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2280      	movs	r2, #128	; 0x80
 800a7f4:	0352      	lsls	r2, r2, #13
 800a7f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	f000 fbad 	bl	800af5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a800:	e027      	b.n	800a852 <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	2280      	movs	r2, #128	; 0x80
 800a806:	4013      	ands	r3, r2
 800a808:	d00d      	beq.n	800a826 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	2280      	movs	r2, #128	; 0x80
 800a80e:	4013      	ands	r3, r2
 800a810:	d009      	beq.n	800a826 <HAL_UART_IRQHandler+0x3ce>
  {
    if (huart->TxISR != NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a816:	2b00      	cmp	r3, #0
 800a818:	d01a      	beq.n	800a850 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	0010      	movs	r0, r2
 800a822:	4798      	blx	r3
    }
    return;
 800a824:	e014      	b.n	800a850 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	2240      	movs	r2, #64	; 0x40
 800a82a:	4013      	ands	r3, r2
 800a82c:	d011      	beq.n	800a852 <HAL_UART_IRQHandler+0x3fa>
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	2240      	movs	r2, #64	; 0x40
 800a832:	4013      	ands	r3, r2
 800a834:	d00d      	beq.n	800a852 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	0018      	movs	r0, r3
 800a83a:	f000 fb74 	bl	800af26 <UART_EndTransmit_IT>
    return;
 800a83e:	e008      	b.n	800a852 <HAL_UART_IRQHandler+0x3fa>
      return;
 800a840:	46c0      	nop			; (mov r8, r8)
 800a842:	e006      	b.n	800a852 <HAL_UART_IRQHandler+0x3fa>
    return;
 800a844:	46c0      	nop			; (mov r8, r8)
 800a846:	e004      	b.n	800a852 <HAL_UART_IRQHandler+0x3fa>
      return;
 800a848:	46c0      	nop			; (mov r8, r8)
 800a84a:	e002      	b.n	800a852 <HAL_UART_IRQHandler+0x3fa>
      return;
 800a84c:	46c0      	nop			; (mov r8, r8)
 800a84e:	e000      	b.n	800a852 <HAL_UART_IRQHandler+0x3fa>
    return;
 800a850:	46c0      	nop			; (mov r8, r8)
  }

}
 800a852:	46bd      	mov	sp, r7
 800a854:	b008      	add	sp, #32
 800a856:	bd80      	pop	{r7, pc}
 800a858:	fffffedf 	.word	0xfffffedf

0800a85c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a864:	46c0      	nop			; (mov r8, r8)
 800a866:	46bd      	mov	sp, r7
 800a868:	b002      	add	sp, #8
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a874:	46c0      	nop			; (mov r8, r8)
 800a876:	46bd      	mov	sp, r7
 800a878:	b002      	add	sp, #8
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	000a      	movs	r2, r1
 800a886:	1cbb      	adds	r3, r7, #2
 800a888:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a88a:	46c0      	nop			; (mov r8, r8)
 800a88c:	46bd      	mov	sp, r7
 800a88e:	b002      	add	sp, #8
 800a890:	bd80      	pop	{r7, pc}
	...

0800a894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a89c:	231e      	movs	r3, #30
 800a89e:	18fb      	adds	r3, r7, r3
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4aaf      	ldr	r2, [pc, #700]	; (800ab80 <UART_SetConfig+0x2ec>)
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	0019      	movs	r1, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	4aaa      	ldr	r2, [pc, #680]	; (800ab84 <UART_SetConfig+0x2f0>)
 800a8da:	4013      	ands	r3, r2
 800a8dc:	0019      	movs	r1, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	4aa1      	ldr	r2, [pc, #644]	; (800ab88 <UART_SetConfig+0x2f4>)
 800a902:	4013      	ands	r3, r2
 800a904:	0019      	movs	r1, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a9d      	ldr	r2, [pc, #628]	; (800ab8c <UART_SetConfig+0x2f8>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d127      	bne.n	800a96a <UART_SetConfig+0xd6>
 800a91a:	4b9d      	ldr	r3, [pc, #628]	; (800ab90 <UART_SetConfig+0x2fc>)
 800a91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91e:	2203      	movs	r2, #3
 800a920:	4013      	ands	r3, r2
 800a922:	2b03      	cmp	r3, #3
 800a924:	d00d      	beq.n	800a942 <UART_SetConfig+0xae>
 800a926:	d81b      	bhi.n	800a960 <UART_SetConfig+0xcc>
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d014      	beq.n	800a956 <UART_SetConfig+0xc2>
 800a92c:	d818      	bhi.n	800a960 <UART_SetConfig+0xcc>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <UART_SetConfig+0xa4>
 800a932:	2b01      	cmp	r3, #1
 800a934:	d00a      	beq.n	800a94c <UART_SetConfig+0xb8>
 800a936:	e013      	b.n	800a960 <UART_SetConfig+0xcc>
 800a938:	231f      	movs	r3, #31
 800a93a:	18fb      	adds	r3, r7, r3
 800a93c:	2200      	movs	r2, #0
 800a93e:	701a      	strb	r2, [r3, #0]
 800a940:	e065      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a942:	231f      	movs	r3, #31
 800a944:	18fb      	adds	r3, r7, r3
 800a946:	2202      	movs	r2, #2
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	e060      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a94c:	231f      	movs	r3, #31
 800a94e:	18fb      	adds	r3, r7, r3
 800a950:	2204      	movs	r2, #4
 800a952:	701a      	strb	r2, [r3, #0]
 800a954:	e05b      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a956:	231f      	movs	r3, #31
 800a958:	18fb      	adds	r3, r7, r3
 800a95a:	2208      	movs	r2, #8
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	e056      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a960:	231f      	movs	r3, #31
 800a962:	18fb      	adds	r3, r7, r3
 800a964:	2210      	movs	r2, #16
 800a966:	701a      	strb	r2, [r3, #0]
 800a968:	e051      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a89      	ldr	r2, [pc, #548]	; (800ab94 <UART_SetConfig+0x300>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d134      	bne.n	800a9de <UART_SetConfig+0x14a>
 800a974:	4b86      	ldr	r3, [pc, #536]	; (800ab90 <UART_SetConfig+0x2fc>)
 800a976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a978:	23c0      	movs	r3, #192	; 0xc0
 800a97a:	029b      	lsls	r3, r3, #10
 800a97c:	4013      	ands	r3, r2
 800a97e:	22c0      	movs	r2, #192	; 0xc0
 800a980:	0292      	lsls	r2, r2, #10
 800a982:	4293      	cmp	r3, r2
 800a984:	d017      	beq.n	800a9b6 <UART_SetConfig+0x122>
 800a986:	22c0      	movs	r2, #192	; 0xc0
 800a988:	0292      	lsls	r2, r2, #10
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d822      	bhi.n	800a9d4 <UART_SetConfig+0x140>
 800a98e:	2280      	movs	r2, #128	; 0x80
 800a990:	0292      	lsls	r2, r2, #10
 800a992:	4293      	cmp	r3, r2
 800a994:	d019      	beq.n	800a9ca <UART_SetConfig+0x136>
 800a996:	2280      	movs	r2, #128	; 0x80
 800a998:	0292      	lsls	r2, r2, #10
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d81a      	bhi.n	800a9d4 <UART_SetConfig+0x140>
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <UART_SetConfig+0x118>
 800a9a2:	2280      	movs	r2, #128	; 0x80
 800a9a4:	0252      	lsls	r2, r2, #9
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d00a      	beq.n	800a9c0 <UART_SetConfig+0x12c>
 800a9aa:	e013      	b.n	800a9d4 <UART_SetConfig+0x140>
 800a9ac:	231f      	movs	r3, #31
 800a9ae:	18fb      	adds	r3, r7, r3
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	e02b      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a9b6:	231f      	movs	r3, #31
 800a9b8:	18fb      	adds	r3, r7, r3
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	701a      	strb	r2, [r3, #0]
 800a9be:	e026      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a9c0:	231f      	movs	r3, #31
 800a9c2:	18fb      	adds	r3, r7, r3
 800a9c4:	2204      	movs	r2, #4
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	e021      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a9ca:	231f      	movs	r3, #31
 800a9cc:	18fb      	adds	r3, r7, r3
 800a9ce:	2208      	movs	r2, #8
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	e01c      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a9d4:	231f      	movs	r3, #31
 800a9d6:	18fb      	adds	r3, r7, r3
 800a9d8:	2210      	movs	r2, #16
 800a9da:	701a      	strb	r2, [r3, #0]
 800a9dc:	e017      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a6d      	ldr	r2, [pc, #436]	; (800ab98 <UART_SetConfig+0x304>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d104      	bne.n	800a9f2 <UART_SetConfig+0x15e>
 800a9e8:	231f      	movs	r3, #31
 800a9ea:	18fb      	adds	r3, r7, r3
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	701a      	strb	r2, [r3, #0]
 800a9f0:	e00d      	b.n	800aa0e <UART_SetConfig+0x17a>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a69      	ldr	r2, [pc, #420]	; (800ab9c <UART_SetConfig+0x308>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d104      	bne.n	800aa06 <UART_SetConfig+0x172>
 800a9fc:	231f      	movs	r3, #31
 800a9fe:	18fb      	adds	r3, r7, r3
 800aa00:	2200      	movs	r2, #0
 800aa02:	701a      	strb	r2, [r3, #0]
 800aa04:	e003      	b.n	800aa0e <UART_SetConfig+0x17a>
 800aa06:	231f      	movs	r3, #31
 800aa08:	18fb      	adds	r3, r7, r3
 800aa0a:	2210      	movs	r2, #16
 800aa0c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69da      	ldr	r2, [r3, #28]
 800aa12:	2380      	movs	r3, #128	; 0x80
 800aa14:	021b      	lsls	r3, r3, #8
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d15d      	bne.n	800aad6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800aa1a:	231f      	movs	r3, #31
 800aa1c:	18fb      	adds	r3, r7, r3
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	2b08      	cmp	r3, #8
 800aa22:	d015      	beq.n	800aa50 <UART_SetConfig+0x1bc>
 800aa24:	dc18      	bgt.n	800aa58 <UART_SetConfig+0x1c4>
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	d00d      	beq.n	800aa46 <UART_SetConfig+0x1b2>
 800aa2a:	dc15      	bgt.n	800aa58 <UART_SetConfig+0x1c4>
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <UART_SetConfig+0x1a2>
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d005      	beq.n	800aa40 <UART_SetConfig+0x1ac>
 800aa34:	e010      	b.n	800aa58 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa36:	f7fe fb51 	bl	80090dc <HAL_RCC_GetPCLK1Freq>
 800aa3a:	0003      	movs	r3, r0
 800aa3c:	61bb      	str	r3, [r7, #24]
        break;
 800aa3e:	e012      	b.n	800aa66 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa40:	4b57      	ldr	r3, [pc, #348]	; (800aba0 <UART_SetConfig+0x30c>)
 800aa42:	61bb      	str	r3, [r7, #24]
        break;
 800aa44:	e00f      	b.n	800aa66 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa46:	f7fe fabf 	bl	8008fc8 <HAL_RCC_GetSysClockFreq>
 800aa4a:	0003      	movs	r3, r0
 800aa4c:	61bb      	str	r3, [r7, #24]
        break;
 800aa4e:	e00a      	b.n	800aa66 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa50:	2380      	movs	r3, #128	; 0x80
 800aa52:	021b      	lsls	r3, r3, #8
 800aa54:	61bb      	str	r3, [r7, #24]
        break;
 800aa56:	e006      	b.n	800aa66 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aa5c:	231e      	movs	r3, #30
 800aa5e:	18fb      	adds	r3, r7, r3
 800aa60:	2201      	movs	r2, #1
 800aa62:	701a      	strb	r2, [r3, #0]
        break;
 800aa64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d100      	bne.n	800aa6e <UART_SetConfig+0x1da>
 800aa6c:	e07b      	b.n	800ab66 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	005a      	lsls	r2, r3, #1
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	085b      	lsrs	r3, r3, #1
 800aa78:	18d2      	adds	r2, r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	0019      	movs	r1, r3
 800aa80:	0010      	movs	r0, r2
 800aa82:	f7f5 fb41 	bl	8000108 <__udivsi3>
 800aa86:	0003      	movs	r3, r0
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b0f      	cmp	r3, #15
 800aa90:	d91c      	bls.n	800aacc <UART_SetConfig+0x238>
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	2380      	movs	r3, #128	; 0x80
 800aa96:	025b      	lsls	r3, r3, #9
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d217      	bcs.n	800aacc <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	200e      	movs	r0, #14
 800aaa2:	183b      	adds	r3, r7, r0
 800aaa4:	210f      	movs	r1, #15
 800aaa6:	438a      	bics	r2, r1
 800aaa8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	085b      	lsrs	r3, r3, #1
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	2207      	movs	r2, #7
 800aab2:	4013      	ands	r3, r2
 800aab4:	b299      	uxth	r1, r3
 800aab6:	183b      	adds	r3, r7, r0
 800aab8:	183a      	adds	r2, r7, r0
 800aaba:	8812      	ldrh	r2, [r2, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	183a      	adds	r2, r7, r0
 800aac6:	8812      	ldrh	r2, [r2, #0]
 800aac8:	60da      	str	r2, [r3, #12]
 800aaca:	e04c      	b.n	800ab66 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800aacc:	231e      	movs	r3, #30
 800aace:	18fb      	adds	r3, r7, r3
 800aad0:	2201      	movs	r2, #1
 800aad2:	701a      	strb	r2, [r3, #0]
 800aad4:	e047      	b.n	800ab66 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aad6:	231f      	movs	r3, #31
 800aad8:	18fb      	adds	r3, r7, r3
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2b08      	cmp	r3, #8
 800aade:	d015      	beq.n	800ab0c <UART_SetConfig+0x278>
 800aae0:	dc18      	bgt.n	800ab14 <UART_SetConfig+0x280>
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d00d      	beq.n	800ab02 <UART_SetConfig+0x26e>
 800aae6:	dc15      	bgt.n	800ab14 <UART_SetConfig+0x280>
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <UART_SetConfig+0x25e>
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d005      	beq.n	800aafc <UART_SetConfig+0x268>
 800aaf0:	e010      	b.n	800ab14 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf2:	f7fe faf3 	bl	80090dc <HAL_RCC_GetPCLK1Freq>
 800aaf6:	0003      	movs	r3, r0
 800aaf8:	61bb      	str	r3, [r7, #24]
        break;
 800aafa:	e012      	b.n	800ab22 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aafc:	4b28      	ldr	r3, [pc, #160]	; (800aba0 <UART_SetConfig+0x30c>)
 800aafe:	61bb      	str	r3, [r7, #24]
        break;
 800ab00:	e00f      	b.n	800ab22 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab02:	f7fe fa61 	bl	8008fc8 <HAL_RCC_GetSysClockFreq>
 800ab06:	0003      	movs	r3, r0
 800ab08:	61bb      	str	r3, [r7, #24]
        break;
 800ab0a:	e00a      	b.n	800ab22 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab0c:	2380      	movs	r3, #128	; 0x80
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	61bb      	str	r3, [r7, #24]
        break;
 800ab12:	e006      	b.n	800ab22 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800ab14:	2300      	movs	r3, #0
 800ab16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ab18:	231e      	movs	r3, #30
 800ab1a:	18fb      	adds	r3, r7, r3
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	701a      	strb	r2, [r3, #0]
        break;
 800ab20:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d01e      	beq.n	800ab66 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	085a      	lsrs	r2, r3, #1
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	18d2      	adds	r2, r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	0019      	movs	r1, r3
 800ab38:	0010      	movs	r0, r2
 800ab3a:	f7f5 fae5 	bl	8000108 <__udivsi3>
 800ab3e:	0003      	movs	r3, r0
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	2b0f      	cmp	r3, #15
 800ab48:	d909      	bls.n	800ab5e <UART_SetConfig+0x2ca>
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	2380      	movs	r3, #128	; 0x80
 800ab4e:	025b      	lsls	r3, r3, #9
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d204      	bcs.n	800ab5e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	60da      	str	r2, [r3, #12]
 800ab5c:	e003      	b.n	800ab66 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800ab5e:	231e      	movs	r3, #30
 800ab60:	18fb      	adds	r3, r7, r3
 800ab62:	2201      	movs	r2, #1
 800ab64:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ab72:	231e      	movs	r3, #30
 800ab74:	18fb      	adds	r3, r7, r3
 800ab76:	781b      	ldrb	r3, [r3, #0]
}
 800ab78:	0018      	movs	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b008      	add	sp, #32
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	efff69f3 	.word	0xefff69f3
 800ab84:	ffffcfff 	.word	0xffffcfff
 800ab88:	fffff4ff 	.word	0xfffff4ff
 800ab8c:	40013800 	.word	0x40013800
 800ab90:	40021000 	.word	0x40021000
 800ab94:	40004400 	.word	0x40004400
 800ab98:	40004800 	.word	0x40004800
 800ab9c:	40004c00 	.word	0x40004c00
 800aba0:	007a1200 	.word	0x007a1200

0800aba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb0:	2201      	movs	r2, #1
 800abb2:	4013      	ands	r3, r2
 800abb4:	d00b      	beq.n	800abce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	4a4a      	ldr	r2, [pc, #296]	; (800ace8 <UART_AdvFeatureConfig+0x144>)
 800abbe:	4013      	ands	r3, r2
 800abc0:	0019      	movs	r1, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd2:	2202      	movs	r2, #2
 800abd4:	4013      	ands	r3, r2
 800abd6:	d00b      	beq.n	800abf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	4a43      	ldr	r2, [pc, #268]	; (800acec <UART_AdvFeatureConfig+0x148>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	0019      	movs	r1, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	430a      	orrs	r2, r1
 800abee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	2204      	movs	r2, #4
 800abf6:	4013      	ands	r3, r2
 800abf8:	d00b      	beq.n	800ac12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4a3b      	ldr	r2, [pc, #236]	; (800acf0 <UART_AdvFeatureConfig+0x14c>)
 800ac02:	4013      	ands	r3, r2
 800ac04:	0019      	movs	r1, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	2208      	movs	r2, #8
 800ac18:	4013      	ands	r3, r2
 800ac1a:	d00b      	beq.n	800ac34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	4a34      	ldr	r2, [pc, #208]	; (800acf4 <UART_AdvFeatureConfig+0x150>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	0019      	movs	r1, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	430a      	orrs	r2, r1
 800ac32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	2210      	movs	r2, #16
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	d00b      	beq.n	800ac56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	4a2c      	ldr	r2, [pc, #176]	; (800acf8 <UART_AdvFeatureConfig+0x154>)
 800ac46:	4013      	ands	r3, r2
 800ac48:	0019      	movs	r1, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	2220      	movs	r2, #32
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	d00b      	beq.n	800ac78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	4a25      	ldr	r2, [pc, #148]	; (800acfc <UART_AdvFeatureConfig+0x158>)
 800ac68:	4013      	ands	r3, r2
 800ac6a:	0019      	movs	r1, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	430a      	orrs	r2, r1
 800ac76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	2240      	movs	r2, #64	; 0x40
 800ac7e:	4013      	ands	r3, r2
 800ac80:	d01d      	beq.n	800acbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4a1d      	ldr	r2, [pc, #116]	; (800ad00 <UART_AdvFeatureConfig+0x15c>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	0019      	movs	r1, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac9e:	2380      	movs	r3, #128	; 0x80
 800aca0:	035b      	lsls	r3, r3, #13
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d10b      	bne.n	800acbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	4a15      	ldr	r2, [pc, #84]	; (800ad04 <UART_AdvFeatureConfig+0x160>)
 800acae:	4013      	ands	r3, r2
 800acb0:	0019      	movs	r1, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc2:	2280      	movs	r2, #128	; 0x80
 800acc4:	4013      	ands	r3, r2
 800acc6:	d00b      	beq.n	800ace0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	4a0e      	ldr	r2, [pc, #56]	; (800ad08 <UART_AdvFeatureConfig+0x164>)
 800acd0:	4013      	ands	r3, r2
 800acd2:	0019      	movs	r1, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	430a      	orrs	r2, r1
 800acde:	605a      	str	r2, [r3, #4]
  }
}
 800ace0:	46c0      	nop			; (mov r8, r8)
 800ace2:	46bd      	mov	sp, r7
 800ace4:	b002      	add	sp, #8
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	fffdffff 	.word	0xfffdffff
 800acec:	fffeffff 	.word	0xfffeffff
 800acf0:	fffbffff 	.word	0xfffbffff
 800acf4:	ffff7fff 	.word	0xffff7fff
 800acf8:	ffffefff 	.word	0xffffefff
 800acfc:	ffffdfff 	.word	0xffffdfff
 800ad00:	ffefffff 	.word	0xffefffff
 800ad04:	ff9fffff 	.word	0xff9fffff
 800ad08:	fff7ffff 	.word	0xfff7ffff

0800ad0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2280      	movs	r2, #128	; 0x80
 800ad18:	2100      	movs	r1, #0
 800ad1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad1c:	f7f8 fc42 	bl	80035a4 <HAL_GetTick>
 800ad20:	0003      	movs	r3, r0
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2208      	movs	r2, #8
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	2b08      	cmp	r3, #8
 800ad30:	d10c      	bne.n	800ad4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2280      	movs	r2, #128	; 0x80
 800ad36:	0391      	lsls	r1, r2, #14
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4a17      	ldr	r2, [pc, #92]	; (800ad98 <UART_CheckIdleState+0x8c>)
 800ad3c:	9200      	str	r2, [sp, #0]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f000 f82c 	bl	800ad9c <UART_WaitOnFlagUntilTimeout>
 800ad44:	1e03      	subs	r3, r0, #0
 800ad46:	d001      	beq.n	800ad4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e021      	b.n	800ad90 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2204      	movs	r2, #4
 800ad54:	4013      	ands	r3, r2
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	d10c      	bne.n	800ad74 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2280      	movs	r2, #128	; 0x80
 800ad5e:	03d1      	lsls	r1, r2, #15
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	4a0d      	ldr	r2, [pc, #52]	; (800ad98 <UART_CheckIdleState+0x8c>)
 800ad64:	9200      	str	r2, [sp, #0]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f000 f818 	bl	800ad9c <UART_WaitOnFlagUntilTimeout>
 800ad6c:	1e03      	subs	r3, r0, #0
 800ad6e:	d001      	beq.n	800ad74 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e00d      	b.n	800ad90 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2220      	movs	r2, #32
 800ad78:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2274      	movs	r2, #116	; 0x74
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	0018      	movs	r0, r3
 800ad92:	46bd      	mov	sp, r7
 800ad94:	b004      	add	sp, #16
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	01ffffff 	.word	0x01ffffff

0800ad9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	1dfb      	adds	r3, r7, #7
 800adaa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adac:	e05e      	b.n	800ae6c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	3301      	adds	r3, #1
 800adb2:	d05b      	beq.n	800ae6c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb4:	f7f8 fbf6 	bl	80035a4 <HAL_GetTick>
 800adb8:	0002      	movs	r2, r0
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	69ba      	ldr	r2, [r7, #24]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d302      	bcc.n	800adca <UART_WaitOnFlagUntilTimeout+0x2e>
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d11b      	bne.n	800ae02 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	492f      	ldr	r1, [pc, #188]	; (800ae94 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800add6:	400a      	ands	r2, r1
 800add8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2101      	movs	r1, #1
 800ade6:	438a      	bics	r2, r1
 800ade8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2220      	movs	r2, #32
 800adee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2220      	movs	r2, #32
 800adf4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2274      	movs	r2, #116	; 0x74
 800adfa:	2100      	movs	r1, #0
 800adfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e044      	b.n	800ae8c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2204      	movs	r2, #4
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	d02e      	beq.n	800ae6c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	69da      	ldr	r2, [r3, #28]
 800ae14:	2380      	movs	r3, #128	; 0x80
 800ae16:	011b      	lsls	r3, r3, #4
 800ae18:	401a      	ands	r2, r3
 800ae1a:	2380      	movs	r3, #128	; 0x80
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d124      	bne.n	800ae6c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2280      	movs	r2, #128	; 0x80
 800ae28:	0112      	lsls	r2, r2, #4
 800ae2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4917      	ldr	r1, [pc, #92]	; (800ae94 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800ae38:	400a      	ands	r2, r1
 800ae3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689a      	ldr	r2, [r3, #8]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2101      	movs	r1, #1
 800ae48:	438a      	bics	r2, r1
 800ae4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2220      	movs	r2, #32
 800ae50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2220      	movs	r2, #32
 800ae56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2280      	movs	r2, #128	; 0x80
 800ae5c:	2120      	movs	r1, #32
 800ae5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2274      	movs	r2, #116	; 0x74
 800ae64:	2100      	movs	r1, #0
 800ae66:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e00f      	b.n	800ae8c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	4013      	ands	r3, r2
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	425a      	negs	r2, r3
 800ae7c:	4153      	adcs	r3, r2
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	001a      	movs	r2, r3
 800ae82:	1dfb      	adds	r3, r7, #7
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d091      	beq.n	800adae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	0018      	movs	r0, r3
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	b004      	add	sp, #16
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	fffffe5f 	.word	0xfffffe5f

0800ae98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4912      	ldr	r1, [pc, #72]	; (800aef4 <UART_EndRxTransfer+0x5c>)
 800aeac:	400a      	ands	r2, r1
 800aeae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689a      	ldr	r2, [r3, #8]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2101      	movs	r1, #1
 800aebc:	438a      	bics	r2, r1
 800aebe:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d107      	bne.n	800aed8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2110      	movs	r1, #16
 800aed4:	438a      	bics	r2, r1
 800aed6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2220      	movs	r2, #32
 800aedc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	46bd      	mov	sp, r7
 800aeee:	b002      	add	sp, #8
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	46c0      	nop			; (mov r8, r8)
 800aef4:	fffffedf 	.word	0xfffffedf

0800aef8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	225a      	movs	r2, #90	; 0x5a
 800af0a:	2100      	movs	r1, #0
 800af0c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2252      	movs	r2, #82	; 0x52
 800af12:	2100      	movs	r1, #0
 800af14:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	0018      	movs	r0, r3
 800af1a:	f7ff fca7 	bl	800a86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af1e:	46c0      	nop			; (mov r8, r8)
 800af20:	46bd      	mov	sp, r7
 800af22:	b004      	add	sp, #16
 800af24:	bd80      	pop	{r7, pc}

0800af26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b082      	sub	sp, #8
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2140      	movs	r1, #64	; 0x40
 800af3a:	438a      	bics	r2, r1
 800af3c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	0018      	movs	r0, r3
 800af4e:	f7ff fc85 	bl	800a85c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af52:	46c0      	nop			; (mov r8, r8)
 800af54:	46bd      	mov	sp, r7
 800af56:	b002      	add	sp, #8
 800af58:	bd80      	pop	{r7, pc}

0800af5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	46bd      	mov	sp, r7
 800af66:	b002      	add	sp, #8
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2244      	movs	r2, #68	; 0x44
 800af78:	2100      	movs	r1, #0
 800af7a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800af7c:	4b05      	ldr	r3, [pc, #20]	; (800af94 <USB_EnableGlobalInt+0x28>)
 800af7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	b299      	uxth	r1, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2240      	movs	r2, #64	; 0x40
 800af88:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	0018      	movs	r0, r3
 800af8e:	46bd      	mov	sp, r7
 800af90:	b004      	add	sp, #16
 800af92:	bd80      	pop	{r7, pc}
 800af94:	0000bf80 	.word	0x0000bf80

0800af98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800afa0:	4b09      	ldr	r3, [pc, #36]	; (800afc8 <USB_DisableGlobalInt+0x30>)
 800afa2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2240      	movs	r2, #64	; 0x40
 800afa8:	5a9b      	ldrh	r3, [r3, r2]
 800afaa:	b29b      	uxth	r3, r3
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	b292      	uxth	r2, r2
 800afb0:	43d2      	mvns	r2, r2
 800afb2:	b292      	uxth	r2, r2
 800afb4:	4013      	ands	r3, r2
 800afb6:	b299      	uxth	r1, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2240      	movs	r2, #64	; 0x40
 800afbc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	0018      	movs	r0, r3
 800afc2:	46bd      	mov	sp, r7
 800afc4:	b004      	add	sp, #16
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	0000bf80 	.word	0x0000bf80

0800afcc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800afcc:	b084      	sub	sp, #16
 800afce:	b590      	push	{r4, r7, lr}
 800afd0:	46c6      	mov	lr, r8
 800afd2:	b500      	push	{lr}
 800afd4:	b082      	sub	sp, #8
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	2004      	movs	r0, #4
 800afdc:	2410      	movs	r4, #16
 800afde:	46a4      	mov	ip, r4
 800afe0:	2408      	movs	r4, #8
 800afe2:	46a0      	mov	r8, r4
 800afe4:	44b8      	add	r8, r7
 800afe6:	44c4      	add	ip, r8
 800afe8:	4460      	add	r0, ip
 800afea:	6001      	str	r1, [r0, #0]
 800afec:	6042      	str	r2, [r0, #4]
 800afee:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2240      	movs	r2, #64	; 0x40
 800aff4:	2101      	movs	r1, #1
 800aff6:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2240      	movs	r2, #64	; 0x40
 800affc:	2100      	movs	r1, #0
 800affe:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2244      	movs	r2, #68	; 0x44
 800b004:	2100      	movs	r1, #0
 800b006:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2250      	movs	r2, #80	; 0x50
 800b00c:	2100      	movs	r1, #0
 800b00e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	0018      	movs	r0, r3
 800b014:	46bd      	mov	sp, r7
 800b016:	b002      	add	sp, #8
 800b018:	bc80      	pop	{r7}
 800b01a:	46b8      	mov	r8, r7
 800b01c:	bc90      	pop	{r4, r7}
 800b01e:	bc08      	pop	{r3}
 800b020:	b004      	add	sp, #16
 800b022:	4718      	bx	r3

0800b024 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b09a      	sub	sp, #104	; 0x68
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b02e:	2367      	movs	r3, #103	; 0x67
 800b030:	18fb      	adds	r3, r7, r3
 800b032:	2200      	movs	r2, #0
 800b034:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	18d3      	adds	r3, r2, r3
 800b040:	881b      	ldrh	r3, [r3, #0]
 800b042:	b29a      	uxth	r2, r3
 800b044:	2364      	movs	r3, #100	; 0x64
 800b046:	18fb      	adds	r3, r7, r3
 800b048:	49cf      	ldr	r1, [pc, #828]	; (800b388 <USB_ActivateEndpoint+0x364>)
 800b04a:	400a      	ands	r2, r1
 800b04c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	78db      	ldrb	r3, [r3, #3]
 800b052:	2b03      	cmp	r3, #3
 800b054:	d017      	beq.n	800b086 <USB_ActivateEndpoint+0x62>
 800b056:	dc28      	bgt.n	800b0aa <USB_ActivateEndpoint+0x86>
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d00e      	beq.n	800b07a <USB_ActivateEndpoint+0x56>
 800b05c:	dc25      	bgt.n	800b0aa <USB_ActivateEndpoint+0x86>
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <USB_ActivateEndpoint+0x44>
 800b062:	2b01      	cmp	r3, #1
 800b064:	d018      	beq.n	800b098 <USB_ActivateEndpoint+0x74>
 800b066:	e020      	b.n	800b0aa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b068:	2264      	movs	r2, #100	; 0x64
 800b06a:	18bb      	adds	r3, r7, r2
 800b06c:	18ba      	adds	r2, r7, r2
 800b06e:	8812      	ldrh	r2, [r2, #0]
 800b070:	2180      	movs	r1, #128	; 0x80
 800b072:	0089      	lsls	r1, r1, #2
 800b074:	430a      	orrs	r2, r1
 800b076:	801a      	strh	r2, [r3, #0]
      break;
 800b078:	e01c      	b.n	800b0b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800b07a:	2264      	movs	r2, #100	; 0x64
 800b07c:	18bb      	adds	r3, r7, r2
 800b07e:	18ba      	adds	r2, r7, r2
 800b080:	8812      	ldrh	r2, [r2, #0]
 800b082:	801a      	strh	r2, [r3, #0]
      break;
 800b084:	e016      	b.n	800b0b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b086:	2264      	movs	r2, #100	; 0x64
 800b088:	18bb      	adds	r3, r7, r2
 800b08a:	18ba      	adds	r2, r7, r2
 800b08c:	8812      	ldrh	r2, [r2, #0]
 800b08e:	21c0      	movs	r1, #192	; 0xc0
 800b090:	00c9      	lsls	r1, r1, #3
 800b092:	430a      	orrs	r2, r1
 800b094:	801a      	strh	r2, [r3, #0]
      break;
 800b096:	e00d      	b.n	800b0b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b098:	2264      	movs	r2, #100	; 0x64
 800b09a:	18bb      	adds	r3, r7, r2
 800b09c:	18ba      	adds	r2, r7, r2
 800b09e:	8812      	ldrh	r2, [r2, #0]
 800b0a0:	2180      	movs	r1, #128	; 0x80
 800b0a2:	00c9      	lsls	r1, r1, #3
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	801a      	strh	r2, [r3, #0]
      break;
 800b0a8:	e004      	b.n	800b0b4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800b0aa:	2367      	movs	r3, #103	; 0x67
 800b0ac:	18fb      	adds	r3, r7, r3
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	701a      	strb	r2, [r3, #0]
      break;
 800b0b2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	18d3      	adds	r3, r2, r3
 800b0be:	2264      	movs	r2, #100	; 0x64
 800b0c0:	18ba      	adds	r2, r7, r2
 800b0c2:	8812      	ldrh	r2, [r2, #0]
 800b0c4:	49b1      	ldr	r1, [pc, #708]	; (800b38c <USB_ActivateEndpoint+0x368>)
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	b292      	uxth	r2, r2
 800b0ca:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	18d3      	adds	r3, r2, r3
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	b21b      	sxth	r3, r3
 800b0dc:	4aac      	ldr	r2, [pc, #688]	; (800b390 <USB_ActivateEndpoint+0x36c>)
 800b0de:	4013      	ands	r3, r2
 800b0e0:	b21a      	sxth	r2, r3
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b21b      	sxth	r3, r3
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	b21a      	sxth	r2, r3
 800b0ec:	215e      	movs	r1, #94	; 0x5e
 800b0ee:	187b      	adds	r3, r7, r1
 800b0f0:	801a      	strh	r2, [r3, #0]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	18d3      	adds	r3, r2, r3
 800b0fc:	187a      	adds	r2, r7, r1
 800b0fe:	8812      	ldrh	r2, [r2, #0]
 800b100:	49a2      	ldr	r1, [pc, #648]	; (800b38c <USB_ActivateEndpoint+0x368>)
 800b102:	430a      	orrs	r2, r1
 800b104:	b292      	uxth	r2, r2
 800b106:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	7b1b      	ldrb	r3, [r3, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d000      	beq.n	800b112 <USB_ActivateEndpoint+0xee>
 800b110:	e150      	b.n	800b3b4 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d100      	bne.n	800b11c <USB_ActivateEndpoint+0xf8>
 800b11a:	e07a      	b.n	800b212 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2250      	movs	r2, #80	; 0x50
 800b124:	5a9b      	ldrh	r3, [r3, r2]
 800b126:	b29b      	uxth	r3, r3
 800b128:	001a      	movs	r2, r3
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	189b      	adds	r3, r3, r2
 800b12e:	617b      	str	r3, [r7, #20]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	00da      	lsls	r2, r3, #3
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	18d3      	adds	r3, r2, r3
 800b13a:	2280      	movs	r2, #128	; 0x80
 800b13c:	00d2      	lsls	r2, r2, #3
 800b13e:	4694      	mov	ip, r2
 800b140:	4463      	add	r3, ip
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	88db      	ldrh	r3, [r3, #6]
 800b148:	085b      	lsrs	r3, r3, #1
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	18db      	adds	r3, r3, r3
 800b14e:	b29a      	uxth	r2, r3
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	18d2      	adds	r2, r2, r3
 800b15e:	210e      	movs	r1, #14
 800b160:	187b      	adds	r3, r7, r1
 800b162:	8812      	ldrh	r2, [r2, #0]
 800b164:	801a      	strh	r2, [r3, #0]
 800b166:	187b      	adds	r3, r7, r1
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	2240      	movs	r2, #64	; 0x40
 800b16c:	4013      	ands	r3, r2
 800b16e:	d016      	beq.n	800b19e <USB_ActivateEndpoint+0x17a>
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	18d3      	adds	r3, r2, r3
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	200c      	movs	r0, #12
 800b180:	183b      	adds	r3, r7, r0
 800b182:	4983      	ldr	r1, [pc, #524]	; (800b390 <USB_ActivateEndpoint+0x36c>)
 800b184:	400a      	ands	r2, r1
 800b186:	801a      	strh	r2, [r3, #0]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	18d3      	adds	r3, r2, r3
 800b192:	183a      	adds	r2, r7, r0
 800b194:	8812      	ldrh	r2, [r2, #0]
 800b196:	497f      	ldr	r1, [pc, #508]	; (800b394 <USB_ActivateEndpoint+0x370>)
 800b198:	430a      	orrs	r2, r1
 800b19a:	b292      	uxth	r2, r2
 800b19c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	78db      	ldrb	r3, [r3, #3]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d01d      	beq.n	800b1e2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	18d3      	adds	r3, r2, r3
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	2008      	movs	r0, #8
 800b1b6:	183b      	adds	r3, r7, r0
 800b1b8:	4977      	ldr	r1, [pc, #476]	; (800b398 <USB_ActivateEndpoint+0x374>)
 800b1ba:	400a      	ands	r2, r1
 800b1bc:	801a      	strh	r2, [r3, #0]
 800b1be:	183b      	adds	r3, r7, r0
 800b1c0:	183a      	adds	r2, r7, r0
 800b1c2:	8812      	ldrh	r2, [r2, #0]
 800b1c4:	2120      	movs	r1, #32
 800b1c6:	404a      	eors	r2, r1
 800b1c8:	801a      	strh	r2, [r3, #0]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	18d3      	adds	r3, r2, r3
 800b1d4:	183a      	adds	r2, r7, r0
 800b1d6:	8812      	ldrh	r2, [r2, #0]
 800b1d8:	496c      	ldr	r1, [pc, #432]	; (800b38c <USB_ActivateEndpoint+0x368>)
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	b292      	uxth	r2, r2
 800b1de:	801a      	strh	r2, [r3, #0]
 800b1e0:	e25e      	b.n	800b6a0 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	18d3      	adds	r3, r2, r3
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	200a      	movs	r0, #10
 800b1f2:	183b      	adds	r3, r7, r0
 800b1f4:	4968      	ldr	r1, [pc, #416]	; (800b398 <USB_ActivateEndpoint+0x374>)
 800b1f6:	400a      	ands	r2, r1
 800b1f8:	801a      	strh	r2, [r3, #0]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	18d3      	adds	r3, r2, r3
 800b204:	183a      	adds	r2, r7, r0
 800b206:	8812      	ldrh	r2, [r2, #0]
 800b208:	4960      	ldr	r1, [pc, #384]	; (800b38c <USB_ActivateEndpoint+0x368>)
 800b20a:	430a      	orrs	r2, r1
 800b20c:	b292      	uxth	r2, r2
 800b20e:	801a      	strh	r2, [r3, #0]
 800b210:	e246      	b.n	800b6a0 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2250      	movs	r2, #80	; 0x50
 800b21a:	5a9b      	ldrh	r3, [r3, r2]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	001a      	movs	r2, r3
 800b220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b222:	189b      	adds	r3, r3, r2
 800b224:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	00da      	lsls	r2, r3, #3
 800b22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22e:	18d3      	adds	r3, r2, r3
 800b230:	4a5a      	ldr	r2, [pc, #360]	; (800b39c <USB_ActivateEndpoint+0x378>)
 800b232:	4694      	mov	ip, r2
 800b234:	4463      	add	r3, ip
 800b236:	62bb      	str	r3, [r7, #40]	; 0x28
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	88db      	ldrh	r3, [r3, #6]
 800b23c:	085b      	lsrs	r3, r3, #1
 800b23e:	b29b      	uxth	r3, r3
 800b240:	18db      	adds	r3, r3, r3
 800b242:	b29a      	uxth	r2, r3
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	627b      	str	r3, [r7, #36]	; 0x24
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2250      	movs	r2, #80	; 0x50
 800b250:	5a9b      	ldrh	r3, [r3, r2]
 800b252:	b29b      	uxth	r3, r3
 800b254:	001a      	movs	r2, r3
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	189b      	adds	r3, r3, r2
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	00da      	lsls	r2, r3, #3
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	18d3      	adds	r3, r2, r3
 800b266:	4a4e      	ldr	r2, [pc, #312]	; (800b3a0 <USB_ActivateEndpoint+0x37c>)
 800b268:	4694      	mov	ip, r2
 800b26a:	4463      	add	r3, ip
 800b26c:	623b      	str	r3, [r7, #32]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d110      	bne.n	800b298 <USB_ActivateEndpoint+0x274>
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4a49      	ldr	r2, [pc, #292]	; (800b3a4 <USB_ActivateEndpoint+0x380>)
 800b27e:	4013      	ands	r3, r2
 800b280:	b29a      	uxth	r2, r3
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	801a      	strh	r2, [r3, #0]
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	881b      	ldrh	r3, [r3, #0]
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	4a46      	ldr	r2, [pc, #280]	; (800b3a8 <USB_ActivateEndpoint+0x384>)
 800b28e:	4313      	orrs	r3, r2
 800b290:	b29a      	uxth	r2, r3
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	801a      	strh	r2, [r3, #0]
 800b296:	e02b      	b.n	800b2f0 <USB_ActivateEndpoint+0x2cc>
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	2b3e      	cmp	r3, #62	; 0x3e
 800b29e:	d812      	bhi.n	800b2c6 <USB_ActivateEndpoint+0x2a2>
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	085b      	lsrs	r3, r3, #1
 800b2a6:	663b      	str	r3, [r7, #96]	; 0x60
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	d002      	beq.n	800b2b8 <USB_ActivateEndpoint+0x294>
 800b2b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	663b      	str	r3, [r7, #96]	; 0x60
 800b2b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	029b      	lsls	r3, r3, #10
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	6a3b      	ldr	r3, [r7, #32]
 800b2c2:	801a      	strh	r2, [r3, #0]
 800b2c4:	e014      	b.n	800b2f0 <USB_ActivateEndpoint+0x2cc>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	095b      	lsrs	r3, r3, #5
 800b2cc:	663b      	str	r3, [r7, #96]	; 0x60
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	221f      	movs	r2, #31
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	d102      	bne.n	800b2de <USB_ActivateEndpoint+0x2ba>
 800b2d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	663b      	str	r3, [r7, #96]	; 0x60
 800b2de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	029b      	lsls	r3, r3, #10
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4a30      	ldr	r2, [pc, #192]	; (800b3a8 <USB_ActivateEndpoint+0x384>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	18d2      	adds	r2, r2, r3
 800b2fa:	211e      	movs	r1, #30
 800b2fc:	187b      	adds	r3, r7, r1
 800b2fe:	8812      	ldrh	r2, [r2, #0]
 800b300:	801a      	strh	r2, [r3, #0]
 800b302:	187b      	adds	r3, r7, r1
 800b304:	881a      	ldrh	r2, [r3, #0]
 800b306:	2380      	movs	r3, #128	; 0x80
 800b308:	01db      	lsls	r3, r3, #7
 800b30a:	4013      	ands	r3, r2
 800b30c:	d016      	beq.n	800b33c <USB_ActivateEndpoint+0x318>
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	18d3      	adds	r3, r2, r3
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	201c      	movs	r0, #28
 800b31e:	183b      	adds	r3, r7, r0
 800b320:	491b      	ldr	r1, [pc, #108]	; (800b390 <USB_ActivateEndpoint+0x36c>)
 800b322:	400a      	ands	r2, r1
 800b324:	801a      	strh	r2, [r3, #0]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	18d3      	adds	r3, r2, r3
 800b330:	183a      	adds	r2, r7, r0
 800b332:	8812      	ldrh	r2, [r2, #0]
 800b334:	491d      	ldr	r1, [pc, #116]	; (800b3ac <USB_ActivateEndpoint+0x388>)
 800b336:	430a      	orrs	r2, r1
 800b338:	b292      	uxth	r2, r2
 800b33a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	18d3      	adds	r3, r2, r3
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	b29a      	uxth	r2, r3
 800b34a:	201a      	movs	r0, #26
 800b34c:	183b      	adds	r3, r7, r0
 800b34e:	4918      	ldr	r1, [pc, #96]	; (800b3b0 <USB_ActivateEndpoint+0x38c>)
 800b350:	400a      	ands	r2, r1
 800b352:	801a      	strh	r2, [r3, #0]
 800b354:	183b      	adds	r3, r7, r0
 800b356:	183a      	adds	r2, r7, r0
 800b358:	8812      	ldrh	r2, [r2, #0]
 800b35a:	2180      	movs	r1, #128	; 0x80
 800b35c:	0149      	lsls	r1, r1, #5
 800b35e:	404a      	eors	r2, r1
 800b360:	801a      	strh	r2, [r3, #0]
 800b362:	183b      	adds	r3, r7, r0
 800b364:	183a      	adds	r2, r7, r0
 800b366:	8812      	ldrh	r2, [r2, #0]
 800b368:	2180      	movs	r1, #128	; 0x80
 800b36a:	0189      	lsls	r1, r1, #6
 800b36c:	404a      	eors	r2, r1
 800b36e:	801a      	strh	r2, [r3, #0]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	18d3      	adds	r3, r2, r3
 800b37a:	183a      	adds	r2, r7, r0
 800b37c:	8812      	ldrh	r2, [r2, #0]
 800b37e:	4903      	ldr	r1, [pc, #12]	; (800b38c <USB_ActivateEndpoint+0x368>)
 800b380:	430a      	orrs	r2, r1
 800b382:	b292      	uxth	r2, r2
 800b384:	801a      	strh	r2, [r3, #0]
 800b386:	e18b      	b.n	800b6a0 <USB_ActivateEndpoint+0x67c>
 800b388:	ffff898f 	.word	0xffff898f
 800b38c:	ffff8080 	.word	0xffff8080
 800b390:	ffff8f8f 	.word	0xffff8f8f
 800b394:	ffff80c0 	.word	0xffff80c0
 800b398:	ffff8fbf 	.word	0xffff8fbf
 800b39c:	00000404 	.word	0x00000404
 800b3a0:	00000406 	.word	0x00000406
 800b3a4:	ffff83ff 	.word	0xffff83ff
 800b3a8:	ffff8000 	.word	0xffff8000
 800b3ac:	ffffc080 	.word	0xffffc080
 800b3b0:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	18d3      	adds	r3, r2, r3
 800b3be:	881b      	ldrh	r3, [r3, #0]
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	205c      	movs	r0, #92	; 0x5c
 800b3c4:	183b      	adds	r3, r7, r0
 800b3c6:	49ba      	ldr	r1, [pc, #744]	; (800b6b0 <USB_ActivateEndpoint+0x68c>)
 800b3c8:	400a      	ands	r2, r1
 800b3ca:	801a      	strh	r2, [r3, #0]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	18d3      	adds	r3, r2, r3
 800b3d6:	183a      	adds	r2, r7, r0
 800b3d8:	8812      	ldrh	r2, [r2, #0]
 800b3da:	49b6      	ldr	r1, [pc, #728]	; (800b6b4 <USB_ActivateEndpoint+0x690>)
 800b3dc:	430a      	orrs	r2, r1
 800b3de:	b292      	uxth	r2, r2
 800b3e0:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2250      	movs	r2, #80	; 0x50
 800b3ea:	5a9b      	ldrh	r3, [r3, r2]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	001a      	movs	r2, r3
 800b3f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3f2:	189b      	adds	r3, r3, r2
 800b3f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	00da      	lsls	r2, r3, #3
 800b3fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3fe:	18d3      	adds	r3, r2, r3
 800b400:	2280      	movs	r2, #128	; 0x80
 800b402:	00d2      	lsls	r2, r2, #3
 800b404:	4694      	mov	ip, r2
 800b406:	4463      	add	r3, ip
 800b408:	657b      	str	r3, [r7, #84]	; 0x54
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	891b      	ldrh	r3, [r3, #8]
 800b40e:	085b      	lsrs	r3, r3, #1
 800b410:	b29b      	uxth	r3, r3
 800b412:	18db      	adds	r3, r3, r3
 800b414:	b29a      	uxth	r2, r3
 800b416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b418:	801a      	strh	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	653b      	str	r3, [r7, #80]	; 0x50
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2250      	movs	r2, #80	; 0x50
 800b422:	5a9b      	ldrh	r3, [r3, r2]
 800b424:	b29b      	uxth	r3, r3
 800b426:	001a      	movs	r2, r3
 800b428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b42a:	189b      	adds	r3, r3, r2
 800b42c:	653b      	str	r3, [r7, #80]	; 0x50
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	00da      	lsls	r2, r3, #3
 800b434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b436:	18d3      	adds	r3, r2, r3
 800b438:	4a9f      	ldr	r2, [pc, #636]	; (800b6b8 <USB_ActivateEndpoint+0x694>)
 800b43a:	4694      	mov	ip, r2
 800b43c:	4463      	add	r3, ip
 800b43e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	895b      	ldrh	r3, [r3, #10]
 800b444:	085b      	lsrs	r3, r3, #1
 800b446:	b29b      	uxth	r3, r3
 800b448:	18db      	adds	r3, r3, r3
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b44e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d000      	beq.n	800b45a <USB_ActivateEndpoint+0x436>
 800b458:	e087      	b.n	800b56a <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	18d2      	adds	r2, r2, r3
 800b464:	213c      	movs	r1, #60	; 0x3c
 800b466:	187b      	adds	r3, r7, r1
 800b468:	8812      	ldrh	r2, [r2, #0]
 800b46a:	801a      	strh	r2, [r3, #0]
 800b46c:	187b      	adds	r3, r7, r1
 800b46e:	881a      	ldrh	r2, [r3, #0]
 800b470:	2380      	movs	r3, #128	; 0x80
 800b472:	01db      	lsls	r3, r3, #7
 800b474:	4013      	ands	r3, r2
 800b476:	d016      	beq.n	800b4a6 <USB_ActivateEndpoint+0x482>
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	18d3      	adds	r3, r2, r3
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	b29a      	uxth	r2, r3
 800b486:	203a      	movs	r0, #58	; 0x3a
 800b488:	183b      	adds	r3, r7, r0
 800b48a:	4989      	ldr	r1, [pc, #548]	; (800b6b0 <USB_ActivateEndpoint+0x68c>)
 800b48c:	400a      	ands	r2, r1
 800b48e:	801a      	strh	r2, [r3, #0]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	18d3      	adds	r3, r2, r3
 800b49a:	183a      	adds	r2, r7, r0
 800b49c:	8812      	ldrh	r2, [r2, #0]
 800b49e:	4987      	ldr	r1, [pc, #540]	; (800b6bc <USB_ActivateEndpoint+0x698>)
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	b292      	uxth	r2, r2
 800b4a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	18d2      	adds	r2, r2, r3
 800b4b0:	2138      	movs	r1, #56	; 0x38
 800b4b2:	187b      	adds	r3, r7, r1
 800b4b4:	8812      	ldrh	r2, [r2, #0]
 800b4b6:	801a      	strh	r2, [r3, #0]
 800b4b8:	187b      	adds	r3, r7, r1
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	2240      	movs	r2, #64	; 0x40
 800b4be:	4013      	ands	r3, r2
 800b4c0:	d016      	beq.n	800b4f0 <USB_ActivateEndpoint+0x4cc>
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	18d3      	adds	r3, r2, r3
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	2036      	movs	r0, #54	; 0x36
 800b4d2:	183b      	adds	r3, r7, r0
 800b4d4:	4976      	ldr	r1, [pc, #472]	; (800b6b0 <USB_ActivateEndpoint+0x68c>)
 800b4d6:	400a      	ands	r2, r1
 800b4d8:	801a      	strh	r2, [r3, #0]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	18d3      	adds	r3, r2, r3
 800b4e4:	183a      	adds	r2, r7, r0
 800b4e6:	8812      	ldrh	r2, [r2, #0]
 800b4e8:	4975      	ldr	r1, [pc, #468]	; (800b6c0 <USB_ActivateEndpoint+0x69c>)
 800b4ea:	430a      	orrs	r2, r1
 800b4ec:	b292      	uxth	r2, r2
 800b4ee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	18d3      	adds	r3, r2, r3
 800b4fa:	881b      	ldrh	r3, [r3, #0]
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	2034      	movs	r0, #52	; 0x34
 800b500:	183b      	adds	r3, r7, r0
 800b502:	4970      	ldr	r1, [pc, #448]	; (800b6c4 <USB_ActivateEndpoint+0x6a0>)
 800b504:	400a      	ands	r2, r1
 800b506:	801a      	strh	r2, [r3, #0]
 800b508:	183b      	adds	r3, r7, r0
 800b50a:	183a      	adds	r2, r7, r0
 800b50c:	8812      	ldrh	r2, [r2, #0]
 800b50e:	2180      	movs	r1, #128	; 0x80
 800b510:	0149      	lsls	r1, r1, #5
 800b512:	404a      	eors	r2, r1
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	183b      	adds	r3, r7, r0
 800b518:	183a      	adds	r2, r7, r0
 800b51a:	8812      	ldrh	r2, [r2, #0]
 800b51c:	2180      	movs	r1, #128	; 0x80
 800b51e:	0189      	lsls	r1, r1, #6
 800b520:	404a      	eors	r2, r1
 800b522:	801a      	strh	r2, [r3, #0]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	18d3      	adds	r3, r2, r3
 800b52e:	183a      	adds	r2, r7, r0
 800b530:	8812      	ldrh	r2, [r2, #0]
 800b532:	4965      	ldr	r1, [pc, #404]	; (800b6c8 <USB_ActivateEndpoint+0x6a4>)
 800b534:	430a      	orrs	r2, r1
 800b536:	b292      	uxth	r2, r2
 800b538:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	18d3      	adds	r3, r2, r3
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	b29a      	uxth	r2, r3
 800b548:	2032      	movs	r0, #50	; 0x32
 800b54a:	183b      	adds	r3, r7, r0
 800b54c:	495f      	ldr	r1, [pc, #380]	; (800b6cc <USB_ActivateEndpoint+0x6a8>)
 800b54e:	400a      	ands	r2, r1
 800b550:	801a      	strh	r2, [r3, #0]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	18d3      	adds	r3, r2, r3
 800b55c:	183a      	adds	r2, r7, r0
 800b55e:	8812      	ldrh	r2, [r2, #0]
 800b560:	4959      	ldr	r1, [pc, #356]	; (800b6c8 <USB_ActivateEndpoint+0x6a4>)
 800b562:	430a      	orrs	r2, r1
 800b564:	b292      	uxth	r2, r2
 800b566:	801a      	strh	r2, [r3, #0]
 800b568:	e09a      	b.n	800b6a0 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	18d2      	adds	r2, r2, r3
 800b574:	214a      	movs	r1, #74	; 0x4a
 800b576:	187b      	adds	r3, r7, r1
 800b578:	8812      	ldrh	r2, [r2, #0]
 800b57a:	801a      	strh	r2, [r3, #0]
 800b57c:	187b      	adds	r3, r7, r1
 800b57e:	881a      	ldrh	r2, [r3, #0]
 800b580:	2380      	movs	r3, #128	; 0x80
 800b582:	01db      	lsls	r3, r3, #7
 800b584:	4013      	ands	r3, r2
 800b586:	d016      	beq.n	800b5b6 <USB_ActivateEndpoint+0x592>
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	18d3      	adds	r3, r2, r3
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	b29a      	uxth	r2, r3
 800b596:	2048      	movs	r0, #72	; 0x48
 800b598:	183b      	adds	r3, r7, r0
 800b59a:	4945      	ldr	r1, [pc, #276]	; (800b6b0 <USB_ActivateEndpoint+0x68c>)
 800b59c:	400a      	ands	r2, r1
 800b59e:	801a      	strh	r2, [r3, #0]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	18d3      	adds	r3, r2, r3
 800b5aa:	183a      	adds	r2, r7, r0
 800b5ac:	8812      	ldrh	r2, [r2, #0]
 800b5ae:	4943      	ldr	r1, [pc, #268]	; (800b6bc <USB_ActivateEndpoint+0x698>)
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	b292      	uxth	r2, r2
 800b5b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	18d2      	adds	r2, r2, r3
 800b5c0:	2146      	movs	r1, #70	; 0x46
 800b5c2:	187b      	adds	r3, r7, r1
 800b5c4:	8812      	ldrh	r2, [r2, #0]
 800b5c6:	801a      	strh	r2, [r3, #0]
 800b5c8:	187b      	adds	r3, r7, r1
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	2240      	movs	r2, #64	; 0x40
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	d016      	beq.n	800b600 <USB_ActivateEndpoint+0x5dc>
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	18d3      	adds	r3, r2, r3
 800b5dc:	881b      	ldrh	r3, [r3, #0]
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	2044      	movs	r0, #68	; 0x44
 800b5e2:	183b      	adds	r3, r7, r0
 800b5e4:	4932      	ldr	r1, [pc, #200]	; (800b6b0 <USB_ActivateEndpoint+0x68c>)
 800b5e6:	400a      	ands	r2, r1
 800b5e8:	801a      	strh	r2, [r3, #0]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	18d3      	adds	r3, r2, r3
 800b5f4:	183a      	adds	r2, r7, r0
 800b5f6:	8812      	ldrh	r2, [r2, #0]
 800b5f8:	4931      	ldr	r1, [pc, #196]	; (800b6c0 <USB_ActivateEndpoint+0x69c>)
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	b292      	uxth	r2, r2
 800b5fe:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	78db      	ldrb	r3, [r3, #3]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d01d      	beq.n	800b644 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	18d3      	adds	r3, r2, r3
 800b612:	881b      	ldrh	r3, [r3, #0]
 800b614:	b29a      	uxth	r2, r3
 800b616:	2040      	movs	r0, #64	; 0x40
 800b618:	183b      	adds	r3, r7, r0
 800b61a:	492c      	ldr	r1, [pc, #176]	; (800b6cc <USB_ActivateEndpoint+0x6a8>)
 800b61c:	400a      	ands	r2, r1
 800b61e:	801a      	strh	r2, [r3, #0]
 800b620:	183b      	adds	r3, r7, r0
 800b622:	183a      	adds	r2, r7, r0
 800b624:	8812      	ldrh	r2, [r2, #0]
 800b626:	2120      	movs	r1, #32
 800b628:	404a      	eors	r2, r1
 800b62a:	801a      	strh	r2, [r3, #0]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	18d3      	adds	r3, r2, r3
 800b636:	183a      	adds	r2, r7, r0
 800b638:	8812      	ldrh	r2, [r2, #0]
 800b63a:	4923      	ldr	r1, [pc, #140]	; (800b6c8 <USB_ActivateEndpoint+0x6a4>)
 800b63c:	430a      	orrs	r2, r1
 800b63e:	b292      	uxth	r2, r2
 800b640:	801a      	strh	r2, [r3, #0]
 800b642:	e016      	b.n	800b672 <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	18d3      	adds	r3, r2, r3
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	b29a      	uxth	r2, r3
 800b652:	2042      	movs	r0, #66	; 0x42
 800b654:	183b      	adds	r3, r7, r0
 800b656:	491d      	ldr	r1, [pc, #116]	; (800b6cc <USB_ActivateEndpoint+0x6a8>)
 800b658:	400a      	ands	r2, r1
 800b65a:	801a      	strh	r2, [r3, #0]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	18d3      	adds	r3, r2, r3
 800b666:	183a      	adds	r2, r7, r0
 800b668:	8812      	ldrh	r2, [r2, #0]
 800b66a:	4917      	ldr	r1, [pc, #92]	; (800b6c8 <USB_ActivateEndpoint+0x6a4>)
 800b66c:	430a      	orrs	r2, r1
 800b66e:	b292      	uxth	r2, r2
 800b670:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	18d3      	adds	r3, r2, r3
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	b29a      	uxth	r2, r3
 800b680:	203e      	movs	r0, #62	; 0x3e
 800b682:	183b      	adds	r3, r7, r0
 800b684:	490f      	ldr	r1, [pc, #60]	; (800b6c4 <USB_ActivateEndpoint+0x6a0>)
 800b686:	400a      	ands	r2, r1
 800b688:	801a      	strh	r2, [r3, #0]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	18d3      	adds	r3, r2, r3
 800b694:	183a      	adds	r2, r7, r0
 800b696:	8812      	ldrh	r2, [r2, #0]
 800b698:	490b      	ldr	r1, [pc, #44]	; (800b6c8 <USB_ActivateEndpoint+0x6a4>)
 800b69a:	430a      	orrs	r2, r1
 800b69c:	b292      	uxth	r2, r2
 800b69e:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 800b6a0:	2367      	movs	r3, #103	; 0x67
 800b6a2:	18fb      	adds	r3, r7, r3
 800b6a4:	781b      	ldrb	r3, [r3, #0]
}
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	b01a      	add	sp, #104	; 0x68
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	46c0      	nop			; (mov r8, r8)
 800b6b0:	ffff8f8f 	.word	0xffff8f8f
 800b6b4:	ffff8180 	.word	0xffff8180
 800b6b8:	00000404 	.word	0x00000404
 800b6bc:	ffffc080 	.word	0xffffc080
 800b6c0:	ffff80c0 	.word	0xffff80c0
 800b6c4:	ffffbf8f 	.word	0xffffbf8f
 800b6c8:	ffff8080 	.word	0xffff8080
 800b6cc:	ffff8fbf 	.word	0xffff8fbf

0800b6d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08c      	sub	sp, #48	; 0x30
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	7b1b      	ldrb	r3, [r3, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d000      	beq.n	800b6e4 <USB_DeactivateEndpoint+0x14>
 800b6e2:	e07e      	b.n	800b7e2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	785b      	ldrb	r3, [r3, #1]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d03c      	beq.n	800b766 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	18d2      	adds	r2, r2, r3
 800b6f6:	210c      	movs	r1, #12
 800b6f8:	187b      	adds	r3, r7, r1
 800b6fa:	8812      	ldrh	r2, [r2, #0]
 800b6fc:	801a      	strh	r2, [r3, #0]
 800b6fe:	187b      	adds	r3, r7, r1
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	2240      	movs	r2, #64	; 0x40
 800b704:	4013      	ands	r3, r2
 800b706:	d016      	beq.n	800b736 <USB_DeactivateEndpoint+0x66>
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	18d3      	adds	r3, r2, r3
 800b712:	881b      	ldrh	r3, [r3, #0]
 800b714:	b29a      	uxth	r2, r3
 800b716:	200a      	movs	r0, #10
 800b718:	183b      	adds	r3, r7, r0
 800b71a:	49c7      	ldr	r1, [pc, #796]	; (800ba38 <USB_DeactivateEndpoint+0x368>)
 800b71c:	400a      	ands	r2, r1
 800b71e:	801a      	strh	r2, [r3, #0]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	18d3      	adds	r3, r2, r3
 800b72a:	183a      	adds	r2, r7, r0
 800b72c:	8812      	ldrh	r2, [r2, #0]
 800b72e:	49c3      	ldr	r1, [pc, #780]	; (800ba3c <USB_DeactivateEndpoint+0x36c>)
 800b730:	430a      	orrs	r2, r1
 800b732:	b292      	uxth	r2, r2
 800b734:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	18d3      	adds	r3, r2, r3
 800b740:	881b      	ldrh	r3, [r3, #0]
 800b742:	b29a      	uxth	r2, r3
 800b744:	2008      	movs	r0, #8
 800b746:	183b      	adds	r3, r7, r0
 800b748:	49bd      	ldr	r1, [pc, #756]	; (800ba40 <USB_DeactivateEndpoint+0x370>)
 800b74a:	400a      	ands	r2, r1
 800b74c:	801a      	strh	r2, [r3, #0]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	18d3      	adds	r3, r2, r3
 800b758:	183a      	adds	r2, r7, r0
 800b75a:	8812      	ldrh	r2, [r2, #0]
 800b75c:	49b9      	ldr	r1, [pc, #740]	; (800ba44 <USB_DeactivateEndpoint+0x374>)
 800b75e:	430a      	orrs	r2, r1
 800b760:	b292      	uxth	r2, r2
 800b762:	801a      	strh	r2, [r3, #0]
 800b764:	e163      	b.n	800ba2e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	18d2      	adds	r2, r2, r3
 800b770:	2112      	movs	r1, #18
 800b772:	187b      	adds	r3, r7, r1
 800b774:	8812      	ldrh	r2, [r2, #0]
 800b776:	801a      	strh	r2, [r3, #0]
 800b778:	187b      	adds	r3, r7, r1
 800b77a:	881a      	ldrh	r2, [r3, #0]
 800b77c:	2380      	movs	r3, #128	; 0x80
 800b77e:	01db      	lsls	r3, r3, #7
 800b780:	4013      	ands	r3, r2
 800b782:	d016      	beq.n	800b7b2 <USB_DeactivateEndpoint+0xe2>
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	18d3      	adds	r3, r2, r3
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	b29a      	uxth	r2, r3
 800b792:	2010      	movs	r0, #16
 800b794:	183b      	adds	r3, r7, r0
 800b796:	49a8      	ldr	r1, [pc, #672]	; (800ba38 <USB_DeactivateEndpoint+0x368>)
 800b798:	400a      	ands	r2, r1
 800b79a:	801a      	strh	r2, [r3, #0]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	18d3      	adds	r3, r2, r3
 800b7a6:	183a      	adds	r2, r7, r0
 800b7a8:	8812      	ldrh	r2, [r2, #0]
 800b7aa:	49a7      	ldr	r1, [pc, #668]	; (800ba48 <USB_DeactivateEndpoint+0x378>)
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	b292      	uxth	r2, r2
 800b7b0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	18d3      	adds	r3, r2, r3
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	200e      	movs	r0, #14
 800b7c2:	183b      	adds	r3, r7, r0
 800b7c4:	49a1      	ldr	r1, [pc, #644]	; (800ba4c <USB_DeactivateEndpoint+0x37c>)
 800b7c6:	400a      	ands	r2, r1
 800b7c8:	801a      	strh	r2, [r3, #0]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	18d3      	adds	r3, r2, r3
 800b7d4:	183a      	adds	r2, r7, r0
 800b7d6:	8812      	ldrh	r2, [r2, #0]
 800b7d8:	499a      	ldr	r1, [pc, #616]	; (800ba44 <USB_DeactivateEndpoint+0x374>)
 800b7da:	430a      	orrs	r2, r1
 800b7dc:	b292      	uxth	r2, r2
 800b7de:	801a      	strh	r2, [r3, #0]
 800b7e0:	e125      	b.n	800ba2e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	785b      	ldrb	r3, [r3, #1]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d000      	beq.n	800b7ec <USB_DeactivateEndpoint+0x11c>
 800b7ea:	e090      	b.n	800b90e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	18d2      	adds	r2, r2, r3
 800b7f6:	2120      	movs	r1, #32
 800b7f8:	187b      	adds	r3, r7, r1
 800b7fa:	8812      	ldrh	r2, [r2, #0]
 800b7fc:	801a      	strh	r2, [r3, #0]
 800b7fe:	187b      	adds	r3, r7, r1
 800b800:	881a      	ldrh	r2, [r3, #0]
 800b802:	2380      	movs	r3, #128	; 0x80
 800b804:	01db      	lsls	r3, r3, #7
 800b806:	4013      	ands	r3, r2
 800b808:	d016      	beq.n	800b838 <USB_DeactivateEndpoint+0x168>
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	18d3      	adds	r3, r2, r3
 800b814:	881b      	ldrh	r3, [r3, #0]
 800b816:	b29a      	uxth	r2, r3
 800b818:	201e      	movs	r0, #30
 800b81a:	183b      	adds	r3, r7, r0
 800b81c:	4986      	ldr	r1, [pc, #536]	; (800ba38 <USB_DeactivateEndpoint+0x368>)
 800b81e:	400a      	ands	r2, r1
 800b820:	801a      	strh	r2, [r3, #0]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	18d3      	adds	r3, r2, r3
 800b82c:	183a      	adds	r2, r7, r0
 800b82e:	8812      	ldrh	r2, [r2, #0]
 800b830:	4985      	ldr	r1, [pc, #532]	; (800ba48 <USB_DeactivateEndpoint+0x378>)
 800b832:	430a      	orrs	r2, r1
 800b834:	b292      	uxth	r2, r2
 800b836:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	18d2      	adds	r2, r2, r3
 800b842:	211c      	movs	r1, #28
 800b844:	187b      	adds	r3, r7, r1
 800b846:	8812      	ldrh	r2, [r2, #0]
 800b848:	801a      	strh	r2, [r3, #0]
 800b84a:	187b      	adds	r3, r7, r1
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	2240      	movs	r2, #64	; 0x40
 800b850:	4013      	ands	r3, r2
 800b852:	d016      	beq.n	800b882 <USB_DeactivateEndpoint+0x1b2>
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	18d3      	adds	r3, r2, r3
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	b29a      	uxth	r2, r3
 800b862:	201a      	movs	r0, #26
 800b864:	183b      	adds	r3, r7, r0
 800b866:	4974      	ldr	r1, [pc, #464]	; (800ba38 <USB_DeactivateEndpoint+0x368>)
 800b868:	400a      	ands	r2, r1
 800b86a:	801a      	strh	r2, [r3, #0]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	18d3      	adds	r3, r2, r3
 800b876:	183a      	adds	r2, r7, r0
 800b878:	8812      	ldrh	r2, [r2, #0]
 800b87a:	4970      	ldr	r1, [pc, #448]	; (800ba3c <USB_DeactivateEndpoint+0x36c>)
 800b87c:	430a      	orrs	r2, r1
 800b87e:	b292      	uxth	r2, r2
 800b880:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	18d3      	adds	r3, r2, r3
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	b29a      	uxth	r2, r3
 800b890:	2018      	movs	r0, #24
 800b892:	183b      	adds	r3, r7, r0
 800b894:	4968      	ldr	r1, [pc, #416]	; (800ba38 <USB_DeactivateEndpoint+0x368>)
 800b896:	400a      	ands	r2, r1
 800b898:	801a      	strh	r2, [r3, #0]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	18d3      	adds	r3, r2, r3
 800b8a4:	183a      	adds	r2, r7, r0
 800b8a6:	8812      	ldrh	r2, [r2, #0]
 800b8a8:	4964      	ldr	r1, [pc, #400]	; (800ba3c <USB_DeactivateEndpoint+0x36c>)
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	b292      	uxth	r2, r2
 800b8ae:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	18d3      	adds	r3, r2, r3
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	2016      	movs	r0, #22
 800b8c0:	183b      	adds	r3, r7, r0
 800b8c2:	4962      	ldr	r1, [pc, #392]	; (800ba4c <USB_DeactivateEndpoint+0x37c>)
 800b8c4:	400a      	ands	r2, r1
 800b8c6:	801a      	strh	r2, [r3, #0]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	18d3      	adds	r3, r2, r3
 800b8d2:	183a      	adds	r2, r7, r0
 800b8d4:	8812      	ldrh	r2, [r2, #0]
 800b8d6:	495b      	ldr	r1, [pc, #364]	; (800ba44 <USB_DeactivateEndpoint+0x374>)
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	b292      	uxth	r2, r2
 800b8dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	18d3      	adds	r3, r2, r3
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	2014      	movs	r0, #20
 800b8ee:	183b      	adds	r3, r7, r0
 800b8f0:	4953      	ldr	r1, [pc, #332]	; (800ba40 <USB_DeactivateEndpoint+0x370>)
 800b8f2:	400a      	ands	r2, r1
 800b8f4:	801a      	strh	r2, [r3, #0]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	18d3      	adds	r3, r2, r3
 800b900:	183a      	adds	r2, r7, r0
 800b902:	8812      	ldrh	r2, [r2, #0]
 800b904:	494f      	ldr	r1, [pc, #316]	; (800ba44 <USB_DeactivateEndpoint+0x374>)
 800b906:	430a      	orrs	r2, r1
 800b908:	b292      	uxth	r2, r2
 800b90a:	801a      	strh	r2, [r3, #0]
 800b90c:	e08f      	b.n	800ba2e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	18d2      	adds	r2, r2, r3
 800b918:	212e      	movs	r1, #46	; 0x2e
 800b91a:	187b      	adds	r3, r7, r1
 800b91c:	8812      	ldrh	r2, [r2, #0]
 800b91e:	801a      	strh	r2, [r3, #0]
 800b920:	187b      	adds	r3, r7, r1
 800b922:	881a      	ldrh	r2, [r3, #0]
 800b924:	2380      	movs	r3, #128	; 0x80
 800b926:	01db      	lsls	r3, r3, #7
 800b928:	4013      	ands	r3, r2
 800b92a:	d016      	beq.n	800b95a <USB_DeactivateEndpoint+0x28a>
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	18d3      	adds	r3, r2, r3
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	b29a      	uxth	r2, r3
 800b93a:	202c      	movs	r0, #44	; 0x2c
 800b93c:	183b      	adds	r3, r7, r0
 800b93e:	493e      	ldr	r1, [pc, #248]	; (800ba38 <USB_DeactivateEndpoint+0x368>)
 800b940:	400a      	ands	r2, r1
 800b942:	801a      	strh	r2, [r3, #0]
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	18d3      	adds	r3, r2, r3
 800b94e:	183a      	adds	r2, r7, r0
 800b950:	8812      	ldrh	r2, [r2, #0]
 800b952:	493d      	ldr	r1, [pc, #244]	; (800ba48 <USB_DeactivateEndpoint+0x378>)
 800b954:	430a      	orrs	r2, r1
 800b956:	b292      	uxth	r2, r2
 800b958:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	18d2      	adds	r2, r2, r3
 800b964:	212a      	movs	r1, #42	; 0x2a
 800b966:	187b      	adds	r3, r7, r1
 800b968:	8812      	ldrh	r2, [r2, #0]
 800b96a:	801a      	strh	r2, [r3, #0]
 800b96c:	187b      	adds	r3, r7, r1
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	2240      	movs	r2, #64	; 0x40
 800b972:	4013      	ands	r3, r2
 800b974:	d016      	beq.n	800b9a4 <USB_DeactivateEndpoint+0x2d4>
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	18d3      	adds	r3, r2, r3
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	b29a      	uxth	r2, r3
 800b984:	2028      	movs	r0, #40	; 0x28
 800b986:	183b      	adds	r3, r7, r0
 800b988:	492b      	ldr	r1, [pc, #172]	; (800ba38 <USB_DeactivateEndpoint+0x368>)
 800b98a:	400a      	ands	r2, r1
 800b98c:	801a      	strh	r2, [r3, #0]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	18d3      	adds	r3, r2, r3
 800b998:	183a      	adds	r2, r7, r0
 800b99a:	8812      	ldrh	r2, [r2, #0]
 800b99c:	4927      	ldr	r1, [pc, #156]	; (800ba3c <USB_DeactivateEndpoint+0x36c>)
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	b292      	uxth	r2, r2
 800b9a2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	18d3      	adds	r3, r2, r3
 800b9ae:	881b      	ldrh	r3, [r3, #0]
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	2026      	movs	r0, #38	; 0x26
 800b9b4:	183b      	adds	r3, r7, r0
 800b9b6:	4920      	ldr	r1, [pc, #128]	; (800ba38 <USB_DeactivateEndpoint+0x368>)
 800b9b8:	400a      	ands	r2, r1
 800b9ba:	801a      	strh	r2, [r3, #0]
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	18d3      	adds	r3, r2, r3
 800b9c6:	183a      	adds	r2, r7, r0
 800b9c8:	8812      	ldrh	r2, [r2, #0]
 800b9ca:	491f      	ldr	r1, [pc, #124]	; (800ba48 <USB_DeactivateEndpoint+0x378>)
 800b9cc:	430a      	orrs	r2, r1
 800b9ce:	b292      	uxth	r2, r2
 800b9d0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	18d3      	adds	r3, r2, r3
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	2024      	movs	r0, #36	; 0x24
 800b9e2:	183b      	adds	r3, r7, r0
 800b9e4:	4916      	ldr	r1, [pc, #88]	; (800ba40 <USB_DeactivateEndpoint+0x370>)
 800b9e6:	400a      	ands	r2, r1
 800b9e8:	801a      	strh	r2, [r3, #0]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	18d3      	adds	r3, r2, r3
 800b9f4:	183a      	adds	r2, r7, r0
 800b9f6:	8812      	ldrh	r2, [r2, #0]
 800b9f8:	4912      	ldr	r1, [pc, #72]	; (800ba44 <USB_DeactivateEndpoint+0x374>)
 800b9fa:	430a      	orrs	r2, r1
 800b9fc:	b292      	uxth	r2, r2
 800b9fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	18d3      	adds	r3, r2, r3
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	2022      	movs	r0, #34	; 0x22
 800ba10:	183b      	adds	r3, r7, r0
 800ba12:	490e      	ldr	r1, [pc, #56]	; (800ba4c <USB_DeactivateEndpoint+0x37c>)
 800ba14:	400a      	ands	r2, r1
 800ba16:	801a      	strh	r2, [r3, #0]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	18d3      	adds	r3, r2, r3
 800ba22:	183a      	adds	r2, r7, r0
 800ba24:	8812      	ldrh	r2, [r2, #0]
 800ba26:	4907      	ldr	r1, [pc, #28]	; (800ba44 <USB_DeactivateEndpoint+0x374>)
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	b292      	uxth	r2, r2
 800ba2c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	0018      	movs	r0, r3
 800ba32:	46bd      	mov	sp, r7
 800ba34:	b00c      	add	sp, #48	; 0x30
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	ffff8f8f 	.word	0xffff8f8f
 800ba3c:	ffff80c0 	.word	0xffff80c0
 800ba40:	ffff8fbf 	.word	0xffff8fbf
 800ba44:	ffff8080 	.word	0xffff8080
 800ba48:	ffffc080 	.word	0xffffc080
 800ba4c:	ffffbf8f 	.word	0xffffbf8f

0800ba50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba50:	b5b0      	push	{r4, r5, r7, lr}
 800ba52:	b0c4      	sub	sp, #272	; 0x110
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	785b      	ldrb	r3, [r3, #1]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d001      	beq.n	800ba66 <USB_EPStartXfer+0x16>
 800ba62:	f000 fd49 	bl	800c4f8 <USB_EPStartXfer+0xaa8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	699a      	ldr	r2, [r3, #24]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d906      	bls.n	800ba80 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	2286      	movs	r2, #134	; 0x86
 800ba78:	0052      	lsls	r2, r2, #1
 800ba7a:	18ba      	adds	r2, r7, r2
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	e005      	b.n	800ba8c <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	2286      	movs	r2, #134	; 0x86
 800ba86:	0052      	lsls	r2, r2, #1
 800ba88:	18ba      	adds	r2, r7, r2
 800ba8a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	7b1b      	ldrb	r3, [r3, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d125      	bne.n	800bae0 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	6959      	ldr	r1, [r3, #20]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	88da      	ldrh	r2, [r3, #6]
 800ba9c:	2486      	movs	r4, #134	; 0x86
 800ba9e:	0064      	lsls	r4, r4, #1
 800baa0:	193b      	adds	r3, r7, r4
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f001 fa2e 	bl	800cf08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	617b      	str	r3, [r7, #20]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2250      	movs	r2, #80	; 0x50
 800bab4:	5a9b      	ldrh	r3, [r3, r2]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	001a      	movs	r2, r3
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	189b      	adds	r3, r3, r2
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	00da      	lsls	r2, r3, #3
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	18d3      	adds	r3, r2, r3
 800baca:	4ad0      	ldr	r2, [pc, #832]	; (800be0c <USB_EPStartXfer+0x3bc>)
 800bacc:	4694      	mov	ip, r2
 800bace:	4463      	add	r3, ip
 800bad0:	613b      	str	r3, [r7, #16]
 800bad2:	193b      	adds	r3, r7, r4
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	801a      	strh	r2, [r3, #0]
 800badc:	f000 fcca 	bl	800c474 <USB_EPStartXfer+0xa24>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	78db      	ldrb	r3, [r3, #3]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d000      	beq.n	800baea <USB_EPStartXfer+0x9a>
 800bae8:	e346      	b.n	800c178 <USB_EPStartXfer+0x728>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	6a1a      	ldr	r2, [r3, #32]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d800      	bhi.n	800baf8 <USB_EPStartXfer+0xa8>
 800baf6:	e2ec      	b.n	800c0d2 <USB_EPStartXfer+0x682>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	18d3      	adds	r3, r2, r3
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	205a      	movs	r0, #90	; 0x5a
 800bb08:	183b      	adds	r3, r7, r0
 800bb0a:	49c1      	ldr	r1, [pc, #772]	; (800be10 <USB_EPStartXfer+0x3c0>)
 800bb0c:	400a      	ands	r2, r1
 800bb0e:	801a      	strh	r2, [r3, #0]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	18d3      	adds	r3, r2, r3
 800bb1a:	183a      	adds	r2, r7, r0
 800bb1c:	8812      	ldrh	r2, [r2, #0]
 800bb1e:	49bd      	ldr	r1, [pc, #756]	; (800be14 <USB_EPStartXfer+0x3c4>)
 800bb20:	430a      	orrs	r2, r1
 800bb22:	b292      	uxth	r2, r2
 800bb24:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	6a1a      	ldr	r2, [r3, #32]
 800bb2a:	2186      	movs	r1, #134	; 0x86
 800bb2c:	0049      	lsls	r1, r1, #1
 800bb2e:	187b      	adds	r3, r7, r1
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	1ad2      	subs	r2, r2, r3
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	18d3      	adds	r3, r2, r3
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	001a      	movs	r2, r3
 800bb48:	2340      	movs	r3, #64	; 0x40
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	d100      	bne.n	800bb50 <USB_EPStartXfer+0x100>
 800bb4e:	e169      	b.n	800be24 <USB_EPStartXfer+0x3d4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	637b      	str	r3, [r7, #52]	; 0x34
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	785b      	ldrb	r3, [r3, #1]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d168      	bne.n	800bc2e <USB_EPStartXfer+0x1de>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2250      	movs	r2, #80	; 0x50
 800bb64:	5a9b      	ldrh	r3, [r3, r2]
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	001a      	movs	r2, r3
 800bb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6c:	189b      	adds	r3, r3, r2
 800bb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	00da      	lsls	r2, r3, #3
 800bb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb78:	18d3      	adds	r3, r2, r3
 800bb7a:	4aa7      	ldr	r2, [pc, #668]	; (800be18 <USB_EPStartXfer+0x3c8>)
 800bb7c:	4694      	mov	ip, r2
 800bb7e:	4463      	add	r3, ip
 800bb80:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb82:	187b      	adds	r3, r7, r1
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d110      	bne.n	800bbac <USB_EPStartXfer+0x15c>
 800bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	4aa2      	ldr	r2, [pc, #648]	; (800be1c <USB_EPStartXfer+0x3cc>)
 800bb92:	4013      	ands	r3, r2
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	801a      	strh	r2, [r3, #0]
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	4a9f      	ldr	r2, [pc, #636]	; (800be20 <USB_EPStartXfer+0x3d0>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba8:	801a      	strh	r2, [r3, #0]
 800bbaa:	e05c      	b.n	800bc66 <USB_EPStartXfer+0x216>
 800bbac:	2286      	movs	r2, #134	; 0x86
 800bbae:	0052      	lsls	r2, r2, #1
 800bbb0:	18bb      	adds	r3, r7, r2
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b3e      	cmp	r3, #62	; 0x3e
 800bbb6:	d81a      	bhi.n	800bbee <USB_EPStartXfer+0x19e>
 800bbb8:	18bb      	adds	r3, r7, r2
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	085b      	lsrs	r3, r3, #1
 800bbbe:	1d79      	adds	r1, r7, #5
 800bbc0:	31ff      	adds	r1, #255	; 0xff
 800bbc2:	600b      	str	r3, [r1, #0]
 800bbc4:	18bb      	adds	r3, r7, r2
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	4013      	ands	r3, r2
 800bbcc:	d006      	beq.n	800bbdc <USB_EPStartXfer+0x18c>
 800bbce:	1d7b      	adds	r3, r7, #5
 800bbd0:	33ff      	adds	r3, #255	; 0xff
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	1d7a      	adds	r2, r7, #5
 800bbd8:	32ff      	adds	r2, #255	; 0xff
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	1d7b      	adds	r3, r7, #5
 800bbde:	33ff      	adds	r3, #255	; 0xff
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	029b      	lsls	r3, r3, #10
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	801a      	strh	r2, [r3, #0]
 800bbec:	e03b      	b.n	800bc66 <USB_EPStartXfer+0x216>
 800bbee:	2286      	movs	r2, #134	; 0x86
 800bbf0:	0052      	lsls	r2, r2, #1
 800bbf2:	18bb      	adds	r3, r7, r2
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	095b      	lsrs	r3, r3, #5
 800bbf8:	1d79      	adds	r1, r7, #5
 800bbfa:	31ff      	adds	r1, #255	; 0xff
 800bbfc:	600b      	str	r3, [r1, #0]
 800bbfe:	18bb      	adds	r3, r7, r2
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	221f      	movs	r2, #31
 800bc04:	4013      	ands	r3, r2
 800bc06:	d106      	bne.n	800bc16 <USB_EPStartXfer+0x1c6>
 800bc08:	1d7b      	adds	r3, r7, #5
 800bc0a:	33ff      	adds	r3, #255	; 0xff
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	1d7a      	adds	r2, r7, #5
 800bc12:	32ff      	adds	r2, #255	; 0xff
 800bc14:	6013      	str	r3, [r2, #0]
 800bc16:	1d7b      	adds	r3, r7, #5
 800bc18:	33ff      	adds	r3, #255	; 0xff
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	029b      	lsls	r3, r3, #10
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	4a7f      	ldr	r2, [pc, #508]	; (800be20 <USB_EPStartXfer+0x3d0>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	801a      	strh	r2, [r3, #0]
 800bc2c:	e01b      	b.n	800bc66 <USB_EPStartXfer+0x216>
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d117      	bne.n	800bc66 <USB_EPStartXfer+0x216>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2250      	movs	r2, #80	; 0x50
 800bc3a:	5a9b      	ldrh	r3, [r3, r2]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	001a      	movs	r2, r3
 800bc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc42:	189b      	adds	r3, r3, r2
 800bc44:	637b      	str	r3, [r7, #52]	; 0x34
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	00da      	lsls	r2, r3, #3
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4e:	18d3      	adds	r3, r2, r3
 800bc50:	4a71      	ldr	r2, [pc, #452]	; (800be18 <USB_EPStartXfer+0x3c8>)
 800bc52:	4694      	mov	ip, r2
 800bc54:	4463      	add	r3, ip
 800bc56:	633b      	str	r3, [r7, #48]	; 0x30
 800bc58:	2386      	movs	r3, #134	; 0x86
 800bc5a:	005b      	lsls	r3, r3, #1
 800bc5c:	18fb      	adds	r3, r7, r3
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bc66:	2085      	movs	r0, #133	; 0x85
 800bc68:	0040      	lsls	r0, r0, #1
 800bc6a:	183b      	adds	r3, r7, r0
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	8952      	ldrh	r2, [r2, #10]
 800bc70:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	6959      	ldr	r1, [r3, #20]
 800bc76:	2586      	movs	r5, #134	; 0x86
 800bc78:	006d      	lsls	r5, r5, #1
 800bc7a:	197b      	adds	r3, r7, r5
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	b29c      	uxth	r4, r3
 800bc80:	183b      	adds	r3, r7, r0
 800bc82:	881a      	ldrh	r2, [r3, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	0023      	movs	r3, r4
 800bc88:	f001 f93e 	bl	800cf08 <USB_WritePMA>
            ep->xfer_buff += len;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	695a      	ldr	r2, [r3, #20]
 800bc90:	197b      	adds	r3, r7, r5
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	18d2      	adds	r2, r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6a1a      	ldr	r2, [r3, #32]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d907      	bls.n	800bcb6 <USB_EPStartXfer+0x266>
            {
              ep->xfer_len_db -= len;
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	6a1a      	ldr	r2, [r3, #32]
 800bcaa:	197b      	adds	r3, r7, r5
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	1ad2      	subs	r2, r2, r3
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	621a      	str	r2, [r3, #32]
 800bcb4:	e008      	b.n	800bcc8 <USB_EPStartXfer+0x278>
            }
            else
            {
              len = ep->xfer_len_db;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	6a1b      	ldr	r3, [r3, #32]
 800bcba:	2286      	movs	r2, #134	; 0x86
 800bcbc:	0052      	lsls	r2, r2, #1
 800bcbe:	18ba      	adds	r2, r7, r2
 800bcc0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	785b      	ldrb	r3, [r3, #1]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d16a      	bne.n	800bda6 <USB_EPStartXfer+0x356>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	61fb      	str	r3, [r7, #28]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2250      	movs	r2, #80	; 0x50
 800bcd8:	5a9b      	ldrh	r3, [r3, r2]
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	001a      	movs	r2, r3
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	189b      	adds	r3, r3, r2
 800bce2:	61fb      	str	r3, [r7, #28]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	00da      	lsls	r2, r3, #3
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	18d3      	adds	r3, r2, r3
 800bcee:	4a47      	ldr	r2, [pc, #284]	; (800be0c <USB_EPStartXfer+0x3bc>)
 800bcf0:	4694      	mov	ip, r2
 800bcf2:	4463      	add	r3, ip
 800bcf4:	61bb      	str	r3, [r7, #24]
 800bcf6:	2386      	movs	r3, #134	; 0x86
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	18fb      	adds	r3, r7, r3
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d110      	bne.n	800bd24 <USB_EPStartXfer+0x2d4>
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	4a44      	ldr	r2, [pc, #272]	; (800be1c <USB_EPStartXfer+0x3cc>)
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	801a      	strh	r2, [r3, #0]
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	4a41      	ldr	r2, [pc, #260]	; (800be20 <USB_EPStartXfer+0x3d0>)
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	801a      	strh	r2, [r3, #0]
 800bd22:	e05e      	b.n	800bde2 <USB_EPStartXfer+0x392>
 800bd24:	2286      	movs	r2, #134	; 0x86
 800bd26:	0052      	lsls	r2, r2, #1
 800bd28:	18bb      	adds	r3, r7, r2
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b3e      	cmp	r3, #62	; 0x3e
 800bd2e:	d81a      	bhi.n	800bd66 <USB_EPStartXfer+0x316>
 800bd30:	18bb      	adds	r3, r7, r2
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	085b      	lsrs	r3, r3, #1
 800bd36:	1c79      	adds	r1, r7, #1
 800bd38:	31ff      	adds	r1, #255	; 0xff
 800bd3a:	600b      	str	r3, [r1, #0]
 800bd3c:	18bb      	adds	r3, r7, r2
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2201      	movs	r2, #1
 800bd42:	4013      	ands	r3, r2
 800bd44:	d006      	beq.n	800bd54 <USB_EPStartXfer+0x304>
 800bd46:	1c7b      	adds	r3, r7, #1
 800bd48:	33ff      	adds	r3, #255	; 0xff
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	1c7a      	adds	r2, r7, #1
 800bd50:	32ff      	adds	r2, #255	; 0xff
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	1c7b      	adds	r3, r7, #1
 800bd56:	33ff      	adds	r3, #255	; 0xff
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	029b      	lsls	r3, r3, #10
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	801a      	strh	r2, [r3, #0]
 800bd64:	e03d      	b.n	800bde2 <USB_EPStartXfer+0x392>
 800bd66:	2286      	movs	r2, #134	; 0x86
 800bd68:	0052      	lsls	r2, r2, #1
 800bd6a:	18bb      	adds	r3, r7, r2
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	095b      	lsrs	r3, r3, #5
 800bd70:	1c79      	adds	r1, r7, #1
 800bd72:	31ff      	adds	r1, #255	; 0xff
 800bd74:	600b      	str	r3, [r1, #0]
 800bd76:	18bb      	adds	r3, r7, r2
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	221f      	movs	r2, #31
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	d106      	bne.n	800bd8e <USB_EPStartXfer+0x33e>
 800bd80:	1c7b      	adds	r3, r7, #1
 800bd82:	33ff      	adds	r3, #255	; 0xff
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	1c7a      	adds	r2, r7, #1
 800bd8a:	32ff      	adds	r2, #255	; 0xff
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	1c7b      	adds	r3, r7, #1
 800bd90:	33ff      	adds	r3, #255	; 0xff
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	029b      	lsls	r3, r3, #10
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	4a21      	ldr	r2, [pc, #132]	; (800be20 <USB_EPStartXfer+0x3d0>)
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	801a      	strh	r2, [r3, #0]
 800bda4:	e01d      	b.n	800bde2 <USB_EPStartXfer+0x392>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	785b      	ldrb	r3, [r3, #1]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d119      	bne.n	800bde2 <USB_EPStartXfer+0x392>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	627b      	str	r3, [r7, #36]	; 0x24
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2250      	movs	r2, #80	; 0x50
 800bdb6:	5a9b      	ldrh	r3, [r3, r2]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	001a      	movs	r2, r3
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	189b      	adds	r3, r3, r2
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	00da      	lsls	r2, r3, #3
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	18d3      	adds	r3, r2, r3
 800bdcc:	4a0f      	ldr	r2, [pc, #60]	; (800be0c <USB_EPStartXfer+0x3bc>)
 800bdce:	4694      	mov	ip, r2
 800bdd0:	4463      	add	r3, ip
 800bdd2:	623b      	str	r3, [r7, #32]
 800bdd4:	2386      	movs	r3, #134	; 0x86
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	18fb      	adds	r3, r7, r3
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bde2:	2085      	movs	r0, #133	; 0x85
 800bde4:	0040      	lsls	r0, r0, #1
 800bde6:	183b      	adds	r3, r7, r0
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	8912      	ldrh	r2, [r2, #8]
 800bdec:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	6959      	ldr	r1, [r3, #20]
 800bdf2:	2386      	movs	r3, #134	; 0x86
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	18fb      	adds	r3, r7, r3
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	b29c      	uxth	r4, r3
 800bdfc:	183b      	adds	r3, r7, r0
 800bdfe:	881a      	ldrh	r2, [r3, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	0023      	movs	r3, r4
 800be04:	f001 f880 	bl	800cf08 <USB_WritePMA>
 800be08:	e334      	b.n	800c474 <USB_EPStartXfer+0xa24>
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	00000402 	.word	0x00000402
 800be10:	ffff8f8f 	.word	0xffff8f8f
 800be14:	ffff8180 	.word	0xffff8180
 800be18:	00000406 	.word	0x00000406
 800be1c:	ffff83ff 	.word	0xffff83ff
 800be20:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	785b      	ldrb	r3, [r3, #1]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d166      	bne.n	800befa <USB_EPStartXfer+0x4aa>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2250      	movs	r2, #80	; 0x50
 800be34:	5a9b      	ldrh	r3, [r3, r2]
 800be36:	b29b      	uxth	r3, r3
 800be38:	001a      	movs	r2, r3
 800be3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be3c:	189b      	adds	r3, r3, r2
 800be3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	00da      	lsls	r2, r3, #3
 800be46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be48:	18d3      	adds	r3, r2, r3
 800be4a:	4ac5      	ldr	r2, [pc, #788]	; (800c160 <USB_EPStartXfer+0x710>)
 800be4c:	4694      	mov	ip, r2
 800be4e:	4463      	add	r3, ip
 800be50:	64bb      	str	r3, [r7, #72]	; 0x48
 800be52:	2386      	movs	r3, #134	; 0x86
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	18fb      	adds	r3, r7, r3
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d110      	bne.n	800be80 <USB_EPStartXfer+0x430>
 800be5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be60:	881b      	ldrh	r3, [r3, #0]
 800be62:	b29b      	uxth	r3, r3
 800be64:	4abf      	ldr	r2, [pc, #764]	; (800c164 <USB_EPStartXfer+0x714>)
 800be66:	4013      	ands	r3, r2
 800be68:	b29a      	uxth	r2, r3
 800be6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be6c:	801a      	strh	r2, [r3, #0]
 800be6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	b29b      	uxth	r3, r3
 800be74:	4abc      	ldr	r2, [pc, #752]	; (800c168 <USB_EPStartXfer+0x718>)
 800be76:	4313      	orrs	r3, r2
 800be78:	b29a      	uxth	r2, r3
 800be7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be7c:	801a      	strh	r2, [r3, #0]
 800be7e:	e05a      	b.n	800bf36 <USB_EPStartXfer+0x4e6>
 800be80:	2286      	movs	r2, #134	; 0x86
 800be82:	0052      	lsls	r2, r2, #1
 800be84:	18bb      	adds	r3, r7, r2
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b3e      	cmp	r3, #62	; 0x3e
 800be8a:	d818      	bhi.n	800bebe <USB_EPStartXfer+0x46e>
 800be8c:	18bb      	adds	r3, r7, r2
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	085b      	lsrs	r3, r3, #1
 800be92:	21fc      	movs	r1, #252	; 0xfc
 800be94:	1878      	adds	r0, r7, r1
 800be96:	6003      	str	r3, [r0, #0]
 800be98:	18bb      	adds	r3, r7, r2
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2201      	movs	r2, #1
 800be9e:	4013      	ands	r3, r2
 800bea0:	d004      	beq.n	800beac <USB_EPStartXfer+0x45c>
 800bea2:	187b      	adds	r3, r7, r1
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3301      	adds	r3, #1
 800bea8:	187a      	adds	r2, r7, r1
 800beaa:	6013      	str	r3, [r2, #0]
 800beac:	23fc      	movs	r3, #252	; 0xfc
 800beae:	18fb      	adds	r3, r7, r3
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	029b      	lsls	r3, r3, #10
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beba:	801a      	strh	r2, [r3, #0]
 800bebc:	e03b      	b.n	800bf36 <USB_EPStartXfer+0x4e6>
 800bebe:	2286      	movs	r2, #134	; 0x86
 800bec0:	0052      	lsls	r2, r2, #1
 800bec2:	18bb      	adds	r3, r7, r2
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	095b      	lsrs	r3, r3, #5
 800bec8:	21fc      	movs	r1, #252	; 0xfc
 800beca:	1878      	adds	r0, r7, r1
 800becc:	6003      	str	r3, [r0, #0]
 800bece:	18bb      	adds	r3, r7, r2
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	221f      	movs	r2, #31
 800bed4:	4013      	ands	r3, r2
 800bed6:	d104      	bne.n	800bee2 <USB_EPStartXfer+0x492>
 800bed8:	187b      	adds	r3, r7, r1
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3b01      	subs	r3, #1
 800bede:	187a      	adds	r2, r7, r1
 800bee0:	6013      	str	r3, [r2, #0]
 800bee2:	23fc      	movs	r3, #252	; 0xfc
 800bee4:	18fb      	adds	r3, r7, r3
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	029b      	lsls	r3, r3, #10
 800beec:	b29b      	uxth	r3, r3
 800beee:	4a9e      	ldr	r2, [pc, #632]	; (800c168 <USB_EPStartXfer+0x718>)
 800bef0:	4313      	orrs	r3, r2
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bef6:	801a      	strh	r2, [r3, #0]
 800bef8:	e01d      	b.n	800bf36 <USB_EPStartXfer+0x4e6>
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	785b      	ldrb	r3, [r3, #1]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d119      	bne.n	800bf36 <USB_EPStartXfer+0x4e6>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	657b      	str	r3, [r7, #84]	; 0x54
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2250      	movs	r2, #80	; 0x50
 800bf0a:	5a9b      	ldrh	r3, [r3, r2]
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	001a      	movs	r2, r3
 800bf10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf12:	189b      	adds	r3, r3, r2
 800bf14:	657b      	str	r3, [r7, #84]	; 0x54
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	00da      	lsls	r2, r3, #3
 800bf1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf1e:	18d3      	adds	r3, r2, r3
 800bf20:	4a8f      	ldr	r2, [pc, #572]	; (800c160 <USB_EPStartXfer+0x710>)
 800bf22:	4694      	mov	ip, r2
 800bf24:	4463      	add	r3, ip
 800bf26:	653b      	str	r3, [r7, #80]	; 0x50
 800bf28:	2386      	movs	r3, #134	; 0x86
 800bf2a:	005b      	lsls	r3, r3, #1
 800bf2c:	18fb      	adds	r3, r7, r3
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bf36:	2085      	movs	r0, #133	; 0x85
 800bf38:	0040      	lsls	r0, r0, #1
 800bf3a:	183b      	adds	r3, r7, r0
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	8912      	ldrh	r2, [r2, #8]
 800bf40:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	6959      	ldr	r1, [r3, #20]
 800bf46:	2586      	movs	r5, #134	; 0x86
 800bf48:	006d      	lsls	r5, r5, #1
 800bf4a:	197b      	adds	r3, r7, r5
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	b29c      	uxth	r4, r3
 800bf50:	183b      	adds	r3, r7, r0
 800bf52:	881a      	ldrh	r2, [r3, #0]
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	0023      	movs	r3, r4
 800bf58:	f000 ffd6 	bl	800cf08 <USB_WritePMA>
            ep->xfer_buff += len;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	695a      	ldr	r2, [r3, #20]
 800bf60:	197b      	adds	r3, r7, r5
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	18d2      	adds	r2, r2, r3
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	6a1a      	ldr	r2, [r3, #32]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d907      	bls.n	800bf86 <USB_EPStartXfer+0x536>
            {
              ep->xfer_len_db -= len;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	6a1a      	ldr	r2, [r3, #32]
 800bf7a:	197b      	adds	r3, r7, r5
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	1ad2      	subs	r2, r2, r3
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	621a      	str	r2, [r3, #32]
 800bf84:	e008      	b.n	800bf98 <USB_EPStartXfer+0x548>
            }
            else
            {
              len = ep->xfer_len_db;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	2286      	movs	r2, #134	; 0x86
 800bf8c:	0052      	lsls	r2, r2, #1
 800bf8e:	18ba      	adds	r2, r7, r2
 800bf90:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	2200      	movs	r2, #0
 800bf96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	785b      	ldrb	r3, [r3, #1]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d166      	bne.n	800c072 <USB_EPStartXfer+0x622>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2250      	movs	r2, #80	; 0x50
 800bfac:	5a9b      	ldrh	r3, [r3, r2]
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	001a      	movs	r2, r3
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb4:	189b      	adds	r3, r3, r2
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	00da      	lsls	r2, r3, #3
 800bfbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc0:	18d3      	adds	r3, r2, r3
 800bfc2:	4a6a      	ldr	r2, [pc, #424]	; (800c16c <USB_EPStartXfer+0x71c>)
 800bfc4:	4694      	mov	ip, r2
 800bfc6:	4463      	add	r3, ip
 800bfc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfca:	2386      	movs	r3, #134	; 0x86
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	18fb      	adds	r3, r7, r3
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d110      	bne.n	800bff8 <USB_EPStartXfer+0x5a8>
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4a61      	ldr	r2, [pc, #388]	; (800c164 <USB_EPStartXfer+0x714>)
 800bfde:	4013      	ands	r3, r2
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	801a      	strh	r2, [r3, #0]
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4a5e      	ldr	r2, [pc, #376]	; (800c168 <USB_EPStartXfer+0x718>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff4:	801a      	strh	r2, [r3, #0]
 800bff6:	e058      	b.n	800c0aa <USB_EPStartXfer+0x65a>
 800bff8:	2286      	movs	r2, #134	; 0x86
 800bffa:	0052      	lsls	r2, r2, #1
 800bffc:	18bb      	adds	r3, r7, r2
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b3e      	cmp	r3, #62	; 0x3e
 800c002:	d818      	bhi.n	800c036 <USB_EPStartXfer+0x5e6>
 800c004:	18bb      	adds	r3, r7, r2
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	085b      	lsrs	r3, r3, #1
 800c00a:	21f8      	movs	r1, #248	; 0xf8
 800c00c:	1878      	adds	r0, r7, r1
 800c00e:	6003      	str	r3, [r0, #0]
 800c010:	18bb      	adds	r3, r7, r2
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2201      	movs	r2, #1
 800c016:	4013      	ands	r3, r2
 800c018:	d004      	beq.n	800c024 <USB_EPStartXfer+0x5d4>
 800c01a:	187b      	adds	r3, r7, r1
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3301      	adds	r3, #1
 800c020:	187a      	adds	r2, r7, r1
 800c022:	6013      	str	r3, [r2, #0]
 800c024:	23f8      	movs	r3, #248	; 0xf8
 800c026:	18fb      	adds	r3, r7, r3
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	029b      	lsls	r3, r3, #10
 800c02e:	b29a      	uxth	r2, r3
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	801a      	strh	r2, [r3, #0]
 800c034:	e039      	b.n	800c0aa <USB_EPStartXfer+0x65a>
 800c036:	2286      	movs	r2, #134	; 0x86
 800c038:	0052      	lsls	r2, r2, #1
 800c03a:	18bb      	adds	r3, r7, r2
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	095b      	lsrs	r3, r3, #5
 800c040:	21f8      	movs	r1, #248	; 0xf8
 800c042:	1878      	adds	r0, r7, r1
 800c044:	6003      	str	r3, [r0, #0]
 800c046:	18bb      	adds	r3, r7, r2
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	221f      	movs	r2, #31
 800c04c:	4013      	ands	r3, r2
 800c04e:	d104      	bne.n	800c05a <USB_EPStartXfer+0x60a>
 800c050:	187b      	adds	r3, r7, r1
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3b01      	subs	r3, #1
 800c056:	187a      	adds	r2, r7, r1
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	23f8      	movs	r3, #248	; 0xf8
 800c05c:	18fb      	adds	r3, r7, r3
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	029b      	lsls	r3, r3, #10
 800c064:	b29b      	uxth	r3, r3
 800c066:	4a40      	ldr	r2, [pc, #256]	; (800c168 <USB_EPStartXfer+0x718>)
 800c068:	4313      	orrs	r3, r2
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	801a      	strh	r2, [r3, #0]
 800c070:	e01b      	b.n	800c0aa <USB_EPStartXfer+0x65a>
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	785b      	ldrb	r3, [r3, #1]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d117      	bne.n	800c0aa <USB_EPStartXfer+0x65a>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2250      	movs	r2, #80	; 0x50
 800c07e:	5a9b      	ldrh	r3, [r3, r2]
 800c080:	b29b      	uxth	r3, r3
 800c082:	001a      	movs	r2, r3
 800c084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c086:	189b      	adds	r3, r3, r2
 800c088:	647b      	str	r3, [r7, #68]	; 0x44
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	00da      	lsls	r2, r3, #3
 800c090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c092:	18d3      	adds	r3, r2, r3
 800c094:	4a35      	ldr	r2, [pc, #212]	; (800c16c <USB_EPStartXfer+0x71c>)
 800c096:	4694      	mov	ip, r2
 800c098:	4463      	add	r3, ip
 800c09a:	643b      	str	r3, [r7, #64]	; 0x40
 800c09c:	2386      	movs	r3, #134	; 0x86
 800c09e:	005b      	lsls	r3, r3, #1
 800c0a0:	18fb      	adds	r3, r7, r3
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c0aa:	2085      	movs	r0, #133	; 0x85
 800c0ac:	0040      	lsls	r0, r0, #1
 800c0ae:	183b      	adds	r3, r7, r0
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	8952      	ldrh	r2, [r2, #10]
 800c0b4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	6959      	ldr	r1, [r3, #20]
 800c0ba:	2386      	movs	r3, #134	; 0x86
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	18fb      	adds	r3, r7, r3
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	b29c      	uxth	r4, r3
 800c0c4:	183b      	adds	r3, r7, r0
 800c0c6:	881a      	ldrh	r2, [r3, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	0023      	movs	r3, r4
 800c0cc:	f000 ff1c 	bl	800cf08 <USB_WritePMA>
 800c0d0:	e1d0      	b.n	800c474 <USB_EPStartXfer+0xa24>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	2086      	movs	r0, #134	; 0x86
 800c0d8:	0040      	lsls	r0, r0, #1
 800c0da:	183a      	adds	r2, r7, r0
 800c0dc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	18d3      	adds	r3, r2, r3
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	2466      	movs	r4, #102	; 0x66
 800c0ee:	193b      	adds	r3, r7, r4
 800c0f0:	491f      	ldr	r1, [pc, #124]	; (800c170 <USB_EPStartXfer+0x720>)
 800c0f2:	400a      	ands	r2, r1
 800c0f4:	801a      	strh	r2, [r3, #0]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	18d3      	adds	r3, r2, r3
 800c100:	193a      	adds	r2, r7, r4
 800c102:	8812      	ldrh	r2, [r2, #0]
 800c104:	491b      	ldr	r1, [pc, #108]	; (800c174 <USB_EPStartXfer+0x724>)
 800c106:	430a      	orrs	r2, r1
 800c108:	b292      	uxth	r2, r2
 800c10a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	663b      	str	r3, [r7, #96]	; 0x60
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2250      	movs	r2, #80	; 0x50
 800c114:	5a9b      	ldrh	r3, [r3, r2]
 800c116:	b29b      	uxth	r3, r3
 800c118:	001a      	movs	r2, r3
 800c11a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c11c:	189b      	adds	r3, r3, r2
 800c11e:	663b      	str	r3, [r7, #96]	; 0x60
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	00da      	lsls	r2, r3, #3
 800c126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c128:	18d3      	adds	r3, r2, r3
 800c12a:	4a0d      	ldr	r2, [pc, #52]	; (800c160 <USB_EPStartXfer+0x710>)
 800c12c:	4694      	mov	ip, r2
 800c12e:	4463      	add	r3, ip
 800c130:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c132:	183b      	adds	r3, r7, r0
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	b29a      	uxth	r2, r3
 800c138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c13a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c13c:	2585      	movs	r5, #133	; 0x85
 800c13e:	006d      	lsls	r5, r5, #1
 800c140:	197b      	adds	r3, r7, r5
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	8912      	ldrh	r2, [r2, #8]
 800c146:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	6959      	ldr	r1, [r3, #20]
 800c14c:	183b      	adds	r3, r7, r0
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	b29c      	uxth	r4, r3
 800c152:	197b      	adds	r3, r7, r5
 800c154:	881a      	ldrh	r2, [r3, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	0023      	movs	r3, r4
 800c15a:	f000 fed5 	bl	800cf08 <USB_WritePMA>
 800c15e:	e189      	b.n	800c474 <USB_EPStartXfer+0xa24>
 800c160:	00000402 	.word	0x00000402
 800c164:	ffff83ff 	.word	0xffff83ff
 800c168:	ffff8000 	.word	0xffff8000
 800c16c:	00000406 	.word	0x00000406
 800c170:	ffff8e8f 	.word	0xffff8e8f
 800c174:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	18d3      	adds	r3, r2, r3
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	b29b      	uxth	r3, r3
 800c186:	001a      	movs	r2, r3
 800c188:	2340      	movs	r3, #64	; 0x40
 800c18a:	4013      	ands	r3, r2
 800c18c:	d100      	bne.n	800c190 <USB_EPStartXfer+0x740>
 800c18e:	e08f      	b.n	800c2b0 <USB_EPStartXfer+0x860>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	67bb      	str	r3, [r7, #120]	; 0x78
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	785b      	ldrb	r3, [r3, #1]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d166      	bne.n	800c26a <USB_EPStartXfer+0x81a>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	673b      	str	r3, [r7, #112]	; 0x70
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2250      	movs	r2, #80	; 0x50
 800c1a4:	5a9b      	ldrh	r3, [r3, r2]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	001a      	movs	r2, r3
 800c1aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1ac:	189b      	adds	r3, r3, r2
 800c1ae:	673b      	str	r3, [r7, #112]	; 0x70
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	00da      	lsls	r2, r3, #3
 800c1b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1b8:	18d3      	adds	r3, r2, r3
 800c1ba:	4adc      	ldr	r2, [pc, #880]	; (800c52c <USB_EPStartXfer+0xadc>)
 800c1bc:	4694      	mov	ip, r2
 800c1be:	4463      	add	r3, ip
 800c1c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1c2:	2386      	movs	r3, #134	; 0x86
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	18fb      	adds	r3, r7, r3
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d110      	bne.n	800c1f0 <USB_EPStartXfer+0x7a0>
 800c1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	4ad6      	ldr	r2, [pc, #856]	; (800c530 <USB_EPStartXfer+0xae0>)
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1dc:	801a      	strh	r2, [r3, #0]
 800c1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	4ad3      	ldr	r2, [pc, #844]	; (800c534 <USB_EPStartXfer+0xae4>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1ec:	801a      	strh	r2, [r3, #0]
 800c1ee:	e058      	b.n	800c2a2 <USB_EPStartXfer+0x852>
 800c1f0:	2286      	movs	r2, #134	; 0x86
 800c1f2:	0052      	lsls	r2, r2, #1
 800c1f4:	18bb      	adds	r3, r7, r2
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b3e      	cmp	r3, #62	; 0x3e
 800c1fa:	d818      	bhi.n	800c22e <USB_EPStartXfer+0x7de>
 800c1fc:	18bb      	adds	r3, r7, r2
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	085b      	lsrs	r3, r3, #1
 800c202:	21f4      	movs	r1, #244	; 0xf4
 800c204:	1878      	adds	r0, r7, r1
 800c206:	6003      	str	r3, [r0, #0]
 800c208:	18bb      	adds	r3, r7, r2
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2201      	movs	r2, #1
 800c20e:	4013      	ands	r3, r2
 800c210:	d004      	beq.n	800c21c <USB_EPStartXfer+0x7cc>
 800c212:	187b      	adds	r3, r7, r1
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3301      	adds	r3, #1
 800c218:	187a      	adds	r2, r7, r1
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	23f4      	movs	r3, #244	; 0xf4
 800c21e:	18fb      	adds	r3, r7, r3
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	b29b      	uxth	r3, r3
 800c224:	029b      	lsls	r3, r3, #10
 800c226:	b29a      	uxth	r2, r3
 800c228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c22a:	801a      	strh	r2, [r3, #0]
 800c22c:	e039      	b.n	800c2a2 <USB_EPStartXfer+0x852>
 800c22e:	2286      	movs	r2, #134	; 0x86
 800c230:	0052      	lsls	r2, r2, #1
 800c232:	18bb      	adds	r3, r7, r2
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	095b      	lsrs	r3, r3, #5
 800c238:	21f4      	movs	r1, #244	; 0xf4
 800c23a:	1878      	adds	r0, r7, r1
 800c23c:	6003      	str	r3, [r0, #0]
 800c23e:	18bb      	adds	r3, r7, r2
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	221f      	movs	r2, #31
 800c244:	4013      	ands	r3, r2
 800c246:	d104      	bne.n	800c252 <USB_EPStartXfer+0x802>
 800c248:	187b      	adds	r3, r7, r1
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	187a      	adds	r2, r7, r1
 800c250:	6013      	str	r3, [r2, #0]
 800c252:	23f4      	movs	r3, #244	; 0xf4
 800c254:	18fb      	adds	r3, r7, r3
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	029b      	lsls	r3, r3, #10
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	4ab5      	ldr	r2, [pc, #724]	; (800c534 <USB_EPStartXfer+0xae4>)
 800c260:	4313      	orrs	r3, r2
 800c262:	b29a      	uxth	r2, r3
 800c264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c266:	801a      	strh	r2, [r3, #0]
 800c268:	e01b      	b.n	800c2a2 <USB_EPStartXfer+0x852>
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	785b      	ldrb	r3, [r3, #1]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d117      	bne.n	800c2a2 <USB_EPStartXfer+0x852>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2250      	movs	r2, #80	; 0x50
 800c276:	5a9b      	ldrh	r3, [r3, r2]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	001a      	movs	r2, r3
 800c27c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c27e:	189b      	adds	r3, r3, r2
 800c280:	67bb      	str	r3, [r7, #120]	; 0x78
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	00da      	lsls	r2, r3, #3
 800c288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c28a:	18d3      	adds	r3, r2, r3
 800c28c:	4aa7      	ldr	r2, [pc, #668]	; (800c52c <USB_EPStartXfer+0xadc>)
 800c28e:	4694      	mov	ip, r2
 800c290:	4463      	add	r3, ip
 800c292:	677b      	str	r3, [r7, #116]	; 0x74
 800c294:	2386      	movs	r3, #134	; 0x86
 800c296:	005b      	lsls	r3, r3, #1
 800c298:	18fb      	adds	r3, r7, r3
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c2a2:	2385      	movs	r3, #133	; 0x85
 800c2a4:	005b      	lsls	r3, r3, #1
 800c2a6:	18fb      	adds	r3, r7, r3
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	8952      	ldrh	r2, [r2, #10]
 800c2ac:	801a      	strh	r2, [r3, #0]
 800c2ae:	e09b      	b.n	800c3e8 <USB_EPStartXfer+0x998>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	785b      	ldrb	r3, [r3, #1]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d16b      	bne.n	800c390 <USB_EPStartXfer+0x940>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2180      	movs	r1, #128	; 0x80
 800c2bc:	187a      	adds	r2, r7, r1
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2250      	movs	r2, #80	; 0x50
 800c2c4:	5a9b      	ldrh	r3, [r3, r2]
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	001a      	movs	r2, r3
 800c2ca:	187b      	adds	r3, r7, r1
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	189b      	adds	r3, r3, r2
 800c2d0:	187a      	adds	r2, r7, r1
 800c2d2:	6013      	str	r3, [r2, #0]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	00da      	lsls	r2, r3, #3
 800c2da:	187b      	adds	r3, r7, r1
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	18d3      	adds	r3, r2, r3
 800c2e0:	4a95      	ldr	r2, [pc, #596]	; (800c538 <USB_EPStartXfer+0xae8>)
 800c2e2:	4694      	mov	ip, r2
 800c2e4:	4463      	add	r3, ip
 800c2e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2e8:	2386      	movs	r3, #134	; 0x86
 800c2ea:	005b      	lsls	r3, r3, #1
 800c2ec:	18fb      	adds	r3, r7, r3
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d110      	bne.n	800c316 <USB_EPStartXfer+0x8c6>
 800c2f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	4a8d      	ldr	r2, [pc, #564]	; (800c530 <USB_EPStartXfer+0xae0>)
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c302:	801a      	strh	r2, [r3, #0]
 800c304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	4a8a      	ldr	r2, [pc, #552]	; (800c534 <USB_EPStartXfer+0xae4>)
 800c30c:	4313      	orrs	r3, r2
 800c30e:	b29a      	uxth	r2, r3
 800c310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c312:	801a      	strh	r2, [r3, #0]
 800c314:	e062      	b.n	800c3dc <USB_EPStartXfer+0x98c>
 800c316:	2286      	movs	r2, #134	; 0x86
 800c318:	0052      	lsls	r2, r2, #1
 800c31a:	18bb      	adds	r3, r7, r2
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b3e      	cmp	r3, #62	; 0x3e
 800c320:	d818      	bhi.n	800c354 <USB_EPStartXfer+0x904>
 800c322:	18bb      	adds	r3, r7, r2
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	085b      	lsrs	r3, r3, #1
 800c328:	21f0      	movs	r1, #240	; 0xf0
 800c32a:	1878      	adds	r0, r7, r1
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	18bb      	adds	r3, r7, r2
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2201      	movs	r2, #1
 800c334:	4013      	ands	r3, r2
 800c336:	d004      	beq.n	800c342 <USB_EPStartXfer+0x8f2>
 800c338:	187b      	adds	r3, r7, r1
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3301      	adds	r3, #1
 800c33e:	187a      	adds	r2, r7, r1
 800c340:	6013      	str	r3, [r2, #0]
 800c342:	23f0      	movs	r3, #240	; 0xf0
 800c344:	18fb      	adds	r3, r7, r3
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	b29b      	uxth	r3, r3
 800c34a:	029b      	lsls	r3, r3, #10
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c350:	801a      	strh	r2, [r3, #0]
 800c352:	e043      	b.n	800c3dc <USB_EPStartXfer+0x98c>
 800c354:	2286      	movs	r2, #134	; 0x86
 800c356:	0052      	lsls	r2, r2, #1
 800c358:	18bb      	adds	r3, r7, r2
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	095b      	lsrs	r3, r3, #5
 800c35e:	21f0      	movs	r1, #240	; 0xf0
 800c360:	1878      	adds	r0, r7, r1
 800c362:	6003      	str	r3, [r0, #0]
 800c364:	18bb      	adds	r3, r7, r2
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	221f      	movs	r2, #31
 800c36a:	4013      	ands	r3, r2
 800c36c:	d104      	bne.n	800c378 <USB_EPStartXfer+0x928>
 800c36e:	187b      	adds	r3, r7, r1
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3b01      	subs	r3, #1
 800c374:	187a      	adds	r2, r7, r1
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	23f0      	movs	r3, #240	; 0xf0
 800c37a:	18fb      	adds	r3, r7, r3
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	b29b      	uxth	r3, r3
 800c380:	029b      	lsls	r3, r3, #10
 800c382:	b29b      	uxth	r3, r3
 800c384:	4a6b      	ldr	r2, [pc, #428]	; (800c534 <USB_EPStartXfer+0xae4>)
 800c386:	4313      	orrs	r3, r2
 800c388:	b29a      	uxth	r2, r3
 800c38a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	e025      	b.n	800c3dc <USB_EPStartXfer+0x98c>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	785b      	ldrb	r3, [r3, #1]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d121      	bne.n	800c3dc <USB_EPStartXfer+0x98c>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2188      	movs	r1, #136	; 0x88
 800c39c:	187a      	adds	r2, r7, r1
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2250      	movs	r2, #80	; 0x50
 800c3a4:	5a9b      	ldrh	r3, [r3, r2]
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	001a      	movs	r2, r3
 800c3aa:	187b      	adds	r3, r7, r1
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	189b      	adds	r3, r3, r2
 800c3b0:	187a      	adds	r2, r7, r1
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	00da      	lsls	r2, r3, #3
 800c3ba:	187b      	adds	r3, r7, r1
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	18d3      	adds	r3, r2, r3
 800c3c0:	4a5d      	ldr	r2, [pc, #372]	; (800c538 <USB_EPStartXfer+0xae8>)
 800c3c2:	4694      	mov	ip, r2
 800c3c4:	4463      	add	r3, ip
 800c3c6:	2184      	movs	r1, #132	; 0x84
 800c3c8:	187a      	adds	r2, r7, r1
 800c3ca:	6013      	str	r3, [r2, #0]
 800c3cc:	2386      	movs	r3, #134	; 0x86
 800c3ce:	005b      	lsls	r3, r3, #1
 800c3d0:	18fb      	adds	r3, r7, r3
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	187b      	adds	r3, r7, r1
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c3dc:	2385      	movs	r3, #133	; 0x85
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	18fb      	adds	r3, r7, r3
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	8912      	ldrh	r2, [r2, #8]
 800c3e6:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	6959      	ldr	r1, [r3, #20]
 800c3ec:	2386      	movs	r3, #134	; 0x86
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	18fb      	adds	r3, r7, r3
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	b29c      	uxth	r4, r3
 800c3f6:	2385      	movs	r3, #133	; 0x85
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	18fb      	adds	r3, r7, r3
 800c3fc:	881a      	ldrh	r2, [r3, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	0023      	movs	r3, r4
 800c402:	f000 fd81 	bl	800cf08 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	785b      	ldrb	r3, [r3, #1]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d117      	bne.n	800c43e <USB_EPStartXfer+0x9ee>
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	18d3      	adds	r3, r2, r3
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	2068      	movs	r0, #104	; 0x68
 800c41e:	183b      	adds	r3, r7, r0
 800c420:	4946      	ldr	r1, [pc, #280]	; (800c53c <USB_EPStartXfer+0xaec>)
 800c422:	400a      	ands	r2, r1
 800c424:	801a      	strh	r2, [r3, #0]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	18d3      	adds	r3, r2, r3
 800c430:	183a      	adds	r2, r7, r0
 800c432:	8812      	ldrh	r2, [r2, #0]
 800c434:	4942      	ldr	r1, [pc, #264]	; (800c540 <USB_EPStartXfer+0xaf0>)
 800c436:	430a      	orrs	r2, r1
 800c438:	b292      	uxth	r2, r2
 800c43a:	801a      	strh	r2, [r3, #0]
 800c43c:	e01a      	b.n	800c474 <USB_EPStartXfer+0xa24>
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	785b      	ldrb	r3, [r3, #1]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d116      	bne.n	800c474 <USB_EPStartXfer+0xa24>
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	18d3      	adds	r3, r2, r3
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	b29a      	uxth	r2, r3
 800c454:	206a      	movs	r0, #106	; 0x6a
 800c456:	183b      	adds	r3, r7, r0
 800c458:	4938      	ldr	r1, [pc, #224]	; (800c53c <USB_EPStartXfer+0xaec>)
 800c45a:	400a      	ands	r2, r1
 800c45c:	801a      	strh	r2, [r3, #0]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	18d3      	adds	r3, r2, r3
 800c468:	183a      	adds	r2, r7, r0
 800c46a:	8812      	ldrh	r2, [r2, #0]
 800c46c:	4935      	ldr	r1, [pc, #212]	; (800c544 <USB_EPStartXfer+0xaf4>)
 800c46e:	430a      	orrs	r2, r1
 800c470:	b292      	uxth	r2, r2
 800c472:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	18d3      	adds	r3, r2, r3
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	b29a      	uxth	r2, r3
 800c482:	4b31      	ldr	r3, [pc, #196]	; (800c548 <USB_EPStartXfer+0xaf8>)
 800c484:	2188      	movs	r1, #136	; 0x88
 800c486:	0049      	lsls	r1, r1, #1
 800c488:	468c      	mov	ip, r1
 800c48a:	44bc      	add	ip, r7
 800c48c:	4463      	add	r3, ip
 800c48e:	492f      	ldr	r1, [pc, #188]	; (800c54c <USB_EPStartXfer+0xafc>)
 800c490:	400a      	ands	r2, r1
 800c492:	801a      	strh	r2, [r3, #0]
 800c494:	4b2c      	ldr	r3, [pc, #176]	; (800c548 <USB_EPStartXfer+0xaf8>)
 800c496:	2288      	movs	r2, #136	; 0x88
 800c498:	0052      	lsls	r2, r2, #1
 800c49a:	4694      	mov	ip, r2
 800c49c:	44bc      	add	ip, r7
 800c49e:	4463      	add	r3, ip
 800c4a0:	4a29      	ldr	r2, [pc, #164]	; (800c548 <USB_EPStartXfer+0xaf8>)
 800c4a2:	2188      	movs	r1, #136	; 0x88
 800c4a4:	0049      	lsls	r1, r1, #1
 800c4a6:	468c      	mov	ip, r1
 800c4a8:	44bc      	add	ip, r7
 800c4aa:	4462      	add	r2, ip
 800c4ac:	8812      	ldrh	r2, [r2, #0]
 800c4ae:	2110      	movs	r1, #16
 800c4b0:	404a      	eors	r2, r1
 800c4b2:	801a      	strh	r2, [r3, #0]
 800c4b4:	4b24      	ldr	r3, [pc, #144]	; (800c548 <USB_EPStartXfer+0xaf8>)
 800c4b6:	2288      	movs	r2, #136	; 0x88
 800c4b8:	0052      	lsls	r2, r2, #1
 800c4ba:	4694      	mov	ip, r2
 800c4bc:	44bc      	add	ip, r7
 800c4be:	4463      	add	r3, ip
 800c4c0:	4a21      	ldr	r2, [pc, #132]	; (800c548 <USB_EPStartXfer+0xaf8>)
 800c4c2:	2188      	movs	r1, #136	; 0x88
 800c4c4:	0049      	lsls	r1, r1, #1
 800c4c6:	468c      	mov	ip, r1
 800c4c8:	44bc      	add	ip, r7
 800c4ca:	4462      	add	r2, ip
 800c4cc:	8812      	ldrh	r2, [r2, #0]
 800c4ce:	2120      	movs	r1, #32
 800c4d0:	404a      	eors	r2, r1
 800c4d2:	801a      	strh	r2, [r3, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	18d3      	adds	r3, r2, r3
 800c4de:	4a1a      	ldr	r2, [pc, #104]	; (800c548 <USB_EPStartXfer+0xaf8>)
 800c4e0:	2188      	movs	r1, #136	; 0x88
 800c4e2:	0049      	lsls	r1, r1, #1
 800c4e4:	468c      	mov	ip, r1
 800c4e6:	44bc      	add	ip, r7
 800c4e8:	4462      	add	r2, ip
 800c4ea:	8812      	ldrh	r2, [r2, #0]
 800c4ec:	4918      	ldr	r1, [pc, #96]	; (800c550 <USB_EPStartXfer+0xb00>)
 800c4ee:	430a      	orrs	r2, r1
 800c4f0:	b292      	uxth	r2, r2
 800c4f2:	801a      	strh	r2, [r3, #0]
 800c4f4:	f000 fbc5 	bl	800cc82 <USB_EPStartXfer+0x1232>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	7b1b      	ldrb	r3, [r3, #12]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d000      	beq.n	800c502 <USB_EPStartXfer+0xab2>
 800c500:	e0a7      	b.n	800c652 <USB_EPStartXfer+0xc02>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	699a      	ldr	r2, [r3, #24]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d922      	bls.n	800c554 <USB_EPStartXfer+0xb04>
      {
        len = ep->maxpacket;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	2186      	movs	r1, #134	; 0x86
 800c514:	0049      	lsls	r1, r1, #1
 800c516:	187a      	adds	r2, r7, r1
 800c518:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	699a      	ldr	r2, [r3, #24]
 800c51e:	187b      	adds	r3, r7, r1
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	1ad2      	subs	r2, r2, r3
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	619a      	str	r2, [r3, #24]
 800c528:	e01d      	b.n	800c566 <USB_EPStartXfer+0xb16>
 800c52a:	46c0      	nop			; (mov r8, r8)
 800c52c:	00000406 	.word	0x00000406
 800c530:	ffff83ff 	.word	0xffff83ff
 800c534:	ffff8000 	.word	0xffff8000
 800c538:	00000402 	.word	0x00000402
 800c53c:	ffff8f8f 	.word	0xffff8f8f
 800c540:	ffff80c0 	.word	0xffff80c0
 800c544:	ffffc080 	.word	0xffffc080
 800c548:	fffffefe 	.word	0xfffffefe
 800c54c:	ffff8fbf 	.word	0xffff8fbf
 800c550:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	2286      	movs	r2, #134	; 0x86
 800c55a:	0052      	lsls	r2, r2, #1
 800c55c:	18ba      	adds	r2, r7, r2
 800c55e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2200      	movs	r2, #0
 800c564:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2194      	movs	r1, #148	; 0x94
 800c56a:	187a      	adds	r2, r7, r1
 800c56c:	6013      	str	r3, [r2, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2250      	movs	r2, #80	; 0x50
 800c572:	5a9b      	ldrh	r3, [r3, r2]
 800c574:	b29b      	uxth	r3, r3
 800c576:	001a      	movs	r2, r3
 800c578:	187b      	adds	r3, r7, r1
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	189b      	adds	r3, r3, r2
 800c57e:	187a      	adds	r2, r7, r1
 800c580:	6013      	str	r3, [r2, #0]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	00da      	lsls	r2, r3, #3
 800c588:	187b      	adds	r3, r7, r1
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	18d3      	adds	r3, r2, r3
 800c58e:	4abc      	ldr	r2, [pc, #752]	; (800c880 <USB_EPStartXfer+0xe30>)
 800c590:	4694      	mov	ip, r2
 800c592:	4463      	add	r3, ip
 800c594:	2190      	movs	r1, #144	; 0x90
 800c596:	187a      	adds	r2, r7, r1
 800c598:	6013      	str	r3, [r2, #0]
 800c59a:	2386      	movs	r3, #134	; 0x86
 800c59c:	005b      	lsls	r3, r3, #1
 800c59e:	18fb      	adds	r3, r7, r3
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d114      	bne.n	800c5d0 <USB_EPStartXfer+0xb80>
 800c5a6:	187b      	adds	r3, r7, r1
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	4ab5      	ldr	r2, [pc, #724]	; (800c884 <USB_EPStartXfer+0xe34>)
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	187b      	adds	r3, r7, r1
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	801a      	strh	r2, [r3, #0]
 800c5ba:	187b      	adds	r3, r7, r1
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	881b      	ldrh	r3, [r3, #0]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	4ab1      	ldr	r2, [pc, #708]	; (800c888 <USB_EPStartXfer+0xe38>)
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	187b      	adds	r3, r7, r1
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	801a      	strh	r2, [r3, #0]
 800c5ce:	e333      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
 800c5d0:	2286      	movs	r2, #134	; 0x86
 800c5d2:	0052      	lsls	r2, r2, #1
 800c5d4:	18bb      	adds	r3, r7, r2
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b3e      	cmp	r3, #62	; 0x3e
 800c5da:	d81a      	bhi.n	800c612 <USB_EPStartXfer+0xbc2>
 800c5dc:	18bb      	adds	r3, r7, r2
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	085b      	lsrs	r3, r3, #1
 800c5e2:	21ec      	movs	r1, #236	; 0xec
 800c5e4:	1878      	adds	r0, r7, r1
 800c5e6:	6003      	str	r3, [r0, #0]
 800c5e8:	18bb      	adds	r3, r7, r2
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	d004      	beq.n	800c5fc <USB_EPStartXfer+0xbac>
 800c5f2:	187b      	adds	r3, r7, r1
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	187a      	adds	r2, r7, r1
 800c5fa:	6013      	str	r3, [r2, #0]
 800c5fc:	23ec      	movs	r3, #236	; 0xec
 800c5fe:	18fb      	adds	r3, r7, r3
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	b29b      	uxth	r3, r3
 800c604:	029b      	lsls	r3, r3, #10
 800c606:	b29a      	uxth	r2, r3
 800c608:	2390      	movs	r3, #144	; 0x90
 800c60a:	18fb      	adds	r3, r7, r3
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	801a      	strh	r2, [r3, #0]
 800c610:	e312      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
 800c612:	2286      	movs	r2, #134	; 0x86
 800c614:	0052      	lsls	r2, r2, #1
 800c616:	18bb      	adds	r3, r7, r2
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	095b      	lsrs	r3, r3, #5
 800c61c:	21ec      	movs	r1, #236	; 0xec
 800c61e:	1878      	adds	r0, r7, r1
 800c620:	6003      	str	r3, [r0, #0]
 800c622:	18bb      	adds	r3, r7, r2
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	221f      	movs	r2, #31
 800c628:	4013      	ands	r3, r2
 800c62a:	d104      	bne.n	800c636 <USB_EPStartXfer+0xbe6>
 800c62c:	187b      	adds	r3, r7, r1
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3b01      	subs	r3, #1
 800c632:	187a      	adds	r2, r7, r1
 800c634:	6013      	str	r3, [r2, #0]
 800c636:	23ec      	movs	r3, #236	; 0xec
 800c638:	18fb      	adds	r3, r7, r3
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	029b      	lsls	r3, r3, #10
 800c640:	b29b      	uxth	r3, r3
 800c642:	4a91      	ldr	r2, [pc, #580]	; (800c888 <USB_EPStartXfer+0xe38>)
 800c644:	4313      	orrs	r3, r2
 800c646:	b29a      	uxth	r2, r3
 800c648:	2390      	movs	r3, #144	; 0x90
 800c64a:	18fb      	adds	r3, r7, r3
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	801a      	strh	r2, [r3, #0]
 800c650:	e2f2      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	78db      	ldrb	r3, [r3, #3]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d000      	beq.n	800c65c <USB_EPStartXfer+0xc0c>
 800c65a:	e179      	b.n	800c950 <USB_EPStartXfer+0xf00>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	785b      	ldrb	r3, [r3, #1]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d16f      	bne.n	800c744 <USB_EPStartXfer+0xcf4>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	21b0      	movs	r1, #176	; 0xb0
 800c668:	187a      	adds	r2, r7, r1
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2250      	movs	r2, #80	; 0x50
 800c670:	5a9b      	ldrh	r3, [r3, r2]
 800c672:	b29b      	uxth	r3, r3
 800c674:	001a      	movs	r2, r3
 800c676:	187b      	adds	r3, r7, r1
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	189b      	adds	r3, r3, r2
 800c67c:	187a      	adds	r2, r7, r1
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	00da      	lsls	r2, r3, #3
 800c686:	187b      	adds	r3, r7, r1
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	18d3      	adds	r3, r2, r3
 800c68c:	4a7f      	ldr	r2, [pc, #508]	; (800c88c <USB_EPStartXfer+0xe3c>)
 800c68e:	4694      	mov	ip, r2
 800c690:	4463      	add	r3, ip
 800c692:	21ac      	movs	r1, #172	; 0xac
 800c694:	187a      	adds	r2, r7, r1
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	691b      	ldr	r3, [r3, #16]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d114      	bne.n	800c6ca <USB_EPStartXfer+0xc7a>
 800c6a0:	187b      	adds	r3, r7, r1
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	881b      	ldrh	r3, [r3, #0]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	4a76      	ldr	r2, [pc, #472]	; (800c884 <USB_EPStartXfer+0xe34>)
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	187b      	adds	r3, r7, r1
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	801a      	strh	r2, [r3, #0]
 800c6b4:	187b      	adds	r3, r7, r1
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	4a72      	ldr	r2, [pc, #456]	; (800c888 <USB_EPStartXfer+0xe38>)
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	187b      	adds	r3, r7, r1
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	801a      	strh	r2, [r3, #0]
 800c6c8:	e060      	b.n	800c78c <USB_EPStartXfer+0xd3c>
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	2b3e      	cmp	r3, #62	; 0x3e
 800c6d0:	d81a      	bhi.n	800c708 <USB_EPStartXfer+0xcb8>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	085b      	lsrs	r3, r3, #1
 800c6d8:	21e8      	movs	r1, #232	; 0xe8
 800c6da:	187a      	adds	r2, r7, r1
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	d004      	beq.n	800c6f2 <USB_EPStartXfer+0xca2>
 800c6e8:	187b      	adds	r3, r7, r1
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	187a      	adds	r2, r7, r1
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	23e8      	movs	r3, #232	; 0xe8
 800c6f4:	18fb      	adds	r3, r7, r3
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	029b      	lsls	r3, r3, #10
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	23ac      	movs	r3, #172	; 0xac
 800c700:	18fb      	adds	r3, r7, r3
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	801a      	strh	r2, [r3, #0]
 800c706:	e041      	b.n	800c78c <USB_EPStartXfer+0xd3c>
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	095b      	lsrs	r3, r3, #5
 800c70e:	21e8      	movs	r1, #232	; 0xe8
 800c710:	187a      	adds	r2, r7, r1
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	221f      	movs	r2, #31
 800c71a:	4013      	ands	r3, r2
 800c71c:	d104      	bne.n	800c728 <USB_EPStartXfer+0xcd8>
 800c71e:	187b      	adds	r3, r7, r1
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3b01      	subs	r3, #1
 800c724:	187a      	adds	r2, r7, r1
 800c726:	6013      	str	r3, [r2, #0]
 800c728:	23e8      	movs	r3, #232	; 0xe8
 800c72a:	18fb      	adds	r3, r7, r3
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	b29b      	uxth	r3, r3
 800c730:	029b      	lsls	r3, r3, #10
 800c732:	b29b      	uxth	r3, r3
 800c734:	4a54      	ldr	r2, [pc, #336]	; (800c888 <USB_EPStartXfer+0xe38>)
 800c736:	4313      	orrs	r3, r2
 800c738:	b29a      	uxth	r2, r3
 800c73a:	23ac      	movs	r3, #172	; 0xac
 800c73c:	18fb      	adds	r3, r7, r3
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	801a      	strh	r2, [r3, #0]
 800c742:	e023      	b.n	800c78c <USB_EPStartXfer+0xd3c>
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d11f      	bne.n	800c78c <USB_EPStartXfer+0xd3c>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	21b8      	movs	r1, #184	; 0xb8
 800c750:	187a      	adds	r2, r7, r1
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2250      	movs	r2, #80	; 0x50
 800c758:	5a9b      	ldrh	r3, [r3, r2]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	001a      	movs	r2, r3
 800c75e:	187b      	adds	r3, r7, r1
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	189b      	adds	r3, r3, r2
 800c764:	187a      	adds	r2, r7, r1
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	00da      	lsls	r2, r3, #3
 800c76e:	187b      	adds	r3, r7, r1
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	18d3      	adds	r3, r2, r3
 800c774:	4a45      	ldr	r2, [pc, #276]	; (800c88c <USB_EPStartXfer+0xe3c>)
 800c776:	4694      	mov	ip, r2
 800c778:	4463      	add	r3, ip
 800c77a:	21b4      	movs	r1, #180	; 0xb4
 800c77c:	187a      	adds	r2, r7, r1
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	b29a      	uxth	r2, r3
 800c786:	187b      	adds	r3, r7, r1
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	801a      	strh	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	22a8      	movs	r2, #168	; 0xa8
 800c790:	18ba      	adds	r2, r7, r2
 800c792:	6013      	str	r3, [r2, #0]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d000      	beq.n	800c79e <USB_EPStartXfer+0xd4e>
 800c79c:	e078      	b.n	800c890 <USB_EPStartXfer+0xe40>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	21a0      	movs	r1, #160	; 0xa0
 800c7a2:	187a      	adds	r2, r7, r1
 800c7a4:	6013      	str	r3, [r2, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2250      	movs	r2, #80	; 0x50
 800c7aa:	5a9b      	ldrh	r3, [r3, r2]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	001a      	movs	r2, r3
 800c7b0:	187b      	adds	r3, r7, r1
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	189b      	adds	r3, r3, r2
 800c7b6:	187a      	adds	r2, r7, r1
 800c7b8:	6013      	str	r3, [r2, #0]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	00da      	lsls	r2, r3, #3
 800c7c0:	187b      	adds	r3, r7, r1
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	18d3      	adds	r3, r2, r3
 800c7c6:	4a2e      	ldr	r2, [pc, #184]	; (800c880 <USB_EPStartXfer+0xe30>)
 800c7c8:	4694      	mov	ip, r2
 800c7ca:	4463      	add	r3, ip
 800c7cc:	219c      	movs	r1, #156	; 0x9c
 800c7ce:	187a      	adds	r2, r7, r1
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d114      	bne.n	800c804 <USB_EPStartXfer+0xdb4>
 800c7da:	187b      	adds	r3, r7, r1
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	4a28      	ldr	r2, [pc, #160]	; (800c884 <USB_EPStartXfer+0xe34>)
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	187b      	adds	r3, r7, r1
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	801a      	strh	r2, [r3, #0]
 800c7ee:	187b      	adds	r3, r7, r1
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	4a24      	ldr	r2, [pc, #144]	; (800c888 <USB_EPStartXfer+0xe38>)
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	187b      	adds	r3, r7, r1
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	801a      	strh	r2, [r3, #0]
 800c802:	e066      	b.n	800c8d2 <USB_EPStartXfer+0xe82>
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	2b3e      	cmp	r3, #62	; 0x3e
 800c80a:	d81a      	bhi.n	800c842 <USB_EPStartXfer+0xdf2>
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	085b      	lsrs	r3, r3, #1
 800c812:	21e4      	movs	r1, #228	; 0xe4
 800c814:	187a      	adds	r2, r7, r1
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	2201      	movs	r2, #1
 800c81e:	4013      	ands	r3, r2
 800c820:	d004      	beq.n	800c82c <USB_EPStartXfer+0xddc>
 800c822:	187b      	adds	r3, r7, r1
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	3301      	adds	r3, #1
 800c828:	187a      	adds	r2, r7, r1
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	23e4      	movs	r3, #228	; 0xe4
 800c82e:	18fb      	adds	r3, r7, r3
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	b29b      	uxth	r3, r3
 800c834:	029b      	lsls	r3, r3, #10
 800c836:	b29a      	uxth	r2, r3
 800c838:	239c      	movs	r3, #156	; 0x9c
 800c83a:	18fb      	adds	r3, r7, r3
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	801a      	strh	r2, [r3, #0]
 800c840:	e047      	b.n	800c8d2 <USB_EPStartXfer+0xe82>
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	095b      	lsrs	r3, r3, #5
 800c848:	21e4      	movs	r1, #228	; 0xe4
 800c84a:	187a      	adds	r2, r7, r1
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	221f      	movs	r2, #31
 800c854:	4013      	ands	r3, r2
 800c856:	d104      	bne.n	800c862 <USB_EPStartXfer+0xe12>
 800c858:	187b      	adds	r3, r7, r1
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	187a      	adds	r2, r7, r1
 800c860:	6013      	str	r3, [r2, #0]
 800c862:	23e4      	movs	r3, #228	; 0xe4
 800c864:	18fb      	adds	r3, r7, r3
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	b29b      	uxth	r3, r3
 800c86a:	029b      	lsls	r3, r3, #10
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	4a06      	ldr	r2, [pc, #24]	; (800c888 <USB_EPStartXfer+0xe38>)
 800c870:	4313      	orrs	r3, r2
 800c872:	b29a      	uxth	r2, r3
 800c874:	239c      	movs	r3, #156	; 0x9c
 800c876:	18fb      	adds	r3, r7, r3
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	801a      	strh	r2, [r3, #0]
 800c87c:	e029      	b.n	800c8d2 <USB_EPStartXfer+0xe82>
 800c87e:	46c0      	nop			; (mov r8, r8)
 800c880:	00000406 	.word	0x00000406
 800c884:	ffff83ff 	.word	0xffff83ff
 800c888:	ffff8000 	.word	0xffff8000
 800c88c:	00000402 	.word	0x00000402
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	785b      	ldrb	r3, [r3, #1]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d11c      	bne.n	800c8d2 <USB_EPStartXfer+0xe82>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2250      	movs	r2, #80	; 0x50
 800c89c:	5a9b      	ldrh	r3, [r3, r2]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	001a      	movs	r2, r3
 800c8a2:	21a8      	movs	r1, #168	; 0xa8
 800c8a4:	187b      	adds	r3, r7, r1
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	189b      	adds	r3, r3, r2
 800c8aa:	187a      	adds	r2, r7, r1
 800c8ac:	6013      	str	r3, [r2, #0]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	00da      	lsls	r2, r3, #3
 800c8b4:	187b      	adds	r3, r7, r1
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	18d3      	adds	r3, r2, r3
 800c8ba:	4ad9      	ldr	r2, [pc, #868]	; (800cc20 <USB_EPStartXfer+0x11d0>)
 800c8bc:	4694      	mov	ip, r2
 800c8be:	4463      	add	r3, ip
 800c8c0:	21a4      	movs	r1, #164	; 0xa4
 800c8c2:	187a      	adds	r2, r7, r1
 800c8c4:	6013      	str	r3, [r2, #0]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	187b      	adds	r3, r7, r1
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d100      	bne.n	800c8dc <USB_EPStartXfer+0xe8c>
 800c8da:	e1ad      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	18d2      	adds	r2, r2, r3
 800c8e6:	219a      	movs	r1, #154	; 0x9a
 800c8e8:	187b      	adds	r3, r7, r1
 800c8ea:	8812      	ldrh	r2, [r2, #0]
 800c8ec:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c8ee:	187b      	adds	r3, r7, r1
 800c8f0:	881a      	ldrh	r2, [r3, #0]
 800c8f2:	2380      	movs	r3, #128	; 0x80
 800c8f4:	01db      	lsls	r3, r3, #7
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	d004      	beq.n	800c904 <USB_EPStartXfer+0xeb4>
 800c8fa:	187b      	adds	r3, r7, r1
 800c8fc:	881b      	ldrh	r3, [r3, #0]
 800c8fe:	2240      	movs	r2, #64	; 0x40
 800c900:	4013      	ands	r3, r2
 800c902:	d10d      	bne.n	800c920 <USB_EPStartXfer+0xed0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c904:	219a      	movs	r1, #154	; 0x9a
 800c906:	187b      	adds	r3, r7, r1
 800c908:	881a      	ldrh	r2, [r3, #0]
 800c90a:	2380      	movs	r3, #128	; 0x80
 800c90c:	01db      	lsls	r3, r3, #7
 800c90e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c910:	d000      	beq.n	800c914 <USB_EPStartXfer+0xec4>
 800c912:	e191      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c914:	187b      	adds	r3, r7, r1
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	2240      	movs	r2, #64	; 0x40
 800c91a:	4013      	ands	r3, r2
 800c91c:	d000      	beq.n	800c920 <USB_EPStartXfer+0xed0>
 800c91e:	e18b      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	18d3      	adds	r3, r2, r3
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	2098      	movs	r0, #152	; 0x98
 800c930:	183b      	adds	r3, r7, r0
 800c932:	49bc      	ldr	r1, [pc, #752]	; (800cc24 <USB_EPStartXfer+0x11d4>)
 800c934:	400a      	ands	r2, r1
 800c936:	801a      	strh	r2, [r3, #0]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	18d3      	adds	r3, r2, r3
 800c942:	183a      	adds	r2, r7, r0
 800c944:	8812      	ldrh	r2, [r2, #0]
 800c946:	49b8      	ldr	r1, [pc, #736]	; (800cc28 <USB_EPStartXfer+0x11d8>)
 800c948:	430a      	orrs	r2, r1
 800c94a:	b292      	uxth	r2, r2
 800c94c:	801a      	strh	r2, [r3, #0]
 800c94e:	e173      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	78db      	ldrb	r3, [r3, #3]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d000      	beq.n	800c95a <USB_EPStartXfer+0xf0a>
 800c958:	e160      	b.n	800cc1c <USB_EPStartXfer+0x11cc>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	699a      	ldr	r2, [r3, #24]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	429a      	cmp	r2, r3
 800c964:	d90d      	bls.n	800c982 <USB_EPStartXfer+0xf32>
        {
          len = ep->maxpacket;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	2186      	movs	r1, #134	; 0x86
 800c96c:	0049      	lsls	r1, r1, #1
 800c96e:	187a      	adds	r2, r7, r1
 800c970:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	187b      	adds	r3, r7, r1
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	1ad2      	subs	r2, r2, r3
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	619a      	str	r2, [r3, #24]
 800c980:	e008      	b.n	800c994 <USB_EPStartXfer+0xf44>
        }
        else
        {
          len = ep->xfer_len;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	2286      	movs	r2, #134	; 0x86
 800c988:	0052      	lsls	r2, r2, #1
 800c98a:	18ba      	adds	r2, r7, r2
 800c98c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2200      	movs	r2, #0
 800c992:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	785b      	ldrb	r3, [r3, #1]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d000      	beq.n	800c99e <USB_EPStartXfer+0xf4e>
 800c99c:	e075      	b.n	800ca8a <USB_EPStartXfer+0x103a>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	21d0      	movs	r1, #208	; 0xd0
 800c9a2:	187a      	adds	r2, r7, r1
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2250      	movs	r2, #80	; 0x50
 800c9aa:	5a9b      	ldrh	r3, [r3, r2]
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	001a      	movs	r2, r3
 800c9b0:	187b      	adds	r3, r7, r1
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	189b      	adds	r3, r3, r2
 800c9b6:	187a      	adds	r2, r7, r1
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	00da      	lsls	r2, r3, #3
 800c9c0:	187b      	adds	r3, r7, r1
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	18d3      	adds	r3, r2, r3
 800c9c6:	4a99      	ldr	r2, [pc, #612]	; (800cc2c <USB_EPStartXfer+0x11dc>)
 800c9c8:	4694      	mov	ip, r2
 800c9ca:	4463      	add	r3, ip
 800c9cc:	21cc      	movs	r1, #204	; 0xcc
 800c9ce:	187a      	adds	r2, r7, r1
 800c9d0:	6013      	str	r3, [r2, #0]
 800c9d2:	2386      	movs	r3, #134	; 0x86
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	18fb      	adds	r3, r7, r3
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d114      	bne.n	800ca08 <USB_EPStartXfer+0xfb8>
 800c9de:	187b      	adds	r3, r7, r1
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4a92      	ldr	r2, [pc, #584]	; (800cc30 <USB_EPStartXfer+0x11e0>)
 800c9e8:	4013      	ands	r3, r2
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	187b      	adds	r3, r7, r1
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	801a      	strh	r2, [r3, #0]
 800c9f2:	187b      	adds	r3, r7, r1
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	4a8e      	ldr	r2, [pc, #568]	; (800cc34 <USB_EPStartXfer+0x11e4>)
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	187b      	adds	r3, r7, r1
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	801a      	strh	r2, [r3, #0]
 800ca06:	e066      	b.n	800cad6 <USB_EPStartXfer+0x1086>
 800ca08:	2286      	movs	r2, #134	; 0x86
 800ca0a:	0052      	lsls	r2, r2, #1
 800ca0c:	18bb      	adds	r3, r7, r2
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b3e      	cmp	r3, #62	; 0x3e
 800ca12:	d81a      	bhi.n	800ca4a <USB_EPStartXfer+0xffa>
 800ca14:	18bb      	adds	r3, r7, r2
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	085b      	lsrs	r3, r3, #1
 800ca1a:	21e0      	movs	r1, #224	; 0xe0
 800ca1c:	1878      	adds	r0, r7, r1
 800ca1e:	6003      	str	r3, [r0, #0]
 800ca20:	18bb      	adds	r3, r7, r2
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2201      	movs	r2, #1
 800ca26:	4013      	ands	r3, r2
 800ca28:	d004      	beq.n	800ca34 <USB_EPStartXfer+0xfe4>
 800ca2a:	187b      	adds	r3, r7, r1
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	187a      	adds	r2, r7, r1
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	23e0      	movs	r3, #224	; 0xe0
 800ca36:	18fb      	adds	r3, r7, r3
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	029b      	lsls	r3, r3, #10
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	23cc      	movs	r3, #204	; 0xcc
 800ca42:	18fb      	adds	r3, r7, r3
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	801a      	strh	r2, [r3, #0]
 800ca48:	e045      	b.n	800cad6 <USB_EPStartXfer+0x1086>
 800ca4a:	2286      	movs	r2, #134	; 0x86
 800ca4c:	0052      	lsls	r2, r2, #1
 800ca4e:	18bb      	adds	r3, r7, r2
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	095b      	lsrs	r3, r3, #5
 800ca54:	21e0      	movs	r1, #224	; 0xe0
 800ca56:	1878      	adds	r0, r7, r1
 800ca58:	6003      	str	r3, [r0, #0]
 800ca5a:	18bb      	adds	r3, r7, r2
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	221f      	movs	r2, #31
 800ca60:	4013      	ands	r3, r2
 800ca62:	d104      	bne.n	800ca6e <USB_EPStartXfer+0x101e>
 800ca64:	187b      	adds	r3, r7, r1
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	187a      	adds	r2, r7, r1
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	23e0      	movs	r3, #224	; 0xe0
 800ca70:	18fb      	adds	r3, r7, r3
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	029b      	lsls	r3, r3, #10
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4a6e      	ldr	r2, [pc, #440]	; (800cc34 <USB_EPStartXfer+0x11e4>)
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	23cc      	movs	r3, #204	; 0xcc
 800ca82:	18fb      	adds	r3, r7, r3
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	801a      	strh	r2, [r3, #0]
 800ca88:	e025      	b.n	800cad6 <USB_EPStartXfer+0x1086>
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	785b      	ldrb	r3, [r3, #1]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d121      	bne.n	800cad6 <USB_EPStartXfer+0x1086>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	21d8      	movs	r1, #216	; 0xd8
 800ca96:	187a      	adds	r2, r7, r1
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2250      	movs	r2, #80	; 0x50
 800ca9e:	5a9b      	ldrh	r3, [r3, r2]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	001a      	movs	r2, r3
 800caa4:	187b      	adds	r3, r7, r1
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	189b      	adds	r3, r3, r2
 800caaa:	187a      	adds	r2, r7, r1
 800caac:	6013      	str	r3, [r2, #0]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	00da      	lsls	r2, r3, #3
 800cab4:	187b      	adds	r3, r7, r1
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	18d3      	adds	r3, r2, r3
 800caba:	4a5c      	ldr	r2, [pc, #368]	; (800cc2c <USB_EPStartXfer+0x11dc>)
 800cabc:	4694      	mov	ip, r2
 800cabe:	4463      	add	r3, ip
 800cac0:	21d4      	movs	r1, #212	; 0xd4
 800cac2:	187a      	adds	r2, r7, r1
 800cac4:	6013      	str	r3, [r2, #0]
 800cac6:	2386      	movs	r3, #134	; 0x86
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	18fb      	adds	r3, r7, r3
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	b29a      	uxth	r2, r3
 800cad0:	187b      	adds	r3, r7, r1
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	801a      	strh	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	22c8      	movs	r2, #200	; 0xc8
 800cada:	18ba      	adds	r2, r7, r2
 800cadc:	6013      	str	r3, [r2, #0]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d000      	beq.n	800cae8 <USB_EPStartXfer+0x1098>
 800cae6:	e075      	b.n	800cbd4 <USB_EPStartXfer+0x1184>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	21c0      	movs	r1, #192	; 0xc0
 800caec:	187a      	adds	r2, r7, r1
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2250      	movs	r2, #80	; 0x50
 800caf4:	5a9b      	ldrh	r3, [r3, r2]
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	001a      	movs	r2, r3
 800cafa:	187b      	adds	r3, r7, r1
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	189b      	adds	r3, r3, r2
 800cb00:	187a      	adds	r2, r7, r1
 800cb02:	6013      	str	r3, [r2, #0]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	00da      	lsls	r2, r3, #3
 800cb0a:	187b      	adds	r3, r7, r1
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	18d3      	adds	r3, r2, r3
 800cb10:	4a43      	ldr	r2, [pc, #268]	; (800cc20 <USB_EPStartXfer+0x11d0>)
 800cb12:	4694      	mov	ip, r2
 800cb14:	4463      	add	r3, ip
 800cb16:	21bc      	movs	r1, #188	; 0xbc
 800cb18:	187a      	adds	r2, r7, r1
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	2386      	movs	r3, #134	; 0x86
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	18fb      	adds	r3, r7, r3
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d114      	bne.n	800cb52 <USB_EPStartXfer+0x1102>
 800cb28:	187b      	adds	r3, r7, r1
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	4a3f      	ldr	r2, [pc, #252]	; (800cc30 <USB_EPStartXfer+0x11e0>)
 800cb32:	4013      	ands	r3, r2
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	187b      	adds	r3, r7, r1
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	801a      	strh	r2, [r3, #0]
 800cb3c:	187b      	adds	r3, r7, r1
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	4a3b      	ldr	r2, [pc, #236]	; (800cc34 <USB_EPStartXfer+0x11e4>)
 800cb46:	4313      	orrs	r3, r2
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	187b      	adds	r3, r7, r1
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	801a      	strh	r2, [r3, #0]
 800cb50:	e072      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
 800cb52:	2286      	movs	r2, #134	; 0x86
 800cb54:	0052      	lsls	r2, r2, #1
 800cb56:	18bb      	adds	r3, r7, r2
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b3e      	cmp	r3, #62	; 0x3e
 800cb5c:	d81a      	bhi.n	800cb94 <USB_EPStartXfer+0x1144>
 800cb5e:	18bb      	adds	r3, r7, r2
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	085b      	lsrs	r3, r3, #1
 800cb64:	21dc      	movs	r1, #220	; 0xdc
 800cb66:	1878      	adds	r0, r7, r1
 800cb68:	6003      	str	r3, [r0, #0]
 800cb6a:	18bb      	adds	r3, r7, r2
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	4013      	ands	r3, r2
 800cb72:	d004      	beq.n	800cb7e <USB_EPStartXfer+0x112e>
 800cb74:	187b      	adds	r3, r7, r1
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	187a      	adds	r2, r7, r1
 800cb7c:	6013      	str	r3, [r2, #0]
 800cb7e:	23dc      	movs	r3, #220	; 0xdc
 800cb80:	18fb      	adds	r3, r7, r3
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	029b      	lsls	r3, r3, #10
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	23bc      	movs	r3, #188	; 0xbc
 800cb8c:	18fb      	adds	r3, r7, r3
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	801a      	strh	r2, [r3, #0]
 800cb92:	e051      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
 800cb94:	2286      	movs	r2, #134	; 0x86
 800cb96:	0052      	lsls	r2, r2, #1
 800cb98:	18bb      	adds	r3, r7, r2
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	095b      	lsrs	r3, r3, #5
 800cb9e:	21dc      	movs	r1, #220	; 0xdc
 800cba0:	1878      	adds	r0, r7, r1
 800cba2:	6003      	str	r3, [r0, #0]
 800cba4:	18bb      	adds	r3, r7, r2
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	221f      	movs	r2, #31
 800cbaa:	4013      	ands	r3, r2
 800cbac:	d104      	bne.n	800cbb8 <USB_EPStartXfer+0x1168>
 800cbae:	187b      	adds	r3, r7, r1
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	187a      	adds	r2, r7, r1
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	23dc      	movs	r3, #220	; 0xdc
 800cbba:	18fb      	adds	r3, r7, r3
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	029b      	lsls	r3, r3, #10
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	4a1b      	ldr	r2, [pc, #108]	; (800cc34 <USB_EPStartXfer+0x11e4>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	23bc      	movs	r3, #188	; 0xbc
 800cbcc:	18fb      	adds	r3, r7, r3
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	801a      	strh	r2, [r3, #0]
 800cbd2:	e031      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	785b      	ldrb	r3, [r3, #1]
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d12d      	bne.n	800cc38 <USB_EPStartXfer+0x11e8>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2250      	movs	r2, #80	; 0x50
 800cbe0:	5a9b      	ldrh	r3, [r3, r2]
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	001a      	movs	r2, r3
 800cbe6:	21c8      	movs	r1, #200	; 0xc8
 800cbe8:	187b      	adds	r3, r7, r1
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	189b      	adds	r3, r3, r2
 800cbee:	187a      	adds	r2, r7, r1
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	00da      	lsls	r2, r3, #3
 800cbf8:	187b      	adds	r3, r7, r1
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	18d3      	adds	r3, r2, r3
 800cbfe:	4a08      	ldr	r2, [pc, #32]	; (800cc20 <USB_EPStartXfer+0x11d0>)
 800cc00:	4694      	mov	ip, r2
 800cc02:	4463      	add	r3, ip
 800cc04:	21c4      	movs	r1, #196	; 0xc4
 800cc06:	187a      	adds	r2, r7, r1
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	2386      	movs	r3, #134	; 0x86
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	18fb      	adds	r3, r7, r3
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	187b      	adds	r3, r7, r1
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	801a      	strh	r2, [r3, #0]
 800cc1a:	e00d      	b.n	800cc38 <USB_EPStartXfer+0x11e8>
      }
      else
      {
        return HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e031      	b.n	800cc84 <USB_EPStartXfer+0x1234>
 800cc20:	00000406 	.word	0x00000406
 800cc24:	ffff8f8f 	.word	0xffff8f8f
 800cc28:	ffff80c0 	.word	0xffff80c0
 800cc2c:	00000402 	.word	0x00000402
 800cc30:	ffff83ff 	.word	0xffff83ff
 800cc34:	ffff8000 	.word	0xffff8000
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	18d3      	adds	r3, r2, r3
 800cc42:	881b      	ldrh	r3, [r3, #0]
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	208e      	movs	r0, #142	; 0x8e
 800cc48:	183b      	adds	r3, r7, r0
 800cc4a:	4910      	ldr	r1, [pc, #64]	; (800cc8c <USB_EPStartXfer+0x123c>)
 800cc4c:	400a      	ands	r2, r1
 800cc4e:	801a      	strh	r2, [r3, #0]
 800cc50:	183b      	adds	r3, r7, r0
 800cc52:	183a      	adds	r2, r7, r0
 800cc54:	8812      	ldrh	r2, [r2, #0]
 800cc56:	2180      	movs	r1, #128	; 0x80
 800cc58:	0149      	lsls	r1, r1, #5
 800cc5a:	404a      	eors	r2, r1
 800cc5c:	801a      	strh	r2, [r3, #0]
 800cc5e:	183b      	adds	r3, r7, r0
 800cc60:	183a      	adds	r2, r7, r0
 800cc62:	8812      	ldrh	r2, [r2, #0]
 800cc64:	2180      	movs	r1, #128	; 0x80
 800cc66:	0189      	lsls	r1, r1, #6
 800cc68:	404a      	eors	r2, r1
 800cc6a:	801a      	strh	r2, [r3, #0]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	18d3      	adds	r3, r2, r3
 800cc76:	183a      	adds	r2, r7, r0
 800cc78:	8812      	ldrh	r2, [r2, #0]
 800cc7a:	4905      	ldr	r1, [pc, #20]	; (800cc90 <USB_EPStartXfer+0x1240>)
 800cc7c:	430a      	orrs	r2, r1
 800cc7e:	b292      	uxth	r2, r2
 800cc80:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	0018      	movs	r0, r3
 800cc86:	46bd      	mov	sp, r7
 800cc88:	b044      	add	sp, #272	; 0x110
 800cc8a:	bdb0      	pop	{r4, r5, r7, pc}
 800cc8c:	ffffbf8f 	.word	0xffffbf8f
 800cc90:	ffff8080 	.word	0xffff8080

0800cc94 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	785b      	ldrb	r3, [r3, #1]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d01d      	beq.n	800cce2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	18d3      	adds	r3, r2, r3
 800ccb0:	881b      	ldrh	r3, [r3, #0]
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	200c      	movs	r0, #12
 800ccb6:	183b      	adds	r3, r7, r0
 800ccb8:	491b      	ldr	r1, [pc, #108]	; (800cd28 <USB_EPSetStall+0x94>)
 800ccba:	400a      	ands	r2, r1
 800ccbc:	801a      	strh	r2, [r3, #0]
 800ccbe:	183b      	adds	r3, r7, r0
 800ccc0:	183a      	adds	r2, r7, r0
 800ccc2:	8812      	ldrh	r2, [r2, #0]
 800ccc4:	2110      	movs	r1, #16
 800ccc6:	404a      	eors	r2, r1
 800ccc8:	801a      	strh	r2, [r3, #0]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	18d3      	adds	r3, r2, r3
 800ccd4:	183a      	adds	r2, r7, r0
 800ccd6:	8812      	ldrh	r2, [r2, #0]
 800ccd8:	4914      	ldr	r1, [pc, #80]	; (800cd2c <USB_EPSetStall+0x98>)
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	b292      	uxth	r2, r2
 800ccde:	801a      	strh	r2, [r3, #0]
 800cce0:	e01d      	b.n	800cd1e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	18d3      	adds	r3, r2, r3
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	200e      	movs	r0, #14
 800ccf2:	183b      	adds	r3, r7, r0
 800ccf4:	490e      	ldr	r1, [pc, #56]	; (800cd30 <USB_EPSetStall+0x9c>)
 800ccf6:	400a      	ands	r2, r1
 800ccf8:	801a      	strh	r2, [r3, #0]
 800ccfa:	183b      	adds	r3, r7, r0
 800ccfc:	183a      	adds	r2, r7, r0
 800ccfe:	8812      	ldrh	r2, [r2, #0]
 800cd00:	2180      	movs	r1, #128	; 0x80
 800cd02:	0149      	lsls	r1, r1, #5
 800cd04:	404a      	eors	r2, r1
 800cd06:	801a      	strh	r2, [r3, #0]
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	18d3      	adds	r3, r2, r3
 800cd12:	183a      	adds	r2, r7, r0
 800cd14:	8812      	ldrh	r2, [r2, #0]
 800cd16:	4905      	ldr	r1, [pc, #20]	; (800cd2c <USB_EPSetStall+0x98>)
 800cd18:	430a      	orrs	r2, r1
 800cd1a:	b292      	uxth	r2, r2
 800cd1c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800cd1e:	2300      	movs	r3, #0
}
 800cd20:	0018      	movs	r0, r3
 800cd22:	46bd      	mov	sp, r7
 800cd24:	b004      	add	sp, #16
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	ffff8fbf 	.word	0xffff8fbf
 800cd2c:	ffff8080 	.word	0xffff8080
 800cd30:	ffffbf8f 	.word	0xffffbf8f

0800cd34 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	7b1b      	ldrb	r3, [r3, #12]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d000      	beq.n	800cd48 <USB_EPClearStall+0x14>
 800cd46:	e095      	b.n	800ce74 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	785b      	ldrb	r3, [r3, #1]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d046      	beq.n	800cdde <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	18d2      	adds	r2, r2, r3
 800cd5a:	2110      	movs	r1, #16
 800cd5c:	187b      	adds	r3, r7, r1
 800cd5e:	8812      	ldrh	r2, [r2, #0]
 800cd60:	801a      	strh	r2, [r3, #0]
 800cd62:	187b      	adds	r3, r7, r1
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	2240      	movs	r2, #64	; 0x40
 800cd68:	4013      	ands	r3, r2
 800cd6a:	d016      	beq.n	800cd9a <USB_EPClearStall+0x66>
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	18d3      	adds	r3, r2, r3
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	200e      	movs	r0, #14
 800cd7c:	183b      	adds	r3, r7, r0
 800cd7e:	4940      	ldr	r1, [pc, #256]	; (800ce80 <USB_EPClearStall+0x14c>)
 800cd80:	400a      	ands	r2, r1
 800cd82:	801a      	strh	r2, [r3, #0]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	18d3      	adds	r3, r2, r3
 800cd8e:	183a      	adds	r2, r7, r0
 800cd90:	8812      	ldrh	r2, [r2, #0]
 800cd92:	493c      	ldr	r1, [pc, #240]	; (800ce84 <USB_EPClearStall+0x150>)
 800cd94:	430a      	orrs	r2, r1
 800cd96:	b292      	uxth	r2, r2
 800cd98:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	78db      	ldrb	r3, [r3, #3]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d068      	beq.n	800ce74 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	18d3      	adds	r3, r2, r3
 800cdac:	881b      	ldrh	r3, [r3, #0]
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	200c      	movs	r0, #12
 800cdb2:	183b      	adds	r3, r7, r0
 800cdb4:	4934      	ldr	r1, [pc, #208]	; (800ce88 <USB_EPClearStall+0x154>)
 800cdb6:	400a      	ands	r2, r1
 800cdb8:	801a      	strh	r2, [r3, #0]
 800cdba:	183b      	adds	r3, r7, r0
 800cdbc:	183a      	adds	r2, r7, r0
 800cdbe:	8812      	ldrh	r2, [r2, #0]
 800cdc0:	2120      	movs	r1, #32
 800cdc2:	404a      	eors	r2, r1
 800cdc4:	801a      	strh	r2, [r3, #0]
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	18d3      	adds	r3, r2, r3
 800cdd0:	183a      	adds	r2, r7, r0
 800cdd2:	8812      	ldrh	r2, [r2, #0]
 800cdd4:	492d      	ldr	r1, [pc, #180]	; (800ce8c <USB_EPClearStall+0x158>)
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	b292      	uxth	r2, r2
 800cdda:	801a      	strh	r2, [r3, #0]
 800cddc:	e04a      	b.n	800ce74 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	18d2      	adds	r2, r2, r3
 800cde8:	2116      	movs	r1, #22
 800cdea:	187b      	adds	r3, r7, r1
 800cdec:	8812      	ldrh	r2, [r2, #0]
 800cdee:	801a      	strh	r2, [r3, #0]
 800cdf0:	187b      	adds	r3, r7, r1
 800cdf2:	881a      	ldrh	r2, [r3, #0]
 800cdf4:	2380      	movs	r3, #128	; 0x80
 800cdf6:	01db      	lsls	r3, r3, #7
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	d016      	beq.n	800ce2a <USB_EPClearStall+0xf6>
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	18d3      	adds	r3, r2, r3
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	2014      	movs	r0, #20
 800ce0c:	183b      	adds	r3, r7, r0
 800ce0e:	491c      	ldr	r1, [pc, #112]	; (800ce80 <USB_EPClearStall+0x14c>)
 800ce10:	400a      	ands	r2, r1
 800ce12:	801a      	strh	r2, [r3, #0]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	18d3      	adds	r3, r2, r3
 800ce1e:	183a      	adds	r2, r7, r0
 800ce20:	8812      	ldrh	r2, [r2, #0]
 800ce22:	491b      	ldr	r1, [pc, #108]	; (800ce90 <USB_EPClearStall+0x15c>)
 800ce24:	430a      	orrs	r2, r1
 800ce26:	b292      	uxth	r2, r2
 800ce28:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	18d3      	adds	r3, r2, r3
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	2012      	movs	r0, #18
 800ce3a:	183b      	adds	r3, r7, r0
 800ce3c:	4915      	ldr	r1, [pc, #84]	; (800ce94 <USB_EPClearStall+0x160>)
 800ce3e:	400a      	ands	r2, r1
 800ce40:	801a      	strh	r2, [r3, #0]
 800ce42:	183b      	adds	r3, r7, r0
 800ce44:	183a      	adds	r2, r7, r0
 800ce46:	8812      	ldrh	r2, [r2, #0]
 800ce48:	2180      	movs	r1, #128	; 0x80
 800ce4a:	0149      	lsls	r1, r1, #5
 800ce4c:	404a      	eors	r2, r1
 800ce4e:	801a      	strh	r2, [r3, #0]
 800ce50:	183b      	adds	r3, r7, r0
 800ce52:	183a      	adds	r2, r7, r0
 800ce54:	8812      	ldrh	r2, [r2, #0]
 800ce56:	2180      	movs	r1, #128	; 0x80
 800ce58:	0189      	lsls	r1, r1, #6
 800ce5a:	404a      	eors	r2, r1
 800ce5c:	801a      	strh	r2, [r3, #0]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	18d3      	adds	r3, r2, r3
 800ce68:	183a      	adds	r2, r7, r0
 800ce6a:	8812      	ldrh	r2, [r2, #0]
 800ce6c:	4907      	ldr	r1, [pc, #28]	; (800ce8c <USB_EPClearStall+0x158>)
 800ce6e:	430a      	orrs	r2, r1
 800ce70:	b292      	uxth	r2, r2
 800ce72:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	0018      	movs	r0, r3
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	b006      	add	sp, #24
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	46c0      	nop			; (mov r8, r8)
 800ce80:	ffff8f8f 	.word	0xffff8f8f
 800ce84:	ffff80c0 	.word	0xffff80c0
 800ce88:	ffff8fbf 	.word	0xffff8fbf
 800ce8c:	ffff8080 	.word	0xffff8080
 800ce90:	ffffc080 	.word	0xffffc080
 800ce94:	ffffbf8f 	.word	0xffffbf8f

0800ce98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	000a      	movs	r2, r1
 800cea2:	1cfb      	adds	r3, r7, #3
 800cea4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800cea6:	1cfb      	adds	r3, r7, #3
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d103      	bne.n	800ceb6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	224c      	movs	r2, #76	; 0x4c
 800ceb2:	2180      	movs	r1, #128	; 0x80
 800ceb4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	0018      	movs	r0, r3
 800ceba:	46bd      	mov	sp, r7
 800cebc:	b002      	add	sp, #8
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2258      	movs	r2, #88	; 0x58
 800cecc:	5a9b      	ldrh	r3, [r3, r2]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	4a05      	ldr	r2, [pc, #20]	; (800cee8 <USB_DevConnect+0x28>)
 800ced2:	4313      	orrs	r3, r2
 800ced4:	b299      	uxth	r1, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2258      	movs	r2, #88	; 0x58
 800ceda:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	0018      	movs	r0, r3
 800cee0:	46bd      	mov	sp, r7
 800cee2:	b002      	add	sp, #8
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	46c0      	nop			; (mov r8, r8)
 800cee8:	ffff8000 	.word	0xffff8000

0800ceec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2244      	movs	r2, #68	; 0x44
 800cef8:	5a9b      	ldrh	r3, [r3, r2]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cefe:	68fb      	ldr	r3, [r7, #12]
}
 800cf00:	0018      	movs	r0, r3
 800cf02:	46bd      	mov	sp, r7
 800cf04:	b004      	add	sp, #16
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08c      	sub	sp, #48	; 0x30
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	0019      	movs	r1, r3
 800cf14:	1dbb      	adds	r3, r7, #6
 800cf16:	801a      	strh	r2, [r3, #0]
 800cf18:	1d3b      	adds	r3, r7, #4
 800cf1a:	1c0a      	adds	r2, r1, #0
 800cf1c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cf1e:	1d3b      	adds	r3, r7, #4
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	3301      	adds	r3, #1
 800cf24:	085b      	lsrs	r3, r3, #1
 800cf26:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf30:	1dbb      	adds	r3, r7, #6
 800cf32:	881a      	ldrh	r2, [r3, #0]
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	18d3      	adds	r3, r2, r3
 800cf38:	2280      	movs	r2, #128	; 0x80
 800cf3a:	00d2      	lsls	r2, r2, #3
 800cf3c:	4694      	mov	ip, r2
 800cf3e:	4463      	add	r3, ip
 800cf40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf46:	e01b      	b.n	800cf80 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf50:	3301      	adds	r3, #1
 800cf52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	021b      	lsls	r3, r3, #8
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	001a      	movs	r2, r3
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	3302      	adds	r3, #2
 800cf72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	3301      	adds	r3, #1
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800cf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1e0      	bne.n	800cf48 <USB_WritePMA+0x40>
  }
}
 800cf86:	46c0      	nop			; (mov r8, r8)
 800cf88:	46c0      	nop			; (mov r8, r8)
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	b00c      	add	sp, #48	; 0x30
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08a      	sub	sp, #40	; 0x28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	0019      	movs	r1, r3
 800cf9c:	1dbb      	adds	r3, r7, #6
 800cf9e:	801a      	strh	r2, [r3, #0]
 800cfa0:	1d3b      	adds	r3, r7, #4
 800cfa2:	1c0a      	adds	r2, r1, #0
 800cfa4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cfa6:	1d3b      	adds	r3, r7, #4
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	085b      	lsrs	r3, r3, #1
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cfb8:	1dbb      	adds	r3, r7, #6
 800cfba:	881a      	ldrh	r2, [r3, #0]
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	18d3      	adds	r3, r2, r3
 800cfc0:	2280      	movs	r2, #128	; 0x80
 800cfc2:	00d2      	lsls	r2, r2, #3
 800cfc4:	4694      	mov	ip, r2
 800cfc6:	4463      	add	r3, ip
 800cfc8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
 800cfce:	e018      	b.n	800d002 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800cfd0:	6a3b      	ldr	r3, [r7, #32]
 800cfd2:	881b      	ldrh	r3, [r3, #0]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	3302      	adds	r3, #2
 800cfdc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	b2da      	uxtb	r2, r3
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	0a1b      	lsrs	r3, r3, #8
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	3301      	adds	r3, #1
 800cffa:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	3b01      	subs	r3, #1
 800d000:	627b      	str	r3, [r7, #36]	; 0x24
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1e3      	bne.n	800cfd0 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800d008:	1d3b      	adds	r3, r7, #4
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	2201      	movs	r2, #1
 800d00e:	4013      	ands	r3, r2
 800d010:	b29b      	uxth	r3, r3
 800d012:	2b00      	cmp	r3, #0
 800d014:	d007      	beq.n	800d026 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	b2da      	uxtb	r2, r3
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	701a      	strb	r2, [r3, #0]
  }
}
 800d026:	46c0      	nop			; (mov r8, r8)
 800d028:	46bd      	mov	sp, r7
 800d02a:	b00a      	add	sp, #40	; 0x28
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b084      	sub	sp, #16
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	000a      	movs	r2, r1
 800d038:	1cfb      	adds	r3, r7, #3
 800d03a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800d03c:	230f      	movs	r3, #15
 800d03e:	18fb      	adds	r3, r7, r3
 800d040:	2200      	movs	r2, #0
 800d042:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	7c1b      	ldrb	r3, [r3, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d116      	bne.n	800d07a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d04c:	2380      	movs	r3, #128	; 0x80
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	2202      	movs	r2, #2
 800d054:	2181      	movs	r1, #129	; 0x81
 800d056:	f002 f898 	bl	800f18a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2201      	movs	r2, #1
 800d05e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d060:	2380      	movs	r3, #128	; 0x80
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	2202      	movs	r2, #2
 800d068:	2101      	movs	r1, #1
 800d06a:	f002 f88e 	bl	800f18a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	23b6      	movs	r3, #182	; 0xb6
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	2101      	movs	r1, #1
 800d076:	50d1      	str	r1, [r2, r3]
 800d078:	e013      	b.n	800d0a2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	2340      	movs	r3, #64	; 0x40
 800d07e:	2202      	movs	r2, #2
 800d080:	2181      	movs	r1, #129	; 0x81
 800d082:	f002 f882 	bl	800f18a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	2340      	movs	r3, #64	; 0x40
 800d090:	2202      	movs	r2, #2
 800d092:	2101      	movs	r1, #1
 800d094:	f002 f879 	bl	800f18a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	23b6      	movs	r3, #182	; 0xb6
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	2101      	movs	r1, #1
 800d0a0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	2308      	movs	r3, #8
 800d0a6:	2203      	movs	r2, #3
 800d0a8:	2182      	movs	r1, #130	; 0x82
 800d0aa:	f002 f86e 	bl	800f18a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d0b4:	2387      	movs	r3, #135	; 0x87
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	f002 f9ff 	bl	800f4bc <USBD_static_malloc>
 800d0be:	0001      	movs	r1, r0
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	23ae      	movs	r3, #174	; 0xae
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	23ae      	movs	r3, #174	; 0xae
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	58d3      	ldr	r3, [r2, r3]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d104      	bne.n	800d0de <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800d0d4:	230f      	movs	r3, #15
 800d0d6:	18fb      	adds	r3, r7, r3
 800d0d8:	2201      	movs	r2, #1
 800d0da:	701a      	strb	r2, [r3, #0]
 800d0dc:	e02c      	b.n	800d138 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	23ae      	movs	r3, #174	; 0xae
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	58d3      	ldr	r3, [r2, r3]
 800d0e6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	23af      	movs	r3, #175	; 0xaf
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	58d3      	ldr	r3, [r2, r3]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d0f4:	68ba      	ldr	r2, [r7, #8]
 800d0f6:	2385      	movs	r3, #133	; 0x85
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	2386      	movs	r3, #134	; 0x86
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	2100      	movs	r1, #0
 800d106:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	7c1b      	ldrb	r3, [r3, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10a      	bne.n	800d126 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	2381      	movs	r3, #129	; 0x81
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	58d2      	ldr	r2, [r2, r3]
 800d118:	2380      	movs	r3, #128	; 0x80
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	2101      	movs	r1, #1
 800d120:	f002 f97e 	bl	800f420 <USBD_LL_PrepareReceive>
 800d124:	e008      	b.n	800d138 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	2381      	movs	r3, #129	; 0x81
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	58d2      	ldr	r2, [r2, r3]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	2340      	movs	r3, #64	; 0x40
 800d132:	2101      	movs	r1, #1
 800d134:	f002 f974 	bl	800f420 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d138:	230f      	movs	r3, #15
 800d13a:	18fb      	adds	r3, r7, r3
 800d13c:	781b      	ldrb	r3, [r3, #0]
}
 800d13e:	0018      	movs	r0, r3
 800d140:	46bd      	mov	sp, r7
 800d142:	b004      	add	sp, #16
 800d144:	bd80      	pop	{r7, pc}

0800d146 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	000a      	movs	r2, r1
 800d150:	1cfb      	adds	r3, r7, #3
 800d152:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800d154:	230f      	movs	r3, #15
 800d156:	18fb      	adds	r3, r7, r3
 800d158:	2200      	movs	r2, #0
 800d15a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2181      	movs	r1, #129	; 0x81
 800d160:	0018      	movs	r0, r3
 800d162:	f002 f849 	bl	800f1f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2101      	movs	r1, #1
 800d170:	0018      	movs	r0, r3
 800d172:	f002 f841 	bl	800f1f8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	23b6      	movs	r3, #182	; 0xb6
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	2100      	movs	r1, #0
 800d17e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2182      	movs	r1, #130	; 0x82
 800d184:	0018      	movs	r0, r3
 800d186:	f002 f837 	bl	800f1f8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	23ae      	movs	r3, #174	; 0xae
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	58d3      	ldr	r3, [r2, r3]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d011      	beq.n	800d1c0 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	23af      	movs	r3, #175	; 0xaf
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	58d3      	ldr	r3, [r2, r3]
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	23ae      	movs	r3, #174	; 0xae
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	58d3      	ldr	r3, [r2, r3]
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	f002 f98f 	bl	800f4d4 <USBD_static_free>
    pdev->pClassData = NULL;
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	23ae      	movs	r3, #174	; 0xae
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	2100      	movs	r1, #0
 800d1be:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800d1c0:	230f      	movs	r3, #15
 800d1c2:	18fb      	adds	r3, r7, r3
 800d1c4:	781b      	ldrb	r3, [r3, #0]
}
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	b004      	add	sp, #16
 800d1cc:	bd80      	pop	{r7, pc}
	...

0800d1d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	23ae      	movs	r3, #174	; 0xae
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	58d3      	ldr	r3, [r2, r3]
 800d1e2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d1e4:	230f      	movs	r3, #15
 800d1e6:	18fb      	adds	r3, r7, r3
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800d1ec:	230c      	movs	r3, #12
 800d1ee:	18fb      	adds	r3, r7, r3
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800d1f4:	2317      	movs	r3, #23
 800d1f6:	18fb      	adds	r3, r7, r3
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	001a      	movs	r2, r3
 800d202:	2360      	movs	r3, #96	; 0x60
 800d204:	4013      	ands	r3, r2
 800d206:	d03d      	beq.n	800d284 <USBD_CDC_Setup+0xb4>
 800d208:	2b20      	cmp	r3, #32
 800d20a:	d000      	beq.n	800d20e <USBD_CDC_Setup+0x3e>
 800d20c:	e094      	b.n	800d338 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	88db      	ldrh	r3, [r3, #6]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d02b      	beq.n	800d26e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	b25b      	sxtb	r3, r3
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	da12      	bge.n	800d246 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	23af      	movs	r3, #175	; 0xaf
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	58d3      	ldr	r3, [r2, r3]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d22e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	88d2      	ldrh	r2, [r2, #6]
 800d234:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d236:	6939      	ldr	r1, [r7, #16]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	88da      	ldrh	r2, [r3, #6]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	0018      	movs	r0, r3
 800d240:	f001 fbb2 	bl	800e9a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d244:	e083      	b.n	800d34e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	7859      	ldrb	r1, [r3, #1]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	2380      	movs	r3, #128	; 0x80
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	88db      	ldrh	r3, [r3, #6]
 800d256:	b2d9      	uxtb	r1, r3
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	4a40      	ldr	r2, [pc, #256]	; (800d35c <USBD_CDC_Setup+0x18c>)
 800d25c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d25e:	6939      	ldr	r1, [r7, #16]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	88da      	ldrh	r2, [r3, #6]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	0018      	movs	r0, r3
 800d268:	f001 fbd1 	bl	800ea0e <USBD_CtlPrepareRx>
      break;
 800d26c:	e06f      	b.n	800d34e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	23af      	movs	r3, #175	; 0xaf
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	58d3      	ldr	r3, [r2, r3]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	683a      	ldr	r2, [r7, #0]
 800d27a:	7850      	ldrb	r0, [r2, #1]
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	2200      	movs	r2, #0
 800d280:	4798      	blx	r3
      break;
 800d282:	e064      	b.n	800d34e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	785b      	ldrb	r3, [r3, #1]
 800d288:	2b0b      	cmp	r3, #11
 800d28a:	d037      	beq.n	800d2fc <USBD_CDC_Setup+0x12c>
 800d28c:	dc47      	bgt.n	800d31e <USBD_CDC_Setup+0x14e>
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d002      	beq.n	800d298 <USBD_CDC_Setup+0xc8>
 800d292:	2b0a      	cmp	r3, #10
 800d294:	d019      	beq.n	800d2ca <USBD_CDC_Setup+0xfa>
 800d296:	e042      	b.n	800d31e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	23a7      	movs	r3, #167	; 0xa7
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	5cd3      	ldrb	r3, [r2, r3]
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d107      	bne.n	800d2b4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d2a4:	230c      	movs	r3, #12
 800d2a6:	18f9      	adds	r1, r7, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2202      	movs	r2, #2
 800d2ac:	0018      	movs	r0, r3
 800d2ae:	f001 fb7b 	bl	800e9a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2b2:	e040      	b.n	800d336 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	0011      	movs	r1, r2
 800d2ba:	0018      	movs	r0, r3
 800d2bc:	f001 faf6 	bl	800e8ac <USBD_CtlError>
            ret = USBD_FAIL;
 800d2c0:	2317      	movs	r3, #23
 800d2c2:	18fb      	adds	r3, r7, r3
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	701a      	strb	r2, [r3, #0]
          break;
 800d2c8:	e035      	b.n	800d336 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	23a7      	movs	r3, #167	; 0xa7
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	5cd3      	ldrb	r3, [r2, r3]
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d107      	bne.n	800d2e6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2d6:	230f      	movs	r3, #15
 800d2d8:	18f9      	adds	r1, r7, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	0018      	movs	r0, r3
 800d2e0:	f001 fb62 	bl	800e9a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2e4:	e027      	b.n	800d336 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	0011      	movs	r1, r2
 800d2ec:	0018      	movs	r0, r3
 800d2ee:	f001 fadd 	bl	800e8ac <USBD_CtlError>
            ret = USBD_FAIL;
 800d2f2:	2317      	movs	r3, #23
 800d2f4:	18fb      	adds	r3, r7, r3
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	701a      	strb	r2, [r3, #0]
          break;
 800d2fa:	e01c      	b.n	800d336 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	23a7      	movs	r3, #167	; 0xa7
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	5cd3      	ldrb	r3, [r2, r3]
 800d304:	2b03      	cmp	r3, #3
 800d306:	d015      	beq.n	800d334 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	0011      	movs	r1, r2
 800d30e:	0018      	movs	r0, r3
 800d310:	f001 facc 	bl	800e8ac <USBD_CtlError>
            ret = USBD_FAIL;
 800d314:	2317      	movs	r3, #23
 800d316:	18fb      	adds	r3, r7, r3
 800d318:	2202      	movs	r2, #2
 800d31a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800d31c:	e00a      	b.n	800d334 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	0011      	movs	r1, r2
 800d324:	0018      	movs	r0, r3
 800d326:	f001 fac1 	bl	800e8ac <USBD_CtlError>
          ret = USBD_FAIL;
 800d32a:	2317      	movs	r3, #23
 800d32c:	18fb      	adds	r3, r7, r3
 800d32e:	2202      	movs	r2, #2
 800d330:	701a      	strb	r2, [r3, #0]
          break;
 800d332:	e000      	b.n	800d336 <USBD_CDC_Setup+0x166>
          break;
 800d334:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800d336:	e00a      	b.n	800d34e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	0011      	movs	r1, r2
 800d33e:	0018      	movs	r0, r3
 800d340:	f001 fab4 	bl	800e8ac <USBD_CtlError>
      ret = USBD_FAIL;
 800d344:	2317      	movs	r3, #23
 800d346:	18fb      	adds	r3, r7, r3
 800d348:	2202      	movs	r2, #2
 800d34a:	701a      	strb	r2, [r3, #0]
      break;
 800d34c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800d34e:	2317      	movs	r3, #23
 800d350:	18fb      	adds	r3, r7, r3
 800d352:	781b      	ldrb	r3, [r3, #0]
}
 800d354:	0018      	movs	r0, r3
 800d356:	46bd      	mov	sp, r7
 800d358:	b006      	add	sp, #24
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	00000201 	.word	0x00000201

0800d360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	000a      	movs	r2, r1
 800d36a:	1cfb      	adds	r3, r7, #3
 800d36c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	23ae      	movs	r3, #174	; 0xae
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	58d3      	ldr	r3, [r2, r3]
 800d376:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	23b0      	movs	r3, #176	; 0xb0
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	58d3      	ldr	r3, [r2, r3]
 800d380:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	23ae      	movs	r3, #174	; 0xae
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	58d3      	ldr	r3, [r2, r3]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d03e      	beq.n	800d40c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d38e:	1cfb      	adds	r3, r7, #3
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	0013      	movs	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	189b      	adds	r3, r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	18cb      	adds	r3, r1, r3
 800d39e:	331c      	adds	r3, #28
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d02b      	beq.n	800d3fe <USBD_CDC_DataIn+0x9e>
 800d3a6:	1cfb      	adds	r3, r7, #3
 800d3a8:	781a      	ldrb	r2, [r3, #0]
 800d3aa:	6879      	ldr	r1, [r7, #4]
 800d3ac:	0013      	movs	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	189b      	adds	r3, r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	18cb      	adds	r3, r1, r3
 800d3b6:	331c      	adds	r3, #28
 800d3b8:	6818      	ldr	r0, [r3, #0]
 800d3ba:	1cfb      	adds	r3, r7, #3
 800d3bc:	781a      	ldrb	r2, [r3, #0]
 800d3be:	68b9      	ldr	r1, [r7, #8]
 800d3c0:	0013      	movs	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	189b      	adds	r3, r3, r2
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	18cb      	adds	r3, r1, r3
 800d3ca:	3338      	adds	r3, #56	; 0x38
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	0019      	movs	r1, r3
 800d3d0:	f7f2 ff20 	bl	8000214 <__aeabi_uidivmod>
 800d3d4:	1e0b      	subs	r3, r1, #0
 800d3d6:	d112      	bne.n	800d3fe <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d3d8:	1cfb      	adds	r3, r7, #3
 800d3da:	781a      	ldrb	r2, [r3, #0]
 800d3dc:	6879      	ldr	r1, [r7, #4]
 800d3de:	0013      	movs	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	189b      	adds	r3, r3, r2
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	18cb      	adds	r3, r1, r3
 800d3e8:	331c      	adds	r3, #28
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d3ee:	1cfb      	adds	r3, r7, #3
 800d3f0:	7819      	ldrb	r1, [r3, #0]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f001 ffdb 	bl	800f3b2 <USBD_LL_Transmit>
 800d3fc:	e004      	b.n	800d408 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	2385      	movs	r3, #133	; 0x85
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	2100      	movs	r1, #0
 800d406:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	e000      	b.n	800d40e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800d40c:	2302      	movs	r3, #2
  }
}
 800d40e:	0018      	movs	r0, r3
 800d410:	46bd      	mov	sp, r7
 800d412:	b004      	add	sp, #16
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	000a      	movs	r2, r1
 800d420:	1cfb      	adds	r3, r7, #3
 800d422:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	23ae      	movs	r3, #174	; 0xae
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	58d3      	ldr	r3, [r2, r3]
 800d42c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d42e:	1cfb      	adds	r3, r7, #3
 800d430:	781a      	ldrb	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	0011      	movs	r1, r2
 800d436:	0018      	movs	r0, r3
 800d438:	f002 f829 	bl	800f48e <USBD_LL_GetRxDataSize>
 800d43c:	0001      	movs	r1, r0
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	2383      	movs	r3, #131	; 0x83
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	23ae      	movs	r3, #174	; 0xae
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	58d3      	ldr	r3, [r2, r3]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d011      	beq.n	800d476 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	23af      	movs	r3, #175	; 0xaf
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	58d3      	ldr	r3, [r2, r3]
 800d45a:	68da      	ldr	r2, [r3, #12]
 800d45c:	68f9      	ldr	r1, [r7, #12]
 800d45e:	2381      	movs	r3, #129	; 0x81
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	58c8      	ldr	r0, [r1, r3]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2183      	movs	r1, #131	; 0x83
 800d468:	0089      	lsls	r1, r1, #2
 800d46a:	468c      	mov	ip, r1
 800d46c:	4463      	add	r3, ip
 800d46e:	0019      	movs	r1, r3
 800d470:	4790      	blx	r2

    return USBD_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	e000      	b.n	800d478 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800d476:	2302      	movs	r3, #2
  }
}
 800d478:	0018      	movs	r0, r3
 800d47a:	46bd      	mov	sp, r7
 800d47c:	b004      	add	sp, #16
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d480:	b590      	push	{r4, r7, lr}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	23ae      	movs	r3, #174	; 0xae
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	58d3      	ldr	r3, [r2, r3]
 800d490:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	23af      	movs	r3, #175	; 0xaf
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	58d3      	ldr	r3, [r2, r3]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d019      	beq.n	800d4d2 <USBD_CDC_EP0_RxReady+0x52>
 800d49e:	68fa      	ldr	r2, [r7, #12]
 800d4a0:	2380      	movs	r3, #128	; 0x80
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	5cd3      	ldrb	r3, [r2, r3]
 800d4a6:	2bff      	cmp	r3, #255	; 0xff
 800d4a8:	d013      	beq.n	800d4d2 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	23af      	movs	r3, #175	; 0xaf
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	58d3      	ldr	r3, [r2, r3]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	68f9      	ldr	r1, [r7, #12]
 800d4b6:	2280      	movs	r2, #128	; 0x80
 800d4b8:	0092      	lsls	r2, r2, #2
 800d4ba:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800d4bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	4c06      	ldr	r4, [pc, #24]	; (800d4dc <USBD_CDC_EP0_RxReady+0x5c>)
 800d4c2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d4c4:	b292      	uxth	r2, r2
 800d4c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	2380      	movs	r3, #128	; 0x80
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	21ff      	movs	r1, #255	; 0xff
 800d4d0:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	0018      	movs	r0, r3
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	b005      	add	sp, #20
 800d4da:	bd90      	pop	{r4, r7, pc}
 800d4dc:	00000201 	.word	0x00000201

0800d4e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2243      	movs	r2, #67	; 0x43
 800d4ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d4ee:	4b02      	ldr	r3, [pc, #8]	; (800d4f8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800d4f0:	0018      	movs	r0, r3
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	b002      	add	sp, #8
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	200001a0 	.word	0x200001a0

0800d4fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2243      	movs	r2, #67	; 0x43
 800d508:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d50a:	4b02      	ldr	r3, [pc, #8]	; (800d514 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800d50c:	0018      	movs	r0, r3
 800d50e:	46bd      	mov	sp, r7
 800d510:	b002      	add	sp, #8
 800d512:	bd80      	pop	{r7, pc}
 800d514:	2000015c 	.word	0x2000015c

0800d518 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2243      	movs	r2, #67	; 0x43
 800d524:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d526:	4b02      	ldr	r3, [pc, #8]	; (800d530 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800d528:	0018      	movs	r0, r3
 800d52a:	46bd      	mov	sp, r7
 800d52c:	b002      	add	sp, #8
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	200001e4 	.word	0x200001e4

0800d534 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	220a      	movs	r2, #10
 800d540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d542:	4b02      	ldr	r3, [pc, #8]	; (800d54c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800d544:	0018      	movs	r0, r3
 800d546:	46bd      	mov	sp, r7
 800d548:	b002      	add	sp, #8
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	20000118 	.word	0x20000118

0800d550 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d55a:	200f      	movs	r0, #15
 800d55c:	183b      	adds	r3, r7, r0
 800d55e:	2202      	movs	r2, #2
 800d560:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d007      	beq.n	800d578 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	23af      	movs	r3, #175	; 0xaf
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800d572:	183b      	adds	r3, r7, r0
 800d574:	2200      	movs	r2, #0
 800d576:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800d578:	230f      	movs	r3, #15
 800d57a:	18fb      	adds	r3, r7, r3
 800d57c:	781b      	ldrb	r3, [r3, #0]
}
 800d57e:	0018      	movs	r0, r3
 800d580:	46bd      	mov	sp, r7
 800d582:	b004      	add	sp, #16
 800d584:	bd80      	pop	{r7, pc}

0800d586 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b086      	sub	sp, #24
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	60f8      	str	r0, [r7, #12]
 800d58e:	60b9      	str	r1, [r7, #8]
 800d590:	1dbb      	adds	r3, r7, #6
 800d592:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	23ae      	movs	r3, #174	; 0xae
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	58d3      	ldr	r3, [r2, r3]
 800d59c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	2382      	movs	r3, #130	; 0x82
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	68b9      	ldr	r1, [r7, #8]
 800d5a6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800d5a8:	1dbb      	adds	r3, r7, #6
 800d5aa:	8819      	ldrh	r1, [r3, #0]
 800d5ac:	697a      	ldr	r2, [r7, #20]
 800d5ae:	2384      	movs	r3, #132	; 0x84
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	0018      	movs	r0, r3
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	b006      	add	sp, #24
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b084      	sub	sp, #16
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	23ae      	movs	r3, #174	; 0xae
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	58d3      	ldr	r3, [r2, r3]
 800d5d0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	2381      	movs	r3, #129	; 0x81
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	0018      	movs	r0, r3
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	b004      	add	sp, #16
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b084      	sub	sp, #16
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	23ae      	movs	r3, #174	; 0xae
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	58d3      	ldr	r3, [r2, r3]
 800d5f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	23ae      	movs	r3, #174	; 0xae
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	58d3      	ldr	r3, [r2, r3]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d022      	beq.n	800d64a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	2385      	movs	r3, #133	; 0x85
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	58d3      	ldr	r3, [r2, r3]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d11a      	bne.n	800d646 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	2385      	movs	r3, #133	; 0x85
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	2101      	movs	r1, #1
 800d618:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	2384      	movs	r3, #132	; 0x84
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	58d2      	ldr	r2, [r2, r3]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	2382      	movs	r3, #130	; 0x82
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	2384      	movs	r3, #132	; 0x84
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d636:	b29b      	uxth	r3, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	000a      	movs	r2, r1
 800d63c:	2181      	movs	r1, #129	; 0x81
 800d63e:	f001 feb8 	bl	800f3b2 <USBD_LL_Transmit>

      return USBD_OK;
 800d642:	2300      	movs	r3, #0
 800d644:	e002      	b.n	800d64c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800d646:	2301      	movs	r3, #1
 800d648:	e000      	b.n	800d64c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800d64a:	2302      	movs	r3, #2
  }
}
 800d64c:	0018      	movs	r0, r3
 800d64e:	46bd      	mov	sp, r7
 800d650:	b004      	add	sp, #16
 800d652:	bd80      	pop	{r7, pc}

0800d654 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	23ae      	movs	r3, #174	; 0xae
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	58d3      	ldr	r3, [r2, r3]
 800d664:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	23ae      	movs	r3, #174	; 0xae
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	58d3      	ldr	r3, [r2, r3]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d019      	beq.n	800d6a6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7c1b      	ldrb	r3, [r3, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10a      	bne.n	800d690 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	2381      	movs	r3, #129	; 0x81
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	58d2      	ldr	r2, [r2, r3]
 800d682:	2380      	movs	r3, #128	; 0x80
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	2101      	movs	r1, #1
 800d68a:	f001 fec9 	bl	800f420 <USBD_LL_PrepareReceive>
 800d68e:	e008      	b.n	800d6a2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	2381      	movs	r3, #129	; 0x81
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	58d2      	ldr	r2, [r2, r3]
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	2340      	movs	r3, #64	; 0x40
 800d69c:	2101      	movs	r1, #1
 800d69e:	f001 febf 	bl	800f420 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	e000      	b.n	800d6a8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800d6a6:	2302      	movs	r3, #2
  }
}
 800d6a8:	0018      	movs	r0, r3
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	b004      	add	sp, #16
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	1dfb      	adds	r3, r7, #7
 800d6bc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	e020      	b.n	800d70a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	23ad      	movs	r3, #173	; 0xad
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	58d3      	ldr	r3, [r2, r3]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d004      	beq.n	800d6de <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	23ad      	movs	r3, #173	; 0xad
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	2100      	movs	r1, #0
 800d6dc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d004      	beq.n	800d6ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	23ac      	movs	r3, #172	; 0xac
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	23a7      	movs	r3, #167	; 0xa7
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	1dfa      	adds	r2, r7, #7
 800d6fc:	7812      	ldrb	r2, [r2, #0]
 800d6fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	0018      	movs	r0, r3
 800d704:	f001 fcb8 	bl	800f078 <USBD_LL_Init>

  return USBD_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	0018      	movs	r0, r3
 800d70c:	46bd      	mov	sp, r7
 800d70e:	b004      	add	sp, #16
 800d710:	bd80      	pop	{r7, pc}

0800d712 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b084      	sub	sp, #16
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d71c:	200f      	movs	r0, #15
 800d71e:	183b      	adds	r3, r7, r0
 800d720:	2200      	movs	r2, #0
 800d722:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d008      	beq.n	800d73c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	23ad      	movs	r3, #173	; 0xad
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	6839      	ldr	r1, [r7, #0]
 800d732:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800d734:	183b      	adds	r3, r7, r0
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
 800d73a:	e003      	b.n	800d744 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d73c:	230f      	movs	r3, #15
 800d73e:	18fb      	adds	r3, r7, r3
 800d740:	2202      	movs	r2, #2
 800d742:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d744:	230f      	movs	r3, #15
 800d746:	18fb      	adds	r3, r7, r3
 800d748:	781b      	ldrb	r3, [r3, #0]
}
 800d74a:	0018      	movs	r0, r3
 800d74c:	46bd      	mov	sp, r7
 800d74e:	b004      	add	sp, #16
 800d750:	bd80      	pop	{r7, pc}

0800d752 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b082      	sub	sp, #8
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	0018      	movs	r0, r3
 800d75e:	f001 fcef 	bl	800f140 <USBD_LL_Start>

  return USBD_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	0018      	movs	r0, r3
 800d766:	46bd      	mov	sp, r7
 800d768:	b002      	add	sp, #8
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	0018      	movs	r0, r3
 800d778:	46bd      	mov	sp, r7
 800d77a:	b002      	add	sp, #8
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d77e:	b590      	push	{r4, r7, lr}
 800d780:	b085      	sub	sp, #20
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
 800d786:	000a      	movs	r2, r1
 800d788:	1cfb      	adds	r3, r7, #3
 800d78a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d78c:	240f      	movs	r4, #15
 800d78e:	193b      	adds	r3, r7, r4
 800d790:	2202      	movs	r2, #2
 800d792:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	23ad      	movs	r3, #173	; 0xad
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	58d3      	ldr	r3, [r2, r3]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00e      	beq.n	800d7be <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	23ad      	movs	r3, #173	; 0xad
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	58d3      	ldr	r3, [r2, r3]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	1cfa      	adds	r2, r7, #3
 800d7ac:	7811      	ldrb	r1, [r2, #0]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	0010      	movs	r0, r2
 800d7b2:	4798      	blx	r3
 800d7b4:	1e03      	subs	r3, r0, #0
 800d7b6:	d102      	bne.n	800d7be <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800d7b8:	193b      	adds	r3, r7, r4
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800d7be:	230f      	movs	r3, #15
 800d7c0:	18fb      	adds	r3, r7, r3
 800d7c2:	781b      	ldrb	r3, [r3, #0]
}
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	b005      	add	sp, #20
 800d7ca:	bd90      	pop	{r4, r7, pc}

0800d7cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	000a      	movs	r2, r1
 800d7d6:	1cfb      	adds	r3, r7, #3
 800d7d8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	23ad      	movs	r3, #173	; 0xad
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	58d3      	ldr	r3, [r2, r3]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	1cfa      	adds	r2, r7, #3
 800d7e6:	7811      	ldrb	r1, [r2, #0]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	0010      	movs	r0, r2
 800d7ec:	4798      	blx	r3

  return USBD_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	0018      	movs	r0, r3
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	b002      	add	sp, #8
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	22aa      	movs	r2, #170	; 0xaa
 800d806:	0092      	lsls	r2, r2, #2
 800d808:	4694      	mov	ip, r2
 800d80a:	4463      	add	r3, ip
 800d80c:	683a      	ldr	r2, [r7, #0]
 800d80e:	0011      	movs	r1, r2
 800d810:	0018      	movs	r0, r3
 800d812:	f001 f810 	bl	800e836 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	23a5      	movs	r3, #165	; 0xa5
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	2101      	movs	r1, #1
 800d81e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a23      	ldr	r2, [pc, #140]	; (800d8b0 <USBD_LL_SetupStage+0xb8>)
 800d824:	5a9b      	ldrh	r3, [r3, r2]
 800d826:	0019      	movs	r1, r3
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	23a6      	movs	r3, #166	; 0xa6
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	23aa      	movs	r3, #170	; 0xaa
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	5cd3      	ldrb	r3, [r2, r3]
 800d838:	001a      	movs	r2, r3
 800d83a:	231f      	movs	r3, #31
 800d83c:	4013      	ands	r3, r2
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d019      	beq.n	800d876 <USBD_LL_SetupStage+0x7e>
 800d842:	d822      	bhi.n	800d88a <USBD_LL_SetupStage+0x92>
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <USBD_LL_SetupStage+0x56>
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d00a      	beq.n	800d862 <USBD_LL_SetupStage+0x6a>
 800d84c:	e01d      	b.n	800d88a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	22aa      	movs	r2, #170	; 0xaa
 800d852:	0092      	lsls	r2, r2, #2
 800d854:	189a      	adds	r2, r3, r2
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	0011      	movs	r1, r2
 800d85a:	0018      	movs	r0, r3
 800d85c:	f000 fa10 	bl	800dc80 <USBD_StdDevReq>
      break;
 800d860:	e020      	b.n	800d8a4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	22aa      	movs	r2, #170	; 0xaa
 800d866:	0092      	lsls	r2, r2, #2
 800d868:	189a      	adds	r2, r3, r2
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	0011      	movs	r1, r2
 800d86e:	0018      	movs	r0, r3
 800d870:	f000 fa78 	bl	800dd64 <USBD_StdItfReq>
      break;
 800d874:	e016      	b.n	800d8a4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	22aa      	movs	r2, #170	; 0xaa
 800d87a:	0092      	lsls	r2, r2, #2
 800d87c:	189a      	adds	r2, r3, r2
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	0011      	movs	r1, r2
 800d882:	0018      	movs	r0, r3
 800d884:	f000 fac5 	bl	800de12 <USBD_StdEPReq>
      break;
 800d888:	e00c      	b.n	800d8a4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	23aa      	movs	r3, #170	; 0xaa
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	5cd3      	ldrb	r3, [r2, r3]
 800d892:	227f      	movs	r2, #127	; 0x7f
 800d894:	4393      	bics	r3, r2
 800d896:	b2da      	uxtb	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	0011      	movs	r1, r2
 800d89c:	0018      	movs	r0, r3
 800d89e:	f001 fcd6 	bl	800f24e <USBD_LL_StallEP>
      break;
 800d8a2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	0018      	movs	r0, r3
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	b002      	add	sp, #8
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	46c0      	nop			; (mov r8, r8)
 800d8b0:	000002ae 	.word	0x000002ae

0800d8b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	607a      	str	r2, [r7, #4]
 800d8be:	200b      	movs	r0, #11
 800d8c0:	183b      	adds	r3, r7, r0
 800d8c2:	1c0a      	adds	r2, r1, #0
 800d8c4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d8c6:	183b      	adds	r3, r7, r0
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d154      	bne.n	800d978 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3355      	adds	r3, #85	; 0x55
 800d8d2:	33ff      	adds	r3, #255	; 0xff
 800d8d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	23a5      	movs	r3, #165	; 0xa5
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	58d3      	ldr	r3, [r2, r3]
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d139      	bne.n	800d956 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	68da      	ldr	r2, [r3, #12]
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d919      	bls.n	800d922 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	68da      	ldr	r2, [r3, #12]
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	691b      	ldr	r3, [r3, #16]
 800d8f6:	1ad2      	subs	r2, r2, r3
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	68da      	ldr	r2, [r3, #12]
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d904:	429a      	cmp	r2, r3
 800d906:	d203      	bcs.n	800d910 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	e002      	b.n	800d916 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d914:	b29b      	uxth	r3, r3
 800d916:	6879      	ldr	r1, [r7, #4]
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	001a      	movs	r2, r3
 800d91c:	f001 f89b 	bl	800ea56 <USBD_CtlContinueRx>
 800d920:	e045      	b.n	800d9ae <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	23ad      	movs	r3, #173	; 0xad
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	58d3      	ldr	r3, [r2, r3]
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00d      	beq.n	800d94c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	23a7      	movs	r3, #167	; 0xa7
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d107      	bne.n	800d94c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	23ad      	movs	r3, #173	; 0xad
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	58d3      	ldr	r3, [r2, r3]
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	0010      	movs	r0, r2
 800d94a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	0018      	movs	r0, r3
 800d950:	f001 f894 	bl	800ea7c <USBD_CtlSendStatus>
 800d954:	e02b      	b.n	800d9ae <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	23a5      	movs	r3, #165	; 0xa5
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	58d3      	ldr	r3, [r2, r3]
 800d95e:	2b05      	cmp	r3, #5
 800d960:	d125      	bne.n	800d9ae <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	23a5      	movs	r3, #165	; 0xa5
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	2100      	movs	r1, #0
 800d96a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2100      	movs	r1, #0
 800d970:	0018      	movs	r0, r3
 800d972:	f001 fc6c 	bl	800f24e <USBD_LL_StallEP>
 800d976:	e01a      	b.n	800d9ae <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	23ad      	movs	r3, #173	; 0xad
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	58d3      	ldr	r3, [r2, r3]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	23a7      	movs	r3, #167	; 0xa7
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d10b      	bne.n	800d9aa <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	23ad      	movs	r3, #173	; 0xad
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	58d3      	ldr	r3, [r2, r3]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	220b      	movs	r2, #11
 800d99e:	18ba      	adds	r2, r7, r2
 800d9a0:	7811      	ldrb	r1, [r2, #0]
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	0010      	movs	r0, r2
 800d9a6:	4798      	blx	r3
 800d9a8:	e001      	b.n	800d9ae <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d9aa:	2302      	movs	r3, #2
 800d9ac:	e000      	b.n	800d9b0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800d9ae:	2300      	movs	r3, #0
}
 800d9b0:	0018      	movs	r0, r3
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	b006      	add	sp, #24
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b086      	sub	sp, #24
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	607a      	str	r2, [r7, #4]
 800d9c2:	200b      	movs	r0, #11
 800d9c4:	183b      	adds	r3, r7, r0
 800d9c6:	1c0a      	adds	r2, r1, #0
 800d9c8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d9ca:	183b      	adds	r3, r7, r0
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d000      	beq.n	800d9d4 <USBD_LL_DataInStage+0x1c>
 800d9d2:	e08e      	b.n	800daf2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3314      	adds	r3, #20
 800d9d8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	23a5      	movs	r3, #165	; 0xa5
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	58d3      	ldr	r3, [r2, r3]
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d164      	bne.n	800dab0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	68da      	ldr	r2, [r3, #12]
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d915      	bls.n	800da1e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	68da      	ldr	r2, [r3, #12]
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	1ad2      	subs	r2, r2, r3
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	b29a      	uxth	r2, r3
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	0018      	movs	r0, r3
 800da0c:	f000 ffec 	bl	800e9e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	2300      	movs	r3, #0
 800da14:	2200      	movs	r2, #0
 800da16:	2100      	movs	r1, #0
 800da18:	f001 fd02 	bl	800f420 <USBD_LL_PrepareReceive>
 800da1c:	e059      	b.n	800dad2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	689a      	ldr	r2, [r3, #8]
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	0019      	movs	r1, r3
 800da28:	0010      	movs	r0, r2
 800da2a:	f7f2 fbf3 	bl	8000214 <__aeabi_uidivmod>
 800da2e:	1e0b      	subs	r3, r1, #0
 800da30:	d11f      	bne.n	800da72 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	689a      	ldr	r2, [r3, #8]
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d319      	bcc.n	800da72 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	689a      	ldr	r2, [r3, #8]
 800da42:	68f9      	ldr	r1, [r7, #12]
 800da44:	23a6      	movs	r3, #166	; 0xa6
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d211      	bcs.n	800da72 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2200      	movs	r2, #0
 800da52:	2100      	movs	r1, #0
 800da54:	0018      	movs	r0, r3
 800da56:	f000 ffc7 	bl	800e9e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	23a6      	movs	r3, #166	; 0xa6
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	2100      	movs	r1, #0
 800da62:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	2300      	movs	r3, #0
 800da68:	2200      	movs	r2, #0
 800da6a:	2100      	movs	r1, #0
 800da6c:	f001 fcd8 	bl	800f420 <USBD_LL_PrepareReceive>
 800da70:	e02f      	b.n	800dad2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	23ad      	movs	r3, #173	; 0xad
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	58d3      	ldr	r3, [r2, r3]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00d      	beq.n	800da9c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	23a7      	movs	r3, #167	; 0xa7
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d107      	bne.n	800da9c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	23ad      	movs	r3, #173	; 0xad
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	58d3      	ldr	r3, [r2, r3]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	0010      	movs	r0, r2
 800da9a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2180      	movs	r1, #128	; 0x80
 800daa0:	0018      	movs	r0, r3
 800daa2:	f001 fbd4 	bl	800f24e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	0018      	movs	r0, r3
 800daaa:	f000 fffb 	bl	800eaa4 <USBD_CtlReceiveStatus>
 800daae:	e010      	b.n	800dad2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	23a5      	movs	r3, #165	; 0xa5
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	58d3      	ldr	r3, [r2, r3]
 800dab8:	2b04      	cmp	r3, #4
 800daba:	d005      	beq.n	800dac8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	23a5      	movs	r3, #165	; 0xa5
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d104      	bne.n	800dad2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2180      	movs	r1, #128	; 0x80
 800dacc:	0018      	movs	r0, r3
 800dace:	f001 fbbe 	bl	800f24e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	23a8      	movs	r3, #168	; 0xa8
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	5cd3      	ldrb	r3, [r2, r3]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d124      	bne.n	800db28 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	0018      	movs	r0, r3
 800dae2:	f7ff fe43 	bl	800d76c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	23a8      	movs	r3, #168	; 0xa8
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	2100      	movs	r1, #0
 800daee:	54d1      	strb	r1, [r2, r3]
 800daf0:	e01a      	b.n	800db28 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	23ad      	movs	r3, #173	; 0xad
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	58d3      	ldr	r3, [r2, r3]
 800dafa:	695b      	ldr	r3, [r3, #20]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d011      	beq.n	800db24 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	23a7      	movs	r3, #167	; 0xa7
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800db08:	2b03      	cmp	r3, #3
 800db0a:	d10b      	bne.n	800db24 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	23ad      	movs	r3, #173	; 0xad
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	58d3      	ldr	r3, [r2, r3]
 800db14:	695b      	ldr	r3, [r3, #20]
 800db16:	220b      	movs	r2, #11
 800db18:	18ba      	adds	r2, r7, r2
 800db1a:	7811      	ldrb	r1, [r2, #0]
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	0010      	movs	r0, r2
 800db20:	4798      	blx	r3
 800db22:	e001      	b.n	800db28 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800db24:	2302      	movs	r3, #2
 800db26:	e000      	b.n	800db2a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	0018      	movs	r0, r3
 800db2c:	46bd      	mov	sp, r7
 800db2e:	b006      	add	sp, #24
 800db30:	bd80      	pop	{r7, pc}

0800db32 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b082      	sub	sp, #8
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	2340      	movs	r3, #64	; 0x40
 800db3e:	2200      	movs	r2, #0
 800db40:	2100      	movs	r1, #0
 800db42:	f001 fb22 	bl	800f18a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	23ac      	movs	r3, #172	; 0xac
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	2101      	movs	r1, #1
 800db4e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	23b2      	movs	r3, #178	; 0xb2
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	2140      	movs	r1, #64	; 0x40
 800db58:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	2340      	movs	r3, #64	; 0x40
 800db5e:	2200      	movs	r2, #0
 800db60:	2180      	movs	r1, #128	; 0x80
 800db62:	f001 fb12 	bl	800f18a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2201      	movs	r2, #1
 800db6a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2240      	movs	r2, #64	; 0x40
 800db70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	23a7      	movs	r3, #167	; 0xa7
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	2101      	movs	r1, #1
 800db7a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	23a5      	movs	r3, #165	; 0xa5
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	2100      	movs	r1, #0
 800db84:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	23a9      	movs	r3, #169	; 0xa9
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	2100      	movs	r1, #0
 800db94:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	23ae      	movs	r3, #174	; 0xae
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	58d3      	ldr	r3, [r2, r3]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00a      	beq.n	800dbb8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	23ad      	movs	r3, #173	; 0xad
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	58d3      	ldr	r3, [r2, r3]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	b2d9      	uxtb	r1, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	0018      	movs	r0, r3
 800dbb6:	4790      	blx	r2
  }

  return USBD_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	0018      	movs	r0, r3
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	b002      	add	sp, #8
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	000a      	movs	r2, r1
 800dbcc:	1cfb      	adds	r3, r7, #3
 800dbce:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	1cfa      	adds	r2, r7, #3
 800dbd4:	7812      	ldrb	r2, [r2, #0]
 800dbd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	0018      	movs	r0, r3
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	b002      	add	sp, #8
 800dbe0:	bd80      	pop	{r7, pc}
	...

0800dbe4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	23a7      	movs	r3, #167	; 0xa7
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	5cd1      	ldrb	r1, [r2, r3]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a06      	ldr	r2, [pc, #24]	; (800dc10 <USBD_LL_Suspend+0x2c>)
 800dbf8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	23a7      	movs	r3, #167	; 0xa7
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	2104      	movs	r1, #4
 800dc02:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	0018      	movs	r0, r3
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	b002      	add	sp, #8
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	46c0      	nop			; (mov r8, r8)
 800dc10:	0000029d 	.word	0x0000029d

0800dc14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	23a7      	movs	r3, #167	; 0xa7
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	5cd3      	ldrb	r3, [r2, r3]
 800dc24:	2b04      	cmp	r3, #4
 800dc26:	d106      	bne.n	800dc36 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a05      	ldr	r2, [pc, #20]	; (800dc40 <USBD_LL_Resume+0x2c>)
 800dc2c:	5c99      	ldrb	r1, [r3, r2]
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	23a7      	movs	r3, #167	; 0xa7
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	0018      	movs	r0, r3
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	b002      	add	sp, #8
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	0000029d 	.word	0x0000029d

0800dc44 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	23a7      	movs	r3, #167	; 0xa7
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	5cd3      	ldrb	r3, [r2, r3]
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d10e      	bne.n	800dc76 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	23ad      	movs	r3, #173	; 0xad
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	58d3      	ldr	r3, [r2, r3]
 800dc60:	69db      	ldr	r3, [r3, #28]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d007      	beq.n	800dc76 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	23ad      	movs	r3, #173	; 0xad
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	58d3      	ldr	r3, [r2, r3]
 800dc6e:	69db      	ldr	r3, [r3, #28]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	0010      	movs	r0, r2
 800dc74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	0018      	movs	r0, r3
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	b002      	add	sp, #8
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc8a:	230f      	movs	r3, #15
 800dc8c:	18fb      	adds	r3, r7, r3
 800dc8e:	2200      	movs	r2, #0
 800dc90:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	001a      	movs	r2, r3
 800dc98:	2360      	movs	r3, #96	; 0x60
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	2b40      	cmp	r3, #64	; 0x40
 800dc9e:	d004      	beq.n	800dcaa <USBD_StdDevReq+0x2a>
 800dca0:	d84f      	bhi.n	800dd42 <USBD_StdDevReq+0xc2>
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00b      	beq.n	800dcbe <USBD_StdDevReq+0x3e>
 800dca6:	2b20      	cmp	r3, #32
 800dca8:	d14b      	bne.n	800dd42 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	23ad      	movs	r3, #173	; 0xad
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	58d3      	ldr	r3, [r2, r3]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	6839      	ldr	r1, [r7, #0]
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	0010      	movs	r0, r2
 800dcba:	4798      	blx	r3
      break;
 800dcbc:	e048      	b.n	800dd50 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	785b      	ldrb	r3, [r3, #1]
 800dcc2:	2b09      	cmp	r3, #9
 800dcc4:	d835      	bhi.n	800dd32 <USBD_StdDevReq+0xb2>
 800dcc6:	009a      	lsls	r2, r3, #2
 800dcc8:	4b25      	ldr	r3, [pc, #148]	; (800dd60 <USBD_StdDevReq+0xe0>)
 800dcca:	18d3      	adds	r3, r2, r3
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dcd0:	683a      	ldr	r2, [r7, #0]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	0011      	movs	r1, r2
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	f000 fa52 	bl	800e180 <USBD_GetDescriptor>
          break;
 800dcdc:	e030      	b.n	800dd40 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	0011      	movs	r1, r2
 800dce4:	0018      	movs	r0, r3
 800dce6:	f000 fbfd 	bl	800e4e4 <USBD_SetAddress>
          break;
 800dcea:	e029      	b.n	800dd40 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800dcec:	683a      	ldr	r2, [r7, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	0011      	movs	r1, r2
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	f000 fc4a 	bl	800e58c <USBD_SetConfig>
          break;
 800dcf8:	e022      	b.n	800dd40 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	0011      	movs	r1, r2
 800dd00:	0018      	movs	r0, r3
 800dd02:	f000 fce7 	bl	800e6d4 <USBD_GetConfig>
          break;
 800dd06:	e01b      	b.n	800dd40 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd08:	683a      	ldr	r2, [r7, #0]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	0011      	movs	r1, r2
 800dd0e:	0018      	movs	r0, r3
 800dd10:	f000 fd1b 	bl	800e74a <USBD_GetStatus>
          break;
 800dd14:	e014      	b.n	800dd40 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	0011      	movs	r1, r2
 800dd1c:	0018      	movs	r0, r3
 800dd1e:	f000 fd4e 	bl	800e7be <USBD_SetFeature>
          break;
 800dd22:	e00d      	b.n	800dd40 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	0011      	movs	r1, r2
 800dd2a:	0018      	movs	r0, r3
 800dd2c:	f000 fd5d 	bl	800e7ea <USBD_ClrFeature>
          break;
 800dd30:	e006      	b.n	800dd40 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dd32:	683a      	ldr	r2, [r7, #0]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	0011      	movs	r1, r2
 800dd38:	0018      	movs	r0, r3
 800dd3a:	f000 fdb7 	bl	800e8ac <USBD_CtlError>
          break;
 800dd3e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800dd40:	e006      	b.n	800dd50 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dd42:	683a      	ldr	r2, [r7, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	0011      	movs	r1, r2
 800dd48:	0018      	movs	r0, r3
 800dd4a:	f000 fdaf 	bl	800e8ac <USBD_CtlError>
      break;
 800dd4e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800dd50:	230f      	movs	r3, #15
 800dd52:	18fb      	adds	r3, r7, r3
 800dd54:	781b      	ldrb	r3, [r3, #0]
}
 800dd56:	0018      	movs	r0, r3
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	b004      	add	sp, #16
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	46c0      	nop			; (mov r8, r8)
 800dd60:	0800f768 	.word	0x0800f768

0800dd64 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800dd64:	b5b0      	push	{r4, r5, r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd6e:	230f      	movs	r3, #15
 800dd70:	18fb      	adds	r3, r7, r3
 800dd72:	2200      	movs	r2, #0
 800dd74:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	001a      	movs	r2, r3
 800dd7c:	2360      	movs	r3, #96	; 0x60
 800dd7e:	4013      	ands	r3, r2
 800dd80:	2b40      	cmp	r3, #64	; 0x40
 800dd82:	d004      	beq.n	800dd8e <USBD_StdItfReq+0x2a>
 800dd84:	d839      	bhi.n	800ddfa <USBD_StdItfReq+0x96>
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <USBD_StdItfReq+0x2a>
 800dd8a:	2b20      	cmp	r3, #32
 800dd8c:	d135      	bne.n	800ddfa <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	23a7      	movs	r3, #167	; 0xa7
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	5cd3      	ldrb	r3, [r2, r3]
 800dd96:	3b01      	subs	r3, #1
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	d825      	bhi.n	800dde8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	889b      	ldrh	r3, [r3, #4]
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d819      	bhi.n	800ddda <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	23ad      	movs	r3, #173	; 0xad
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	58d3      	ldr	r3, [r2, r3]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	250f      	movs	r5, #15
 800ddb2:	197c      	adds	r4, r7, r5
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	0010      	movs	r0, r2
 800ddba:	4798      	blx	r3
 800ddbc:	0003      	movs	r3, r0
 800ddbe:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	88db      	ldrh	r3, [r3, #6]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d116      	bne.n	800ddf6 <USBD_StdItfReq+0x92>
 800ddc8:	197b      	adds	r3, r7, r5
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d112      	bne.n	800ddf6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	0018      	movs	r0, r3
 800ddd4:	f000 fe52 	bl	800ea7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ddd8:	e00d      	b.n	800ddf6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	0011      	movs	r1, r2
 800dde0:	0018      	movs	r0, r3
 800dde2:	f000 fd63 	bl	800e8ac <USBD_CtlError>
          break;
 800dde6:	e006      	b.n	800ddf6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800dde8:	683a      	ldr	r2, [r7, #0]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	0011      	movs	r1, r2
 800ddee:	0018      	movs	r0, r3
 800ddf0:	f000 fd5c 	bl	800e8ac <USBD_CtlError>
          break;
 800ddf4:	e000      	b.n	800ddf8 <USBD_StdItfReq+0x94>
          break;
 800ddf6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ddf8:	e006      	b.n	800de08 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	0011      	movs	r1, r2
 800de00:	0018      	movs	r0, r3
 800de02:	f000 fd53 	bl	800e8ac <USBD_CtlError>
      break;
 800de06:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	0018      	movs	r0, r3
 800de0c:	46bd      	mov	sp, r7
 800de0e:	b004      	add	sp, #16
 800de10:	bdb0      	pop	{r4, r5, r7, pc}

0800de12 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800de12:	b5b0      	push	{r4, r5, r7, lr}
 800de14:	b084      	sub	sp, #16
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800de1c:	230f      	movs	r3, #15
 800de1e:	18fb      	adds	r3, r7, r3
 800de20:	2200      	movs	r2, #0
 800de22:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	889a      	ldrh	r2, [r3, #4]
 800de28:	230e      	movs	r3, #14
 800de2a:	18fb      	adds	r3, r7, r3
 800de2c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	001a      	movs	r2, r3
 800de34:	2360      	movs	r3, #96	; 0x60
 800de36:	4013      	ands	r3, r2
 800de38:	2b40      	cmp	r3, #64	; 0x40
 800de3a:	d006      	beq.n	800de4a <USBD_StdEPReq+0x38>
 800de3c:	d900      	bls.n	800de40 <USBD_StdEPReq+0x2e>
 800de3e:	e190      	b.n	800e162 <USBD_StdEPReq+0x350>
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00c      	beq.n	800de5e <USBD_StdEPReq+0x4c>
 800de44:	2b20      	cmp	r3, #32
 800de46:	d000      	beq.n	800de4a <USBD_StdEPReq+0x38>
 800de48:	e18b      	b.n	800e162 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	23ad      	movs	r3, #173	; 0xad
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	58d3      	ldr	r3, [r2, r3]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	0010      	movs	r0, r2
 800de5a:	4798      	blx	r3
      break;
 800de5c:	e188      	b.n	800e170 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	001a      	movs	r2, r3
 800de64:	2360      	movs	r3, #96	; 0x60
 800de66:	4013      	ands	r3, r2
 800de68:	2b20      	cmp	r3, #32
 800de6a:	d10f      	bne.n	800de8c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	23ad      	movs	r3, #173	; 0xad
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	58d3      	ldr	r3, [r2, r3]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	250f      	movs	r5, #15
 800de78:	197c      	adds	r4, r7, r5
 800de7a:	6839      	ldr	r1, [r7, #0]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	0010      	movs	r0, r2
 800de80:	4798      	blx	r3
 800de82:	0003      	movs	r3, r0
 800de84:	7023      	strb	r3, [r4, #0]

        return ret;
 800de86:	197b      	adds	r3, r7, r5
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	e174      	b.n	800e176 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	785b      	ldrb	r3, [r3, #1]
 800de90:	2b03      	cmp	r3, #3
 800de92:	d007      	beq.n	800dea4 <USBD_StdEPReq+0x92>
 800de94:	dd00      	ble.n	800de98 <USBD_StdEPReq+0x86>
 800de96:	e15c      	b.n	800e152 <USBD_StdEPReq+0x340>
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d100      	bne.n	800de9e <USBD_StdEPReq+0x8c>
 800de9c:	e092      	b.n	800dfc4 <USBD_StdEPReq+0x1b2>
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d04b      	beq.n	800df3a <USBD_StdEPReq+0x128>
 800dea2:	e156      	b.n	800e152 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	23a7      	movs	r3, #167	; 0xa7
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	5cd3      	ldrb	r3, [r2, r3]
 800deac:	2b02      	cmp	r3, #2
 800deae:	d002      	beq.n	800deb6 <USBD_StdEPReq+0xa4>
 800deb0:	2b03      	cmp	r3, #3
 800deb2:	d01d      	beq.n	800def0 <USBD_StdEPReq+0xde>
 800deb4:	e039      	b.n	800df2a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800deb6:	220e      	movs	r2, #14
 800deb8:	18bb      	adds	r3, r7, r2
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d010      	beq.n	800dee2 <USBD_StdEPReq+0xd0>
 800dec0:	18bb      	adds	r3, r7, r2
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2b80      	cmp	r3, #128	; 0x80
 800dec6:	d00c      	beq.n	800dee2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dec8:	18bb      	adds	r3, r7, r2
 800deca:	781a      	ldrb	r2, [r3, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	0011      	movs	r1, r2
 800ded0:	0018      	movs	r0, r3
 800ded2:	f001 f9bc 	bl	800f24e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2180      	movs	r1, #128	; 0x80
 800deda:	0018      	movs	r0, r3
 800dedc:	f001 f9b7 	bl	800f24e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dee0:	e02a      	b.n	800df38 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800dee2:	683a      	ldr	r2, [r7, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	0011      	movs	r1, r2
 800dee8:	0018      	movs	r0, r3
 800deea:	f000 fcdf 	bl	800e8ac <USBD_CtlError>
              break;
 800deee:	e023      	b.n	800df38 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	885b      	ldrh	r3, [r3, #2]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d113      	bne.n	800df20 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800def8:	220e      	movs	r2, #14
 800defa:	18bb      	adds	r3, r7, r2
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00e      	beq.n	800df20 <USBD_StdEPReq+0x10e>
 800df02:	18bb      	adds	r3, r7, r2
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	2b80      	cmp	r3, #128	; 0x80
 800df08:	d00a      	beq.n	800df20 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	88db      	ldrh	r3, [r3, #6]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d106      	bne.n	800df20 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800df12:	18bb      	adds	r3, r7, r2
 800df14:	781a      	ldrb	r2, [r3, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	0011      	movs	r1, r2
 800df1a:	0018      	movs	r0, r3
 800df1c:	f001 f997 	bl	800f24e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	0018      	movs	r0, r3
 800df24:	f000 fdaa 	bl	800ea7c <USBD_CtlSendStatus>

              break;
 800df28:	e006      	b.n	800df38 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800df2a:	683a      	ldr	r2, [r7, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	0011      	movs	r1, r2
 800df30:	0018      	movs	r0, r3
 800df32:	f000 fcbb 	bl	800e8ac <USBD_CtlError>
              break;
 800df36:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800df38:	e112      	b.n	800e160 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	23a7      	movs	r3, #167	; 0xa7
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	5cd3      	ldrb	r3, [r2, r3]
 800df42:	2b02      	cmp	r3, #2
 800df44:	d002      	beq.n	800df4c <USBD_StdEPReq+0x13a>
 800df46:	2b03      	cmp	r3, #3
 800df48:	d01d      	beq.n	800df86 <USBD_StdEPReq+0x174>
 800df4a:	e032      	b.n	800dfb2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df4c:	220e      	movs	r2, #14
 800df4e:	18bb      	adds	r3, r7, r2
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d010      	beq.n	800df78 <USBD_StdEPReq+0x166>
 800df56:	18bb      	adds	r3, r7, r2
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	2b80      	cmp	r3, #128	; 0x80
 800df5c:	d00c      	beq.n	800df78 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800df5e:	18bb      	adds	r3, r7, r2
 800df60:	781a      	ldrb	r2, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	0011      	movs	r1, r2
 800df66:	0018      	movs	r0, r3
 800df68:	f001 f971 	bl	800f24e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2180      	movs	r1, #128	; 0x80
 800df70:	0018      	movs	r0, r3
 800df72:	f001 f96c 	bl	800f24e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df76:	e024      	b.n	800dfc2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	0011      	movs	r1, r2
 800df7e:	0018      	movs	r0, r3
 800df80:	f000 fc94 	bl	800e8ac <USBD_CtlError>
              break;
 800df84:	e01d      	b.n	800dfc2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	885b      	ldrh	r3, [r3, #2]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d118      	bne.n	800dfc0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df8e:	210e      	movs	r1, #14
 800df90:	187b      	adds	r3, r7, r1
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	227f      	movs	r2, #127	; 0x7f
 800df96:	4013      	ands	r3, r2
 800df98:	d006      	beq.n	800dfa8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800df9a:	187b      	adds	r3, r7, r1
 800df9c:	781a      	ldrb	r2, [r3, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	0011      	movs	r1, r2
 800dfa2:	0018      	movs	r0, r3
 800dfa4:	f001 f97e 	bl	800f2a4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	0018      	movs	r0, r3
 800dfac:	f000 fd66 	bl	800ea7c <USBD_CtlSendStatus>
              }
              break;
 800dfb0:	e006      	b.n	800dfc0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	0011      	movs	r1, r2
 800dfb8:	0018      	movs	r0, r3
 800dfba:	f000 fc77 	bl	800e8ac <USBD_CtlError>
              break;
 800dfbe:	e000      	b.n	800dfc2 <USBD_StdEPReq+0x1b0>
              break;
 800dfc0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800dfc2:	e0cd      	b.n	800e160 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	23a7      	movs	r3, #167	; 0xa7
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	5cd3      	ldrb	r3, [r2, r3]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d002      	beq.n	800dfd6 <USBD_StdEPReq+0x1c4>
 800dfd0:	2b03      	cmp	r3, #3
 800dfd2:	d03c      	beq.n	800e04e <USBD_StdEPReq+0x23c>
 800dfd4:	e0b5      	b.n	800e142 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dfd6:	220e      	movs	r2, #14
 800dfd8:	18bb      	adds	r3, r7, r2
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00a      	beq.n	800dff6 <USBD_StdEPReq+0x1e4>
 800dfe0:	18bb      	adds	r3, r7, r2
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2b80      	cmp	r3, #128	; 0x80
 800dfe6:	d006      	beq.n	800dff6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	0011      	movs	r1, r2
 800dfee:	0018      	movs	r0, r3
 800dff0:	f000 fc5c 	bl	800e8ac <USBD_CtlError>
                break;
 800dff4:	e0ac      	b.n	800e150 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dff6:	220e      	movs	r2, #14
 800dff8:	18bb      	adds	r3, r7, r2
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b25b      	sxtb	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	da0c      	bge.n	800e01c <USBD_StdEPReq+0x20a>
 800e002:	18bb      	adds	r3, r7, r2
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	227f      	movs	r2, #127	; 0x7f
 800e008:	401a      	ands	r2, r3
 800e00a:	0013      	movs	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	189b      	adds	r3, r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	3310      	adds	r3, #16
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	18d3      	adds	r3, r2, r3
 800e018:	3304      	adds	r3, #4
 800e01a:	e00d      	b.n	800e038 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e01c:	230e      	movs	r3, #14
 800e01e:	18fb      	adds	r3, r7, r3
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	227f      	movs	r2, #127	; 0x7f
 800e024:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e026:	0013      	movs	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	189b      	adds	r3, r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	3351      	adds	r3, #81	; 0x51
 800e030:	33ff      	adds	r3, #255	; 0xff
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	18d3      	adds	r3, r2, r3
 800e036:	3304      	adds	r3, #4
 800e038:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	2200      	movs	r2, #0
 800e03e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e040:	68b9      	ldr	r1, [r7, #8]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2202      	movs	r2, #2
 800e046:	0018      	movs	r0, r3
 800e048:	f000 fcae 	bl	800e9a8 <USBD_CtlSendData>
              break;
 800e04c:	e080      	b.n	800e150 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e04e:	220e      	movs	r2, #14
 800e050:	18bb      	adds	r3, r7, r2
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	b25b      	sxtb	r3, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	da14      	bge.n	800e084 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e05a:	18bb      	adds	r3, r7, r2
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	220f      	movs	r2, #15
 800e060:	401a      	ands	r2, r3
 800e062:	6879      	ldr	r1, [r7, #4]
 800e064:	0013      	movs	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	189b      	adds	r3, r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	18cb      	adds	r3, r1, r3
 800e06e:	3318      	adds	r3, #24
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d11e      	bne.n	800e0b4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	0011      	movs	r1, r2
 800e07c:	0018      	movs	r0, r3
 800e07e:	f000 fc15 	bl	800e8ac <USBD_CtlError>
                  break;
 800e082:	e065      	b.n	800e150 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e084:	230e      	movs	r3, #14
 800e086:	18fb      	adds	r3, r7, r3
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	220f      	movs	r2, #15
 800e08c:	401a      	ands	r2, r3
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	23ac      	movs	r3, #172	; 0xac
 800e092:	0059      	lsls	r1, r3, #1
 800e094:	0013      	movs	r3, r2
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	189b      	adds	r3, r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	18c3      	adds	r3, r0, r3
 800e09e:	185b      	adds	r3, r3, r1
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d106      	bne.n	800e0b4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	0011      	movs	r1, r2
 800e0ac:	0018      	movs	r0, r3
 800e0ae:	f000 fbfd 	bl	800e8ac <USBD_CtlError>
                  break;
 800e0b2:	e04d      	b.n	800e150 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0b4:	220e      	movs	r2, #14
 800e0b6:	18bb      	adds	r3, r7, r2
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	b25b      	sxtb	r3, r3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	da0c      	bge.n	800e0da <USBD_StdEPReq+0x2c8>
 800e0c0:	18bb      	adds	r3, r7, r2
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	227f      	movs	r2, #127	; 0x7f
 800e0c6:	401a      	ands	r2, r3
 800e0c8:	0013      	movs	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	189b      	adds	r3, r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	3310      	adds	r3, #16
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	18d3      	adds	r3, r2, r3
 800e0d6:	3304      	adds	r3, #4
 800e0d8:	e00d      	b.n	800e0f6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0da:	230e      	movs	r3, #14
 800e0dc:	18fb      	adds	r3, r7, r3
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	227f      	movs	r2, #127	; 0x7f
 800e0e2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0e4:	0013      	movs	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	189b      	adds	r3, r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	3351      	adds	r3, #81	; 0x51
 800e0ee:	33ff      	adds	r3, #255	; 0xff
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	18d3      	adds	r3, r2, r3
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e0f8:	220e      	movs	r2, #14
 800e0fa:	18bb      	adds	r3, r7, r2
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d003      	beq.n	800e10a <USBD_StdEPReq+0x2f8>
 800e102:	18bb      	adds	r3, r7, r2
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	2b80      	cmp	r3, #128	; 0x80
 800e108:	d103      	bne.n	800e112 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2200      	movs	r2, #0
 800e10e:	601a      	str	r2, [r3, #0]
 800e110:	e010      	b.n	800e134 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e112:	230e      	movs	r3, #14
 800e114:	18fb      	adds	r3, r7, r3
 800e116:	781a      	ldrb	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	0011      	movs	r1, r2
 800e11c:	0018      	movs	r0, r3
 800e11e:	f001 f8ec 	bl	800f2fa <USBD_LL_IsStallEP>
 800e122:	1e03      	subs	r3, r0, #0
 800e124:	d003      	beq.n	800e12e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2201      	movs	r2, #1
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	e002      	b.n	800e134 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2200      	movs	r2, #0
 800e132:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e134:	68b9      	ldr	r1, [r7, #8]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2202      	movs	r2, #2
 800e13a:	0018      	movs	r0, r3
 800e13c:	f000 fc34 	bl	800e9a8 <USBD_CtlSendData>
              break;
 800e140:	e006      	b.n	800e150 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	0011      	movs	r1, r2
 800e148:	0018      	movs	r0, r3
 800e14a:	f000 fbaf 	bl	800e8ac <USBD_CtlError>
              break;
 800e14e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800e150:	e006      	b.n	800e160 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	0011      	movs	r1, r2
 800e158:	0018      	movs	r0, r3
 800e15a:	f000 fba7 	bl	800e8ac <USBD_CtlError>
          break;
 800e15e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800e160:	e006      	b.n	800e170 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800e162:	683a      	ldr	r2, [r7, #0]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	0011      	movs	r1, r2
 800e168:	0018      	movs	r0, r3
 800e16a:	f000 fb9f 	bl	800e8ac <USBD_CtlError>
      break;
 800e16e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800e170:	230f      	movs	r3, #15
 800e172:	18fb      	adds	r3, r7, r3
 800e174:	781b      	ldrb	r3, [r3, #0]
}
 800e176:	0018      	movs	r0, r3
 800e178:	46bd      	mov	sp, r7
 800e17a:	b004      	add	sp, #16
 800e17c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e180 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e18a:	2308      	movs	r3, #8
 800e18c:	18fb      	adds	r3, r7, r3
 800e18e:	2200      	movs	r2, #0
 800e190:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800e192:	2300      	movs	r3, #0
 800e194:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e196:	230b      	movs	r3, #11
 800e198:	18fb      	adds	r3, r7, r3
 800e19a:	2200      	movs	r2, #0
 800e19c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	885b      	ldrh	r3, [r3, #2]
 800e1a2:	0a1b      	lsrs	r3, r3, #8
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	2b07      	cmp	r3, #7
 800e1a8:	d900      	bls.n	800e1ac <USBD_GetDescriptor+0x2c>
 800e1aa:	e159      	b.n	800e460 <USBD_GetDescriptor+0x2e0>
 800e1ac:	009a      	lsls	r2, r3, #2
 800e1ae:	4bcb      	ldr	r3, [pc, #812]	; (800e4dc <USBD_GetDescriptor+0x35c>)
 800e1b0:	18d3      	adds	r3, r2, r3
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	23ac      	movs	r3, #172	; 0xac
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	58d3      	ldr	r3, [r2, r3]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	7c12      	ldrb	r2, [r2, #16]
 800e1c4:	2108      	movs	r1, #8
 800e1c6:	1879      	adds	r1, r7, r1
 800e1c8:	0010      	movs	r0, r2
 800e1ca:	4798      	blx	r3
 800e1cc:	0003      	movs	r3, r0
 800e1ce:	60fb      	str	r3, [r7, #12]
      break;
 800e1d0:	e153      	b.n	800e47a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	7c1b      	ldrb	r3, [r3, #16]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d10f      	bne.n	800e1fa <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	23ad      	movs	r3, #173	; 0xad
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	58d3      	ldr	r3, [r2, r3]
 800e1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e4:	2208      	movs	r2, #8
 800e1e6:	18ba      	adds	r2, r7, r2
 800e1e8:	0010      	movs	r0, r2
 800e1ea:	4798      	blx	r3
 800e1ec:	0003      	movs	r3, r0
 800e1ee:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e1f8:	e13f      	b.n	800e47a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	23ad      	movs	r3, #173	; 0xad
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	58d3      	ldr	r3, [r2, r3]
 800e202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e204:	2208      	movs	r2, #8
 800e206:	18ba      	adds	r2, r7, r2
 800e208:	0010      	movs	r0, r2
 800e20a:	4798      	blx	r3
 800e20c:	0003      	movs	r3, r0
 800e20e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	3301      	adds	r3, #1
 800e214:	2202      	movs	r2, #2
 800e216:	701a      	strb	r2, [r3, #0]
      break;
 800e218:	e12f      	b.n	800e47a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	885b      	ldrh	r3, [r3, #2]
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	2b05      	cmp	r3, #5
 800e222:	d900      	bls.n	800e226 <USBD_GetDescriptor+0xa6>
 800e224:	e0d0      	b.n	800e3c8 <USBD_GetDescriptor+0x248>
 800e226:	009a      	lsls	r2, r3, #2
 800e228:	4bad      	ldr	r3, [pc, #692]	; (800e4e0 <USBD_GetDescriptor+0x360>)
 800e22a:	18d3      	adds	r3, r2, r3
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	23ac      	movs	r3, #172	; 0xac
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	58d3      	ldr	r3, [r2, r3]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00d      	beq.n	800e25a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	23ac      	movs	r3, #172	; 0xac
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	58d3      	ldr	r3, [r2, r3]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	7c12      	ldrb	r2, [r2, #16]
 800e24c:	2108      	movs	r1, #8
 800e24e:	1879      	adds	r1, r7, r1
 800e250:	0010      	movs	r0, r2
 800e252:	4798      	blx	r3
 800e254:	0003      	movs	r3, r0
 800e256:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e258:	e0c3      	b.n	800e3e2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e25a:	683a      	ldr	r2, [r7, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	0011      	movs	r1, r2
 800e260:	0018      	movs	r0, r3
 800e262:	f000 fb23 	bl	800e8ac <USBD_CtlError>
            err++;
 800e266:	210b      	movs	r1, #11
 800e268:	187b      	adds	r3, r7, r1
 800e26a:	781a      	ldrb	r2, [r3, #0]
 800e26c:	187b      	adds	r3, r7, r1
 800e26e:	3201      	adds	r2, #1
 800e270:	701a      	strb	r2, [r3, #0]
          break;
 800e272:	e0b6      	b.n	800e3e2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	23ac      	movs	r3, #172	; 0xac
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	58d3      	ldr	r3, [r2, r3]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00d      	beq.n	800e29e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	23ac      	movs	r3, #172	; 0xac
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	58d3      	ldr	r3, [r2, r3]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	7c12      	ldrb	r2, [r2, #16]
 800e290:	2108      	movs	r1, #8
 800e292:	1879      	adds	r1, r7, r1
 800e294:	0010      	movs	r0, r2
 800e296:	4798      	blx	r3
 800e298:	0003      	movs	r3, r0
 800e29a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e29c:	e0a1      	b.n	800e3e2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e29e:	683a      	ldr	r2, [r7, #0]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	0011      	movs	r1, r2
 800e2a4:	0018      	movs	r0, r3
 800e2a6:	f000 fb01 	bl	800e8ac <USBD_CtlError>
            err++;
 800e2aa:	210b      	movs	r1, #11
 800e2ac:	187b      	adds	r3, r7, r1
 800e2ae:	781a      	ldrb	r2, [r3, #0]
 800e2b0:	187b      	adds	r3, r7, r1
 800e2b2:	3201      	adds	r2, #1
 800e2b4:	701a      	strb	r2, [r3, #0]
          break;
 800e2b6:	e094      	b.n	800e3e2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	23ac      	movs	r3, #172	; 0xac
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	58d3      	ldr	r3, [r2, r3]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00d      	beq.n	800e2e2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	23ac      	movs	r3, #172	; 0xac
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	58d3      	ldr	r3, [r2, r3]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	7c12      	ldrb	r2, [r2, #16]
 800e2d4:	2108      	movs	r1, #8
 800e2d6:	1879      	adds	r1, r7, r1
 800e2d8:	0010      	movs	r0, r2
 800e2da:	4798      	blx	r3
 800e2dc:	0003      	movs	r3, r0
 800e2de:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2e0:	e07f      	b.n	800e3e2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e2e2:	683a      	ldr	r2, [r7, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	0011      	movs	r1, r2
 800e2e8:	0018      	movs	r0, r3
 800e2ea:	f000 fadf 	bl	800e8ac <USBD_CtlError>
            err++;
 800e2ee:	210b      	movs	r1, #11
 800e2f0:	187b      	adds	r3, r7, r1
 800e2f2:	781a      	ldrb	r2, [r3, #0]
 800e2f4:	187b      	adds	r3, r7, r1
 800e2f6:	3201      	adds	r2, #1
 800e2f8:	701a      	strb	r2, [r3, #0]
          break;
 800e2fa:	e072      	b.n	800e3e2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	23ac      	movs	r3, #172	; 0xac
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	58d3      	ldr	r3, [r2, r3]
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00d      	beq.n	800e326 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	23ac      	movs	r3, #172	; 0xac
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	58d3      	ldr	r3, [r2, r3]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	7c12      	ldrb	r2, [r2, #16]
 800e318:	2108      	movs	r1, #8
 800e31a:	1879      	adds	r1, r7, r1
 800e31c:	0010      	movs	r0, r2
 800e31e:	4798      	blx	r3
 800e320:	0003      	movs	r3, r0
 800e322:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e324:	e05d      	b.n	800e3e2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e326:	683a      	ldr	r2, [r7, #0]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	0011      	movs	r1, r2
 800e32c:	0018      	movs	r0, r3
 800e32e:	f000 fabd 	bl	800e8ac <USBD_CtlError>
            err++;
 800e332:	210b      	movs	r1, #11
 800e334:	187b      	adds	r3, r7, r1
 800e336:	781a      	ldrb	r2, [r3, #0]
 800e338:	187b      	adds	r3, r7, r1
 800e33a:	3201      	adds	r2, #1
 800e33c:	701a      	strb	r2, [r3, #0]
          break;
 800e33e:	e050      	b.n	800e3e2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	23ac      	movs	r3, #172	; 0xac
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	58d3      	ldr	r3, [r2, r3]
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00d      	beq.n	800e36a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	23ac      	movs	r3, #172	; 0xac
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	58d3      	ldr	r3, [r2, r3]
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	7c12      	ldrb	r2, [r2, #16]
 800e35c:	2108      	movs	r1, #8
 800e35e:	1879      	adds	r1, r7, r1
 800e360:	0010      	movs	r0, r2
 800e362:	4798      	blx	r3
 800e364:	0003      	movs	r3, r0
 800e366:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e368:	e03b      	b.n	800e3e2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e36a:	683a      	ldr	r2, [r7, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	0011      	movs	r1, r2
 800e370:	0018      	movs	r0, r3
 800e372:	f000 fa9b 	bl	800e8ac <USBD_CtlError>
            err++;
 800e376:	210b      	movs	r1, #11
 800e378:	187b      	adds	r3, r7, r1
 800e37a:	781a      	ldrb	r2, [r3, #0]
 800e37c:	187b      	adds	r3, r7, r1
 800e37e:	3201      	adds	r2, #1
 800e380:	701a      	strb	r2, [r3, #0]
          break;
 800e382:	e02e      	b.n	800e3e2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	23ac      	movs	r3, #172	; 0xac
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	58d3      	ldr	r3, [r2, r3]
 800e38c:	699b      	ldr	r3, [r3, #24]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00d      	beq.n	800e3ae <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	23ac      	movs	r3, #172	; 0xac
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	58d3      	ldr	r3, [r2, r3]
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	7c12      	ldrb	r2, [r2, #16]
 800e3a0:	2108      	movs	r1, #8
 800e3a2:	1879      	adds	r1, r7, r1
 800e3a4:	0010      	movs	r0, r2
 800e3a6:	4798      	blx	r3
 800e3a8:	0003      	movs	r3, r0
 800e3aa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3ac:	e019      	b.n	800e3e2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e3ae:	683a      	ldr	r2, [r7, #0]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	0011      	movs	r1, r2
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	f000 fa79 	bl	800e8ac <USBD_CtlError>
            err++;
 800e3ba:	210b      	movs	r1, #11
 800e3bc:	187b      	adds	r3, r7, r1
 800e3be:	781a      	ldrb	r2, [r3, #0]
 800e3c0:	187b      	adds	r3, r7, r1
 800e3c2:	3201      	adds	r2, #1
 800e3c4:	701a      	strb	r2, [r3, #0]
          break;
 800e3c6:	e00c      	b.n	800e3e2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e3c8:	683a      	ldr	r2, [r7, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	0011      	movs	r1, r2
 800e3ce:	0018      	movs	r0, r3
 800e3d0:	f000 fa6c 	bl	800e8ac <USBD_CtlError>
          err++;
 800e3d4:	210b      	movs	r1, #11
 800e3d6:	187b      	adds	r3, r7, r1
 800e3d8:	781a      	ldrb	r2, [r3, #0]
 800e3da:	187b      	adds	r3, r7, r1
 800e3dc:	3201      	adds	r2, #1
 800e3de:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800e3e0:	e04b      	b.n	800e47a <USBD_GetDescriptor+0x2fa>
 800e3e2:	e04a      	b.n	800e47a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	7c1b      	ldrb	r3, [r3, #16]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10b      	bne.n	800e404 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	23ad      	movs	r3, #173	; 0xad
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	58d3      	ldr	r3, [r2, r3]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	2208      	movs	r2, #8
 800e3f8:	18ba      	adds	r2, r7, r2
 800e3fa:	0010      	movs	r0, r2
 800e3fc:	4798      	blx	r3
 800e3fe:	0003      	movs	r3, r0
 800e400:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e402:	e03a      	b.n	800e47a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	0011      	movs	r1, r2
 800e40a:	0018      	movs	r0, r3
 800e40c:	f000 fa4e 	bl	800e8ac <USBD_CtlError>
        err++;
 800e410:	210b      	movs	r1, #11
 800e412:	187b      	adds	r3, r7, r1
 800e414:	781a      	ldrb	r2, [r3, #0]
 800e416:	187b      	adds	r3, r7, r1
 800e418:	3201      	adds	r2, #1
 800e41a:	701a      	strb	r2, [r3, #0]
      break;
 800e41c:	e02d      	b.n	800e47a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	7c1b      	ldrb	r3, [r3, #16]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10f      	bne.n	800e446 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	23ad      	movs	r3, #173	; 0xad
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	58d3      	ldr	r3, [r2, r3]
 800e42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e430:	2208      	movs	r2, #8
 800e432:	18ba      	adds	r2, r7, r2
 800e434:	0010      	movs	r0, r2
 800e436:	4798      	blx	r3
 800e438:	0003      	movs	r3, r0
 800e43a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	3301      	adds	r3, #1
 800e440:	2207      	movs	r2, #7
 800e442:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e444:	e019      	b.n	800e47a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800e446:	683a      	ldr	r2, [r7, #0]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	0011      	movs	r1, r2
 800e44c:	0018      	movs	r0, r3
 800e44e:	f000 fa2d 	bl	800e8ac <USBD_CtlError>
        err++;
 800e452:	210b      	movs	r1, #11
 800e454:	187b      	adds	r3, r7, r1
 800e456:	781a      	ldrb	r2, [r3, #0]
 800e458:	187b      	adds	r3, r7, r1
 800e45a:	3201      	adds	r2, #1
 800e45c:	701a      	strb	r2, [r3, #0]
      break;
 800e45e:	e00c      	b.n	800e47a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800e460:	683a      	ldr	r2, [r7, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	0011      	movs	r1, r2
 800e466:	0018      	movs	r0, r3
 800e468:	f000 fa20 	bl	800e8ac <USBD_CtlError>
      err++;
 800e46c:	210b      	movs	r1, #11
 800e46e:	187b      	adds	r3, r7, r1
 800e470:	781a      	ldrb	r2, [r3, #0]
 800e472:	187b      	adds	r3, r7, r1
 800e474:	3201      	adds	r2, #1
 800e476:	701a      	strb	r2, [r3, #0]
      break;
 800e478:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800e47a:	230b      	movs	r3, #11
 800e47c:	18fb      	adds	r3, r7, r3
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d127      	bne.n	800e4d4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e484:	2108      	movs	r1, #8
 800e486:	187b      	adds	r3, r7, r1
 800e488:	881b      	ldrh	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d019      	beq.n	800e4c2 <USBD_GetDescriptor+0x342>
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	88db      	ldrh	r3, [r3, #6]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d015      	beq.n	800e4c2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	88da      	ldrh	r2, [r3, #6]
 800e49a:	187b      	adds	r3, r7, r1
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	1c18      	adds	r0, r3, #0
 800e4a0:	1c11      	adds	r1, r2, #0
 800e4a2:	b28a      	uxth	r2, r1
 800e4a4:	b283      	uxth	r3, r0
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d900      	bls.n	800e4ac <USBD_GetDescriptor+0x32c>
 800e4aa:	1c01      	adds	r1, r0, #0
 800e4ac:	b28a      	uxth	r2, r1
 800e4ae:	2108      	movs	r1, #8
 800e4b0:	187b      	adds	r3, r7, r1
 800e4b2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e4b4:	187b      	adds	r3, r7, r1
 800e4b6:	881a      	ldrh	r2, [r3, #0]
 800e4b8:	68f9      	ldr	r1, [r7, #12]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	0018      	movs	r0, r3
 800e4be:	f000 fa73 	bl	800e9a8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	88db      	ldrh	r3, [r3, #6]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d105      	bne.n	800e4d6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	0018      	movs	r0, r3
 800e4ce:	f000 fad5 	bl	800ea7c <USBD_CtlSendStatus>
 800e4d2:	e000      	b.n	800e4d6 <USBD_GetDescriptor+0x356>
    return;
 800e4d4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	b004      	add	sp, #16
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	0800f790 	.word	0x0800f790
 800e4e0:	0800f7b0 	.word	0x0800f7b0

0800e4e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e4e4:	b590      	push	{r4, r7, lr}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	889b      	ldrh	r3, [r3, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d13d      	bne.n	800e572 <USBD_SetAddress+0x8e>
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	88db      	ldrh	r3, [r3, #6]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d139      	bne.n	800e572 <USBD_SetAddress+0x8e>
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	885b      	ldrh	r3, [r3, #2]
 800e502:	2b7f      	cmp	r3, #127	; 0x7f
 800e504:	d835      	bhi.n	800e572 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	885b      	ldrh	r3, [r3, #2]
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	230f      	movs	r3, #15
 800e50e:	18fb      	adds	r3, r7, r3
 800e510:	217f      	movs	r1, #127	; 0x7f
 800e512:	400a      	ands	r2, r1
 800e514:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	23a7      	movs	r3, #167	; 0xa7
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	5cd3      	ldrb	r3, [r2, r3]
 800e51e:	2b03      	cmp	r3, #3
 800e520:	d106      	bne.n	800e530 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800e522:	683a      	ldr	r2, [r7, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	0011      	movs	r1, r2
 800e528:	0018      	movs	r0, r3
 800e52a:	f000 f9bf 	bl	800e8ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e52e:	e027      	b.n	800e580 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	240f      	movs	r4, #15
 800e534:	193a      	adds	r2, r7, r4
 800e536:	4914      	ldr	r1, [pc, #80]	; (800e588 <USBD_SetAddress+0xa4>)
 800e538:	7812      	ldrb	r2, [r2, #0]
 800e53a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e53c:	193b      	adds	r3, r7, r4
 800e53e:	781a      	ldrb	r2, [r3, #0]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	0011      	movs	r1, r2
 800e544:	0018      	movs	r0, r3
 800e546:	f000 ff09 	bl	800f35c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	0018      	movs	r0, r3
 800e54e:	f000 fa95 	bl	800ea7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e552:	193b      	adds	r3, r7, r4
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d005      	beq.n	800e566 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	23a7      	movs	r3, #167	; 0xa7
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	2102      	movs	r1, #2
 800e562:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e564:	e00c      	b.n	800e580 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	23a7      	movs	r3, #167	; 0xa7
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	2101      	movs	r1, #1
 800e56e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e570:	e006      	b.n	800e580 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e572:	683a      	ldr	r2, [r7, #0]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	0011      	movs	r1, r2
 800e578:	0018      	movs	r0, r3
 800e57a:	f000 f997 	bl	800e8ac <USBD_CtlError>
  }
}
 800e57e:	46c0      	nop			; (mov r8, r8)
 800e580:	46c0      	nop			; (mov r8, r8)
 800e582:	46bd      	mov	sp, r7
 800e584:	b005      	add	sp, #20
 800e586:	bd90      	pop	{r4, r7, pc}
 800e588:	0000029e 	.word	0x0000029e

0800e58c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	885b      	ldrh	r3, [r3, #2]
 800e59a:	b2da      	uxtb	r2, r3
 800e59c:	4b4c      	ldr	r3, [pc, #304]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e59e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e5a0:	4b4b      	ldr	r3, [pc, #300]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d906      	bls.n	800e5b6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800e5a8:	683a      	ldr	r2, [r7, #0]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	0011      	movs	r1, r2
 800e5ae:	0018      	movs	r0, r3
 800e5b0:	f000 f97c 	bl	800e8ac <USBD_CtlError>
 800e5b4:	e088      	b.n	800e6c8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	23a7      	movs	r3, #167	; 0xa7
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	5cd3      	ldrb	r3, [r2, r3]
 800e5be:	2b02      	cmp	r3, #2
 800e5c0:	d002      	beq.n	800e5c8 <USBD_SetConfig+0x3c>
 800e5c2:	2b03      	cmp	r3, #3
 800e5c4:	d029      	beq.n	800e61a <USBD_SetConfig+0x8e>
 800e5c6:	e071      	b.n	800e6ac <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e5c8:	4b41      	ldr	r3, [pc, #260]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d01f      	beq.n	800e610 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800e5d0:	4b3f      	ldr	r3, [pc, #252]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	001a      	movs	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	23a7      	movs	r3, #167	; 0xa7
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	2103      	movs	r1, #3
 800e5e2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e5e4:	4b3a      	ldr	r3, [pc, #232]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e5e6:	781a      	ldrb	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	0011      	movs	r1, r2
 800e5ec:	0018      	movs	r0, r3
 800e5ee:	f7ff f8c6 	bl	800d77e <USBD_SetClassConfig>
 800e5f2:	0003      	movs	r3, r0
 800e5f4:	2b02      	cmp	r3, #2
 800e5f6:	d106      	bne.n	800e606 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	0011      	movs	r1, r2
 800e5fe:	0018      	movs	r0, r3
 800e600:	f000 f954 	bl	800e8ac <USBD_CtlError>
            return;
 800e604:	e060      	b.n	800e6c8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	0018      	movs	r0, r3
 800e60a:	f000 fa37 	bl	800ea7c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e60e:	e05b      	b.n	800e6c8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	0018      	movs	r0, r3
 800e614:	f000 fa32 	bl	800ea7c <USBD_CtlSendStatus>
        break;
 800e618:	e056      	b.n	800e6c8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e61a:	4b2d      	ldr	r3, [pc, #180]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d115      	bne.n	800e64e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	23a7      	movs	r3, #167	; 0xa7
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	2102      	movs	r1, #2
 800e62a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800e62c:	4b28      	ldr	r3, [pc, #160]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	001a      	movs	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e636:	4b26      	ldr	r3, [pc, #152]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e638:	781a      	ldrb	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	0011      	movs	r1, r2
 800e63e:	0018      	movs	r0, r3
 800e640:	f7ff f8c4 	bl	800d7cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	0018      	movs	r0, r3
 800e648:	f000 fa18 	bl	800ea7c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e64c:	e03c      	b.n	800e6c8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800e64e:	4b20      	ldr	r3, [pc, #128]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	001a      	movs	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d022      	beq.n	800e6a2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	b2da      	uxtb	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	0011      	movs	r1, r2
 800e666:	0018      	movs	r0, r3
 800e668:	f7ff f8b0 	bl	800d7cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e66c:	4b18      	ldr	r3, [pc, #96]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	001a      	movs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e676:	4b16      	ldr	r3, [pc, #88]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e678:	781a      	ldrb	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	0011      	movs	r1, r2
 800e67e:	0018      	movs	r0, r3
 800e680:	f7ff f87d 	bl	800d77e <USBD_SetClassConfig>
 800e684:	0003      	movs	r3, r0
 800e686:	2b02      	cmp	r3, #2
 800e688:	d106      	bne.n	800e698 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	0011      	movs	r1, r2
 800e690:	0018      	movs	r0, r3
 800e692:	f000 f90b 	bl	800e8ac <USBD_CtlError>
            return;
 800e696:	e017      	b.n	800e6c8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	0018      	movs	r0, r3
 800e69c:	f000 f9ee 	bl	800ea7c <USBD_CtlSendStatus>
        break;
 800e6a0:	e012      	b.n	800e6c8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	0018      	movs	r0, r3
 800e6a6:	f000 f9e9 	bl	800ea7c <USBD_CtlSendStatus>
        break;
 800e6aa:	e00d      	b.n	800e6c8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800e6ac:	683a      	ldr	r2, [r7, #0]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	0011      	movs	r1, r2
 800e6b2:	0018      	movs	r0, r3
 800e6b4:	f000 f8fa 	bl	800e8ac <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e6b8:	4b05      	ldr	r3, [pc, #20]	; (800e6d0 <USBD_SetConfig+0x144>)
 800e6ba:	781a      	ldrb	r2, [r3, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	0011      	movs	r1, r2
 800e6c0:	0018      	movs	r0, r3
 800e6c2:	f7ff f883 	bl	800d7cc <USBD_ClrClassConfig>
        break;
 800e6c6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	b002      	add	sp, #8
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	46c0      	nop			; (mov r8, r8)
 800e6d0:	2000031c 	.word	0x2000031c

0800e6d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	88db      	ldrh	r3, [r3, #6]
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d006      	beq.n	800e6f4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800e6e6:	683a      	ldr	r2, [r7, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	0011      	movs	r1, r2
 800e6ec:	0018      	movs	r0, r3
 800e6ee:	f000 f8dd 	bl	800e8ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e6f2:	e026      	b.n	800e742 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	23a7      	movs	r3, #167	; 0xa7
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	5cd3      	ldrb	r3, [r2, r3]
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	dc02      	bgt.n	800e706 <USBD_GetConfig+0x32>
 800e700:	2b00      	cmp	r3, #0
 800e702:	dc03      	bgt.n	800e70c <USBD_GetConfig+0x38>
 800e704:	e016      	b.n	800e734 <USBD_GetConfig+0x60>
 800e706:	2b03      	cmp	r3, #3
 800e708:	d00c      	beq.n	800e724 <USBD_GetConfig+0x50>
 800e70a:	e013      	b.n	800e734 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	3308      	adds	r3, #8
 800e716:	0019      	movs	r1, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2201      	movs	r2, #1
 800e71c:	0018      	movs	r0, r3
 800e71e:	f000 f943 	bl	800e9a8 <USBD_CtlSendData>
        break;
 800e722:	e00e      	b.n	800e742 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	1d19      	adds	r1, r3, #4
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2201      	movs	r2, #1
 800e72c:	0018      	movs	r0, r3
 800e72e:	f000 f93b 	bl	800e9a8 <USBD_CtlSendData>
        break;
 800e732:	e006      	b.n	800e742 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	0011      	movs	r1, r2
 800e73a:	0018      	movs	r0, r3
 800e73c:	f000 f8b6 	bl	800e8ac <USBD_CtlError>
        break;
 800e740:	46c0      	nop			; (mov r8, r8)
}
 800e742:	46c0      	nop			; (mov r8, r8)
 800e744:	46bd      	mov	sp, r7
 800e746:	b002      	add	sp, #8
 800e748:	bd80      	pop	{r7, pc}

0800e74a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b082      	sub	sp, #8
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	23a7      	movs	r3, #167	; 0xa7
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	5cd3      	ldrb	r3, [r2, r3]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	2b02      	cmp	r3, #2
 800e760:	d822      	bhi.n	800e7a8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	88db      	ldrh	r3, [r3, #6]
 800e766:	2b02      	cmp	r3, #2
 800e768:	d006      	beq.n	800e778 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800e76a:	683a      	ldr	r2, [r7, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	0011      	movs	r1, r2
 800e770:	0018      	movs	r0, r3
 800e772:	f000 f89b 	bl	800e8ac <USBD_CtlError>
        break;
 800e776:	e01e      	b.n	800e7b6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2201      	movs	r2, #1
 800e77c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	23a9      	movs	r3, #169	; 0xa9
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	58d3      	ldr	r3, [r2, r3]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d005      	beq.n	800e796 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	2202      	movs	r2, #2
 800e790:	431a      	orrs	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	330c      	adds	r3, #12
 800e79a:	0019      	movs	r1, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2202      	movs	r2, #2
 800e7a0:	0018      	movs	r0, r3
 800e7a2:	f000 f901 	bl	800e9a8 <USBD_CtlSendData>
      break;
 800e7a6:	e006      	b.n	800e7b6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	0011      	movs	r1, r2
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	f000 f87c 	bl	800e8ac <USBD_CtlError>
      break;
 800e7b4:	46c0      	nop			; (mov r8, r8)
  }
}
 800e7b6:	46c0      	nop			; (mov r8, r8)
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	b002      	add	sp, #8
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	885b      	ldrh	r3, [r3, #2]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d108      	bne.n	800e7e2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	23a9      	movs	r3, #169	; 0xa9
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	2101      	movs	r1, #1
 800e7d8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	0018      	movs	r0, r3
 800e7de:	f000 f94d 	bl	800ea7c <USBD_CtlSendStatus>
  }
}
 800e7e2:	46c0      	nop			; (mov r8, r8)
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	b002      	add	sp, #8
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b082      	sub	sp, #8
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	23a7      	movs	r3, #167	; 0xa7
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	5cd3      	ldrb	r3, [r2, r3]
 800e7fc:	3b01      	subs	r3, #1
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d80d      	bhi.n	800e81e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	885b      	ldrh	r3, [r3, #2]
 800e806:	2b01      	cmp	r3, #1
 800e808:	d110      	bne.n	800e82c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	23a9      	movs	r3, #169	; 0xa9
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	2100      	movs	r1, #0
 800e812:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	0018      	movs	r0, r3
 800e818:	f000 f930 	bl	800ea7c <USBD_CtlSendStatus>
      }
      break;
 800e81c:	e006      	b.n	800e82c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	0011      	movs	r1, r2
 800e824:	0018      	movs	r0, r3
 800e826:	f000 f841 	bl	800e8ac <USBD_CtlError>
      break;
 800e82a:	e000      	b.n	800e82e <USBD_ClrFeature+0x44>
      break;
 800e82c:	46c0      	nop			; (mov r8, r8)
  }
}
 800e82e:	46c0      	nop			; (mov r8, r8)
 800e830:	46bd      	mov	sp, r7
 800e832:	b002      	add	sp, #8
 800e834:	bd80      	pop	{r7, pc}

0800e836 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	781a      	ldrb	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	785a      	ldrb	r2, [r3, #1]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	3302      	adds	r3, #2
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	b29a      	uxth	r2, r3
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	3303      	adds	r3, #3
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	b29b      	uxth	r3, r3
 800e860:	021b      	lsls	r3, r3, #8
 800e862:	b29b      	uxth	r3, r3
 800e864:	18d3      	adds	r3, r2, r3
 800e866:	b29a      	uxth	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	3304      	adds	r3, #4
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	b29a      	uxth	r2, r3
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	3305      	adds	r3, #5
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	021b      	lsls	r3, r3, #8
 800e87e:	b29b      	uxth	r3, r3
 800e880:	18d3      	adds	r3, r2, r3
 800e882:	b29a      	uxth	r2, r3
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	3306      	adds	r3, #6
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	b29a      	uxth	r2, r3
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	3307      	adds	r3, #7
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	b29b      	uxth	r3, r3
 800e898:	021b      	lsls	r3, r3, #8
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	18d3      	adds	r3, r2, r3
 800e89e:	b29a      	uxth	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	80da      	strh	r2, [r3, #6]

}
 800e8a4:	46c0      	nop			; (mov r8, r8)
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	b002      	add	sp, #8
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2180      	movs	r1, #128	; 0x80
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	f000 fcc7 	bl	800f24e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	0018      	movs	r0, r3
 800e8c6:	f000 fcc2 	bl	800f24e <USBD_LL_StallEP>
}
 800e8ca:	46c0      	nop			; (mov r8, r8)
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	b002      	add	sp, #8
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e8d2:	b590      	push	{r4, r7, lr}
 800e8d4:	b087      	sub	sp, #28
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e8de:	2417      	movs	r4, #23
 800e8e0:	193b      	adds	r3, r7, r4
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d03c      	beq.n	800e966 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	0018      	movs	r0, r3
 800e8f0:	f000 f83d 	bl	800e96e <USBD_GetLen>
 800e8f4:	0003      	movs	r3, r0
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	18db      	adds	r3, r3, r3
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e902:	193b      	adds	r3, r7, r4
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	193a      	adds	r2, r7, r4
 800e908:	1c59      	adds	r1, r3, #1
 800e90a:	7011      	strb	r1, [r2, #0]
 800e90c:	001a      	movs	r2, r3
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	189b      	adds	r3, r3, r2
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	7812      	ldrb	r2, [r2, #0]
 800e916:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e918:	193b      	adds	r3, r7, r4
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	193a      	adds	r2, r7, r4
 800e91e:	1c59      	adds	r1, r3, #1
 800e920:	7011      	strb	r1, [r2, #0]
 800e922:	001a      	movs	r2, r3
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	189b      	adds	r3, r3, r2
 800e928:	2203      	movs	r2, #3
 800e92a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e92c:	e017      	b.n	800e95e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	1c5a      	adds	r2, r3, #1
 800e932:	60fa      	str	r2, [r7, #12]
 800e934:	2417      	movs	r4, #23
 800e936:	193a      	adds	r2, r7, r4
 800e938:	7812      	ldrb	r2, [r2, #0]
 800e93a:	1939      	adds	r1, r7, r4
 800e93c:	1c50      	adds	r0, r2, #1
 800e93e:	7008      	strb	r0, [r1, #0]
 800e940:	0011      	movs	r1, r2
 800e942:	68ba      	ldr	r2, [r7, #8]
 800e944:	1852      	adds	r2, r2, r1
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e94a:	193b      	adds	r3, r7, r4
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	193a      	adds	r2, r7, r4
 800e950:	1c59      	adds	r1, r3, #1
 800e952:	7011      	strb	r1, [r2, #0]
 800e954:	001a      	movs	r2, r3
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	189b      	adds	r3, r3, r2
 800e95a:	2200      	movs	r2, #0
 800e95c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1e3      	bne.n	800e92e <USBD_GetString+0x5c>
    }
  }
}
 800e966:	46c0      	nop			; (mov r8, r8)
 800e968:	46bd      	mov	sp, r7
 800e96a:	b007      	add	sp, #28
 800e96c:	bd90      	pop	{r4, r7, pc}

0800e96e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b084      	sub	sp, #16
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e976:	230f      	movs	r3, #15
 800e978:	18fb      	adds	r3, r7, r3
 800e97a:	2200      	movs	r2, #0
 800e97c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800e97e:	e008      	b.n	800e992 <USBD_GetLen+0x24>
  {
    len++;
 800e980:	210f      	movs	r1, #15
 800e982:	187b      	adds	r3, r7, r1
 800e984:	781a      	ldrb	r2, [r3, #0]
 800e986:	187b      	adds	r3, r7, r1
 800e988:	3201      	adds	r2, #1
 800e98a:	701a      	strb	r2, [r3, #0]
    buf++;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	3301      	adds	r3, #1
 800e990:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1f2      	bne.n	800e980 <USBD_GetLen+0x12>
  }

  return len;
 800e99a:	230f      	movs	r3, #15
 800e99c:	18fb      	adds	r3, r7, r3
 800e99e:	781b      	ldrb	r3, [r3, #0]
}
 800e9a0:	0018      	movs	r0, r3
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	b004      	add	sp, #16
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	1dbb      	adds	r3, r7, #6
 800e9b4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	23a5      	movs	r3, #165	; 0xa5
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	2102      	movs	r1, #2
 800e9be:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800e9c0:	1dbb      	adds	r3, r7, #6
 800e9c2:	881a      	ldrh	r2, [r3, #0]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e9c8:	1dbb      	adds	r3, r7, #6
 800e9ca:	881a      	ldrh	r2, [r3, #0]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e9d0:	1dbb      	adds	r3, r7, #6
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	2100      	movs	r1, #0
 800e9da:	f000 fcea 	bl	800f3b2 <USBD_LL_Transmit>

  return USBD_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	0018      	movs	r0, r3
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	b004      	add	sp, #16
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	1dbb      	adds	r3, r7, #6
 800e9f4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e9f6:	1dbb      	adds	r3, r7, #6
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	2100      	movs	r1, #0
 800ea00:	f000 fcd7 	bl	800f3b2 <USBD_LL_Transmit>

  return USBD_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	0018      	movs	r0, r3
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	b004      	add	sp, #16
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b084      	sub	sp, #16
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	60f8      	str	r0, [r7, #12]
 800ea16:	60b9      	str	r1, [r7, #8]
 800ea18:	1dbb      	adds	r3, r7, #6
 800ea1a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ea1c:	68fa      	ldr	r2, [r7, #12]
 800ea1e:	23a5      	movs	r3, #165	; 0xa5
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	2103      	movs	r1, #3
 800ea24:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800ea26:	1dbb      	adds	r3, r7, #6
 800ea28:	8819      	ldrh	r1, [r3, #0]
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	23ae      	movs	r3, #174	; 0xae
 800ea2e:	005b      	lsls	r3, r3, #1
 800ea30:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800ea32:	1dbb      	adds	r3, r7, #6
 800ea34:	8819      	ldrh	r1, [r3, #0]
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	23b0      	movs	r3, #176	; 0xb0
 800ea3a:	005b      	lsls	r3, r3, #1
 800ea3c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ea3e:	1dbb      	adds	r3, r7, #6
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	2100      	movs	r1, #0
 800ea48:	f000 fcea 	bl	800f420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea4c:	2300      	movs	r3, #0
}
 800ea4e:	0018      	movs	r0, r3
 800ea50:	46bd      	mov	sp, r7
 800ea52:	b004      	add	sp, #16
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b084      	sub	sp, #16
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	60f8      	str	r0, [r7, #12]
 800ea5e:	60b9      	str	r1, [r7, #8]
 800ea60:	1dbb      	adds	r3, r7, #6
 800ea62:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ea64:	1dbb      	adds	r3, r7, #6
 800ea66:	881b      	ldrh	r3, [r3, #0]
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	f000 fcd7 	bl	800f420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	0018      	movs	r0, r3
 800ea76:	46bd      	mov	sp, r7
 800ea78:	b004      	add	sp, #16
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	23a5      	movs	r3, #165	; 0xa5
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	2104      	movs	r1, #4
 800ea8c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	2300      	movs	r3, #0
 800ea92:	2200      	movs	r2, #0
 800ea94:	2100      	movs	r1, #0
 800ea96:	f000 fc8c 	bl	800f3b2 <USBD_LL_Transmit>

  return USBD_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	0018      	movs	r0, r3
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	b002      	add	sp, #8
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	23a5      	movs	r3, #165	; 0xa5
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	2105      	movs	r1, #5
 800eab4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	2300      	movs	r3, #0
 800eaba:	2200      	movs	r2, #0
 800eabc:	2100      	movs	r1, #0
 800eabe:	f000 fcaf 	bl	800f420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	0018      	movs	r0, r3
 800eac6:	46bd      	mov	sp, r7
 800eac8:	b002      	add	sp, #8
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ead0:	4914      	ldr	r1, [pc, #80]	; (800eb24 <MX_USB_DEVICE_Init+0x58>)
 800ead2:	4b15      	ldr	r3, [pc, #84]	; (800eb28 <MX_USB_DEVICE_Init+0x5c>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	0018      	movs	r0, r3
 800ead8:	f7fe fdea 	bl	800d6b0 <USBD_Init>
 800eadc:	1e03      	subs	r3, r0, #0
 800eade:	d001      	beq.n	800eae4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eae0:	f7f2 fce4 	bl	80014ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eae4:	4a11      	ldr	r2, [pc, #68]	; (800eb2c <MX_USB_DEVICE_Init+0x60>)
 800eae6:	4b10      	ldr	r3, [pc, #64]	; (800eb28 <MX_USB_DEVICE_Init+0x5c>)
 800eae8:	0011      	movs	r1, r2
 800eaea:	0018      	movs	r0, r3
 800eaec:	f7fe fe11 	bl	800d712 <USBD_RegisterClass>
 800eaf0:	1e03      	subs	r3, r0, #0
 800eaf2:	d001      	beq.n	800eaf8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800eaf4:	f7f2 fcda 	bl	80014ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eaf8:	4a0d      	ldr	r2, [pc, #52]	; (800eb30 <MX_USB_DEVICE_Init+0x64>)
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <MX_USB_DEVICE_Init+0x5c>)
 800eafc:	0011      	movs	r1, r2
 800eafe:	0018      	movs	r0, r3
 800eb00:	f7fe fd26 	bl	800d550 <USBD_CDC_RegisterInterface>
 800eb04:	1e03      	subs	r3, r0, #0
 800eb06:	d001      	beq.n	800eb0c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800eb08:	f7f2 fcd0 	bl	80014ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eb0c:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <MX_USB_DEVICE_Init+0x5c>)
 800eb0e:	0018      	movs	r0, r3
 800eb10:	f7fe fe1f 	bl	800d752 <USBD_Start>
 800eb14:	1e03      	subs	r3, r0, #0
 800eb16:	d001      	beq.n	800eb1c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800eb18:	f7f2 fcc8 	bl	80014ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eb1c:	46c0      	nop			; (mov r8, r8)
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	46c0      	nop			; (mov r8, r8)
 800eb24:	20000238 	.word	0x20000238
 800eb28:	20000a28 	.word	0x20000a28
 800eb2c:	20000124 	.word	0x20000124
 800eb30:	20000228 	.word	0x20000228

0800eb34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eb38:	4907      	ldr	r1, [pc, #28]	; (800eb58 <CDC_Init_FS+0x24>)
 800eb3a:	4b08      	ldr	r3, [pc, #32]	; (800eb5c <CDC_Init_FS+0x28>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	0018      	movs	r0, r3
 800eb40:	f7fe fd21 	bl	800d586 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eb44:	4a06      	ldr	r2, [pc, #24]	; (800eb60 <CDC_Init_FS+0x2c>)
 800eb46:	4b05      	ldr	r3, [pc, #20]	; (800eb5c <CDC_Init_FS+0x28>)
 800eb48:	0011      	movs	r1, r2
 800eb4a:	0018      	movs	r0, r3
 800eb4c:	f7fe fd37 	bl	800d5be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eb50:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eb52:	0018      	movs	r0, r3
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	200010d4 	.word	0x200010d4
 800eb5c:	20000a28 	.word	0x20000a28
 800eb60:	20000cec 	.word	0x20000cec

0800eb64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eb68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eb6a:	0018      	movs	r0, r3
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6039      	str	r1, [r7, #0]
 800eb78:	0011      	movs	r1, r2
 800eb7a:	1dfb      	adds	r3, r7, #7
 800eb7c:	1c02      	adds	r2, r0, #0
 800eb7e:	701a      	strb	r2, [r3, #0]
 800eb80:	1d3b      	adds	r3, r7, #4
 800eb82:	1c0a      	adds	r2, r1, #0
 800eb84:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eb86:	1dfb      	adds	r3, r7, #7
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	2b23      	cmp	r3, #35	; 0x23
 800eb8c:	d804      	bhi.n	800eb98 <CDC_Control_FS+0x28>
 800eb8e:	009a      	lsls	r2, r3, #2
 800eb90:	4b04      	ldr	r3, [pc, #16]	; (800eba4 <CDC_Control_FS+0x34>)
 800eb92:	18d3      	adds	r3, r2, r3
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb98:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800eb9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb9c:	0018      	movs	r0, r3
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	b002      	add	sp, #8
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	0800f7c8 	.word	0x0800f7c8

0800eba8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	4b0a      	ldr	r3, [pc, #40]	; (800ebe0 <CDC_Receive_FS+0x38>)
 800ebb6:	0011      	movs	r1, r2
 800ebb8:	0018      	movs	r0, r3
 800ebba:	f7fe fd00 	bl	800d5be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ebbe:	4b08      	ldr	r3, [pc, #32]	; (800ebe0 <CDC_Receive_FS+0x38>)
 800ebc0:	0018      	movs	r0, r3
 800ebc2:	f7fe fd47 	bl	800d654 <USBD_CDC_ReceivePacket>
  usb_addToQueue(&usb_Q, Buf, *Len);
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	4b05      	ldr	r3, [pc, #20]	; (800ebe4 <CDC_Receive_FS+0x3c>)
 800ebd0:	0018      	movs	r0, r3
 800ebd2:	f7f3 fc53 	bl	800247c <usb_addToQueue>
  return (USBD_OK);
 800ebd6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ebd8:	0018      	movs	r0, r3
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	b002      	add	sp, #8
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	20000a28 	.word	0x20000a28
 800ebe4:	20000738 	.word	0x20000738

0800ebe8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ebe8:	b5b0      	push	{r4, r5, r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	000a      	movs	r2, r1
 800ebf2:	1cbb      	adds	r3, r7, #2
 800ebf4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800ebf6:	230f      	movs	r3, #15
 800ebf8:	18fb      	adds	r3, r7, r3
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ebfe:	4a11      	ldr	r2, [pc, #68]	; (800ec44 <CDC_Transmit_FS+0x5c>)
 800ec00:	23ae      	movs	r3, #174	; 0xae
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	58d3      	ldr	r3, [r2, r3]
 800ec06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ec08:	68ba      	ldr	r2, [r7, #8]
 800ec0a:	2385      	movs	r3, #133	; 0x85
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	58d3      	ldr	r3, [r2, r3]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800ec14:	2301      	movs	r3, #1
 800ec16:	e010      	b.n	800ec3a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ec18:	1cbb      	adds	r3, r7, #2
 800ec1a:	881a      	ldrh	r2, [r3, #0]
 800ec1c:	6879      	ldr	r1, [r7, #4]
 800ec1e:	4b09      	ldr	r3, [pc, #36]	; (800ec44 <CDC_Transmit_FS+0x5c>)
 800ec20:	0018      	movs	r0, r3
 800ec22:	f7fe fcb0 	bl	800d586 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ec26:	250f      	movs	r5, #15
 800ec28:	197c      	adds	r4, r7, r5
 800ec2a:	4b06      	ldr	r3, [pc, #24]	; (800ec44 <CDC_Transmit_FS+0x5c>)
 800ec2c:	0018      	movs	r0, r3
 800ec2e:	f7fe fcda 	bl	800d5e6 <USBD_CDC_TransmitPacket>
 800ec32:	0003      	movs	r3, r0
 800ec34:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800ec36:	197b      	adds	r3, r7, r5
 800ec38:	781b      	ldrb	r3, [r3, #0]
}
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	b004      	add	sp, #16
 800ec40:	bdb0      	pop	{r4, r5, r7, pc}
 800ec42:	46c0      	nop			; (mov r8, r8)
 800ec44:	20000a28 	.word	0x20000a28

0800ec48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	0002      	movs	r2, r0
 800ec50:	6039      	str	r1, [r7, #0]
 800ec52:	1dfb      	adds	r3, r7, #7
 800ec54:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2212      	movs	r2, #18
 800ec5a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ec5c:	4b02      	ldr	r3, [pc, #8]	; (800ec68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ec5e:	0018      	movs	r0, r3
 800ec60:	46bd      	mov	sp, r7
 800ec62:	b002      	add	sp, #8
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	46c0      	nop			; (mov r8, r8)
 800ec68:	20000254 	.word	0x20000254

0800ec6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	0002      	movs	r2, r0
 800ec74:	6039      	str	r1, [r7, #0]
 800ec76:	1dfb      	adds	r3, r7, #7
 800ec78:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	2204      	movs	r2, #4
 800ec7e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ec80:	4b02      	ldr	r3, [pc, #8]	; (800ec8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ec82:	0018      	movs	r0, r3
 800ec84:	46bd      	mov	sp, r7
 800ec86:	b002      	add	sp, #8
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	46c0      	nop			; (mov r8, r8)
 800ec8c:	20000268 	.word	0x20000268

0800ec90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	0002      	movs	r2, r0
 800ec98:	6039      	str	r1, [r7, #0]
 800ec9a:	1dfb      	adds	r3, r7, #7
 800ec9c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ec9e:	1dfb      	adds	r3, r7, #7
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d106      	bne.n	800ecb4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	4908      	ldr	r1, [pc, #32]	; (800eccc <USBD_FS_ProductStrDescriptor+0x3c>)
 800ecaa:	4b09      	ldr	r3, [pc, #36]	; (800ecd0 <USBD_FS_ProductStrDescriptor+0x40>)
 800ecac:	0018      	movs	r0, r3
 800ecae:	f7ff fe10 	bl	800e8d2 <USBD_GetString>
 800ecb2:	e005      	b.n	800ecc0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	4905      	ldr	r1, [pc, #20]	; (800eccc <USBD_FS_ProductStrDescriptor+0x3c>)
 800ecb8:	4b05      	ldr	r3, [pc, #20]	; (800ecd0 <USBD_FS_ProductStrDescriptor+0x40>)
 800ecba:	0018      	movs	r0, r3
 800ecbc:	f7ff fe09 	bl	800e8d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecc0:	4b02      	ldr	r3, [pc, #8]	; (800eccc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800ecc2:	0018      	movs	r0, r3
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	b002      	add	sp, #8
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	46c0      	nop			; (mov r8, r8)
 800eccc:	200014bc 	.word	0x200014bc
 800ecd0:	0800f5f0 	.word	0x0800f5f0

0800ecd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	0002      	movs	r2, r0
 800ecdc:	6039      	str	r1, [r7, #0]
 800ecde:	1dfb      	adds	r3, r7, #7
 800ece0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	4904      	ldr	r1, [pc, #16]	; (800ecf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ece6:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800ece8:	0018      	movs	r0, r3
 800ecea:	f7ff fdf2 	bl	800e8d2 <USBD_GetString>
  return USBD_StrDesc;
 800ecee:	4b02      	ldr	r3, [pc, #8]	; (800ecf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800ecf0:	0018      	movs	r0, r3
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	b002      	add	sp, #8
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	200014bc 	.word	0x200014bc
 800ecfc:	0800f608 	.word	0x0800f608

0800ed00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	0002      	movs	r2, r0
 800ed08:	6039      	str	r1, [r7, #0]
 800ed0a:	1dfb      	adds	r3, r7, #7
 800ed0c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	221a      	movs	r2, #26
 800ed12:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ed14:	f000 f84c 	bl	800edb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ed18:	4b02      	ldr	r3, [pc, #8]	; (800ed24 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800ed1a:	0018      	movs	r0, r3
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	b002      	add	sp, #8
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	46c0      	nop			; (mov r8, r8)
 800ed24:	2000026c 	.word	0x2000026c

0800ed28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	0002      	movs	r2, r0
 800ed30:	6039      	str	r1, [r7, #0]
 800ed32:	1dfb      	adds	r3, r7, #7
 800ed34:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800ed36:	1dfb      	adds	r3, r7, #7
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d106      	bne.n	800ed4c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	4908      	ldr	r1, [pc, #32]	; (800ed64 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ed42:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <USBD_FS_ConfigStrDescriptor+0x40>)
 800ed44:	0018      	movs	r0, r3
 800ed46:	f7ff fdc4 	bl	800e8d2 <USBD_GetString>
 800ed4a:	e005      	b.n	800ed58 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	4905      	ldr	r1, [pc, #20]	; (800ed64 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ed50:	4b05      	ldr	r3, [pc, #20]	; (800ed68 <USBD_FS_ConfigStrDescriptor+0x40>)
 800ed52:	0018      	movs	r0, r3
 800ed54:	f7ff fdbd 	bl	800e8d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed58:	4b02      	ldr	r3, [pc, #8]	; (800ed64 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800ed5a:	0018      	movs	r0, r3
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	b002      	add	sp, #8
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	46c0      	nop			; (mov r8, r8)
 800ed64:	200014bc 	.word	0x200014bc
 800ed68:	0800f61c 	.word	0x0800f61c

0800ed6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	0002      	movs	r2, r0
 800ed74:	6039      	str	r1, [r7, #0]
 800ed76:	1dfb      	adds	r3, r7, #7
 800ed78:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ed7a:	1dfb      	adds	r3, r7, #7
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d106      	bne.n	800ed90 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	4908      	ldr	r1, [pc, #32]	; (800eda8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800ed86:	4b09      	ldr	r3, [pc, #36]	; (800edac <USBD_FS_InterfaceStrDescriptor+0x40>)
 800ed88:	0018      	movs	r0, r3
 800ed8a:	f7ff fda2 	bl	800e8d2 <USBD_GetString>
 800ed8e:	e005      	b.n	800ed9c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	4905      	ldr	r1, [pc, #20]	; (800eda8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800ed94:	4b05      	ldr	r3, [pc, #20]	; (800edac <USBD_FS_InterfaceStrDescriptor+0x40>)
 800ed96:	0018      	movs	r0, r3
 800ed98:	f7ff fd9b 	bl	800e8d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed9c:	4b02      	ldr	r3, [pc, #8]	; (800eda8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800ed9e:	0018      	movs	r0, r3
 800eda0:	46bd      	mov	sp, r7
 800eda2:	b002      	add	sp, #8
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	46c0      	nop			; (mov r8, r8)
 800eda8:	200014bc 	.word	0x200014bc
 800edac:	0800f628 	.word	0x0800f628

0800edb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800edb6:	4b10      	ldr	r3, [pc, #64]	; (800edf8 <Get_SerialNum+0x48>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800edbc:	4b0f      	ldr	r3, [pc, #60]	; (800edfc <Get_SerialNum+0x4c>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800edc2:	4b0f      	ldr	r3, [pc, #60]	; (800ee00 <Get_SerialNum+0x50>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800edc8:	68fa      	ldr	r2, [r7, #12]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	18d3      	adds	r3, r2, r3
 800edce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00b      	beq.n	800edee <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800edd6:	490b      	ldr	r1, [pc, #44]	; (800ee04 <Get_SerialNum+0x54>)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2208      	movs	r2, #8
 800eddc:	0018      	movs	r0, r3
 800edde:	f000 f815 	bl	800ee0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ede2:	4909      	ldr	r1, [pc, #36]	; (800ee08 <Get_SerialNum+0x58>)
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2204      	movs	r2, #4
 800ede8:	0018      	movs	r0, r3
 800edea:	f000 f80f 	bl	800ee0c <IntToUnicode>
  }
}
 800edee:	46c0      	nop			; (mov r8, r8)
 800edf0:	46bd      	mov	sp, r7
 800edf2:	b004      	add	sp, #16
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	46c0      	nop			; (mov r8, r8)
 800edf8:	1ffff7ac 	.word	0x1ffff7ac
 800edfc:	1ffff7b0 	.word	0x1ffff7b0
 800ee00:	1ffff7b4 	.word	0x1ffff7b4
 800ee04:	2000026e 	.word	0x2000026e
 800ee08:	2000027e 	.word	0x2000027e

0800ee0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	1dfb      	adds	r3, r7, #7
 800ee18:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800ee1a:	2117      	movs	r1, #23
 800ee1c:	187b      	adds	r3, r7, r1
 800ee1e:	2200      	movs	r2, #0
 800ee20:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800ee22:	187b      	adds	r3, r7, r1
 800ee24:	2200      	movs	r2, #0
 800ee26:	701a      	strb	r2, [r3, #0]
 800ee28:	e02f      	b.n	800ee8a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	0f1b      	lsrs	r3, r3, #28
 800ee2e:	2b09      	cmp	r3, #9
 800ee30:	d80d      	bhi.n	800ee4e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	0f1b      	lsrs	r3, r3, #28
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	2317      	movs	r3, #23
 800ee3a:	18fb      	adds	r3, r7, r3
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	005b      	lsls	r3, r3, #1
 800ee40:	0019      	movs	r1, r3
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	185b      	adds	r3, r3, r1
 800ee46:	3230      	adds	r2, #48	; 0x30
 800ee48:	b2d2      	uxtb	r2, r2
 800ee4a:	701a      	strb	r2, [r3, #0]
 800ee4c:	e00c      	b.n	800ee68 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	0f1b      	lsrs	r3, r3, #28
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	2317      	movs	r3, #23
 800ee56:	18fb      	adds	r3, r7, r3
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	005b      	lsls	r3, r3, #1
 800ee5c:	0019      	movs	r1, r3
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	185b      	adds	r3, r3, r1
 800ee62:	3237      	adds	r2, #55	; 0x37
 800ee64:	b2d2      	uxtb	r2, r2
 800ee66:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	011b      	lsls	r3, r3, #4
 800ee6c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ee6e:	2117      	movs	r1, #23
 800ee70:	187b      	adds	r3, r7, r1
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	005b      	lsls	r3, r3, #1
 800ee76:	3301      	adds	r3, #1
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	18d3      	adds	r3, r2, r3
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ee80:	187b      	adds	r3, r7, r1
 800ee82:	781a      	ldrb	r2, [r3, #0]
 800ee84:	187b      	adds	r3, r7, r1
 800ee86:	3201      	adds	r2, #1
 800ee88:	701a      	strb	r2, [r3, #0]
 800ee8a:	2317      	movs	r3, #23
 800ee8c:	18fa      	adds	r2, r7, r3
 800ee8e:	1dfb      	adds	r3, r7, #7
 800ee90:	7812      	ldrb	r2, [r2, #0]
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d3c8      	bcc.n	800ee2a <IntToUnicode+0x1e>
  }
}
 800ee98:	46c0      	nop			; (mov r8, r8)
 800ee9a:	46c0      	nop			; (mov r8, r8)
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	b006      	add	sp, #24
 800eea0:	bd80      	pop	{r7, pc}
	...

0800eea4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a0e      	ldr	r2, [pc, #56]	; (800eeec <HAL_PCD_MspInit+0x48>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d115      	bne.n	800eee2 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800eeb6:	4b0e      	ldr	r3, [pc, #56]	; (800eef0 <HAL_PCD_MspInit+0x4c>)
 800eeb8:	69da      	ldr	r2, [r3, #28]
 800eeba:	4b0d      	ldr	r3, [pc, #52]	; (800eef0 <HAL_PCD_MspInit+0x4c>)
 800eebc:	2180      	movs	r1, #128	; 0x80
 800eebe:	0409      	lsls	r1, r1, #16
 800eec0:	430a      	orrs	r2, r1
 800eec2:	61da      	str	r2, [r3, #28]
 800eec4:	4b0a      	ldr	r3, [pc, #40]	; (800eef0 <HAL_PCD_MspInit+0x4c>)
 800eec6:	69da      	ldr	r2, [r3, #28]
 800eec8:	2380      	movs	r3, #128	; 0x80
 800eeca:	041b      	lsls	r3, r3, #16
 800eecc:	4013      	ands	r3, r2
 800eece:	60fb      	str	r3, [r7, #12]
 800eed0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800eed2:	2200      	movs	r2, #0
 800eed4:	2100      	movs	r1, #0
 800eed6:	201f      	movs	r0, #31
 800eed8:	f7f5 fdae 	bl	8004a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800eedc:	201f      	movs	r0, #31
 800eede:	f7f5 fdc0 	bl	8004a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800eee2:	46c0      	nop			; (mov r8, r8)
 800eee4:	46bd      	mov	sp, r7
 800eee6:	b004      	add	sp, #16
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	46c0      	nop			; (mov r8, r8)
 800eeec:	40005c00 	.word	0x40005c00
 800eef0:	40021000 	.word	0x40021000

0800eef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	23bc      	movs	r3, #188	; 0xbc
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	58d2      	ldr	r2, [r2, r3]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	21ac      	movs	r1, #172	; 0xac
 800ef08:	0089      	lsls	r1, r1, #2
 800ef0a:	468c      	mov	ip, r1
 800ef0c:	4463      	add	r3, ip
 800ef0e:	0019      	movs	r1, r3
 800ef10:	0010      	movs	r0, r2
 800ef12:	f7fe fc71 	bl	800d7f8 <USBD_LL_SetupStage>
}
 800ef16:	46c0      	nop			; (mov r8, r8)
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	b002      	add	sp, #8
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef1e:	b590      	push	{r4, r7, lr}
 800ef20:	b083      	sub	sp, #12
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	000a      	movs	r2, r1
 800ef28:	1cfb      	adds	r3, r7, #3
 800ef2a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	23bc      	movs	r3, #188	; 0xbc
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	58d4      	ldr	r4, [r2, r3]
 800ef34:	1cfb      	adds	r3, r7, #3
 800ef36:	781a      	ldrb	r2, [r3, #0]
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	23be      	movs	r3, #190	; 0xbe
 800ef3c:	0059      	lsls	r1, r3, #1
 800ef3e:	0013      	movs	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	189b      	adds	r3, r3, r2
 800ef44:	00db      	lsls	r3, r3, #3
 800ef46:	18c3      	adds	r3, r0, r3
 800ef48:	185b      	adds	r3, r3, r1
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	1cfb      	adds	r3, r7, #3
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	0019      	movs	r1, r3
 800ef52:	0020      	movs	r0, r4
 800ef54:	f7fe fcae 	bl	800d8b4 <USBD_LL_DataOutStage>
}
 800ef58:	46c0      	nop			; (mov r8, r8)
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	b003      	add	sp, #12
 800ef5e:	bd90      	pop	{r4, r7, pc}

0800ef60 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	000a      	movs	r2, r1
 800ef6a:	1cfb      	adds	r3, r7, #3
 800ef6c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	23bc      	movs	r3, #188	; 0xbc
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	58d0      	ldr	r0, [r2, r3]
 800ef76:	1cfb      	adds	r3, r7, #3
 800ef78:	781a      	ldrb	r2, [r3, #0]
 800ef7a:	6879      	ldr	r1, [r7, #4]
 800ef7c:	0013      	movs	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	189b      	adds	r3, r3, r2
 800ef82:	00db      	lsls	r3, r3, #3
 800ef84:	18cb      	adds	r3, r1, r3
 800ef86:	333c      	adds	r3, #60	; 0x3c
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	1cfb      	adds	r3, r7, #3
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	0019      	movs	r1, r3
 800ef90:	f7fe fd12 	bl	800d9b8 <USBD_LL_DataInStage>
}
 800ef94:	46c0      	nop			; (mov r8, r8)
 800ef96:	46bd      	mov	sp, r7
 800ef98:	b002      	add	sp, #8
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	23bc      	movs	r3, #188	; 0xbc
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	58d3      	ldr	r3, [r2, r3]
 800efac:	0018      	movs	r0, r3
 800efae:	f7fe fe49 	bl	800dc44 <USBD_LL_SOF>
}
 800efb2:	46c0      	nop			; (mov r8, r8)
 800efb4:	46bd      	mov	sp, r7
 800efb6:	b002      	add	sp, #8
 800efb8:	bd80      	pop	{r7, pc}

0800efba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b084      	sub	sp, #16
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800efc2:	230f      	movs	r3, #15
 800efc4:	18fb      	adds	r3, r7, r3
 800efc6:	2201      	movs	r2, #1
 800efc8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	689b      	ldr	r3, [r3, #8]
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d001      	beq.n	800efd6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800efd2:	f7f2 fa6b 	bl	80014ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	23bc      	movs	r3, #188	; 0xbc
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	58d2      	ldr	r2, [r2, r3]
 800efde:	230f      	movs	r3, #15
 800efe0:	18fb      	adds	r3, r7, r3
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	0019      	movs	r1, r3
 800efe6:	0010      	movs	r0, r2
 800efe8:	f7fe fdeb 	bl	800dbc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	23bc      	movs	r3, #188	; 0xbc
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	58d3      	ldr	r3, [r2, r3]
 800eff4:	0018      	movs	r0, r3
 800eff6:	f7fe fd9c 	bl	800db32 <USBD_LL_Reset>
}
 800effa:	46c0      	nop			; (mov r8, r8)
 800effc:	46bd      	mov	sp, r7
 800effe:	b004      	add	sp, #16
 800f000:	bd80      	pop	{r7, pc}
	...

0800f004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	23bc      	movs	r3, #188	; 0xbc
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	58d3      	ldr	r3, [r2, r3]
 800f014:	0018      	movs	r0, r3
 800f016:	f7fe fde5 	bl	800dbe4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d005      	beq.n	800f02e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f022:	4b05      	ldr	r3, [pc, #20]	; (800f038 <HAL_PCD_SuspendCallback+0x34>)
 800f024:	691a      	ldr	r2, [r3, #16]
 800f026:	4b04      	ldr	r3, [pc, #16]	; (800f038 <HAL_PCD_SuspendCallback+0x34>)
 800f028:	2106      	movs	r1, #6
 800f02a:	430a      	orrs	r2, r1
 800f02c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800f02e:	46c0      	nop			; (mov r8, r8)
 800f030:	46bd      	mov	sp, r7
 800f032:	b002      	add	sp, #8
 800f034:	bd80      	pop	{r7, pc}
 800f036:	46c0      	nop			; (mov r8, r8)
 800f038:	e000ed00 	.word	0xe000ed00

0800f03c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	699b      	ldr	r3, [r3, #24]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d007      	beq.n	800f05c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f04c:	4b09      	ldr	r3, [pc, #36]	; (800f074 <HAL_PCD_ResumeCallback+0x38>)
 800f04e:	691a      	ldr	r2, [r3, #16]
 800f050:	4b08      	ldr	r3, [pc, #32]	; (800f074 <HAL_PCD_ResumeCallback+0x38>)
 800f052:	2106      	movs	r1, #6
 800f054:	438a      	bics	r2, r1
 800f056:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800f058:	f000 fa44 	bl	800f4e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	23bc      	movs	r3, #188	; 0xbc
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	58d3      	ldr	r3, [r2, r3]
 800f064:	0018      	movs	r0, r3
 800f066:	f7fe fdd5 	bl	800dc14 <USBD_LL_Resume>
}
 800f06a:	46c0      	nop			; (mov r8, r8)
 800f06c:	46bd      	mov	sp, r7
 800f06e:	b002      	add	sp, #8
 800f070:	bd80      	pop	{r7, pc}
 800f072:	46c0      	nop			; (mov r8, r8)
 800f074:	e000ed00 	.word	0xe000ed00

0800f078 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800f080:	4a2d      	ldr	r2, [pc, #180]	; (800f138 <USBD_LL_Init+0xc0>)
 800f082:	23bc      	movs	r3, #188	; 0xbc
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	6879      	ldr	r1, [r7, #4]
 800f088:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	23b0      	movs	r3, #176	; 0xb0
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4929      	ldr	r1, [pc, #164]	; (800f138 <USBD_LL_Init+0xc0>)
 800f092:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800f094:	4b28      	ldr	r3, [pc, #160]	; (800f138 <USBD_LL_Init+0xc0>)
 800f096:	4a29      	ldr	r2, [pc, #164]	; (800f13c <USBD_LL_Init+0xc4>)
 800f098:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f09a:	4b27      	ldr	r3, [pc, #156]	; (800f138 <USBD_LL_Init+0xc0>)
 800f09c:	2208      	movs	r2, #8
 800f09e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f0a0:	4b25      	ldr	r3, [pc, #148]	; (800f138 <USBD_LL_Init+0xc0>)
 800f0a2:	2202      	movs	r2, #2
 800f0a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f0a6:	4b24      	ldr	r3, [pc, #144]	; (800f138 <USBD_LL_Init+0xc0>)
 800f0a8:	2202      	movs	r2, #2
 800f0aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f0ac:	4b22      	ldr	r3, [pc, #136]	; (800f138 <USBD_LL_Init+0xc0>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f0b2:	4b21      	ldr	r3, [pc, #132]	; (800f138 <USBD_LL_Init+0xc0>)
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f0b8:	4b1f      	ldr	r3, [pc, #124]	; (800f138 <USBD_LL_Init+0xc0>)
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f0be:	4b1e      	ldr	r3, [pc, #120]	; (800f138 <USBD_LL_Init+0xc0>)
 800f0c0:	0018      	movs	r0, r3
 800f0c2:	f7f7 fe8d 	bl	8006de0 <HAL_PCD_Init>
 800f0c6:	1e03      	subs	r3, r0, #0
 800f0c8:	d001      	beq.n	800f0ce <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800f0ca:	f7f2 f9ef 	bl	80014ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	23b0      	movs	r3, #176	; 0xb0
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	58d0      	ldr	r0, [r2, r3]
 800f0d6:	2318      	movs	r3, #24
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2100      	movs	r1, #0
 800f0dc:	f7f9 fa90 	bl	8008600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	23b0      	movs	r3, #176	; 0xb0
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	58d0      	ldr	r0, [r2, r3]
 800f0e8:	2358      	movs	r3, #88	; 0x58
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	2180      	movs	r1, #128	; 0x80
 800f0ee:	f7f9 fa87 	bl	8008600 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	23b0      	movs	r3, #176	; 0xb0
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	58d0      	ldr	r0, [r2, r3]
 800f0fa:	23c0      	movs	r3, #192	; 0xc0
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	2181      	movs	r1, #129	; 0x81
 800f100:	f7f9 fa7e 	bl	8008600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	23b0      	movs	r3, #176	; 0xb0
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	58d0      	ldr	r0, [r2, r3]
 800f10c:	2388      	movs	r3, #136	; 0x88
 800f10e:	005b      	lsls	r3, r3, #1
 800f110:	2200      	movs	r2, #0
 800f112:	2101      	movs	r1, #1
 800f114:	f7f9 fa74 	bl	8008600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	23b0      	movs	r3, #176	; 0xb0
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	58d0      	ldr	r0, [r2, r3]
 800f120:	2380      	movs	r3, #128	; 0x80
 800f122:	005b      	lsls	r3, r3, #1
 800f124:	2200      	movs	r2, #0
 800f126:	2182      	movs	r1, #130	; 0x82
 800f128:	f7f9 fa6a 	bl	8008600 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	0018      	movs	r0, r3
 800f130:	46bd      	mov	sp, r7
 800f132:	b002      	add	sp, #8
 800f134:	bd80      	pop	{r7, pc}
 800f136:	46c0      	nop			; (mov r8, r8)
 800f138:	200016bc 	.word	0x200016bc
 800f13c:	40005c00 	.word	0x40005c00

0800f140 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f148:	210f      	movs	r1, #15
 800f14a:	187b      	adds	r3, r7, r1
 800f14c:	2200      	movs	r2, #0
 800f14e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f150:	260e      	movs	r6, #14
 800f152:	19bb      	adds	r3, r7, r6
 800f154:	2200      	movs	r2, #0
 800f156:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	23b0      	movs	r3, #176	; 0xb0
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	58d3      	ldr	r3, [r2, r3]
 800f160:	000d      	movs	r5, r1
 800f162:	187c      	adds	r4, r7, r1
 800f164:	0018      	movs	r0, r3
 800f166:	f7f7 ff4b 	bl	8007000 <HAL_PCD_Start>
 800f16a:	0003      	movs	r3, r0
 800f16c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f16e:	19bc      	adds	r4, r7, r6
 800f170:	197b      	adds	r3, r7, r5
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	0018      	movs	r0, r3
 800f176:	f000 f9bc 	bl	800f4f2 <USBD_Get_USB_Status>
 800f17a:	0003      	movs	r3, r0
 800f17c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f17e:	19bb      	adds	r3, r7, r6
 800f180:	781b      	ldrb	r3, [r3, #0]
}
 800f182:	0018      	movs	r0, r3
 800f184:	46bd      	mov	sp, r7
 800f186:	b005      	add	sp, #20
 800f188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f18a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f18a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f18c:	b085      	sub	sp, #20
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	000c      	movs	r4, r1
 800f194:	0010      	movs	r0, r2
 800f196:	0019      	movs	r1, r3
 800f198:	1cfb      	adds	r3, r7, #3
 800f19a:	1c22      	adds	r2, r4, #0
 800f19c:	701a      	strb	r2, [r3, #0]
 800f19e:	1cbb      	adds	r3, r7, #2
 800f1a0:	1c02      	adds	r2, r0, #0
 800f1a2:	701a      	strb	r2, [r3, #0]
 800f1a4:	003b      	movs	r3, r7
 800f1a6:	1c0a      	adds	r2, r1, #0
 800f1a8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1aa:	260f      	movs	r6, #15
 800f1ac:	19bb      	adds	r3, r7, r6
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1b2:	250e      	movs	r5, #14
 800f1b4:	197b      	adds	r3, r7, r5
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	23b0      	movs	r3, #176	; 0xb0
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	58d0      	ldr	r0, [r2, r3]
 800f1c2:	19bc      	adds	r4, r7, r6
 800f1c4:	1cbb      	adds	r3, r7, #2
 800f1c6:	781d      	ldrb	r5, [r3, #0]
 800f1c8:	003b      	movs	r3, r7
 800f1ca:	881a      	ldrh	r2, [r3, #0]
 800f1cc:	1cfb      	adds	r3, r7, #3
 800f1ce:	7819      	ldrb	r1, [r3, #0]
 800f1d0:	002b      	movs	r3, r5
 800f1d2:	f7f8 f8e2 	bl	800739a <HAL_PCD_EP_Open>
 800f1d6:	0003      	movs	r3, r0
 800f1d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1da:	250e      	movs	r5, #14
 800f1dc:	197c      	adds	r4, r7, r5
 800f1de:	19bb      	adds	r3, r7, r6
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	0018      	movs	r0, r3
 800f1e4:	f000 f985 	bl	800f4f2 <USBD_Get_USB_Status>
 800f1e8:	0003      	movs	r3, r0
 800f1ea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f1ec:	197b      	adds	r3, r7, r5
 800f1ee:	781b      	ldrb	r3, [r3, #0]
}
 800f1f0:	0018      	movs	r0, r3
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	b005      	add	sp, #20
 800f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f1f8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	000a      	movs	r2, r1
 800f202:	1cfb      	adds	r3, r7, #3
 800f204:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f206:	210f      	movs	r1, #15
 800f208:	187b      	adds	r3, r7, r1
 800f20a:	2200      	movs	r2, #0
 800f20c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f20e:	260e      	movs	r6, #14
 800f210:	19bb      	adds	r3, r7, r6
 800f212:	2200      	movs	r2, #0
 800f214:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	23b0      	movs	r3, #176	; 0xb0
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	58d2      	ldr	r2, [r2, r3]
 800f21e:	000d      	movs	r5, r1
 800f220:	187c      	adds	r4, r7, r1
 800f222:	1cfb      	adds	r3, r7, #3
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	0019      	movs	r1, r3
 800f228:	0010      	movs	r0, r2
 800f22a:	f7f8 f92e 	bl	800748a <HAL_PCD_EP_Close>
 800f22e:	0003      	movs	r3, r0
 800f230:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f232:	19bc      	adds	r4, r7, r6
 800f234:	197b      	adds	r3, r7, r5
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	0018      	movs	r0, r3
 800f23a:	f000 f95a 	bl	800f4f2 <USBD_Get_USB_Status>
 800f23e:	0003      	movs	r3, r0
 800f240:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f242:	19bb      	adds	r3, r7, r6
 800f244:	781b      	ldrb	r3, [r3, #0]
}
 800f246:	0018      	movs	r0, r3
 800f248:	46bd      	mov	sp, r7
 800f24a:	b005      	add	sp, #20
 800f24c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f24e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f24e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	000a      	movs	r2, r1
 800f258:	1cfb      	adds	r3, r7, #3
 800f25a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f25c:	210f      	movs	r1, #15
 800f25e:	187b      	adds	r3, r7, r1
 800f260:	2200      	movs	r2, #0
 800f262:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f264:	260e      	movs	r6, #14
 800f266:	19bb      	adds	r3, r7, r6
 800f268:	2200      	movs	r2, #0
 800f26a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	23b0      	movs	r3, #176	; 0xb0
 800f270:	009b      	lsls	r3, r3, #2
 800f272:	58d2      	ldr	r2, [r2, r3]
 800f274:	000d      	movs	r5, r1
 800f276:	187c      	adds	r4, r7, r1
 800f278:	1cfb      	adds	r3, r7, #3
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	0019      	movs	r1, r3
 800f27e:	0010      	movs	r0, r2
 800f280:	f7f8 f9fa 	bl	8007678 <HAL_PCD_EP_SetStall>
 800f284:	0003      	movs	r3, r0
 800f286:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f288:	19bc      	adds	r4, r7, r6
 800f28a:	197b      	adds	r3, r7, r5
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	0018      	movs	r0, r3
 800f290:	f000 f92f 	bl	800f4f2 <USBD_Get_USB_Status>
 800f294:	0003      	movs	r3, r0
 800f296:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f298:	19bb      	adds	r3, r7, r6
 800f29a:	781b      	ldrb	r3, [r3, #0]
}
 800f29c:	0018      	movs	r0, r3
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	b005      	add	sp, #20
 800f2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2a4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	000a      	movs	r2, r1
 800f2ae:	1cfb      	adds	r3, r7, #3
 800f2b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2b2:	210f      	movs	r1, #15
 800f2b4:	187b      	adds	r3, r7, r1
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ba:	260e      	movs	r6, #14
 800f2bc:	19bb      	adds	r3, r7, r6
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	23b0      	movs	r3, #176	; 0xb0
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	58d2      	ldr	r2, [r2, r3]
 800f2ca:	000d      	movs	r5, r1
 800f2cc:	187c      	adds	r4, r7, r1
 800f2ce:	1cfb      	adds	r3, r7, #3
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	0019      	movs	r1, r3
 800f2d4:	0010      	movs	r0, r2
 800f2d6:	f7f8 fa2b 	bl	8007730 <HAL_PCD_EP_ClrStall>
 800f2da:	0003      	movs	r3, r0
 800f2dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2de:	19bc      	adds	r4, r7, r6
 800f2e0:	197b      	adds	r3, r7, r5
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	0018      	movs	r0, r3
 800f2e6:	f000 f904 	bl	800f4f2 <USBD_Get_USB_Status>
 800f2ea:	0003      	movs	r3, r0
 800f2ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f2ee:	19bb      	adds	r3, r7, r6
 800f2f0:	781b      	ldrb	r3, [r3, #0]
}
 800f2f2:	0018      	movs	r0, r3
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	b005      	add	sp, #20
 800f2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2fa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b084      	sub	sp, #16
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	000a      	movs	r2, r1
 800f304:	1cfb      	adds	r3, r7, #3
 800f306:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	23b0      	movs	r3, #176	; 0xb0
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	58d3      	ldr	r3, [r2, r3]
 800f310:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f312:	1cfb      	adds	r3, r7, #3
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	b25b      	sxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	da0d      	bge.n	800f338 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f31c:	1cfb      	adds	r3, r7, #3
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	227f      	movs	r2, #127	; 0x7f
 800f322:	4013      	ands	r3, r2
 800f324:	68f9      	ldr	r1, [r7, #12]
 800f326:	1c5a      	adds	r2, r3, #1
 800f328:	0013      	movs	r3, r2
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	189b      	adds	r3, r3, r2
 800f32e:	00db      	lsls	r3, r3, #3
 800f330:	18cb      	adds	r3, r1, r3
 800f332:	3302      	adds	r3, #2
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	e00d      	b.n	800f354 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f338:	1cfb      	adds	r3, r7, #3
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	227f      	movs	r2, #127	; 0x7f
 800f33e:	401a      	ands	r2, r3
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	23b5      	movs	r3, #181	; 0xb5
 800f344:	0059      	lsls	r1, r3, #1
 800f346:	0013      	movs	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	189b      	adds	r3, r3, r2
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	18c3      	adds	r3, r0, r3
 800f350:	185b      	adds	r3, r3, r1
 800f352:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f354:	0018      	movs	r0, r3
 800f356:	46bd      	mov	sp, r7
 800f358:	b004      	add	sp, #16
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f35e:	b085      	sub	sp, #20
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	000a      	movs	r2, r1
 800f366:	1cfb      	adds	r3, r7, #3
 800f368:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f36a:	210f      	movs	r1, #15
 800f36c:	187b      	adds	r3, r7, r1
 800f36e:	2200      	movs	r2, #0
 800f370:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f372:	260e      	movs	r6, #14
 800f374:	19bb      	adds	r3, r7, r6
 800f376:	2200      	movs	r2, #0
 800f378:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	23b0      	movs	r3, #176	; 0xb0
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	58d2      	ldr	r2, [r2, r3]
 800f382:	000d      	movs	r5, r1
 800f384:	187c      	adds	r4, r7, r1
 800f386:	1cfb      	adds	r3, r7, #3
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	0019      	movs	r1, r3
 800f38c:	0010      	movs	r0, r2
 800f38e:	f7f7 ffd9 	bl	8007344 <HAL_PCD_SetAddress>
 800f392:	0003      	movs	r3, r0
 800f394:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f396:	19bc      	adds	r4, r7, r6
 800f398:	197b      	adds	r3, r7, r5
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	0018      	movs	r0, r3
 800f39e:	f000 f8a8 	bl	800f4f2 <USBD_Get_USB_Status>
 800f3a2:	0003      	movs	r3, r0
 800f3a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f3a6:	19bb      	adds	r3, r7, r6
 800f3a8:	781b      	ldrb	r3, [r3, #0]
}
 800f3aa:	0018      	movs	r0, r3
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	b005      	add	sp, #20
 800f3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f3b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f3b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3b4:	b087      	sub	sp, #28
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	60f8      	str	r0, [r7, #12]
 800f3ba:	0008      	movs	r0, r1
 800f3bc:	607a      	str	r2, [r7, #4]
 800f3be:	0019      	movs	r1, r3
 800f3c0:	230b      	movs	r3, #11
 800f3c2:	18fb      	adds	r3, r7, r3
 800f3c4:	1c02      	adds	r2, r0, #0
 800f3c6:	701a      	strb	r2, [r3, #0]
 800f3c8:	2408      	movs	r4, #8
 800f3ca:	193b      	adds	r3, r7, r4
 800f3cc:	1c0a      	adds	r2, r1, #0
 800f3ce:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3d0:	2117      	movs	r1, #23
 800f3d2:	187b      	adds	r3, r7, r1
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3d8:	2516      	movs	r5, #22
 800f3da:	197b      	adds	r3, r7, r5
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	23b0      	movs	r3, #176	; 0xb0
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	58d0      	ldr	r0, [r2, r3]
 800f3e8:	193b      	adds	r3, r7, r4
 800f3ea:	881d      	ldrh	r5, [r3, #0]
 800f3ec:	000e      	movs	r6, r1
 800f3ee:	187c      	adds	r4, r7, r1
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	230b      	movs	r3, #11
 800f3f4:	18fb      	adds	r3, r7, r3
 800f3f6:	7819      	ldrb	r1, [r3, #0]
 800f3f8:	002b      	movs	r3, r5
 800f3fa:	f7f8 f8f4 	bl	80075e6 <HAL_PCD_EP_Transmit>
 800f3fe:	0003      	movs	r3, r0
 800f400:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f402:	2516      	movs	r5, #22
 800f404:	197c      	adds	r4, r7, r5
 800f406:	19bb      	adds	r3, r7, r6
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	0018      	movs	r0, r3
 800f40c:	f000 f871 	bl	800f4f2 <USBD_Get_USB_Status>
 800f410:	0003      	movs	r3, r0
 800f412:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f414:	197b      	adds	r3, r7, r5
 800f416:	781b      	ldrb	r3, [r3, #0]
}
 800f418:	0018      	movs	r0, r3
 800f41a:	46bd      	mov	sp, r7
 800f41c:	b007      	add	sp, #28
 800f41e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f420 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f422:	b087      	sub	sp, #28
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	0008      	movs	r0, r1
 800f42a:	607a      	str	r2, [r7, #4]
 800f42c:	0019      	movs	r1, r3
 800f42e:	230b      	movs	r3, #11
 800f430:	18fb      	adds	r3, r7, r3
 800f432:	1c02      	adds	r2, r0, #0
 800f434:	701a      	strb	r2, [r3, #0]
 800f436:	2408      	movs	r4, #8
 800f438:	193b      	adds	r3, r7, r4
 800f43a:	1c0a      	adds	r2, r1, #0
 800f43c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f43e:	2117      	movs	r1, #23
 800f440:	187b      	adds	r3, r7, r1
 800f442:	2200      	movs	r2, #0
 800f444:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f446:	2516      	movs	r5, #22
 800f448:	197b      	adds	r3, r7, r5
 800f44a:	2200      	movs	r2, #0
 800f44c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	23b0      	movs	r3, #176	; 0xb0
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	58d0      	ldr	r0, [r2, r3]
 800f456:	193b      	adds	r3, r7, r4
 800f458:	881d      	ldrh	r5, [r3, #0]
 800f45a:	000e      	movs	r6, r1
 800f45c:	187c      	adds	r4, r7, r1
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	230b      	movs	r3, #11
 800f462:	18fb      	adds	r3, r7, r3
 800f464:	7819      	ldrb	r1, [r3, #0]
 800f466:	002b      	movs	r3, r5
 800f468:	f7f8 f860 	bl	800752c <HAL_PCD_EP_Receive>
 800f46c:	0003      	movs	r3, r0
 800f46e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f470:	2516      	movs	r5, #22
 800f472:	197c      	adds	r4, r7, r5
 800f474:	19bb      	adds	r3, r7, r6
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	0018      	movs	r0, r3
 800f47a:	f000 f83a 	bl	800f4f2 <USBD_Get_USB_Status>
 800f47e:	0003      	movs	r3, r0
 800f480:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f482:	197b      	adds	r3, r7, r5
 800f484:	781b      	ldrb	r3, [r3, #0]
}
 800f486:	0018      	movs	r0, r3
 800f488:	46bd      	mov	sp, r7
 800f48a:	b007      	add	sp, #28
 800f48c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f48e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b082      	sub	sp, #8
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
 800f496:	000a      	movs	r2, r1
 800f498:	1cfb      	adds	r3, r7, #3
 800f49a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	23b0      	movs	r3, #176	; 0xb0
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	58d2      	ldr	r2, [r2, r3]
 800f4a4:	1cfb      	adds	r3, r7, #3
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	0019      	movs	r1, r3
 800f4aa:	0010      	movs	r0, r2
 800f4ac:	f7f8 f882 	bl	80075b4 <HAL_PCD_EP_GetRxCount>
 800f4b0:	0003      	movs	r3, r0
}
 800f4b2:	0018      	movs	r0, r3
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	b002      	add	sp, #8
 800f4b8:	bd80      	pop	{r7, pc}
	...

0800f4bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f4c4:	4b02      	ldr	r3, [pc, #8]	; (800f4d0 <USBD_static_malloc+0x14>)
}
 800f4c6:	0018      	movs	r0, r3
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	b002      	add	sp, #8
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	46c0      	nop			; (mov r8, r8)
 800f4d0:	20000320 	.word	0x20000320

0800f4d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]

}
 800f4dc:	46c0      	nop			; (mov r8, r8)
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	b002      	add	sp, #8
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f4e8:	f7f1 fbee 	bl	8000cc8 <SystemClock_Config>
}
 800f4ec:	46c0      	nop			; (mov r8, r8)
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f4f2:	b580      	push	{r7, lr}
 800f4f4:	b084      	sub	sp, #16
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	0002      	movs	r2, r0
 800f4fa:	1dfb      	adds	r3, r7, #7
 800f4fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4fe:	230f      	movs	r3, #15
 800f500:	18fb      	adds	r3, r7, r3
 800f502:	2200      	movs	r2, #0
 800f504:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800f506:	1dfb      	adds	r3, r7, #7
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	2b03      	cmp	r3, #3
 800f50c:	d017      	beq.n	800f53e <USBD_Get_USB_Status+0x4c>
 800f50e:	dc1b      	bgt.n	800f548 <USBD_Get_USB_Status+0x56>
 800f510:	2b02      	cmp	r3, #2
 800f512:	d00f      	beq.n	800f534 <USBD_Get_USB_Status+0x42>
 800f514:	dc18      	bgt.n	800f548 <USBD_Get_USB_Status+0x56>
 800f516:	2b00      	cmp	r3, #0
 800f518:	d002      	beq.n	800f520 <USBD_Get_USB_Status+0x2e>
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d005      	beq.n	800f52a <USBD_Get_USB_Status+0x38>
 800f51e:	e013      	b.n	800f548 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f520:	230f      	movs	r3, #15
 800f522:	18fb      	adds	r3, r7, r3
 800f524:	2200      	movs	r2, #0
 800f526:	701a      	strb	r2, [r3, #0]
    break;
 800f528:	e013      	b.n	800f552 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f52a:	230f      	movs	r3, #15
 800f52c:	18fb      	adds	r3, r7, r3
 800f52e:	2202      	movs	r2, #2
 800f530:	701a      	strb	r2, [r3, #0]
    break;
 800f532:	e00e      	b.n	800f552 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f534:	230f      	movs	r3, #15
 800f536:	18fb      	adds	r3, r7, r3
 800f538:	2201      	movs	r2, #1
 800f53a:	701a      	strb	r2, [r3, #0]
    break;
 800f53c:	e009      	b.n	800f552 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f53e:	230f      	movs	r3, #15
 800f540:	18fb      	adds	r3, r7, r3
 800f542:	2202      	movs	r2, #2
 800f544:	701a      	strb	r2, [r3, #0]
    break;
 800f546:	e004      	b.n	800f552 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800f548:	230f      	movs	r3, #15
 800f54a:	18fb      	adds	r3, r7, r3
 800f54c:	2202      	movs	r2, #2
 800f54e:	701a      	strb	r2, [r3, #0]
    break;
 800f550:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800f552:	230f      	movs	r3, #15
 800f554:	18fb      	adds	r3, r7, r3
 800f556:	781b      	ldrb	r3, [r3, #0]
}
 800f558:	0018      	movs	r0, r3
 800f55a:	46bd      	mov	sp, r7
 800f55c:	b004      	add	sp, #16
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <__libc_init_array>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	2600      	movs	r6, #0
 800f564:	4d0c      	ldr	r5, [pc, #48]	; (800f598 <__libc_init_array+0x38>)
 800f566:	4c0d      	ldr	r4, [pc, #52]	; (800f59c <__libc_init_array+0x3c>)
 800f568:	1b64      	subs	r4, r4, r5
 800f56a:	10a4      	asrs	r4, r4, #2
 800f56c:	42a6      	cmp	r6, r4
 800f56e:	d109      	bne.n	800f584 <__libc_init_array+0x24>
 800f570:	2600      	movs	r6, #0
 800f572:	f000 f821 	bl	800f5b8 <_init>
 800f576:	4d0a      	ldr	r5, [pc, #40]	; (800f5a0 <__libc_init_array+0x40>)
 800f578:	4c0a      	ldr	r4, [pc, #40]	; (800f5a4 <__libc_init_array+0x44>)
 800f57a:	1b64      	subs	r4, r4, r5
 800f57c:	10a4      	asrs	r4, r4, #2
 800f57e:	42a6      	cmp	r6, r4
 800f580:	d105      	bne.n	800f58e <__libc_init_array+0x2e>
 800f582:	bd70      	pop	{r4, r5, r6, pc}
 800f584:	00b3      	lsls	r3, r6, #2
 800f586:	58eb      	ldr	r3, [r5, r3]
 800f588:	4798      	blx	r3
 800f58a:	3601      	adds	r6, #1
 800f58c:	e7ee      	b.n	800f56c <__libc_init_array+0xc>
 800f58e:	00b3      	lsls	r3, r6, #2
 800f590:	58eb      	ldr	r3, [r5, r3]
 800f592:	4798      	blx	r3
 800f594:	3601      	adds	r6, #1
 800f596:	e7f2      	b.n	800f57e <__libc_init_array+0x1e>
 800f598:	0800f858 	.word	0x0800f858
 800f59c:	0800f858 	.word	0x0800f858
 800f5a0:	0800f858 	.word	0x0800f858
 800f5a4:	0800f85c 	.word	0x0800f85c

0800f5a8 <memset>:
 800f5a8:	0003      	movs	r3, r0
 800f5aa:	1882      	adds	r2, r0, r2
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d100      	bne.n	800f5b2 <memset+0xa>
 800f5b0:	4770      	bx	lr
 800f5b2:	7019      	strb	r1, [r3, #0]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	e7f9      	b.n	800f5ac <memset+0x4>

0800f5b8 <_init>:
 800f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ba:	46c0      	nop			; (mov r8, r8)
 800f5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5be:	bc08      	pop	{r3}
 800f5c0:	469e      	mov	lr, r3
 800f5c2:	4770      	bx	lr

0800f5c4 <_fini>:
 800f5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c6:	46c0      	nop			; (mov r8, r8)
 800f5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ca:	bc08      	pop	{r3}
 800f5cc:	469e      	mov	lr, r3
 800f5ce:	4770      	bx	lr
