
Panda01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800f3b4  0800f3b4  0001f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f63c  0800f63c  00020288  2**0
                  CONTENTS
  4 .ARM          00000000  0800f63c  0800f63c  00020288  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f63c  0800f63c  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f63c  0800f63c  0001f63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f640  0800f640  0001f640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800f644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001714  20000288  0800f8cc  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000199c  0800f8cc  0002199c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263c4  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000577b  00000000  00000000  00046674  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f58  00000000  00000000  0004bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cb8  00000000  00000000  0004dd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e1f5  00000000  00000000  0004fa00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f2a6  00000000  00000000  0006dbf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090ff4  00000000  00000000  0008ce9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011de8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f2c  00000000  00000000  0011df0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000288 	.word	0x20000288
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f39c 	.word	0x0800f39c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000028c 	.word	0x2000028c
 8000104:	0800f39c 	.word	0x0800f39c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <FIRFilter_init>:
		-128,-140,-148,-152,-154,-152,-149,-143,-136,-128,
		-119,-110,-100,-90,-80,-71,-62,-53,-45,-38,-31,-26,
		-21,-16,-12,-9,-7,-5,-5
};///sum

void FIRFilter_init(FIRFilter* f) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  int i;
  for(i = 0; i < FIRFILTER_TAP_NUM; ++i)
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	e007      	b.n	8000412 <FIRFilter_init+0x1e>
    f->history[i] = 0;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	0052      	lsls	r2, r2, #1
 8000408:	2100      	movs	r1, #0
 800040a:	52d1      	strh	r1, [r2, r3]
  for(i = 0; i < FIRFILTER_TAP_NUM; ++i)
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	3301      	adds	r3, #1
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	2b7f      	cmp	r3, #127	; 0x7f
 8000416:	ddf4      	ble.n	8000402 <FIRFilter_init+0xe>
  f->last_index = 0;
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	2100      	movs	r1, #0
 8000420:	54d1      	strb	r1, [r2, r3]
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b004      	add	sp, #16
 8000428:	bd80      	pop	{r7, pc}

0800042a <FIRFilter_put>:

void FIRFilter_put(FIRFilter* f, uint16_t input) {
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	000a      	movs	r2, r1
 8000434:	1cbb      	adds	r3, r7, #2
 8000436:	801a      	strh	r2, [r3, #0]
  f->history[f->last_index++] = input;
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	5cd3      	ldrb	r3, [r2, r3]
 8000440:	1c5a      	adds	r2, r3, #1
 8000442:	b2d0      	uxtb	r0, r2
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	0052      	lsls	r2, r2, #1
 800044a:	5488      	strb	r0, [r1, r2]
 800044c:	001a      	movs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	0052      	lsls	r2, r2, #1
 8000452:	1cb9      	adds	r1, r7, #2
 8000454:	8809      	ldrh	r1, [r1, #0]
 8000456:	52d1      	strh	r1, [r2, r3]
  if(f->last_index == FIRFILTER_TAP_NUM)
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	5cd3      	ldrb	r3, [r2, r3]
 8000460:	2b80      	cmp	r3, #128	; 0x80
 8000462:	d104      	bne.n	800046e <FIRFilter_put+0x44>
    f->last_index = 0;
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	2100      	movs	r1, #0
 800046c:	54d1      	strb	r1, [r2, r3]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <FIRFilter_get>:

uint16_t FIRFilter_get(FIRFilter* f) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  int32_t acc = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  uint8_t index = f->last_index + 1;
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	5cd2      	ldrb	r2, [r2, r3]
 800048c:	230b      	movs	r3, #11
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	3201      	adds	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < FIRFILTER_TAP_NUM; ++i) {
 8000494:	230a      	movs	r3, #10
 8000496:	18fb      	adds	r3, r7, r3
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	e01e      	b.n	80004dc <FIRFilter_get+0x64>
    if (index == FIRFILTER_TAP_NUM){
 800049e:	230b      	movs	r3, #11
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b80      	cmp	r3, #128	; 0x80
 80004a6:	d103      	bne.n	80004b0 <FIRFilter_get+0x38>
    	index = 0;
 80004a8:	230b      	movs	r3, #11
 80004aa:	18fb      	adds	r3, r7, r3
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
    }
    acc += (int32_t)f->history[index] * (int32_t)filter_taps[i];
 80004b0:	230b      	movs	r3, #11
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	5ad3      	ldrh	r3, [r2, r3]
 80004bc:	0019      	movs	r1, r3
 80004be:	200a      	movs	r0, #10
 80004c0:	183b      	adds	r3, r7, r0
 80004c2:	781a      	ldrb	r2, [r3, #0]
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <FIRFilter_get+0x88>)
 80004c6:	0052      	lsls	r2, r2, #1
 80004c8:	5ed3      	ldrsh	r3, [r2, r3]
 80004ca:	434b      	muls	r3, r1
 80004cc:	68fa      	ldr	r2, [r7, #12]
 80004ce:	18d3      	adds	r3, r2, r3
 80004d0:	60fb      	str	r3, [r7, #12]
  for(uint8_t i = 0; i < FIRFILTER_TAP_NUM; ++i) {
 80004d2:	183b      	adds	r3, r7, r0
 80004d4:	183a      	adds	r2, r7, r0
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	3201      	adds	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	230a      	movs	r3, #10
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dada      	bge.n	800049e <FIRFilter_get+0x26>
  };
  return acc / 65536;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da02      	bge.n	80004f4 <FIRFilter_get+0x7c>
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <FIRFilter_get+0x8c>)
 80004f0:	4694      	mov	ip, r2
 80004f2:	4463      	add	r3, ip
 80004f4:	141b      	asrs	r3, r3, #16
 80004f6:	b29b      	uxth	r3, r3
}
 80004f8:	0018      	movs	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000000 	.word	0x20000000
 8000504:	0000ffff 	.word	0x0000ffff

08000508 <getAnalogRead>:
FIRFilter amp_filter;
DAC_HandleTypeDef *dac_handler;
uint16_t dac_val;


uint16_t getAnalogRead(uint8_t in){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	0002      	movs	r2, r0
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	701a      	strb	r2, [r3, #0]
	return adc_dma_arr[in];
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <getAnalogRead+0x20>)
 800051a:	0052      	lsls	r2, r2, #1
 800051c:	5ad3      	ldrh	r3, [r2, r3]
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000654 	.word	0x20000654

0800052c <setEncoderCount>:

void setEncoderCount(uint32_t ncount){
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	enc_pin_state = 2 * HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) + HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	019b      	lsls	r3, r3, #6
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <setEncoderCount+0x44>)
 800053a:	0019      	movs	r1, r3
 800053c:	0010      	movs	r0, r2
 800053e:	f005 f8d1 	bl	80056e4 <HAL_GPIO_ReadPin>
 8000542:	0003      	movs	r3, r0
 8000544:	18db      	adds	r3, r3, r3
 8000546:	b2dc      	uxtb	r4, r3
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	015b      	lsls	r3, r3, #5
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <setEncoderCount+0x44>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f005 f8c7 	bl	80056e4 <HAL_GPIO_ReadPin>
 8000556:	0003      	movs	r3, r0
 8000558:	18e3      	adds	r3, r4, r3
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <setEncoderCount+0x48>)
 800055e:	701a      	strb	r2, [r3, #0]
	encoder_count = ncount;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <setEncoderCount+0x4c>)
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b003      	add	sp, #12
 800056c:	bd90      	pop	{r4, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	48000400 	.word	0x48000400
 8000574:	200002a4 	.word	0x200002a4
 8000578:	200002a8 	.word	0x200002a8

0800057c <setEncoderMode>:

void setEncoderMode(uint8_t mode){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	0002      	movs	r2, r0
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	701a      	strb	r2, [r3, #0]
	encoder_mode = mode;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <setEncoderMode+0x1c>)
 800058a:	1dfa      	adds	r2, r7, #7
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	701a      	strb	r2, [r3, #0]
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200002ac 	.word	0x200002ac

0800059c <getEncoderMode>:
uint8_t getEncoderMode(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	return encoder_mode;
 80005a0:	4b02      	ldr	r3, [pc, #8]	; (80005ac <getEncoderMode+0x10>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
}
 80005a4:	0018      	movs	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	200002ac 	.word	0x200002ac

080005b0 <getEncoderCount>:

uint32_t getEncoderCount(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	return encoder_count;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <getEncoderCount+0x10>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	200002a8 	.word	0x200002a8

080005c4 <encoderController>:

void encoderController(){
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
	static uint32_t pwm_rising_edge = 0;
	static uint32_t pwm_duty_period = 0;
	static uint32_t pwm_period = 0;

	if(encoder_mode == ENCODER_QUADRATURE_MODE){
 80005ca:	4b5c      	ldr	r3, [pc, #368]	; (800073c <encoderController+0x178>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d000      	beq.n	80005d4 <encoderController+0x10>
 80005d2:	e07e      	b.n	80006d2 <encoderController+0x10e>
		uint8_t enc_pins_reading = 2 * HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) + HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	019b      	lsls	r3, r3, #6
 80005d8:	4a59      	ldr	r2, [pc, #356]	; (8000740 <encoderController+0x17c>)
 80005da:	0019      	movs	r1, r3
 80005dc:	0010      	movs	r0, r2
 80005de:	f005 f881 	bl	80056e4 <HAL_GPIO_ReadPin>
 80005e2:	0003      	movs	r3, r0
 80005e4:	18db      	adds	r3, r3, r3
 80005e6:	b2dc      	uxtb	r4, r3
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	015b      	lsls	r3, r3, #5
 80005ec:	4a54      	ldr	r2, [pc, #336]	; (8000740 <encoderController+0x17c>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f005 f877 	bl	80056e4 <HAL_GPIO_ReadPin>
 80005f6:	0003      	movs	r3, r0
 80005f8:	001a      	movs	r2, r3
 80005fa:	1cfb      	adds	r3, r7, #3
 80005fc:	18a2      	adds	r2, r4, r2
 80005fe:	701a      	strb	r2, [r3, #0]
		switch(enc_pin_state){
 8000600:	4b50      	ldr	r3, [pc, #320]	; (8000744 <encoderController+0x180>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d044      	beq.n	8000692 <encoderController+0xce>
 8000608:	dc02      	bgt.n	8000610 <encoderController+0x4c>
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <encoderController+0x56>
 800060e:	e05b      	b.n	80006c8 <encoderController+0x104>
 8000610:	2b02      	cmp	r3, #2
 8000612:	d016      	beq.n	8000642 <encoderController+0x7e>
 8000614:	2b03      	cmp	r3, #3
 8000616:	d028      	beq.n	800066a <encoderController+0xa6>
 8000618:	e056      	b.n	80006c8 <encoderController+0x104>
		case 0:
			if(enc_pins_reading == 2){
 800061a:	1cfb      	adds	r3, r7, #3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d105      	bne.n	800062e <encoderController+0x6a>
				encoder_count++;
 8000622:	4b49      	ldr	r3, [pc, #292]	; (8000748 <encoderController+0x184>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <encoderController+0x184>)
 800062a:	601a      	str	r2, [r3, #0]
			}else if(enc_pins_reading == 1){
				encoder_count--;
			}
			break;
 800062c:	e045      	b.n	80006ba <encoderController+0xf6>
			}else if(enc_pins_reading == 1){
 800062e:	1cfb      	adds	r3, r7, #3
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d141      	bne.n	80006ba <encoderController+0xf6>
				encoder_count--;
 8000636:	4b44      	ldr	r3, [pc, #272]	; (8000748 <encoderController+0x184>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	4b42      	ldr	r3, [pc, #264]	; (8000748 <encoderController+0x184>)
 800063e:	601a      	str	r2, [r3, #0]
			break;
 8000640:	e03b      	b.n	80006ba <encoderController+0xf6>
		case 2:
			if(enc_pins_reading == 3){
 8000642:	1cfb      	adds	r3, r7, #3
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d105      	bne.n	8000656 <encoderController+0x92>
				encoder_count++;
 800064a:	4b3f      	ldr	r3, [pc, #252]	; (8000748 <encoderController+0x184>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <encoderController+0x184>)
 8000652:	601a      	str	r2, [r3, #0]
			}else if(enc_pins_reading == 0){
				encoder_count--;
			}
			break;
 8000654:	e033      	b.n	80006be <encoderController+0xfa>
			}else if(enc_pins_reading == 0){
 8000656:	1cfb      	adds	r3, r7, #3
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d12f      	bne.n	80006be <encoderController+0xfa>
				encoder_count--;
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <encoderController+0x184>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <encoderController+0x184>)
 8000666:	601a      	str	r2, [r3, #0]
			break;
 8000668:	e029      	b.n	80006be <encoderController+0xfa>
		case 3:
			if(enc_pins_reading == 1){
 800066a:	1cfb      	adds	r3, r7, #3
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d105      	bne.n	800067e <encoderController+0xba>
					encoder_count++;
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <encoderController+0x184>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	4b33      	ldr	r3, [pc, #204]	; (8000748 <encoderController+0x184>)
 800067a:	601a      	str	r2, [r3, #0]
				}else if(enc_pins_reading == 2){
					encoder_count--;
				}
			break;
 800067c:	e021      	b.n	80006c2 <encoderController+0xfe>
				}else if(enc_pins_reading == 2){
 800067e:	1cfb      	adds	r3, r7, #3
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b02      	cmp	r3, #2
 8000684:	d11d      	bne.n	80006c2 <encoderController+0xfe>
					encoder_count--;
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <encoderController+0x184>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <encoderController+0x184>)
 800068e:	601a      	str	r2, [r3, #0]
			break;
 8000690:	e017      	b.n	80006c2 <encoderController+0xfe>
		case 1:
			if(enc_pins_reading == 0){
 8000692:	1cfb      	adds	r3, r7, #3
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d105      	bne.n	80006a6 <encoderController+0xe2>
					encoder_count++;
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <encoderController+0x184>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <encoderController+0x184>)
 80006a2:	601a      	str	r2, [r3, #0]
				}else if(enc_pins_reading == 3){
					encoder_count--;
				}
			break;
 80006a4:	e00f      	b.n	80006c6 <encoderController+0x102>
				}else if(enc_pins_reading == 3){
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d10b      	bne.n	80006c6 <encoderController+0x102>
					encoder_count--;
 80006ae:	4b26      	ldr	r3, [pc, #152]	; (8000748 <encoderController+0x184>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	1e5a      	subs	r2, r3, #1
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <encoderController+0x184>)
 80006b6:	601a      	str	r2, [r3, #0]
			break;
 80006b8:	e005      	b.n	80006c6 <encoderController+0x102>
			break;
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	e004      	b.n	80006c8 <encoderController+0x104>
			break;
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	e002      	b.n	80006c8 <encoderController+0x104>
			break;
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	e000      	b.n	80006c8 <encoderController+0x104>
			break;
 80006c6:	46c0      	nop			; (mov r8, r8)
		}
		enc_pin_state = enc_pins_reading;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <encoderController+0x180>)
 80006ca:	1cfa      	adds	r2, r7, #3
 80006cc:	7812      	ldrb	r2, [r2, #0]
 80006ce:	701a      	strb	r2, [r3, #0]
		}else{
			pwm_duty_period = acc_tick - pwm_rising_edge;
			encoder_pwm_duty = 4096 * pwm_duty_period / pwm_period;
		}
	}
}
 80006d0:	e02f      	b.n	8000732 <encoderController+0x16e>
	}else if (encoder_mode == ENCODER_PWM_MODE){
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <encoderController+0x178>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d12b      	bne.n	8000732 <encoderController+0x16e>
		uint32_t acc_tick = pwm_timer->Instance->CNT;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <encoderController+0x188>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e2:	607b      	str	r3, [r7, #4]
		if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) == 1){
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	019b      	lsls	r3, r3, #6
 80006e8:	4a15      	ldr	r2, [pc, #84]	; (8000740 <encoderController+0x17c>)
 80006ea:	0019      	movs	r1, r3
 80006ec:	0010      	movs	r0, r2
 80006ee:	f004 fff9 	bl	80056e4 <HAL_GPIO_ReadPin>
 80006f2:	0003      	movs	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d109      	bne.n	800070c <encoderController+0x148>
			pwm_period = acc_tick - pwm_rising_edge;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <encoderController+0x18c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <encoderController+0x190>)
 8000702:	601a      	str	r2, [r3, #0]
			pwm_rising_edge = acc_tick;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <encoderController+0x18c>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	601a      	str	r2, [r3, #0]
}
 800070a:	e012      	b.n	8000732 <encoderController+0x16e>
			pwm_duty_period = acc_tick - pwm_rising_edge;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <encoderController+0x18c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <encoderController+0x194>)
 8000716:	601a      	str	r2, [r3, #0]
			encoder_pwm_duty = 4096 * pwm_duty_period / pwm_period;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <encoderController+0x194>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	031a      	lsls	r2, r3, #12
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <encoderController+0x190>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	0019      	movs	r1, r3
 8000724:	0010      	movs	r0, r2
 8000726:	f7ff fcef 	bl	8000108 <__udivsi3>
 800072a:	0003      	movs	r3, r0
 800072c:	001a      	movs	r2, r3
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <encoderController+0x198>)
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b003      	add	sp, #12
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	200002ac 	.word	0x200002ac
 8000740:	48000400 	.word	0x48000400
 8000744:	200002a4 	.word	0x200002a4
 8000748:	200002a8 	.word	0x200002a8
 800074c:	20000648 	.word	0x20000648
 8000750:	200002b8 	.word	0x200002b8
 8000754:	200002bc 	.word	0x200002bc
 8000758:	200002c0 	.word	0x200002c0
 800075c:	200002b0 	.word	0x200002b0

08000760 <getEncoderDuty>:

uint32_t getEncoderDuty(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	return encoder_pwm_duty;
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <getEncoderDuty+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	200002b0 	.word	0x200002b0

08000774 <getUserIn>:

uint8_t getUserIn(uint8_t in){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	0002      	movs	r2, r0
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	701a      	strb	r2, [r3, #0]
	switch(in){
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d002      	beq.n	800078e <getUserIn+0x1a>
 8000788:	2b02      	cmp	r3, #2
 800078a:	d009      	beq.n	80007a0 <getUserIn+0x2c>
 800078c:	e011      	b.n	80007b2 <getUserIn+0x3e>
	case 1:
		return HAL_GPIO_ReadPin(USER_IN1_GPIO_Port, USER_IN1_Pin);
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <getUserIn+0x48>)
 8000794:	0019      	movs	r1, r3
 8000796:	0010      	movs	r0, r2
 8000798:	f004 ffa4 	bl	80056e4 <HAL_GPIO_ReadPin>
 800079c:	0003      	movs	r3, r0
 800079e:	e009      	b.n	80007b4 <getUserIn+0x40>
		break;
	case 2:
		return HAL_GPIO_ReadPin(USER_IN2_GPIO_Port, USER_IN2_Pin);
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	4a05      	ldr	r2, [pc, #20]	; (80007bc <getUserIn+0x48>)
 80007a6:	0019      	movs	r1, r3
 80007a8:	0010      	movs	r0, r2
 80007aa:	f004 ff9b 	bl	80056e4 <HAL_GPIO_ReadPin>
 80007ae:	0003      	movs	r3, r0
 80007b0:	e000      	b.n	80007b4 <getUserIn+0x40>
		break;
	}
	return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	48000400 	.word	0x48000400

080007c0 <setOffset>:

void setOffset(uint16_t value){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	1dbb      	adds	r3, r7, #6
 80007ca:	801a      	strh	r2, [r3, #0]
	dac_val = value;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <setOffset+0x2c>)
 80007ce:	1dba      	adds	r2, r7, #6
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(dac_handler, DAC_CHANNEL_1,DAC_ALIGN_12B_R, dac_val);
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <setOffset+0x30>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <setOffset+0x2c>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	f004 fb6f 	bl	8004ec2 <HAL_DAC_SetValue>
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000650 	.word	0x20000650
 80007f0:	20000644 	.word	0x20000644

080007f4 <getOffset>:
uint16_t getOffset(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	return dac_val;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <getOffset+0x10>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	20000650 	.word	0x20000650

08000808 <acquisitionInit>:

void acquisitionInit(ADC_HandleTypeDef* hadcx, TIM_HandleTypeDef *htimx, DAC_HandleTypeDef* hdacx){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
	adc_handler = hadcx;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <acquisitionInit+0x68>)
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	601a      	str	r2, [r3, #0]
	dac_handler = hdacx;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <acquisitionInit+0x6c>)
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	601a      	str	r2, [r3, #0]
	pwm_timer = htimx;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <acquisitionInit+0x70>)
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(adc_handler, (uint32_t *)adc_dma_arr, 3);
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <acquisitionInit+0x68>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4914      	ldr	r1, [pc, #80]	; (800087c <acquisitionInit+0x74>)
 800082c:	2203      	movs	r2, #3
 800082e:	0018      	movs	r0, r3
 8000830:	f003 f838 	bl	80038a4 <HAL_ADC_Start_DMA>
	FIRFilter_init(&amp_filter);
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <acquisitionInit+0x78>)
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff fddc 	bl	80003f4 <FIRFilter_init>

	HAL_DAC_Start(dac_handler, DAC_CHANNEL_1);
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <acquisitionInit+0x6c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2100      	movs	r1, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f004 fba0 	bl	8004f88 <HAL_DAC_Start>
    setOffset(2048);
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ffb7 	bl	80007c0 <setOffset>

    HAL_TIM_Base_Start_IT(pwm_timer);
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <acquisitionInit+0x70>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	0018      	movs	r0, r3
 8000858:	f009 f8ac 	bl	80099b4 <HAL_TIM_Base_Start_IT>
	setEncoderCount(0);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff fe65 	bl	800052c <setEncoderCount>

	digipotWrite(0);//8.77K
 8000862:	2000      	movs	r0, #0
 8000864:	f002 fadc 	bl	8002e20 <digipotWrite>



}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b004      	add	sp, #16
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000064c 	.word	0x2000064c
 8000874:	20000644 	.word	0x20000644
 8000878:	20000648 	.word	0x20000648
 800087c:	20000654 	.word	0x20000654
 8000880:	20000540 	.word	0x20000540

08000884 <sendToFilter>:
void sendToFilter(){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	FIRFilter_put(&amp_filter, adc_dma_arr[2]);
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <sendToFilter+0x18>)
 800088a:	889a      	ldrh	r2, [r3, #4]
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <sendToFilter+0x1c>)
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff fdca 	bl	800042a <FIRFilter_put>
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000654 	.word	0x20000654
 80008a0:	20000540 	.word	0x20000540

080008a4 <getFromFilter>:

uint16_t getFromFilter(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	return FIRFilter_get(&amp_filter);
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <getFromFilter+0x14>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f7ff fde4 	bl	8000478 <FIRFilter_get>
 80008b0:	0003      	movs	r3, r0
}
 80008b2:	0018      	movs	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000540 	.word	0x20000540

080008bc <measureGain>:
/*
 * input_val is the actual differential voltage on the input in a 12 bit representation according to:
 * input_val = 4096 * dV/3.3
 */
uint8_t measureGain(uint16_t input_val){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	1dbb      	adds	r3, r7, #6
 80008c6:	801a      	strh	r2, [r3, #0]
	int32_t amp_out = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i<100; i++){
 80008cc:	230b      	movs	r3, #11
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e012      	b.n	80008fc <measureGain+0x40>
		amp_out += getAnalogRead(2)-2048;
 80008d6:	2002      	movs	r0, #2
 80008d8:	f7ff fe16 	bl	8000508 <getAnalogRead>
 80008dc:	0003      	movs	r3, r0
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <measureGain+0x7c>)
 80008e0:	4694      	mov	ip, r2
 80008e2:	4463      	add	r3, ip
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	60fb      	str	r3, [r7, #12]
		HAL_Delay(10);
 80008ea:	200a      	movs	r0, #10
 80008ec:	f002 fe78 	bl	80035e0 <HAL_Delay>
	for (uint8_t i = 0; i<100; i++){
 80008f0:	210b      	movs	r1, #11
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	3201      	adds	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	230b      	movs	r3, #11
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b63      	cmp	r3, #99	; 0x63
 8000904:	d9e7      	bls.n	80008d6 <measureGain+0x1a>
	}
	amp_out /= 100;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2164      	movs	r1, #100	; 0x64
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fc86 	bl	800021c <__divsi3>
 8000910:	0003      	movs	r3, r0
 8000912:	60fb      	str	r3, [r7, #12]

	if (amp_out < 0){
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	da02      	bge.n	8000920 <measureGain+0x64>
		amp_out = -amp_out;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	425b      	negs	r3, r3
 800091e:	60fb      	str	r3, [r7, #12]
	}
	return amp_out/input_val;
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	0019      	movs	r1, r3
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff fc78 	bl	800021c <__divsi3>
 800092c:	0003      	movs	r3, r0
 800092e:	b2db      	uxtb	r3, r3
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b004      	add	sp, #16
 8000936:	bd80      	pop	{r7, pc}
 8000938:	fffff800 	.word	0xfffff800

0800093c <calibrateGain>:
 */
uint8_t gain_res_step = 35;
uint8_t gain_res_wiper = 72;
uint8_t device_calibrated = 0;

void calibrateGain(){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	digipotWrite(255);
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	f002 fa6c 	bl	8002e20 <digipotWrite>
	HAL_Delay(100);
 8000948:	2064      	movs	r0, #100	; 0x64
 800094a:	f002 fe49 	bl	80035e0 <HAL_Delay>
	uint32_t res1 = 100000 / (measureGain(41) - 1);
 800094e:	2029      	movs	r0, #41	; 0x29
 8000950:	f7ff ffb4 	bl	80008bc <measureGain>
 8000954:	0003      	movs	r3, r0
 8000956:	3b01      	subs	r3, #1
 8000958:	0019      	movs	r1, r3
 800095a:	4819      	ldr	r0, [pc, #100]	; (80009c0 <calibrateGain+0x84>)
 800095c:	f7ff fc5e 	bl	800021c <__divsi3>
 8000960:	0003      	movs	r3, r0
 8000962:	607b      	str	r3, [r7, #4]
	HAL_Delay(100);
 8000964:	2064      	movs	r0, #100	; 0x64
 8000966:	f002 fe3b 	bl	80035e0 <HAL_Delay>
	digipotWrite(245);
 800096a:	20f5      	movs	r0, #245	; 0xf5
 800096c:	f002 fa58 	bl	8002e20 <digipotWrite>
	HAL_Delay(100);
 8000970:	2064      	movs	r0, #100	; 0x64
 8000972:	f002 fe35 	bl	80035e0 <HAL_Delay>
	uint32_t res10 = 100000 / (measureGain(41) - 1);
 8000976:	2029      	movs	r0, #41	; 0x29
 8000978:	f7ff ffa0 	bl	80008bc <measureGain>
 800097c:	0003      	movs	r3, r0
 800097e:	3b01      	subs	r3, #1
 8000980:	0019      	movs	r1, r3
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <calibrateGain+0x84>)
 8000984:	f7ff fc4a 	bl	800021c <__divsi3>
 8000988:	0003      	movs	r3, r0
 800098a:	603b      	str	r3, [r7, #0]
	gain_res_step = (res10-res1) / 10;
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	210a      	movs	r1, #10
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff fbb7 	bl	8000108 <__udivsi3>
 800099a:	0003      	movs	r3, r0
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <calibrateGain+0x88>)
 80009a0:	701a      	strb	r2, [r3, #0]
	gain_res_wiper = res1 - gain_res_step;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <calibrateGain+0x88>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <calibrateGain+0x8c>)
 80009b0:	701a      	strb	r2, [r3, #0]
	device_calibrated = 1;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <calibrateGain+0x90>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]

}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	000186a0 	.word	0x000186a0
 80009c4:	20000100 	.word	0x20000100
 80009c8:	20000101 	.word	0x20000101
 80009cc:	200002b4 	.word	0x200002b4

080009d0 <getGainCalibrated>:
uint8_t getGainCalibrated(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	return device_calibrated;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <getGainCalibrated+0x10>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200002b4 	.word	0x200002b4

080009e4 <getRgStep>:

uint8_t getRgStep(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	return gain_res_step;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <getRgStep+0x10>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000100 	.word	0x20000100

080009f8 <getRgWiper>:
uint8_t getRgWiper(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	return gain_res_wiper;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <getRgWiper+0x10>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000101 	.word	0x20000101

08000a0c <calcGain>:


uint16_t calcGain(uint8_t d){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	0002      	movs	r2, r0
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	701a      	strb	r2, [r3, #0]
	uint16_t res =  gain_res_wiper + ((255-d) * gain_res_step);
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <calcGain+0x54>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b299      	uxth	r1, r3
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <calcGain+0x58>)
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	b292      	uxth	r2, r2
 8000a2e:	4353      	muls	r3, r2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	200e      	movs	r0, #14
 8000a34:	183b      	adds	r3, r7, r0
 8000a36:	188a      	adds	r2, r1, r2
 8000a38:	801a      	strh	r2, [r3, #0]
	uint16_t gain = 1 + (100000/res);
 8000a3a:	183b      	adds	r3, r7, r0
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	0019      	movs	r1, r3
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <calcGain+0x5c>)
 8000a42:	f7ff fbeb 	bl	800021c <__divsi3>
 8000a46:	0003      	movs	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	210c      	movs	r1, #12
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	3201      	adds	r2, #1
 8000a50:	801a      	strh	r2, [r3, #0]
	return gain;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	881b      	ldrh	r3, [r3, #0]
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	20000101 	.word	0x20000101
 8000a64:	20000100 	.word	0x20000100
 8000a68:	000186a0 	.word	0x000186a0

08000a6c <setGain>:

void setGain(uint16_t ngain){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	0002      	movs	r2, r0
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	801a      	strh	r2, [r3, #0]
	uint16_t res_val = 100000/(ngain - 1);
 8000a78:	1dbb      	adds	r3, r7, #6
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	0019      	movs	r1, r3
 8000a80:	4816      	ldr	r0, [pc, #88]	; (8000adc <setGain+0x70>)
 8000a82:	f7ff fbcb 	bl	800021c <__divsi3>
 8000a86:	0003      	movs	r3, r0
 8000a88:	001a      	movs	r2, r3
 8000a8a:	210c      	movs	r1, #12
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	801a      	strh	r2, [r3, #0]
	uint16_t d = 255 - (res_val - gain_res_wiper)/gain_res_step;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <setGain+0x74>)
 8000a96:	7812      	ldrb	r2, [r2, #0]
 8000a98:	1a9a      	subs	r2, r3, r2
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <setGain+0x78>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	f7ff fbbb 	bl	800021c <__divsi3>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	200e      	movs	r0, #14
 8000aac:	183b      	adds	r3, r7, r0
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	1a8a      	subs	r2, r1, r2
 8000ab2:	801a      	strh	r2, [r3, #0]
	if (d > 255){
 8000ab4:	183b      	adds	r3, r7, r0
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2bff      	cmp	r3, #255	; 0xff
 8000aba:	d903      	bls.n	8000ac4 <setGain+0x58>
		d = 255;
 8000abc:	230e      	movs	r3, #14
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	22ff      	movs	r2, #255	; 0xff
 8000ac2:	801a      	strh	r2, [r3, #0]
	}
	digipotWrite(d);
 8000ac4:	230e      	movs	r3, #14
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 f9a7 	bl	8002e20 <digipotWrite>
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b004      	add	sp, #16
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	000186a0 	.word	0x000186a0
 8000ae0:	20000101 	.word	0x20000101
 8000ae4:	20000100 	.word	0x20000100

08000ae8 <getActiveGain>:

uint16_t getActiveGain(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	return calcGain(getActiveD());
 8000aec:	f002 f98e 	bl	8002e0c <getActiveD>
 8000af0:	0003      	movs	r3, r0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff ff8a 	bl	8000a0c <calcGain>
 8000af8:	0003      	movs	r3, r0
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <autoOffset>:
#define OFFSET_THRESHOLD 5
#define OFFSET_TIMEOUT 1000
uint8_t autoOffset(){//Auto offset routine
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	setOffset(2048);
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fe58 	bl	80007c0 <setOffset>
	int16_t noffset = 2048;
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	801a      	strh	r2, [r3, #0]
	int16_t offset_error =  getFromFilter() - 2048 ;
 8000b18:	f7ff fec4 	bl	80008a4 <getFromFilter>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	4a33      	ldr	r2, [pc, #204]	; (8000bec <autoOffset+0xec>)
 8000b20:	4694      	mov	ip, r2
 8000b22:	4463      	add	r3, ip
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	801a      	strh	r2, [r3, #0]
	uint32_t start_tick = HAL_GetTick();
 8000b2a:	f002 fd4f 	bl	80035cc <HAL_GetTick>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	603b      	str	r3, [r7, #0]
	while ((offset_error < -OFFSET_THRESHOLD) | (offset_error > OFFSET_THRESHOLD)){
 8000b32:	e03f      	b.n	8000bb4 <autoOffset+0xb4>
		if (HAL_GetTick() > start_tick + OFFSET_TIMEOUT){
 8000b34:	f002 fd4a 	bl	80035cc <HAL_GetTick>
 8000b38:	0002      	movs	r2, r0
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	21fa      	movs	r1, #250	; 0xfa
 8000b3e:	0089      	lsls	r1, r1, #2
 8000b40:	468c      	mov	ip, r1
 8000b42:	4463      	add	r3, ip
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d906      	bls.n	8000b56 <autoOffset+0x56>
			setOffset(2048);
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fe37 	bl	80007c0 <setOffset>
			return 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e045      	b.n	8000be2 <autoOffset+0xe2>
		}
		noffset -= offset_error;
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	881a      	ldrh	r2, [r3, #0]
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	1dbb      	adds	r3, r7, #6
 8000b64:	801a      	strh	r2, [r3, #0]
		if ((noffset > 4096) | (noffset < 0)){
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	2201      	movs	r2, #1
 8000b6a:	1c11      	adds	r1, r2, #0
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	5e9a      	ldrsh	r2, [r3, r2]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	015b      	lsls	r3, r3, #5
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dc01      	bgt.n	8000b7c <autoOffset+0x7c>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	1c19      	adds	r1, r3, #0
 8000b7c:	b2ca      	uxtb	r2, r1
 8000b7e:	1dbb      	adds	r3, r7, #6
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	0bdb      	lsrs	r3, r3, #15
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <autoOffset+0x92>
			return 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e027      	b.n	8000be2 <autoOffset+0xe2>
		}
		setOffset(noffset);
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fe12 	bl	80007c0 <setOffset>
		HAL_Delay(100);
 8000b9c:	2064      	movs	r0, #100	; 0x64
 8000b9e:	f002 fd1f 	bl	80035e0 <HAL_Delay>
		offset_error =  getFromFilter() - 2048 ;
 8000ba2:	f7ff fe7f 	bl	80008a4 <getFromFilter>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	4a10      	ldr	r2, [pc, #64]	; (8000bec <autoOffset+0xec>)
 8000baa:	4694      	mov	ip, r2
 8000bac:	4463      	add	r3, ip
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	801a      	strh	r2, [r3, #0]
	while ((offset_error < -OFFSET_THRESHOLD) | (offset_error > OFFSET_THRESHOLD)){
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2100      	movs	r1, #0
 8000bba:	5e5b      	ldrsh	r3, [r3, r1]
 8000bbc:	3305      	adds	r3, #5
 8000bbe:	db01      	blt.n	8000bc4 <autoOffset+0xc4>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	1c1a      	adds	r2, r3, #0
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2101      	movs	r1, #1
 8000bca:	2000      	movs	r0, #0
 8000bcc:	5e1b      	ldrsh	r3, [r3, r0]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	dc01      	bgt.n	8000bd6 <autoOffset+0xd6>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	1c19      	adds	r1, r3, #0
 8000bd6:	b2cb      	uxtb	r3, r1
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1a9      	bne.n	8000b34 <autoOffset+0x34>
	}
	return 1;
 8000be0:	2301      	movs	r3, #1
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	fffff800 	.word	0xfffff800

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f002 fc8f 	bl	8003518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f86b 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fb21 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f000 fb01 	bl	8001208 <MX_DMA_Init>
  MX_ADC_Init();
 8000c06:	f000 f8c7 	bl	8000d98 <MX_ADC_Init>
  MX_CAN_Init();
 8000c0a:	f000 f93b 	bl	8000e84 <MX_CAN_Init>
  MX_DAC_Init();
 8000c0e:	f000 f99d 	bl	8000f4c <MX_DAC_Init>
  MX_I2C1_Init();
 8000c12:	f000 f9c9 	bl	8000fa8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c16:	f000 fa07 	bl	8001028 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c1a:	f000 fabd 	bl	8001198 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000c1e:	f00d fe43 	bl	800e8a8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000c22:	f000 fa3f 	bl	80010a4 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000c26:	f000 fa91 	bl	800114c <MX_TIM14_Init>
  MX_CRC_Init();
 8000c2a:	f000 f963 	bl	8000ef4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  outputsInit(&htim14);
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <main+0xc0>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 fd99 	bl	8001768 <outputsInit>
  spiInit(&hspi1);
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <main+0xc4>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 f927 	bl	8002e8c <spiInit>
  acquisitionInit(&hadc, &htim2, &hdac);
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <main+0xc8>)
 8000c40:	491e      	ldr	r1, [pc, #120]	; (8000cbc <main+0xcc>)
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <main+0xd0>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fddf 	bl	8000808 <acquisitionInit>
  statusLedOff();
 8000c4a:	f000 fc89 	bl	8001560 <statusLedOff>
  usb_init();
 8000c4e:	f001 fc0d 	bl	800246c <usb_init>
  i2cInit(&hi2c1);
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <main+0xd4>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 fda1 	bl	800179c <i2cInit>
  serial_init(&huart1);
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <main+0xd8>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 f8d3 	bl	8001e08 <serial_init>
  can_filterConfig();
 8000c62:	f000 fbdb 	bl	800141c <can_filterConfig>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <main+0xdc>)
 8000c68:	2102      	movs	r1, #2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f003 fc0c 	bl	8004488 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <main+0xdc>)
 8000c72:	2101      	movs	r1, #1
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 fc07 	bl	8004488 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan);
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <main+0xdc>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f003 faa1 	bl	80041c4 <HAL_CAN_Start>
  can_msgConfig();
 8000c82:	f000 fbf5 	bl	8001470 <can_msgConfig>
  uint8_t can_data[2] = {0,77};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	224d      	movs	r2, #77	; 0x4d
 8000c90:	705a      	strb	r2, [r3, #1]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)

 {
	  usbController();
 8000c92:	f002 f839 	bl	8002d08 <usbController>
	  userLedController();
 8000c96:	f000 fcdd 	bl	8001654 <userLedController>
	  i2cController();
 8000c9a:	f000 fe2b 	bl	80018f4 <i2cController>
	  serialController();
 8000c9e:	f001 fb6f 	bl	8002380 <serialController>
	  enc = getEncoderCount();
 8000ca2:	f7ff fc85 	bl	80005b0 <getEncoderCount>
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <main+0xe0>)
 8000caa:	601a      	str	r2, [r3, #0]
	  usbController();
 8000cac:	e7f1      	b.n	8000c92 <main+0xa2>
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000918 	.word	0x20000918
 8000cb4:	20000874 	.word	0x20000874
 8000cb8:	200007fc 	.word	0x200007fc
 8000cbc:	200008d8 	.word	0x200008d8
 8000cc0:	2000099c 	.word	0x2000099c
 8000cc4:	2000065c 	.word	0x2000065c
 8000cc8:	2000077c 	.word	0x2000077c
 8000ccc:	200006e4 	.word	0x200006e4
 8000cd0:	200002c4 	.word	0x200002c4

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b099      	sub	sp, #100	; 0x64
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	242c      	movs	r4, #44	; 0x2c
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	0018      	movs	r0, r3
 8000ce0:	2334      	movs	r3, #52	; 0x34
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f00e fb51 	bl	800f38c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cea:	231c      	movs	r3, #28
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f00e fb49 	bl	800f38c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfa:	003b      	movs	r3, r7
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	231c      	movs	r3, #28
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f00e fb42 	bl	800f38c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000d08:	0021      	movs	r1, r4
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2222      	movs	r2, #34	; 0x22
 8000d0e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2201      	movs	r2, #1
 8000d14:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2201      	movs	r2, #1
 8000d1a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2210      	movs	r2, #16
 8000d20:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f007 fcd2 	bl	80086d4 <HAL_RCC_OscConfig>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d34:	f000 fbc2 	bl	80014bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	211c      	movs	r1, #28
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2203      	movs	r2, #3
 8000d44:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2101      	movs	r1, #1
 8000d56:	0018      	movs	r0, r3
 8000d58:	f008 f842 	bl	8008de0 <HAL_RCC_ClockConfig>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d60:	f000 fbac 	bl	80014bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000d64:	003b      	movs	r3, r7
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <SystemClock_Config+0xc0>)
 8000d68:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d70:	003b      	movs	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000d76:	003b      	movs	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f008 f9a6 	bl	80090d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d88:	f000 fb98 	bl	80014bc <Error_Handler>
  }
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b019      	add	sp, #100	; 0x64
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	00020021 	.word	0x00020021

08000d98 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	0018      	movs	r0, r3
 8000da2:	230c      	movs	r3, #12
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f00e faf0 	bl	800f38c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000dac:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dae:	4a34      	ldr	r2, [pc, #208]	; (8000e80 <MX_ADC_Init+0xe8>)
 8000db0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db2:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	0612      	lsls	r2, r2, #24
 8000db8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dec:	22c2      	movs	r2, #194	; 0xc2
 8000dee:	32ff      	adds	r2, #255	; 0xff
 8000df0:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000dfa:	2224      	movs	r2, #36	; 0x24
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f002 fc0b 	bl	8003624 <HAL_ADC_Init>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d001      	beq.n	8000e16 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8000e12:	f000 fb53 	bl	80014bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	0152      	lsls	r2, r2, #5
 8000e22:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2207      	movs	r2, #7
 8000e28:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000e2e:	0011      	movs	r1, r2
 8000e30:	0018      	movs	r0, r3
 8000e32:	f002 fdc9 	bl	80039c8 <HAL_ADC_ConfigChannel>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000e3a:	f000 fb3f 	bl	80014bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e44:	1d3a      	adds	r2, r7, #4
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 fdbc 	bl	80039c8 <HAL_ADC_ConfigChannel>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000e54:	f000 fb32 	bl	80014bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e5e:	1d3a      	adds	r2, r7, #4
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_ADC_Init+0xe4>)
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f002 fdaf 	bl	80039c8 <HAL_ADC_ConfigChannel>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000e6e:	f000 fb25 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	2000099c 	.word	0x2000099c
 8000e80:	40012400 	.word	0x40012400

08000e84 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_CAN_Init+0x68>)
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <MX_CAN_Init+0x6c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 300;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_CAN_Init+0x68>)
 8000e90:	2296      	movs	r2, #150	; 0x96
 8000e92:	0052      	lsls	r2, r2, #1
 8000e94:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_CAN_Init+0x68>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_CAN_Init+0x68>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_CAN_Init+0x68>)
 8000ea4:	22c0      	movs	r2, #192	; 0xc0
 8000ea6:	0312      	lsls	r2, r2, #12
 8000ea8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_CAN_Init+0x68>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0352      	lsls	r2, r2, #13
 8000eb0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_CAN_Init+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_CAN_Init+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_CAN_Init+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_CAN_Init+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_CAN_Init+0x68>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_CAN_Init+0x68>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <MX_CAN_Init+0x68>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f002 ff83 	bl	8003de4 <HAL_CAN_Init>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000ee2:	f000 faeb 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200006e4 	.word	0x200006e4
 8000ef0:	40006400 	.word	0x40006400

08000ef4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_CRC_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <MX_CRC_Init+0x54>)
 8000f0e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000f18:	2220      	movs	r2, #32
 8000f1a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <MX_CRC_Init+0x4c>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f003 fdc6 	bl	8004abc <HAL_CRC_Init>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <MX_CRC_Init+0x44>
  {
    Error_Handler();
 8000f34:	f000 fac2 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	200006a8 	.word	0x200006a8
 8000f44:	40023000 	.word	0x40023000
 8000f48:	00008005 	.word	0x00008005

08000f4c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f52:	003b      	movs	r3, r7
 8000f54:	0018      	movs	r0, r3
 8000f56:	2308      	movs	r3, #8
 8000f58:	001a      	movs	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f00e fa16 	bl	800f38c <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_DAC_Init+0x54>)
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <MX_DAC_Init+0x58>)
 8000f64:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_DAC_Init+0x54>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f003 ff87 	bl	8004e7c <HAL_DAC_Init>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d001      	beq.n	8000f76 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000f72:	f000 faa3 	bl	80014bc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f76:	003b      	movs	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f7c:	003b      	movs	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f82:	0039      	movs	r1, r7
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_DAC_Init+0x54>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f003 ffbd 	bl	8004f08 <HAL_DAC_ConfigChannel>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d001      	beq.n	8000f96 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8000f92:	f000 fa93 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	200007fc 	.word	0x200007fc
 8000fa4:	40007400 	.word	0x40007400

08000fa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_I2C1_Init+0x74>)
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <MX_I2C1_Init+0x78>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_I2C1_Init+0x74>)
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <MX_I2C1_Init+0x7c>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 100;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_I2C1_Init+0x74>)
 8000fba:	2264      	movs	r2, #100	; 0x64
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_I2C1_Init+0x74>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_I2C1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_I2C1_Init+0x74>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f004 fbef 	bl	80057c8 <HAL_I2C_Init>
 8000fea:	1e03      	subs	r3, r0, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fee:	f000 fa65 	bl	80014bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_I2C1_Init+0x74>)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f005 fe32 	bl	8006c60 <HAL_I2CEx_ConfigAnalogFilter>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001000:	f000 fa5c 	bl	80014bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <MX_I2C1_Init+0x74>)
 8001006:	2100      	movs	r1, #0
 8001008:	0018      	movs	r0, r3
 800100a:	f005 fe75 	bl	8006cf8 <HAL_I2CEx_ConfigDigitalFilter>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 fa53 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000065c 	.word	0x2000065c
 8001020:	40005400 	.word	0x40005400
 8001024:	2000090e 	.word	0x2000090e

08001028 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_SPI1_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_SPI1_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_SPI1_Init+0x74>)
 8001034:	2282      	movs	r2, #130	; 0x82
 8001036:	0052      	lsls	r2, r2, #1
 8001038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_SPI1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_SPI1_Init+0x74>)
 8001042:	22e0      	movs	r2, #224	; 0xe0
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_SPI1_Init+0x74>)
 800104a:	2202      	movs	r2, #2
 800104c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_SPI1_Init+0x74>)
 8001050:	2201      	movs	r2, #1
 8001052:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_SPI1_Init+0x74>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_SPI1_Init+0x74>)
 800105e:	2220      	movs	r2, #32
 8001060:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_SPI1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_SPI1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_SPI1_Init+0x74>)
 8001076:	2207      	movs	r2, #7
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_SPI1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_SPI1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <MX_SPI1_Init+0x74>)
 8001088:	0018      	movs	r0, r3
 800108a:	f008 f921 	bl	80092d0 <HAL_SPI_Init>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d001      	beq.n	8001096 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001092:	f000 fa13 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000874 	.word	0x20000874
 80010a0:	40013000 	.word	0x40013000

080010a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	2308      	movs	r3, #8
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	0018      	movs	r0, r3
 80010b0:	2310      	movs	r3, #16
 80010b2:	001a      	movs	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	f00e f969 	bl	800f38c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	003b      	movs	r3, r7
 80010bc:	0018      	movs	r0, r3
 80010be:	2308      	movs	r3, #8
 80010c0:	001a      	movs	r2, r3
 80010c2:	2100      	movs	r1, #0
 80010c4:	f00e f962 	bl	800f38c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	05d2      	lsls	r2, r2, #23
 80010ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010de:	2201      	movs	r2, #1
 80010e0:	4252      	negs	r2, r2
 80010e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM2_Init+0xa4>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f008 fc32 	bl	800995c <HAL_TIM_Base_Init>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80010fc:	f000 f9de 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	2108      	movs	r1, #8
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	0152      	lsls	r2, r2, #5
 8001108:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800110a:	187a      	adds	r2, r7, r1
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_TIM2_Init+0xa4>)
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f008 fd87 	bl	8009c24 <HAL_TIM_ConfigClockSource>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800111a:	f000 f9cf 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	003b      	movs	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	003b      	movs	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112a:	003a      	movs	r2, r7
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_TIM2_Init+0xa4>)
 800112e:	0011      	movs	r1, r2
 8001130:	0018      	movs	r0, r3
 8001132:	f008 ff77 	bl	800a024 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800113a:	f000 f9bf 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b006      	add	sp, #24
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	200008d8 	.word	0x200008d8

0800114c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_TIM14_Init+0x40>)
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MX_TIM14_Init+0x44>)
 8001154:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 74;
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_TIM14_Init+0x40>)
 8001158:	224a      	movs	r2, #74	; 0x4a
 800115a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_TIM14_Init+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64865;
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_TIM14_Init+0x40>)
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <MX_TIM14_Init+0x48>)
 8001166:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_TIM14_Init+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_TIM14_Init+0x40>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <MX_TIM14_Init+0x40>)
 8001176:	0018      	movs	r0, r3
 8001178:	f008 fbf0 	bl	800995c <HAL_TIM_Base_Init>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001180:	f000 f99c 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000918 	.word	0x20000918
 8001190:	40002000 	.word	0x40002000
 8001194:	0000fd61 	.word	0x0000fd61

08001198 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_USART1_UART_Init+0x68>)
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <MX_USART1_UART_Init+0x6c>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011a4:	2296      	movs	r2, #150	; 0x96
 80011a6:	0192      	lsls	r2, r2, #6
 80011a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011d6:	2240      	movs	r2, #64	; 0x40
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	0352      	lsls	r2, r2, #13
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	0392      	lsls	r2, r2, #14
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <MX_USART1_UART_Init+0x68>)
 80011ec:	0018      	movs	r0, r3
 80011ee:	f008 ff87 	bl	800a100 <HAL_UART_Init>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80011f6:	f000 f961 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000077c 	.word	0x2000077c
 8001204:	40013800 	.word	0x40013800

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x38>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_DMA_Init+0x38>)
 8001214:	2101      	movs	r1, #1
 8001216:	430a      	orrs	r2, r1
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x38>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	2201      	movs	r2, #1
 8001220:	4013      	ands	r3, r2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2009      	movs	r0, #9
 800122c:	f003 fc14 	bl	8004a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001230:	2009      	movs	r0, #9
 8001232:	f003 fc26 	bl	8004a82 <HAL_NVIC_EnableIRQ>

}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	40021000 	.word	0x40021000

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	240c      	movs	r4, #12
 800124c:	193b      	adds	r3, r7, r4
 800124e:	0018      	movs	r0, r3
 8001250:	2314      	movs	r3, #20
 8001252:	001a      	movs	r2, r3
 8001254:	2100      	movs	r1, #0
 8001256:	f00e f899 	bl	800f38c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b50      	ldr	r3, [pc, #320]	; (800139c <MX_GPIO_Init+0x158>)
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <MX_GPIO_Init+0x158>)
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0289      	lsls	r1, r1, #10
 8001264:	430a      	orrs	r2, r1
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <MX_GPIO_Init+0x158>)
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	029b      	lsls	r3, r3, #10
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <MX_GPIO_Init+0x158>)
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	4b48      	ldr	r3, [pc, #288]	; (800139c <MX_GPIO_Init+0x158>)
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	02c9      	lsls	r1, r1, #11
 8001280:	430a      	orrs	r2, r1
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	4b45      	ldr	r3, [pc, #276]	; (800139c <MX_GPIO_Init+0x158>)
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	02db      	lsls	r3, r3, #11
 800128c:	4013      	ands	r3, r2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS1_GPIO_Port, SPI1_SS1_Pin, GPIO_PIN_RESET);
 8001292:	2390      	movs	r3, #144	; 0x90
 8001294:	05db      	lsls	r3, r3, #23
 8001296:	2200      	movs	r2, #0
 8001298:	2108      	movs	r1, #8
 800129a:	0018      	movs	r0, r3
 800129c:	f004 fa3f 	bl	800571e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERIAL_RSE_Pin|USER_OUT1_Pin|USER_OUT2_Pin|LD2_Pin
 80012a0:	493f      	ldr	r1, [pc, #252]	; (80013a0 <MX_GPIO_Init+0x15c>)
 80012a2:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <MX_GPIO_Init+0x160>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	0018      	movs	r0, r3
 80012a8:	f004 fa39 	bl	800571e <HAL_GPIO_WritePin>
                          |LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI1_SS1_Pin */
  GPIO_InitStruct.Pin = SPI1_SS1_Pin;
 80012ac:	193b      	adds	r3, r7, r4
 80012ae:	2208      	movs	r2, #8
 80012b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	193b      	adds	r3, r7, r4
 80012b4:	2201      	movs	r2, #1
 80012b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_SS1_GPIO_Port, &GPIO_InitStruct);
 80012c4:	193a      	adds	r2, r7, r4
 80012c6:	2390      	movs	r3, #144	; 0x90
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f004 f891 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERIAL_RSE_Pin USER_OUT1_Pin USER_OUT2_Pin LD2_Pin
                           LD1_Pin */
  GPIO_InitStruct.Pin = SERIAL_RSE_Pin|USER_OUT1_Pin|USER_OUT2_Pin|LD2_Pin
 80012d2:	0021      	movs	r1, r4
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <MX_GPIO_Init+0x15c>)
 80012d8:	601a      	str	r2, [r3, #0]
                          |LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2201      	movs	r2, #1
 80012de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	000c      	movs	r4, r1
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <MX_GPIO_Init+0x160>)
 80012f2:	0019      	movs	r1, r3
 80012f4:	0010      	movs	r0, r2
 80012f6:	f004 f87d 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_IN1_Pin USER_IN2_Pin */
  GPIO_InitStruct.Pin = USER_IN1_Pin|USER_IN2_Pin;
 80012fa:	0021      	movs	r1, r4
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	22c0      	movs	r2, #192	; 0xc0
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	187b      	adds	r3, r7, r1
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2201      	movs	r2, #1
 800130e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	000c      	movs	r4, r1
 8001312:	187b      	adds	r3, r7, r1
 8001314:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <MX_GPIO_Init+0x160>)
 8001316:	0019      	movs	r1, r3
 8001318:	0010      	movs	r0, r2
 800131a:	f004 f86b 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 800131e:	0021      	movs	r1, r4
 8001320:	187b      	adds	r3, r7, r1
 8001322:	22c0      	movs	r2, #192	; 0xc0
 8001324:	0192      	lsls	r2, r2, #6
 8001326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001328:	000c      	movs	r4, r1
 800132a:	193b      	adds	r3, r7, r4
 800132c:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <MX_GPIO_Init+0x164>)
 800132e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	193b      	adds	r3, r7, r4
 8001332:	2201      	movs	r2, #1
 8001334:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	193b      	adds	r3, r7, r4
 8001338:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <MX_GPIO_Init+0x160>)
 800133a:	0019      	movs	r1, r3
 800133c:	0010      	movs	r0, r2
 800133e:	f004 f859 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_BUS_SENS_Pin CONFIG_BIT0_Pin */
  GPIO_InitStruct.Pin = USB_BUS_SENS_Pin|CONFIG_BIT0_Pin;
 8001342:	193b      	adds	r3, r7, r4
 8001344:	2281      	movs	r2, #129	; 0x81
 8001346:	0212      	lsls	r2, r2, #8
 8001348:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	193b      	adds	r3, r7, r4
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	193b      	adds	r3, r7, r4
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	193a      	adds	r2, r7, r4
 8001358:	2390      	movs	r3, #144	; 0x90
 800135a:	05db      	lsls	r3, r3, #23
 800135c:	0011      	movs	r1, r2
 800135e:	0018      	movs	r0, r3
 8001360:	f004 f848 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONFIG_BIT1_Pin CONFIG_BIT2_Pin CONFIG_BIT3_Pin */
  GPIO_InitStruct.Pin = CONFIG_BIT1_Pin|CONFIG_BIT2_Pin|CONFIG_BIT3_Pin;
 8001364:	193b      	adds	r3, r7, r4
 8001366:	2238      	movs	r2, #56	; 0x38
 8001368:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	193b      	adds	r3, r7, r4
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	193b      	adds	r3, r7, r4
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <MX_GPIO_Init+0x160>)
 800137a:	0019      	movs	r1, r3
 800137c:	0010      	movs	r0, r2
 800137e:	f004 f839 	bl	80053f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2007      	movs	r0, #7
 8001388:	f003 fb66 	bl	8004a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800138c:	2007      	movs	r0, #7
 800138e:	f003 fb78 	bl	8004a82 <HAL_NVIC_EnableIRQ>

}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b009      	add	sp, #36	; 0x24
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40021000 	.word	0x40021000
 80013a0:	0000c007 	.word	0x0000c007
 80013a4:	48000400 	.word	0x48000400
 80013a8:	10110000 	.word	0x10110000

080013ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	0002      	movs	r2, r0
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin){
 80013b8:	1dbb      	adds	r3, r7, #6
 80013ba:	881a      	ldrh	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	019b      	lsls	r3, r3, #6
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d005      	beq.n	80013d0 <HAL_GPIO_EXTI_Callback+0x24>
 80013c4:	1dbb      	adds	r3, r7, #6
 80013c6:	881a      	ldrh	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	015b      	lsls	r3, r3, #5
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d101      	bne.n	80013d4 <HAL_GPIO_EXTI_Callback+0x28>
	  encoderController();
 80013d0:	f7ff f8f8 	bl	80005c4 <encoderController>
  }
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	sendToFilter();
 80013e4:	f7ff fa4e 	bl	8000884 <sendToFilter>
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <calcCRC>:

uint16_t calcCRC(uint8_t * data, uint8_t len){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	000a      	movs	r2, r1
 80013fa:	1cfb      	adds	r3, r7, #3
 80013fc:	701a      	strb	r2, [r3, #0]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 80013fe:	1cfb      	adds	r3, r7, #3
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <calcCRC+0x28>)
 8001406:	0018      	movs	r0, r3
 8001408:	f003 fbbe 	bl	8004b88 <HAL_CRC_Calculate>
 800140c:	0003      	movs	r3, r0
 800140e:	b29b      	uxth	r3, r3
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200006a8 	.word	0x200006a8

0800141c <can_filterConfig>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
	i2cEnable();
}
*/

void can_filterConfig(){
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <can_filterConfig+0x48>)
 8001422:	2201      	movs	r2, #1
 8001424:	621a      	str	r2, [r3, #32]
	canFilterConfig.FilterIdHigh = 0x245 << 5;
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <can_filterConfig+0x48>)
 8001428:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <can_filterConfig+0x4c>)
 800142a:	601a      	str	r2, [r3, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <can_filterConfig+0x48>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
	canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <can_filterConfig+0x48>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
	canFilterConfig.FilterMaskIdHigh = 0x0000;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <can_filterConfig+0x48>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <can_filterConfig+0x48>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <can_filterConfig+0x48>)
 8001446:	2201      	movs	r2, #1
 8001448:	61da      	str	r2, [r3, #28]
	if (HAL_CAN_ConfigFilter(&hcan, &canFilterConfig) != HAL_OK){
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <can_filterConfig+0x48>)
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <can_filterConfig+0x50>)
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f002 fdc5 	bl	8003fe0 <HAL_CAN_ConfigFilter>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <can_filterConfig+0x42>
		Error_Handler();
 800145a:	f000 f82f 	bl	80014bc <Error_Handler>
	}
}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000070c 	.word	0x2000070c
 8001468:	000048a0 	.word	0x000048a0
 800146c:	200006e4 	.word	0x200006e4

08001470 <can_msgConfig>:
void can_msgConfig(){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	canTxMsg.StdId = 0x200;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <can_msgConfig+0x24>)
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	601a      	str	r2, [r3, #0]
	canTxMsg.IDE = CAN_ID_STD;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <can_msgConfig+0x24>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
	canTxMsg.RTR = CAN_RTR_DATA;
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <can_msgConfig+0x24>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
	canTxMsg.DLC = 2;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <can_msgConfig+0x24>)
 800148a:	2202      	movs	r2, #2
 800148c:	611a      	str	r2, [r3, #16]
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200006cc 	.word	0x200006cc

08001498 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxMsg, canRx);
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	2100      	movs	r1, #0
 80014a8:	f002 fed2 	bl	8004250 <HAL_CAN_GetRxMessage>
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200009e0 	.word	0x200009e0
 80014b8:	20000858 	.word	0x20000858

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <statusLedController>:

/*
 * statusLedController()
 * Called by the timer interruption to blink the status led
 */
void statusLedController(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	if (status_led == LED_BLINKING){
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <statusLedController+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d106      	bne.n	80014e2 <statusLedController+0x1a>
		HAL_GPIO_TogglePin(STATUS_LED_PORT, STATUS_LED_PIN);
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	01db      	lsls	r3, r3, #7
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <statusLedController+0x24>)
 80014da:	0019      	movs	r1, r3
 80014dc:	0010      	movs	r0, r2
 80014de:	f004 f93b 	bl	8005758 <HAL_GPIO_TogglePin>
		}
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200002c8 	.word	0x200002c8
 80014ec:	48000400 	.word	0x48000400

080014f0 <statusLedMode>:

/*
 * statusLedMode(mode)
 * Changes status led mode between off, on ou blinking
 */
void statusLedMode(uint8_t mode){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	0002      	movs	r2, r0
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	701a      	strb	r2, [r3, #0]
		if ( mode != status_led){
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <statusLedMode+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	1dfa      	adds	r2, r7, #7
 8001502:	7812      	ldrb	r2, [r2, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d01a      	beq.n	800153e <statusLedMode+0x4e>
			switch(mode){
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <statusLedMode+0x26>
 8001510:	2b01      	cmp	r3, #1
 8001512:	d008      	beq.n	8001526 <statusLedMode+0x36>
 8001514:	e00f      	b.n	8001536 <statusLedMode+0x46>
			case LED_OFF:
				HAL_GPIO_WritePin(STATUS_LED_PORT, STATUS_LED_PIN, 0);
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	01db      	lsls	r3, r3, #7
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <statusLedMode+0x5c>)
 800151c:	2200      	movs	r2, #0
 800151e:	0019      	movs	r1, r3
 8001520:	f004 f8fd 	bl	800571e <HAL_GPIO_WritePin>
				break;
 8001524:	e007      	b.n	8001536 <statusLedMode+0x46>
			case LED_ON:
				HAL_GPIO_WritePin(STATUS_LED_PORT, STATUS_LED_PIN, 1);
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	01db      	lsls	r3, r3, #7
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <statusLedMode+0x5c>)
 800152c:	2201      	movs	r2, #1
 800152e:	0019      	movs	r1, r3
 8001530:	f004 f8f5 	bl	800571e <HAL_GPIO_WritePin>
				break;
 8001534:	46c0      	nop			; (mov r8, r8)
			}
			status_led = mode;
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <statusLedMode+0x58>)
 8001538:	1dfa      	adds	r2, r7, #7
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	701a      	strb	r2, [r3, #0]
		}
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	200002c8 	.word	0x200002c8
 800154c:	48000400 	.word	0x48000400

08001550 <statusLedOn>:

void statusLedOn(){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	statusLedMode(LED_ON);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ffcb 	bl	80014f0 <statusLedMode>
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <statusLedOff>:
void statusLedOff(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	statusLedMode(LED_OFF);
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ffc3 	bl	80014f0 <statusLedMode>
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <statusLedBlink>:
void statusLedBlink(){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	statusLedMode(LED_BLINKING);
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff ffbb 	bl	80014f0 <statusLedMode>
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <userLedMode>:

/*
 * userLedMode(mode)
 * Changes user led mode between off, on or blinking
 */
void userLedMode(uint8_t mode){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	0002      	movs	r2, r0
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	701a      	strb	r2, [r3, #0]
	user_led = mode;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <userLedMode+0x64>)
 800158e:	1dfa      	adds	r2, r7, #7
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	701a      	strb	r2, [r3, #0]
	static uint8_t last_mode = 9;
	if (user_led != last_mode){
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <userLedMode+0x64>)
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <userLedMode+0x68>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d01d      	beq.n	80015dc <userLedMode+0x5c>
		switch(user_led){
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <userLedMode+0x64>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d00b      	beq.n	80015c0 <userLedMode+0x40>
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d011      	beq.n	80015d0 <userLedMode+0x50>
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d111      	bne.n	80015d4 <userLedMode+0x54>
		case LED_OFF:
			HAL_GPIO_WritePin(USER_LED_PORT, USER_LED_PIN, 0);
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <userLedMode+0x6c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	0019      	movs	r1, r3
 80015ba:	f004 f8b0 	bl	800571e <HAL_GPIO_WritePin>
			break;
 80015be:	e009      	b.n	80015d4 <userLedMode+0x54>
		case LED_ON:
			HAL_GPIO_WritePin(USER_LED_PORT, USER_LED_PIN, 1);
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <userLedMode+0x6c>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	0019      	movs	r1, r3
 80015ca:	f004 f8a8 	bl	800571e <HAL_GPIO_WritePin>
			break;
 80015ce:	e001      	b.n	80015d4 <userLedMode+0x54>
		case LED_BLINKING:
			userLedController();
 80015d0:	f000 f840 	bl	8001654 <userLedController>
		}
		last_mode = user_led;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <userLedMode+0x64>)
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <userLedMode+0x68>)
 80015da:	701a      	strb	r2, [r3, #0]
	}
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002c9 	.word	0x200002c9
 80015e8:	20000104 	.word	0x20000104
 80015ec:	48000400 	.word	0x48000400

080015f0 <getUserLedMode>:

/*
 * getUserLedMode()
 * returns user led current mode
 */
uint8_t getUserLedMode(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	return user_led;
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <getUserLedMode+0x10>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	200002c9 	.word	0x200002c9

08001604 <userLedFreq>:

/*
 * userLedFreq(frequency)
 * Changes user led mode 2 blinking frequency
 */
void userLedFreq(uint8_t freq){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	701a      	strb	r2, [r3, #0]
	user_led_period = 1000/freq;
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	0019      	movs	r1, r3
 8001616:	23fa      	movs	r3, #250	; 0xfa
 8001618:	0098      	lsls	r0, r3, #2
 800161a:	f7fe fdff 	bl	800021c <__divsi3>
 800161e:	0003      	movs	r3, r0
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <userLedFreq+0x2c>)
 8001624:	801a      	strh	r2, [r3, #0]
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	20000102 	.word	0x20000102

08001634 <getUserLedFreq>:

/*
 * getUserLedFreq()
 * returns user led current blinking frequency
 */
uint8_t getUserLedFreq(){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	return 1000/user_led_period;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <getUserLedFreq+0x1c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	0019      	movs	r1, r3
 800163e:	23fa      	movs	r3, #250	; 0xfa
 8001640:	0098      	lsls	r0, r3, #2
 8001642:	f7fe fdeb 	bl	800021c <__divsi3>
 8001646:	0003      	movs	r3, r0
 8001648:	b2db      	uxtb	r3, r3
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000102 	.word	0x20000102

08001654 <userLedController>:

/*
 * userLedController()
 * toggles the user led when on mode 2
 */
void userLedController(){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
	static uint32_t last_toogle_time = 0;
	if (user_led == LED_BLINKING){
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <userLedController+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d116      	bne.n	8001690 <userLedController+0x3c>
		uint32_t time = HAL_GetTick();
 8001662:	f001 ffb3 	bl	80035cc <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	607b      	str	r3, [r7, #4]
		if ( time > last_toogle_time + user_led_period){
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <userLedController+0x48>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	001a      	movs	r2, r3
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <userLedController+0x4c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	d909      	bls.n	8001690 <userLedController+0x3c>
			HAL_GPIO_TogglePin(USER_LED_PORT, USER_LED_PIN);
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <userLedController+0x50>)
 8001682:	0019      	movs	r1, r3
 8001684:	0010      	movs	r0, r2
 8001686:	f004 f867 	bl	8005758 <HAL_GPIO_TogglePin>
			last_toogle_time = time;
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <userLedController+0x4c>)
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200002c9 	.word	0x200002c9
 800169c:	20000102 	.word	0x20000102
 80016a0:	200002cc 	.word	0x200002cc
 80016a4:	48000400 	.word	0x48000400

080016a8 <setUserOut>:

/*
 * userOutWrite(output selection, duty cycle)
 * sets the duty cycle for a user output pin
 */
void setUserOut(uint8_t out, uint8_t state){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	0002      	movs	r2, r0
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	1dbb      	adds	r3, r7, #6
 80016b6:	1c0a      	adds	r2, r1, #0
 80016b8:	701a      	strb	r2, [r3, #0]
	if (state != 0 && state != 1){
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <setUserOut+0x22>
 80016c2:	1dbb      	adds	r3, r7, #6
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d11f      	bne.n	800170a <setUserOut+0x62>
		return;
	}
	switch(out){
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d002      	beq.n	80016d8 <setUserOut+0x30>
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d00c      	beq.n	80016f0 <setUserOut+0x48>
 80016d6:	e019      	b.n	800170c <setUserOut+0x64>
	case 1:
		userOut1 = state;
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <setUserOut+0x6c>)
 80016da:	1dba      	adds	r2, r7, #6
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(USER_OUT1_GPIO_Port, USER_OUT1_Pin, userOut1);
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <setUserOut+0x6c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <setUserOut+0x70>)
 80016e6:	001a      	movs	r2, r3
 80016e8:	2102      	movs	r1, #2
 80016ea:	f004 f818 	bl	800571e <HAL_GPIO_WritePin>
		break;
 80016ee:	e00d      	b.n	800170c <setUserOut+0x64>

	case 2:
		userOut2 = state;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <setUserOut+0x74>)
 80016f2:	1dba      	adds	r2, r7, #6
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(USER_OUT2_GPIO_Port, USER_OUT2_Pin, userOut2);
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <setUserOut+0x74>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <setUserOut+0x70>)
 80016fe:	001a      	movs	r2, r3
 8001700:	2104      	movs	r1, #4
 8001702:	f004 f80c 	bl	800571e <HAL_GPIO_WritePin>
		break;
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	e000      	b.n	800170c <setUserOut+0x64>
		return;
 800170a:	46c0      	nop			; (mov r8, r8)
	}
}
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	200002ca 	.word	0x200002ca
 8001718:	48000400 	.word	0x48000400
 800171c:	200002cb 	.word	0x200002cb

08001720 <getUserOut>:

/*
 * getUserOut(output)
 * Return the current output value
 */
uint8_t getUserOut(uint8_t out){
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	0002      	movs	r2, r0
 8001728:	1dfb      	adds	r3, r7, #7
 800172a:	701a      	strb	r2, [r3, #0]
	uint8_t state;
	switch(out){
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d002      	beq.n	800173a <getUserOut+0x1a>
 8001734:	2b02      	cmp	r3, #2
 8001736:	d006      	beq.n	8001746 <getUserOut+0x26>
 8001738:	e00b      	b.n	8001752 <getUserOut+0x32>
	case 1:
		state = userOut1;
 800173a:	230f      	movs	r3, #15
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <getUserOut+0x40>)
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	701a      	strb	r2, [r3, #0]
		break;
 8001744:	e005      	b.n	8001752 <getUserOut+0x32>

	case 2:
		state = userOut2;
 8001746:	230f      	movs	r3, #15
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <getUserOut+0x44>)
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	701a      	strb	r2, [r3, #0]
		break;
 8001750:	46c0      	nop			; (mov r8, r8)
	}
	return state;
 8001752:	230f      	movs	r3, #15
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	781b      	ldrb	r3, [r3, #0]
}
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	b004      	add	sp, #16
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200002ca 	.word	0x200002ca
 8001764:	200002cb 	.word	0x200002cb

08001768 <outputsInit>:

/*
 * outputsInit()
 * initializer for the outputs
 */
void outputsInit(TIM_HandleTypeDef *htimx){
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htimx);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	0018      	movs	r0, r3
 8001774:	f008 f91e 	bl	80099b4 <HAL_TIM_Base_Start_IT>
	statusLedMode(0);
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff feb9 	bl	80014f0 <statusLedMode>
	userLedMode(0);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fefe 	bl	8001580 <userLedMode>
	setUserOut(1, 0);
 8001784:	2100      	movs	r1, #0
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff ff8e 	bl	80016a8 <setUserOut>
	setUserOut(2, 0);
 800178c:	2100      	movs	r1, #0
 800178e:	2002      	movs	r0, #2
 8001790:	f7ff ff8a 	bl	80016a8 <setUserOut>

}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}

0800179c <i2cInit>:
I2C_HandleTypeDef *hi2c;

void i2cEnable(){
	HAL_I2C_Slave_Receive_IT(hi2c, i2cRXBuf , 1);
}
void i2cInit(I2C_HandleTypeDef * hi2cx){
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	hi2c = hi2cx;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <i2cInit+0x50>)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < I2C_BUFFER_SIZE; i++){
 80017aa:	230f      	movs	r3, #15
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e00f      	b.n	80017d4 <i2cInit+0x38>
		i2cRXBuf[i] = 0;
 80017b4:	200f      	movs	r0, #15
 80017b6:	183b      	adds	r3, r7, r0
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <i2cInit+0x54>)
 80017bc:	2100      	movs	r1, #0
 80017be:	54d1      	strb	r1, [r2, r3]
		i2cTXBuf[i] = 0;
 80017c0:	183b      	adds	r3, r7, r0
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <i2cInit+0x58>)
 80017c6:	2100      	movs	r1, #0
 80017c8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < I2C_BUFFER_SIZE; i++){
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	183b      	adds	r3, r7, r0
 80017d0:	3201      	adds	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	230f      	movs	r3, #15
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b07      	cmp	r3, #7
 80017dc:	d9ea      	bls.n	80017b4 <i2cInit+0x18>
	}
	i2c_com_state = I2C_COM_IDLE;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <i2cInit+0x5c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
	//i2cEnable();
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b004      	add	sp, #16
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000a00 	.word	0x20000a00
 80017f0:	200009ec 	.word	0x200009ec
 80017f4:	200009f4 	.word	0x200009f4
 80017f8:	200002d0 	.word	0x200002d0

080017fc <i2cProcessRequest>:

void i2cProcessRequest(){
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
	static uint8_t req_register;
	uint16_t res_val;
	uint32_t value ;

	if (i2c_com_state == I2C_COM_WRITE){
 8001802:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <i2cProcessRequest+0xdc>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d110      	bne.n	800182c <i2cProcessRequest+0x30>
		switch (req_register){
 800180a:	4b34      	ldr	r3, [pc, #208]	; (80018dc <i2cProcessRequest+0xe0>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b0b      	cmp	r3, #11
 8001810:	d108      	bne.n	8001824 <i2cProcessRequest+0x28>
		case 11:
			value = i2cRXBuf[0];
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <i2cProcessRequest+0xe4>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	603b      	str	r3, [r7, #0]
			userLedMode((uint8_t)value);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff feaf 	bl	8001580 <userLedMode>
			break;
 8001822:	46c0      	nop			; (mov r8, r8)
		}
		i2c_com_state = I2C_COM_IDLE;
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <i2cProcessRequest+0xdc>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e02f      	b.n	800188c <i2cProcessRequest+0x90>
	}else{
		req_register = i2cRXBuf[0];
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <i2cProcessRequest+0xe4>)
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <i2cProcessRequest+0xe0>)
 8001832:	701a      	strb	r2, [r3, #0]
		switch (req_register){
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <i2cProcessRequest+0xe0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b0b      	cmp	r3, #11
 800183a:	d002      	beq.n	8001842 <i2cProcessRequest+0x46>
 800183c:	2b14      	cmp	r3, #20
 800183e:	d007      	beq.n	8001850 <i2cProcessRequest+0x54>
				res_val = getFromFilter();
				i2cTXBuf[0] = get8MSB(res_val);
				i2cTXBuf[1] = get8LSB(res_val);
				break;
			default:
				break;
 8001840:	e024      	b.n	800188c <i2cProcessRequest+0x90>
				i2c_com_state = I2C_COM_WRITE;
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <i2cProcessRequest+0xdc>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
				i2c_req_n = 1;
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <i2cProcessRequest+0xe8>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
				break;
 800184e:	e01d      	b.n	800188c <i2cProcessRequest+0x90>
				i2c_com_state = I2C_COM_READ;
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <i2cProcessRequest+0xdc>)
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
				i2c_res_n = 2;
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <i2cProcessRequest+0xec>)
 8001858:	2202      	movs	r2, #2
 800185a:	701a      	strb	r2, [r3, #0]
				res_val = getFromFilter();
 800185c:	1d3c      	adds	r4, r7, #4
 800185e:	f7ff f821 	bl	80008a4 <getFromFilter>
 8001862:	0003      	movs	r3, r0
 8001864:	8023      	strh	r3, [r4, #0]
				i2cTXBuf[0] = get8MSB(res_val);
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	0018      	movs	r0, r3
 800186c:	f001 fa5e 	bl	8002d2c <get8MSB>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <i2cProcessRequest+0xf0>)
 8001876:	701a      	strb	r2, [r3, #0]
				i2cTXBuf[1] = get8LSB(res_val);
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f001 fa64 	bl	8002d4a <get8LSB>
 8001882:	0003      	movs	r3, r0
 8001884:	001a      	movs	r2, r3
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <i2cProcessRequest+0xf0>)
 8001888:	705a      	strb	r2, [r3, #1]
				break;
 800188a:	46c0      	nop			; (mov r8, r8)

		}
	}
	for (uint8_t i = 0; i < I2C_BUFFER_SIZE; i++){
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e009      	b.n	80018a8 <i2cProcessRequest+0xac>
		i2cRXBuf[i] = 0;
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <i2cProcessRequest+0xe4>)
 800189a:	2100      	movs	r1, #0
 800189c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < I2C_BUFFER_SIZE; i++){
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	3201      	adds	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b07      	cmp	r3, #7
 80018ae:	d9f1      	bls.n	8001894 <i2cProcessRequest+0x98>
	}
	if (i2c_com_state == I2C_COM_READ){
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <i2cProcessRequest+0xdc>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d10b      	bne.n	80018d0 <i2cProcessRequest+0xd4>
		HAL_I2C_Slave_Transmit(hi2c, i2cTXBuf, i2c_res_n, 1);
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <i2cProcessRequest+0xf4>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <i2cProcessRequest+0xec>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <i2cProcessRequest+0xf0>)
 80018c4:	2301      	movs	r3, #1
 80018c6:	f004 f815 	bl	80058f4 <HAL_I2C_Slave_Transmit>
		i2c_com_state = I2C_COM_IDLE;
 80018ca:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <i2cProcessRequest+0xdc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
	}
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b003      	add	sp, #12
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	200002d0 	.word	0x200002d0
 80018dc:	200002d1 	.word	0x200002d1
 80018e0:	200009ec 	.word	0x200009ec
 80018e4:	200009e8 	.word	0x200009e8
 80018e8:	200009fc 	.word	0x200009fc
 80018ec:	200009f4 	.word	0x200009f4
 80018f0:	20000a00 	.word	0x20000a00

080018f4 <i2cController>:
void i2cController(){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	switch (i2c_com_state ){
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <i2cController+0x50>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <i2cController+0x12>
 8001900:	2b01      	cmp	r3, #1
 8001902:	d00e      	beq.n	8001922 <i2cController+0x2e>
		i2cProcessRequest();
		break;

	}

}
 8001904:	e01a      	b.n	800193c <i2cController+0x48>
		HAL_I2C_Slave_Receive(hi2c, i2cRXBuf, 1, 1);
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <i2cController+0x54>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	4910      	ldr	r1, [pc, #64]	; (800194c <i2cController+0x58>)
 800190c:	2301      	movs	r3, #1
 800190e:	2201      	movs	r2, #1
 8001910:	f004 f906 	bl	8005b20 <HAL_I2C_Slave_Receive>
		if (i2cRXBuf[0]){
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <i2cController+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00e      	beq.n	800193a <i2cController+0x46>
			i2cProcessRequest();
 800191c:	f7ff ff6e 	bl	80017fc <i2cProcessRequest>
		break;
 8001920:	e00b      	b.n	800193a <i2cController+0x46>
		HAL_I2C_Slave_Receive(hi2c, i2cRXBuf, i2c_req_n, 1);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <i2cController+0x54>)
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <i2cController+0x5c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b29a      	uxth	r2, r3
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <i2cController+0x58>)
 800192e:	2301      	movs	r3, #1
 8001930:	f004 f8f6 	bl	8005b20 <HAL_I2C_Slave_Receive>
		i2cProcessRequest();
 8001934:	f7ff ff62 	bl	80017fc <i2cProcessRequest>
		break;
 8001938:	e000      	b.n	800193c <i2cController+0x48>
		break;
 800193a:	46c0      	nop			; (mov r8, r8)
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	200002d0 	.word	0x200002d0
 8001948:	20000a00 	.word	0x20000a00
 800194c:	200009ec 	.word	0x200009ec
 8001950:	200009e8 	.word	0x200009e8

08001954 <getCoils>:
#define MAX_INPUTS 2




uint8_t getCoils(uint16_t ind){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	0002      	movs	r2, r0
 800195c:	1dbb      	adds	r3, r7, #6
 800195e:	801a      	strh	r2, [r3, #0]
	switch (ind){
 8001960:	1dbb      	adds	r3, r7, #6
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d007      	beq.n	8001978 <getCoils+0x24>
 8001968:	2b02      	cmp	r3, #2
 800196a:	d00a      	beq.n	8001982 <getCoils+0x2e>
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <getCoils+0x38>
	case 0:
		return getUserLedMode();
 8001970:	f7ff fe3e 	bl	80015f0 <getUserLedMode>
 8001974:	0003      	movs	r3, r0
 8001976:	e00a      	b.n	800198e <getCoils+0x3a>
		break;
	case 1:
		return getUserOut(1);
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fed1 	bl	8001720 <getUserOut>
 800197e:	0003      	movs	r3, r0
 8001980:	e005      	b.n	800198e <getCoils+0x3a>
		break;
	case 2:
		return getUserOut(2);
 8001982:	2002      	movs	r0, #2
 8001984:	f7ff fecc 	bl	8001720 <getUserOut>
 8001988:	0003      	movs	r3, r0
 800198a:	e000      	b.n	800198e <getCoils+0x3a>
		break;
	}
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}

08001996 <getInputs>:

uint8_t getInputs(uint16_t ind){
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	0002      	movs	r2, r0
 800199e:	1dbb      	adds	r3, r7, #6
 80019a0:	801a      	strh	r2, [r3, #0]
	switch (ind){
 80019a2:	1dbb      	adds	r3, r7, #6
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d002      	beq.n	80019b0 <getInputs+0x1a>
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d005      	beq.n	80019ba <getInputs+0x24>
 80019ae:	e009      	b.n	80019c4 <getInputs+0x2e>
	case 1:
		return getUserIn(1);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7fe fedf 	bl	8000774 <getUserIn>
 80019b6:	0003      	movs	r3, r0
 80019b8:	e005      	b.n	80019c6 <getInputs+0x30>
		break;
	case 2:
		return getUserIn(2);
 80019ba:	2002      	movs	r0, #2
 80019bc:	f7fe feda 	bl	8000774 <getUserIn>
 80019c0:	0003      	movs	r3, r0
 80019c2:	e000      	b.n	80019c6 <getInputs+0x30>
		break;
	}
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bd80      	pop	{r7, pc}

080019ce <writeCoil>:

uint8_t writeCoil(uint16_t ind, uint8_t value){
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	0002      	movs	r2, r0
 80019d6:	1dbb      	adds	r3, r7, #6
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	1d7b      	adds	r3, r7, #5
 80019dc:	1c0a      	adds	r2, r1, #0
 80019de:	701a      	strb	r2, [r3, #0]
	switch (ind){
 80019e0:	1dbb      	adds	r3, r7, #6
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d00a      	beq.n	80019fe <writeCoil+0x30>
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d010      	beq.n	8001a0e <writeCoil+0x40>
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d116      	bne.n	8001a1e <writeCoil+0x50>
		case 0:
			userLedMode(value);
 80019f0:	1d7b      	adds	r3, r7, #5
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff fdc3 	bl	8001580 <userLedMode>
			return 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e010      	b.n	8001a20 <writeCoil+0x52>
			break;
		case 1:
			setUserOut(1, value);
 80019fe:	1d7b      	adds	r3, r7, #5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	0019      	movs	r1, r3
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7ff fe4f 	bl	80016a8 <setUserOut>
			return 1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e008      	b.n	8001a20 <writeCoil+0x52>
			break;
		case 2:
			setUserOut(1, value);
 8001a0e:	1d7b      	adds	r3, r7, #5
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	0019      	movs	r1, r3
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff fe47 	bl	80016a8 <setUserOut>
			return 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <writeCoil+0x52>
			break;

		}
		return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <modbus_readCoilStatus>:

uint8_t modbus_readCoilStatus(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	0008      	movs	r0, r1
 8001a32:	0011      	movs	r1, r2
 8001a34:	1cbb      	adds	r3, r7, #2
 8001a36:	1c02      	adds	r2, r0, #0
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	003b      	movs	r3, r7
 8001a3c:	1c0a      	adds	r2, r1, #0
 8001a3e:	801a      	strh	r2, [r3, #0]
	if (data > MAX_COILS){
 8001a40:	003b      	movs	r3, r7
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d901      	bls.n	8001a4c <modbus_readCoilStatus+0x24>
		return MODBUS_ILLEGAL_DATA_VALUE;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e069      	b.n	8001b20 <modbus_readCoilStatus+0xf8>
	}
	if (data < 1 || starting_addr + data > MAX_COILS ){
 8001a4c:	003b      	movs	r3, r7
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <modbus_readCoilStatus+0x3a>
 8001a54:	1cbb      	adds	r3, r7, #2
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	003b      	movs	r3, r7
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	dd01      	ble.n	8001a66 <modbus_readCoilStatus+0x3e>
		return MODBUS_ILLEGAL_DATA_ADDRESS;
 8001a62:	2302      	movs	r3, #2
 8001a64:	e05c      	b.n	8001b20 <modbus_readCoilStatus+0xf8>
	}
	*response = data/8 + (data%8 != 0);
 8001a66:	003b      	movs	r3, r7
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	003a      	movs	r2, r7
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	2107      	movs	r1, #7
 8001a76:	400a      	ands	r2, r1
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	1e51      	subs	r1, r2, #1
 8001a7c:	418a      	sbcs	r2, r1
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	189b      	adds	r3, r3, r2
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	701a      	strb	r2, [r3, #0]
	response++;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	607b      	str	r3, [r7, #4]
	uint8_t res_byte = 0;
 8001a8e:	230f      	movs	r3, #15
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<data; i++){
 8001a96:	230e      	movs	r3, #14
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e036      	b.n	8001b0e <modbus_readCoilStatus+0xe6>
		if(getCoils(starting_addr + i)){
 8001aa0:	230e      	movs	r3, #14
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	1cbb      	adds	r3, r7, #2
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	18d3      	adds	r3, r2, r3
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff ff4f 	bl	8001954 <getCoils>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d010      	beq.n	8001adc <modbus_readCoilStatus+0xb4>
			res_byte &= 1<<(i%8);
 8001aba:	230e      	movs	r3, #14
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	210f      	movs	r1, #15
 8001ace:	187a      	adds	r2, r7, r1
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	b252      	sxtb	r2, r2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	701a      	strb	r2, [r3, #0]
		}
		if ((i%8) == 7){
 8001adc:	230e      	movs	r3, #14
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	d10a      	bne.n	8001b02 <modbus_readCoilStatus+0xda>
			*response = res_byte;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	210f      	movs	r1, #15
 8001af0:	187a      	adds	r2, r7, r1
 8001af2:	7812      	ldrb	r2, [r2, #0]
 8001af4:	701a      	strb	r2, [r3, #0]
			response++;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3301      	adds	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
			res_byte = 0;
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<data; i++){
 8001b02:	210e      	movs	r1, #14
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	3201      	adds	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	230e      	movs	r3, #14
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	003a      	movs	r2, r7
 8001b18:	8812      	ldrh	r2, [r2, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d8c0      	bhi.n	8001aa0 <modbus_readCoilStatus+0x78>
		}
	}
	return MODBUS_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b004      	add	sp, #16
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <modbus_readInputStatus>:
uint8_t modbus_readInputStatus(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	0008      	movs	r0, r1
 8001b32:	0011      	movs	r1, r2
 8001b34:	1cbb      	adds	r3, r7, #2
 8001b36:	1c02      	adds	r2, r0, #0
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	003b      	movs	r3, r7
 8001b3c:	1c0a      	adds	r2, r1, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
	if (data > MAX_INPUTS){
 8001b40:	003b      	movs	r3, r7
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <modbus_readInputStatus+0x24>
			return MODBUS_ILLEGAL_DATA_VALUE;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e069      	b.n	8001c20 <modbus_readInputStatus+0xf8>
		}
	if (data < 1 || starting_addr + data > MAX_INPUTS ){
 8001b4c:	003b      	movs	r3, r7
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <modbus_readInputStatus+0x3a>
 8001b54:	1cbb      	adds	r3, r7, #2
 8001b56:	881a      	ldrh	r2, [r3, #0]
 8001b58:	003b      	movs	r3, r7
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	18d3      	adds	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	dd01      	ble.n	8001b66 <modbus_readInputStatus+0x3e>
		return MODBUS_ILLEGAL_DATA_ADDRESS;
 8001b62:	2302      	movs	r3, #2
 8001b64:	e05c      	b.n	8001c20 <modbus_readInputStatus+0xf8>
	}
	*response = data/8 + (data%8 != 0);
 8001b66:	003b      	movs	r3, r7
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	003a      	movs	r2, r7
 8001b72:	8812      	ldrh	r2, [r2, #0]
 8001b74:	2107      	movs	r1, #7
 8001b76:	400a      	ands	r2, r1
 8001b78:	b292      	uxth	r2, r2
 8001b7a:	1e51      	subs	r1, r2, #1
 8001b7c:	418a      	sbcs	r2, r1
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	189b      	adds	r3, r3, r2
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	701a      	strb	r2, [r3, #0]
	response++;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	607b      	str	r3, [r7, #4]
	uint8_t res_byte = 0;
 8001b8e:	230f      	movs	r3, #15
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<data; i++){
 8001b96:	230e      	movs	r3, #14
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e036      	b.n	8001c0e <modbus_readInputStatus+0xe6>
		if(getInputs(starting_addr + i)){
 8001ba0:	230e      	movs	r3, #14
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	1cbb      	adds	r3, r7, #2
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	18d3      	adds	r3, r2, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fef0 	bl	8001996 <getInputs>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d010      	beq.n	8001bdc <modbus_readInputStatus+0xb4>
			res_byte &= 1<<(i%8);
 8001bba:	230e      	movs	r3, #14
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	0013      	movs	r3, r2
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	210f      	movs	r1, #15
 8001bce:	187a      	adds	r2, r7, r1
 8001bd0:	7812      	ldrb	r2, [r2, #0]
 8001bd2:	b252      	sxtb	r2, r2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b25a      	sxtb	r2, r3
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	701a      	strb	r2, [r3, #0]
		}
		if ((i%8) == 7){
 8001bdc:	230e      	movs	r3, #14
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2207      	movs	r2, #7
 8001be4:	4013      	ands	r3, r2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b07      	cmp	r3, #7
 8001bea:	d10a      	bne.n	8001c02 <modbus_readInputStatus+0xda>
			*response = res_byte;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	210f      	movs	r1, #15
 8001bf0:	187a      	adds	r2, r7, r1
 8001bf2:	7812      	ldrb	r2, [r2, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]
			response++;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	607b      	str	r3, [r7, #4]
			res_byte = 0;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<data; i++){
 8001c02:	210e      	movs	r1, #14
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	3201      	adds	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	230e      	movs	r3, #14
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	003a      	movs	r2, r7
 8001c18:	8812      	ldrh	r2, [r2, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d8c0      	bhi.n	8001ba0 <modbus_readInputStatus+0x78>
		}
	}
	return MODBUS_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b004      	add	sp, #16
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <modbus_readHoldingRegisters>:
uint8_t modbus_readHoldingRegisters(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	0008      	movs	r0, r1
 8001c32:	0011      	movs	r1, r2
 8001c34:	1cbb      	adds	r3, r7, #2
 8001c36:	1c02      	adds	r2, r0, #0
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	003b      	movs	r3, r7
 8001c3c:	1c0a      	adds	r2, r1, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
	return MODBUS_SERVER_DEVICE_FAILURE;
 8001c40:	2304      	movs	r3, #4
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <modbus_readIputRegisters>:
uint8_t modbus_readIputRegisters(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	0008      	movs	r0, r1
 8001c54:	0011      	movs	r1, r2
 8001c56:	1cbb      	adds	r3, r7, #2
 8001c58:	1c02      	adds	r2, r0, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
 8001c5c:	003b      	movs	r3, r7
 8001c5e:	1c0a      	adds	r2, r1, #0
 8001c60:	801a      	strh	r2, [r3, #0]
	return MODBUS_SERVER_DEVICE_FAILURE;
 8001c62:	2304      	movs	r3, #4
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <modbus_writeSingleCoil>:
uint8_t modbus_writeSingleCoil(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	0008      	movs	r0, r1
 8001c76:	0011      	movs	r1, r2
 8001c78:	1cbb      	adds	r3, r7, #2
 8001c7a:	1c02      	adds	r2, r0, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
 8001c7e:	003b      	movs	r3, r7
 8001c80:	1c0a      	adds	r2, r1, #0
 8001c82:	801a      	strh	r2, [r3, #0]
	if (starting_addr > MAX_COILS){
 8001c84:	1cbb      	adds	r3, r7, #2
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d901      	bls.n	8001c90 <modbus_writeSingleCoil+0x24>
			return MODBUS_ILLEGAL_DATA_ADDRESS;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e01c      	b.n	8001cca <modbus_writeSingleCoil+0x5e>
		}
	if (data != 0xFF00 && data!=0x0000 ){
 8001c90:	003b      	movs	r3, r7
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	23ff      	movs	r3, #255	; 0xff
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d005      	beq.n	8001ca8 <modbus_writeSingleCoil+0x3c>
 8001c9c:	003b      	movs	r3, r7
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <modbus_writeSingleCoil+0x3c>
		return MODBUS_ILLEGAL_DATA_VALUE;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e010      	b.n	8001cca <modbus_writeSingleCoil+0x5e>
	}
	if (writeCoil(starting_addr, (data != 0)) == 0){
 8001ca8:	003b      	movs	r3, r7
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	4193      	sbcs	r3, r2
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	1cbb      	adds	r3, r7, #2
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	0011      	movs	r1, r2
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7ff fe87 	bl	80019ce <writeCoil>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d101      	bne.n	8001cc8 <modbus_writeSingleCoil+0x5c>
		return MODBUS_SERVER_DEVICE_FAILURE;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e000      	b.n	8001cca <modbus_writeSingleCoil+0x5e>
	}
	return MODBUS_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <modbus_writeSingleRegister>:
uint8_t modbus_writeSingleRegister(uint8_t * response, uint16_t starting_addr, uint16_t data){
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	0008      	movs	r0, r1
 8001cdc:	0011      	movs	r1, r2
 8001cde:	1cbb      	adds	r3, r7, #2
 8001ce0:	1c02      	adds	r2, r0, #0
 8001ce2:	801a      	strh	r2, [r3, #0]
 8001ce4:	003b      	movs	r3, r7
 8001ce6:	1c0a      	adds	r2, r1, #0
 8001ce8:	801a      	strh	r2, [r3, #0]
	return MODBUS_SERVER_DEVICE_FAILURE;
 8001cea:	2304      	movs	r3, #4
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <serial_receiveEnable>:
uint8_t modbus_device_address = MODBUS_DEVICE_ADDRESS;

UART_HandleTypeDef * huart;


void serial_receiveEnable(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SERIAL_RSE_GPIO_Port, SERIAL_RSE_Pin, 0);
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <serial_receiveEnable+0x2c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f003 fd0d 	bl	800571e <HAL_GPIO_WritePin>
	SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <serial_receiveEnable+0x30>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <serial_receiveEnable+0x30>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2190      	movs	r1, #144	; 0x90
 8001d14:	0049      	lsls	r1, r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	48000400 	.word	0x48000400
 8001d24:	20000a04 	.word	0x20000a04

08001d28 <serial_transmit>:
void serial_transmit(uint8_t *buf, uint8_t len){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	000a      	movs	r2, r1
 8001d32:	1cfb      	adds	r3, r7, #3
 8001d34:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SERIAL_RSE_GPIO_Port, SERIAL_RSE_Pin, 1);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <serial_transmit+0x34>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f003 fcee 	bl	800571e <HAL_GPIO_WritePin>
	HAL_UART_Transmit(huart, buf, len, 10);
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <serial_transmit+0x38>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	1cfb      	adds	r3, r7, #3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	230a      	movs	r3, #10
 8001d50:	f008 fa2a 	bl	800a1a8 <HAL_UART_Transmit>

}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	20000a04 	.word	0x20000a04

08001d64 <serial_ISR>:

void serial_ISR(UART_HandleTypeDef * huart){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	static uint8_t rxBuff[4];
	uint8_t data;
	uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
	//uint32_t errorcode;

	/* If no error occurs */
	//errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
	if (1){
		if (((isrflags & USART_ISR_RXNE) != 0U)&& ((cr1its & USART_CR1_RXNEIE) != 0U)){
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	4013      	ands	r3, r2
 8001d82:	d015      	beq.n	8001db0 <serial_ISR+0x4c>
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2220      	movs	r2, #32
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d011      	beq.n	8001db0 <serial_ISR+0x4c>
			data = huart->Instance->RDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	210f      	movs	r1, #15
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	701a      	strb	r2, [r3, #0]
			rxBuff[0] = data;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <serial_ISR+0x54>)
 8001d9c:	187a      	adds	r2, r7, r1
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	701a      	strb	r2, [r3, #0]
			serial_addToQueue(&serial_Q, rxBuff, 1);
 8001da2:	4905      	ldr	r1, [pc, #20]	; (8001db8 <serial_ISR+0x54>)
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <serial_ISR+0x58>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	0018      	movs	r0, r3
 8001daa:	f000 f843 	bl	8001e34 <serial_addToQueue>
			return;
 8001dae:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b006      	add	sp, #24
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	200002d4 	.word	0x200002d4
 8001dbc:	20000810 	.word	0x20000810

08001dc0 <serial_queueInit>:

void serial_queueInit(serialQueue *q){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < SERIAL_QUEUE_SIZE+1; i++){
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e00a      	b.n	8001de8 <serial_queueInit+0x28>
		q->queue[i] = 0;
 8001dd2:	200f      	movs	r0, #15
 8001dd4:	183b      	adds	r3, r7, r0
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	2100      	movs	r1, #0
 8001ddc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < SERIAL_QUEUE_SIZE+1; i++){
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	3201      	adds	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	230f      	movs	r3, #15
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d9ef      	bls.n	8001dd2 <serial_queueInit+0x12>
	}
	q->w_index = 0;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2241      	movs	r2, #65	; 0x41
 8001df6:	2100      	movs	r1, #0
 8001df8:	5499      	strb	r1, [r3, r2]
	q->last_add_tick = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b004      	add	sp, #16
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <serial_init>:

void serial_init(UART_HandleTypeDef * huartx){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	huart = huartx;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <serial_init+0x24>)
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
	serial_queueInit(&serial_Q);
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <serial_init+0x28>)
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff ffd1 	bl	8001dc0 <serial_queueInit>
	serial_receiveEnable();
 8001e1e:	f7ff ff69 	bl	8001cf4 <serial_receiveEnable>
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	20000a04 	.word	0x20000a04
 8001e30:	20000810 	.word	0x20000810

08001e34 <serial_addToQueue>:
/*
 * serial_addToQueue(pointer to queue, pointer to message, length of message)
 * if there is room in the queue, adds  the message to it
 * else, discards message
 */
void serial_addToQueue(serialQueue *q, uint8_t *msg, uint8_t len){
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	701a      	strb	r2, [r3, #0]
	//checks if there is room for len number in the queue
		if (q->w_index == SERIAL_QUEUE_SIZE+1){
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2241      	movs	r2, #65	; 0x41
 8001e46:	5c9b      	ldrb	r3, [r3, r2]
 8001e48:	2b41      	cmp	r3, #65	; 0x41
 8001e4a:	d027      	beq.n	8001e9c <serial_addToQueue+0x68>
			return;
		}
		for(uint8_t i = 0; i< len; i++){
 8001e4c:	2317      	movs	r3, #23
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	e015      	b.n	8001e82 <serial_addToQueue+0x4e>
			q->queue[q->w_index++] = msg[i];
 8001e56:	2517      	movs	r5, #23
 8001e58:	197b      	adds	r3, r7, r5
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	18d2      	adds	r2, r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2141      	movs	r1, #65	; 0x41
 8001e64:	5c5b      	ldrb	r3, [r3, r1]
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	b2cc      	uxtb	r4, r1
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	2041      	movs	r0, #65	; 0x41
 8001e6e:	540c      	strb	r4, [r1, r0]
 8001e70:	0019      	movs	r1, r3
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	545a      	strb	r2, [r3, r1]
		for(uint8_t i = 0; i< len; i++){
 8001e78:	197b      	adds	r3, r7, r5
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	197b      	adds	r3, r7, r5
 8001e7e:	3201      	adds	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	2317      	movs	r3, #23
 8001e84:	18fa      	adds	r2, r7, r3
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	7812      	ldrb	r2, [r2, #0]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d3e2      	bcc.n	8001e56 <serial_addToQueue+0x22>
		}
		q->last_add_tick = HAL_GetTick();
 8001e90:	f001 fb9c 	bl	80035cc <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
 8001e9a:	e000      	b.n	8001e9e <serial_addToQueue+0x6a>
			return;
 8001e9c:	46c0      	nop			; (mov r8, r8)
	}
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b006      	add	sp, #24
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}

08001ea4 <serial_queuedData>:

/*
 * serial_queuedData(pointer to queue)
 * returns True if there is data  to be read in the queue
 */
uint8_t serial_queuedData(serialQueue *q){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	return (q->w_index);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2241      	movs	r2, #65	; 0x41
 8001eb0:	5c9b      	ldrb	r3, [r3, r2]
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <serial_processFrame>:


/*
 * Decodes a valid serial frame into device functions
 */
uint8_t serial_processFrame(uint8_t * frame, uint8_t len){
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	1cfb      	adds	r3, r7, #3
 8001ec8:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_status = MODBUS_OK;
 8001eca:	2317      	movs	r3, #23
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
	static uint8_t response[SERIAL_FRAME_SIZE];
	uint8_t func = frame[1];
 8001ed2:	2115      	movs	r1, #21
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	7852      	ldrb	r2, [r2, #1]
 8001eda:	701a      	strb	r2, [r3, #0]
	uint8_t res_n = 0;
 8001edc:	2316      	movs	r3, #22
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
	uint16_t starting_addr;
	uint16_t data;
	response[0] = modbus_device_address;
 8001ee4:	4bb6      	ldr	r3, [pc, #728]	; (80021c0 <serial_processFrame+0x304>)
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	4bb6      	ldr	r3, [pc, #728]	; (80021c4 <serial_processFrame+0x308>)
 8001eea:	701a      	strb	r2, [r3, #0]
	response[1] = func;
 8001eec:	4bb5      	ldr	r3, [pc, #724]	; (80021c4 <serial_processFrame+0x308>)
 8001eee:	187a      	adds	r2, r7, r1
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	705a      	strb	r2, [r3, #1]
	switch (func){
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b06      	cmp	r3, #6
 8001efa:	d900      	bls.n	8001efe <serial_processFrame+0x42>
 8001efc:	e168      	b.n	80021d0 <serial_processFrame+0x314>
 8001efe:	009a      	lsls	r2, r3, #2
 8001f00:	4bb1      	ldr	r3, [pc, #708]	; (80021c8 <serial_processFrame+0x30c>)
 8001f02:	18d3      	adds	r3, r2, r3
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	469f      	mov	pc, r3
		case MODBUS_READ_COIL_STATUS:
			if (len != MODBUS_READ_COIL_STATUS_LEN){
 8001f08:	1cfb      	adds	r3, r7, #3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d001      	beq.n	8001f14 <serial_processFrame+0x58>
				return 0;//framing error
 8001f10:	2300      	movs	r3, #0
 8001f12:	e1a5      	b.n	8002260 <serial_processFrame+0x3a4>
			}
			starting_addr = 256 * frame[2] + frame[3];
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3302      	adds	r3, #2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3303      	adds	r3, #3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	2512      	movs	r5, #18
 8001f2a:	197b      	adds	r3, r7, r5
 8001f2c:	188a      	adds	r2, r1, r2
 8001f2e:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	b299      	uxth	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3305      	adds	r3, #5
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	2010      	movs	r0, #16
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	188a      	adds	r2, r1, r2
 8001f4a:	801a      	strh	r2, [r3, #0]
			res_n = 1 + data/8 + (data%8 != 0);
 8001f4c:	183b      	adds	r3, r7, r0
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	183a      	adds	r2, r7, r0
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	2107      	movs	r1, #7
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	1e51      	subs	r1, r2, #1
 8001f62:	418a      	sbcs	r2, r1
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	189b      	adds	r3, r3, r2
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	2316      	movs	r3, #22
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	3201      	adds	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_readCoilStatus(&response[3], starting_addr, data);
 8001f72:	2317      	movs	r3, #23
 8001f74:	18fc      	adds	r4, r7, r3
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	881a      	ldrh	r2, [r3, #0]
 8001f7a:	197b      	adds	r3, r7, r5
 8001f7c:	8819      	ldrh	r1, [r3, #0]
 8001f7e:	4b93      	ldr	r3, [pc, #588]	; (80021cc <serial_processFrame+0x310>)
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff fd51 	bl	8001a28 <modbus_readCoilStatus>
 8001f86:	0003      	movs	r3, r0
 8001f88:	7023      	strb	r3, [r4, #0]
			break;
 8001f8a:	e125      	b.n	80021d8 <serial_processFrame+0x31c>
		case MODBUS_READ_INPUT_STATUS:
			if (len != MODBUS_READ_INPUT_STATUS_LEN){
 8001f8c:	1cfb      	adds	r3, r7, #3
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d001      	beq.n	8001f98 <serial_processFrame+0xdc>
				return 0;//framing error
 8001f94:	2300      	movs	r3, #0
 8001f96:	e163      	b.n	8002260 <serial_processFrame+0x3a4>
			}
			starting_addr = 256 * frame[2] + frame[3];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3303      	adds	r3, #3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	2512      	movs	r5, #18
 8001fae:	197b      	adds	r3, r7, r5
 8001fb0:	188a      	adds	r2, r1, r2
 8001fb2:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	b299      	uxth	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3305      	adds	r3, #5
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	2010      	movs	r0, #16
 8001fca:	183b      	adds	r3, r7, r0
 8001fcc:	188a      	adds	r2, r1, r2
 8001fce:	801a      	strh	r2, [r3, #0]
			res_n = 1 + data/8 + (data%8 != 0);
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	183a      	adds	r2, r7, r0
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	2107      	movs	r1, #7
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	1e51      	subs	r1, r2, #1
 8001fe6:	418a      	sbcs	r2, r1
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	189b      	adds	r3, r3, r2
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	2316      	movs	r3, #22
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	3201      	adds	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_readInputStatus(&response[3], starting_addr, data);
 8001ff6:	2317      	movs	r3, #23
 8001ff8:	18fc      	adds	r4, r7, r3
 8001ffa:	183b      	adds	r3, r7, r0
 8001ffc:	881a      	ldrh	r2, [r3, #0]
 8001ffe:	197b      	adds	r3, r7, r5
 8002000:	8819      	ldrh	r1, [r3, #0]
 8002002:	4b72      	ldr	r3, [pc, #456]	; (80021cc <serial_processFrame+0x310>)
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff fd8f 	bl	8001b28 <modbus_readInputStatus>
 800200a:	0003      	movs	r3, r0
 800200c:	7023      	strb	r3, [r4, #0]
			break;
 800200e:	e0e3      	b.n	80021d8 <serial_processFrame+0x31c>
		case MODBUS_READ_HOLDING_REGISTERS:
			if (len != MODBUS_READ_HOLDING_REGISTERS_LEN){
 8002010:	1cfb      	adds	r3, r7, #3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d001      	beq.n	800201c <serial_processFrame+0x160>
				return 0;//framing error
 8002018:	2300      	movs	r3, #0
 800201a:	e121      	b.n	8002260 <serial_processFrame+0x3a4>
			}
			starting_addr = 256 * frame[2] + frame[3];
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3302      	adds	r3, #2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	b299      	uxth	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3303      	adds	r3, #3
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	2512      	movs	r5, #18
 8002032:	197b      	adds	r3, r7, r5
 8002034:	188a      	adds	r2, r1, r2
 8002036:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3304      	adds	r3, #4
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b299      	uxth	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3305      	adds	r3, #5
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b29a      	uxth	r2, r3
 800204c:	2010      	movs	r0, #16
 800204e:	183b      	adds	r3, r7, r0
 8002050:	188a      	adds	r2, r1, r2
 8002052:	801a      	strh	r2, [r3, #0]
			res_n = 2 * data + 1;
 8002054:	0001      	movs	r1, r0
 8002056:	187b      	adds	r3, r7, r1
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	18db      	adds	r3, r3, r3
 800205e:	b2da      	uxtb	r2, r3
 8002060:	2316      	movs	r3, #22
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	3201      	adds	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_readHoldingRegisters(&response[3], starting_addr, data);
 8002068:	2317      	movs	r3, #23
 800206a:	18fc      	adds	r4, r7, r3
 800206c:	187b      	adds	r3, r7, r1
 800206e:	881a      	ldrh	r2, [r3, #0]
 8002070:	197b      	adds	r3, r7, r5
 8002072:	8819      	ldrh	r1, [r3, #0]
 8002074:	4b55      	ldr	r3, [pc, #340]	; (80021cc <serial_processFrame+0x310>)
 8002076:	0018      	movs	r0, r3
 8002078:	f7ff fdd6 	bl	8001c28 <modbus_readHoldingRegisters>
 800207c:	0003      	movs	r3, r0
 800207e:	7023      	strb	r3, [r4, #0]
			break;
 8002080:	e0aa      	b.n	80021d8 <serial_processFrame+0x31c>
		case MODBUS_READ_INPUT_REGISTERS:
			if (len != MODBUS_READ_INPUT_REGISTERS_LEN){
 8002082:	1cfb      	adds	r3, r7, #3
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b08      	cmp	r3, #8
 8002088:	d001      	beq.n	800208e <serial_processFrame+0x1d2>
				return 0;//framing error
 800208a:	2300      	movs	r3, #0
 800208c:	e0e8      	b.n	8002260 <serial_processFrame+0x3a4>
			}
			starting_addr = 256 * frame[2] + frame[3];
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3302      	adds	r3, #2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b299      	uxth	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3303      	adds	r3, #3
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	2512      	movs	r5, #18
 80020a4:	197b      	adds	r3, r7, r5
 80020a6:	188a      	adds	r2, r1, r2
 80020a8:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b299      	uxth	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3305      	adds	r3, #5
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	2010      	movs	r0, #16
 80020c0:	183b      	adds	r3, r7, r0
 80020c2:	188a      	adds	r2, r1, r2
 80020c4:	801a      	strh	r2, [r3, #0]
			res_n = 2 * data + 1;
 80020c6:	0001      	movs	r1, r0
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	18db      	adds	r3, r3, r3
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	2316      	movs	r3, #22
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	3201      	adds	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_readIputRegisters(&response[3], starting_addr, data);
 80020da:	2317      	movs	r3, #23
 80020dc:	18fc      	adds	r4, r7, r3
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	197b      	adds	r3, r7, r5
 80020e4:	8819      	ldrh	r1, [r3, #0]
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <serial_processFrame+0x310>)
 80020e8:	0018      	movs	r0, r3
 80020ea:	f7ff fdae 	bl	8001c4a <modbus_readIputRegisters>
 80020ee:	0003      	movs	r3, r0
 80020f0:	7023      	strb	r3, [r4, #0]
			break;
 80020f2:	e071      	b.n	80021d8 <serial_processFrame+0x31c>
		case MODBUS_WRITE_SINGLE_COIL:
			if (len != MODBUS_WRITE_SINGLE_COIL_LEN){
 80020f4:	1cfb      	adds	r3, r7, #3
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d001      	beq.n	8002100 <serial_processFrame+0x244>
				return 0;//framing error
 80020fc:	2300      	movs	r3, #0
 80020fe:	e0af      	b.n	8002260 <serial_processFrame+0x3a4>
			}
			starting_addr = 256 * frame[2] + frame[3];
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3302      	adds	r3, #2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b299      	uxth	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3303      	adds	r3, #3
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b29a      	uxth	r2, r3
 8002114:	2012      	movs	r0, #18
 8002116:	183b      	adds	r3, r7, r0
 8002118:	188a      	adds	r2, r1, r2
 800211a:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3304      	adds	r3, #4
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	b299      	uxth	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3305      	adds	r3, #5
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29a      	uxth	r2, r3
 8002130:	2510      	movs	r5, #16
 8002132:	197b      	adds	r3, r7, r5
 8002134:	188a      	adds	r2, r1, r2
 8002136:	801a      	strh	r2, [r3, #0]
			res_n = 4;
 8002138:	2316      	movs	r3, #22
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2204      	movs	r2, #4
 800213e:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_writeSingleCoil(&response[3], starting_addr, data);
 8002140:	2317      	movs	r3, #23
 8002142:	18fc      	adds	r4, r7, r3
 8002144:	197b      	adds	r3, r7, r5
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	183b      	adds	r3, r7, r0
 800214a:	8819      	ldrh	r1, [r3, #0]
 800214c:	4b1f      	ldr	r3, [pc, #124]	; (80021cc <serial_processFrame+0x310>)
 800214e:	0018      	movs	r0, r3
 8002150:	f7ff fd8c 	bl	8001c6c <modbus_writeSingleCoil>
 8002154:	0003      	movs	r3, r0
 8002156:	7023      	strb	r3, [r4, #0]
			break;
 8002158:	e03e      	b.n	80021d8 <serial_processFrame+0x31c>
		case MODBUS_WRITE_SINGLE_REGISTER:
			if (len != MODBUS_WRITE_SINGLE_REGISTER_LEN){
 800215a:	1cfb      	adds	r3, r7, #3
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b08      	cmp	r3, #8
 8002160:	d001      	beq.n	8002166 <serial_processFrame+0x2aa>
				return 0;//framing error
 8002162:	2300      	movs	r3, #0
 8002164:	e07c      	b.n	8002260 <serial_processFrame+0x3a4>
			}
			starting_addr = 256 * frame[2] + frame[3];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3302      	adds	r3, #2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	b299      	uxth	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3303      	adds	r3, #3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b29a      	uxth	r2, r3
 800217a:	2012      	movs	r0, #18
 800217c:	183b      	adds	r3, r7, r0
 800217e:	188a      	adds	r2, r1, r2
 8002180:	801a      	strh	r2, [r3, #0]
			data = 256 * frame[4] + frame[5];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3304      	adds	r3, #4
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	b299      	uxth	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3305      	adds	r3, #5
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b29a      	uxth	r2, r3
 8002196:	2510      	movs	r5, #16
 8002198:	197b      	adds	r3, r7, r5
 800219a:	188a      	adds	r2, r1, r2
 800219c:	801a      	strh	r2, [r3, #0]
			res_n = 4;
 800219e:	2316      	movs	r3, #22
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2204      	movs	r2, #4
 80021a4:	701a      	strb	r2, [r3, #0]
			modbus_status = modbus_writeSingleRegister(&response[3], starting_addr, data);
 80021a6:	2317      	movs	r3, #23
 80021a8:	18fc      	adds	r4, r7, r3
 80021aa:	197b      	adds	r3, r7, r5
 80021ac:	881a      	ldrh	r2, [r3, #0]
 80021ae:	183b      	adds	r3, r7, r0
 80021b0:	8819      	ldrh	r1, [r3, #0]
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <serial_processFrame+0x310>)
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7ff fd8c 	bl	8001cd2 <modbus_writeSingleRegister>
 80021ba:	0003      	movs	r3, r0
 80021bc:	7023      	strb	r3, [r4, #0]
			break;
 80021be:	e00b      	b.n	80021d8 <serial_processFrame+0x31c>
 80021c0:	20000105 	.word	0x20000105
 80021c4:	200002d8 	.word	0x200002d8
 80021c8:	0800f41c 	.word	0x0800f41c
 80021cc:	200002db 	.word	0x200002db

		default:
			modbus_status = MODBUS_ILLEGAL_FUNCTION;
 80021d0:	2317      	movs	r3, #23
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
	}
	if (modbus_status!= MODBUS_OK){
 80021d8:	2317      	movs	r3, #23
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00e      	beq.n	8002200 <serial_processFrame+0x344>
		response[1]+=80;
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <serial_processFrame+0x3ac>)
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	3350      	adds	r3, #80	; 0x50
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <serial_processFrame+0x3ac>)
 80021ec:	705a      	strb	r2, [r3, #1]
		response[2] = modbus_status;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <serial_processFrame+0x3ac>)
 80021f0:	2217      	movs	r2, #23
 80021f2:	18ba      	adds	r2, r7, r2
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	709a      	strb	r2, [r3, #2]
		res_n = 1;
 80021f8:	2316      	movs	r3, #22
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
	}
	uint16_t crc16 = calcCRC(response, 2 + res_n);
 8002200:	2516      	movs	r5, #22
 8002202:	197b      	adds	r3, r7, r5
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	3302      	adds	r3, #2
 8002208:	b2da      	uxtb	r2, r3
 800220a:	260e      	movs	r6, #14
 800220c:	19bc      	adds	r4, r7, r6
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <serial_processFrame+0x3ac>)
 8002210:	0011      	movs	r1, r2
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff f8ec 	bl	80013f0 <calcCRC>
 8002218:	0003      	movs	r3, r0
 800221a:	8023      	strh	r3, [r4, #0]
	response[2 + res_n] = get8LSB(crc16);
 800221c:	197b      	adds	r3, r7, r5
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	1c9c      	adds	r4, r3, #2
 8002222:	19bb      	adds	r3, r7, r6
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	0018      	movs	r0, r3
 8002228:	f000 fd8f 	bl	8002d4a <get8LSB>
 800222c:	0003      	movs	r3, r0
 800222e:	001a      	movs	r2, r3
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <serial_processFrame+0x3ac>)
 8002232:	551a      	strb	r2, [r3, r4]
	response[2 + res_n + 1] = get8MSB(crc16);
 8002234:	197b      	adds	r3, r7, r5
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	1cdc      	adds	r4, r3, #3
 800223a:	19bb      	adds	r3, r7, r6
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fd74 	bl	8002d2c <get8MSB>
 8002244:	0003      	movs	r3, r0
 8002246:	001a      	movs	r2, r3
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <serial_processFrame+0x3ac>)
 800224a:	551a      	strb	r2, [r3, r4]
	serial_transmit(response, 4 + res_n);
 800224c:	197b      	adds	r3, r7, r5
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	3304      	adds	r3, #4
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <serial_processFrame+0x3ac>)
 8002256:	0011      	movs	r1, r2
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff fd65 	bl	8001d28 <serial_transmit>
	return 1;
 800225e:	2301      	movs	r3, #1
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b007      	add	sp, #28
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002268:	200002d8 	.word	0x200002d8

0800226c <serial_getQueuedCommand>:
 * serial_getQueuedCommand(pointer to queue)
 * Get a entire frame from the queue and verify its format,
 * If valid, it gets processed and returns 1. otherwise, returns 0 *
 */

uint8_t serial_getQueuedCommand(serialQueue *q){
 800226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

	static uint8_t rx_frame[SERIAL_FRAME_SIZE];
	for (uint8_t i = 0; i< q->w_index; i++){
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e00d      	b.n	800229a <serial_getQueuedCommand+0x2e>
		rx_frame[i] = q->queue[i];
 800227e:	200f      	movs	r0, #15
 8002280:	183b      	adds	r3, r7, r0
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	183b      	adds	r3, r7, r0
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	5c89      	ldrb	r1, [r1, r2]
 800228c:	4a2b      	ldr	r2, [pc, #172]	; (800233c <serial_getQueuedCommand+0xd0>)
 800228e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i< q->w_index; i++){
 8002290:	183b      	adds	r3, r7, r0
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	183b      	adds	r3, r7, r0
 8002296:	3201      	adds	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2241      	movs	r2, #65	; 0x41
 800229e:	5c9b      	ldrb	r3, [r3, r2]
 80022a0:	220f      	movs	r2, #15
 80022a2:	18ba      	adds	r2, r7, r2
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d3e9      	bcc.n	800227e <serial_getQueuedCommand+0x12>
	}
	uint8_t rx_addr = rx_frame[0];
 80022aa:	230e      	movs	r3, #14
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <serial_getQueuedCommand+0xd0>)
 80022b0:	7812      	ldrb	r2, [r2, #0]
 80022b2:	701a      	strb	r2, [r3, #0]
	if ((q->w_index) > 3 && (rx_addr == modbus_device_address)){
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2241      	movs	r2, #65	; 0x41
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d938      	bls.n	8002330 <serial_getQueuedCommand+0xc4>
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <serial_getQueuedCommand+0xd4>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	220e      	movs	r2, #14
 80022c4:	18ba      	adds	r2, r7, r2
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d131      	bne.n	8002330 <serial_getQueuedCommand+0xc4>
		uint16_t rx_crc = 256 * rx_frame[q->w_index-1] + rx_frame[q->w_index-2];
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2241      	movs	r2, #65	; 0x41
 80022d0:	5c9b      	ldrb	r3, [r3, r2]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <serial_getQueuedCommand+0xd0>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	b299      	uxth	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	; 0x41
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	3b02      	subs	r3, #2
 80022e6:	4a15      	ldr	r2, [pc, #84]	; (800233c <serial_getQueuedCommand+0xd0>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	250c      	movs	r5, #12
 80022ee:	197b      	adds	r3, r7, r5
 80022f0:	188a      	adds	r2, r1, r2
 80022f2:	801a      	strh	r2, [r3, #0]
		uint16_t calc_crc = calcCRC(rx_frame, q->w_index-2);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2241      	movs	r2, #65	; 0x41
 80022f8:	5c9b      	ldrb	r3, [r3, r2]
 80022fa:	3b02      	subs	r3, #2
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	260a      	movs	r6, #10
 8002300:	19bc      	adds	r4, r7, r6
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <serial_getQueuedCommand+0xd0>)
 8002304:	0011      	movs	r1, r2
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff f872 	bl	80013f0 <calcCRC>
 800230c:	0003      	movs	r3, r0
 800230e:	8023      	strh	r3, [r4, #0]
		if (rx_crc == calc_crc){
 8002310:	197a      	adds	r2, r7, r5
 8002312:	19bb      	adds	r3, r7, r6
 8002314:	8812      	ldrh	r2, [r2, #0]
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d109      	bne.n	8002330 <serial_getQueuedCommand+0xc4>
			serial_processFrame(rx_frame, q->w_index);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2241      	movs	r2, #65	; 0x41
 8002320:	5c9a      	ldrb	r2, [r3, r2]
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <serial_getQueuedCommand+0xd0>)
 8002324:	0011      	movs	r1, r2
 8002326:	0018      	movs	r0, r3
 8002328:	f7ff fdc8 	bl	8001ebc <serial_processFrame>
			return 1;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <serial_getQueuedCommand+0xc6>
		}

	}
	return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b005      	add	sp, #20
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	200002e8 	.word	0x200002e8
 8002340:	20000105 	.word	0x20000105

08002344 <serial_frameReceived>:
uint8_t serial_frameReceived(serialQueue *q){
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	return (HAL_GetTick() > q->last_add_tick + frame_silence_time && serial_queuedData(q));
 800234c:	f001 f93e 	bl	80035cc <HAL_GetTick>
 8002350:	0001      	movs	r1, r0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <serial_frameReceived+0x38>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	18d3      	adds	r3, r2, r3
 800235c:	4299      	cmp	r1, r3
 800235e:	d907      	bls.n	8002370 <serial_frameReceived+0x2c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0018      	movs	r0, r3
 8002364:	f7ff fd9e 	bl	8001ea4 <serial_queuedData>
 8002368:	1e03      	subs	r3, r0, #0
 800236a:	d001      	beq.n	8002370 <serial_frameReceived+0x2c>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <serial_frameReceived+0x2e>
 8002370:	2300      	movs	r3, #0
 8002372:	b2db      	uxtb	r3, r3
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000108 	.word	0x20000108

08002380 <serialController>:

void serialController(){
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	if (serial_frameReceived(&serial_Q)){
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <serialController+0x2c>)
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff ffdc 	bl	8002344 <serial_frameReceived>
 800238c:	1e03      	subs	r3, r0, #0
 800238e:	d009      	beq.n	80023a4 <serialController+0x24>
		serial_getQueuedCommand(&serial_Q);
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <serialController+0x2c>)
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff ff6a 	bl	800226c <serial_getQueuedCommand>
		serial_queueInit(&serial_Q);
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <serialController+0x2c>)
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff fd10 	bl	8001dc0 <serial_queueInit>
		serial_receiveEnable();
 80023a0:	f7ff fca8 	bl	8001cf4 <serial_receiveEnable>
	}
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	20000810 	.word	0x20000810

080023b0 <getVBus>:
#include "usbd_cdc_if.h"
#include "acquisition.h"
#include "spi_devices.h"

uint8_t usb_active = 0;
uint8_t getVBus(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(USB_BUS_SENS_GPIO_Port, USB_BUS_SENS_Pin));
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	005a      	lsls	r2, r3, #1
 80023b8:	2390      	movs	r3, #144	; 0x90
 80023ba:	05db      	lsls	r3, r3, #23
 80023bc:	0011      	movs	r1, r2
 80023be:	0018      	movs	r0, r3
 80023c0:	f003 f990 	bl	80056e4 <HAL_GPIO_ReadPin>
 80023c4:	0003      	movs	r3, r0
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <setUsbActive>:

void setUsbActive(uint8_t value){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	0002      	movs	r2, r0
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	701a      	strb	r2, [r3, #0]
	usb_active = value;
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <setUsbActive+0x3c>)
 80023da:	1dfa      	adds	r2, r7, #7
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	701a      	strb	r2, [r3, #0]
	if (usb_active == 1){
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <setUsbActive+0x3c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <setUsbActive+0x22>
		statusLedOn();
 80023e8:	f7ff f8b2 	bl	8001550 <statusLedOn>
	}else if (getVBus()){
		statusLedBlink();
	}else{
		statusLedOff();
	}
}
 80023ec:	e008      	b.n	8002400 <setUsbActive+0x34>
	}else if (getVBus()){
 80023ee:	f7ff ffdf 	bl	80023b0 <getVBus>
 80023f2:	1e03      	subs	r3, r0, #0
 80023f4:	d002      	beq.n	80023fc <setUsbActive+0x30>
		statusLedBlink();
 80023f6:	f7ff f8bb 	bl	8001570 <statusLedBlink>
}
 80023fa:	e001      	b.n	8002400 <setUsbActive+0x34>
		statusLedOff();
 80023fc:	f7ff f8b0 	bl	8001560 <statusLedOff>
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}
 8002408:	200002f8 	.word	0x200002f8

0800240c <getUsbActive>:
uint8_t getUsbActive(){
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	return usb_active;
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <getUsbActive+0x10>)
 8002412:	781b      	ldrb	r3, [r3, #0]
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	200002f8 	.word	0x200002f8

08002420 <usb_queueInit>:
void usb_queueInit(usbQueue *q){
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < USB_QUEUE_SIZE+1; i++){
 8002428:	230f      	movs	r3, #15
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e00a      	b.n	8002448 <usb_queueInit+0x28>
		q->queue[i] = 0;
 8002432:	200f      	movs	r0, #15
 8002434:	183b      	adds	r3, r7, r0
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	2100      	movs	r1, #0
 800243c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < USB_QUEUE_SIZE+1; i++){
 800243e:	183b      	adds	r3, r7, r0
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	183b      	adds	r3, r7, r0
 8002444:	3201      	adds	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
 8002448:	230f      	movs	r3, #15
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d9ef      	bls.n	8002432 <usb_queueInit+0x12>
	}
	q->r_index = 0;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2241      	movs	r2, #65	; 0x41
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]
	q->w_index = 0;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2242      	movs	r2, #66	; 0x42
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <usb_init>:

void usb_init(){
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	usb_queueInit(&usb_Q);
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <usb_init+0x1c>)
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff ffd4 	bl	8002420 <usb_queueInit>
	statusLedBlink();
 8002478:	f7ff f87a 	bl	8001570 <statusLedBlink>
	setUsbActive(0);
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff ffa5 	bl	80023cc <setUsbActive>
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000738 	.word	0x20000738

0800248c <usb_addToQueue>:
/*
 * usb_addToQueue(pointer to queue, pointer to message, length of message)
 * if there is room in the queue, adds  the message to it
 * else, discards message
 */
void usb_addToQueue(usbQueue *q, uint8_t *msg, uint8_t len){
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	701a      	strb	r2, [r3, #0]
	//checks if there is room for len number in the queue
	uint8_t available_size = q->r_index + USB_QUEUE_SIZE - q->w_index;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2241      	movs	r2, #65	; 0x41
 800249e:	5c9a      	ldrb	r2, [r3, r2]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2142      	movs	r1, #66	; 0x42
 80024a4:	5c5b      	ldrb	r3, [r3, r1]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	2117      	movs	r1, #23
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	3240      	adds	r2, #64	; 0x40
 80024b0:	701a      	strb	r2, [r3, #0]
	if(available_size > USB_QUEUE_SIZE){
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d905      	bls.n	80024c6 <usb_addToQueue+0x3a>
		available_size = available_size - (USB_QUEUE_SIZE+1); //happens when read is "ahead" of Write
 80024ba:	2217      	movs	r2, #23
 80024bc:	18bb      	adds	r3, r7, r2
 80024be:	18ba      	adds	r2, r7, r2
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	3a41      	subs	r2, #65	; 0x41
 80024c4:	701a      	strb	r2, [r3, #0]
	}
	if (len <= available_size){                            //There is space
 80024c6:	1dfa      	adds	r2, r7, #7
 80024c8:	2317      	movs	r3, #23
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d82b      	bhi.n	800252c <usb_addToQueue+0xa0>
		for(uint8_t i = 0; i< len; i++){
 80024d4:	2316      	movs	r3, #22
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e01f      	b.n	800251e <usb_addToQueue+0x92>
			q->queue[q->w_index++] = msg[i];
 80024de:	2316      	movs	r3, #22
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	18d2      	adds	r2, r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2142      	movs	r1, #66	; 0x42
 80024ec:	5c5b      	ldrb	r3, [r3, r1]
 80024ee:	1c59      	adds	r1, r3, #1
 80024f0:	b2cc      	uxtb	r4, r1
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	2042      	movs	r0, #66	; 0x42
 80024f6:	540c      	strb	r4, [r1, r0]
 80024f8:	0019      	movs	r1, r3
 80024fa:	7812      	ldrb	r2, [r2, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	545a      	strb	r2, [r3, r1]
			if (q->w_index == USB_QUEUE_SIZE+1){
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2242      	movs	r2, #66	; 0x42
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	2b41      	cmp	r3, #65	; 0x41
 8002508:	d103      	bne.n	8002512 <usb_addToQueue+0x86>
				q->w_index = 0;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2242      	movs	r2, #66	; 0x42
 800250e:	2100      	movs	r1, #0
 8002510:	5499      	strb	r1, [r3, r2]
		for(uint8_t i = 0; i< len; i++){
 8002512:	2116      	movs	r1, #22
 8002514:	187b      	adds	r3, r7, r1
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	187b      	adds	r3, r7, r1
 800251a:	3201      	adds	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	2316      	movs	r3, #22
 8002520:	18fa      	adds	r2, r7, r3
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d3d8      	bcc.n	80024de <usb_addToQueue+0x52>
			}
		}
	}
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b007      	add	sp, #28
 8002532:	bd90      	pop	{r4, r7, pc}

08002534 <usb_queuedData>:

/*
 * usb_queuedData(pointer to queue)
 * returns True if there is data  to be read in the queue
 */
uint8_t usb_queuedData(usbQueue *q){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	return (q->w_index != q->r_index);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2242      	movs	r2, #66	; 0x42
 8002540:	5c9a      	ldrb	r2, [r3, r2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2141      	movs	r1, #65	; 0x41
 8002546:	5c5b      	ldrb	r3, [r3, r1]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	4193      	sbcs	r3, r2
 800254e:	b2db      	uxtb	r3, r3
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}

08002558 <usb_peekQueue>:

/*
 * usb_peekQueue(pointer to queue, relative position)
 * returns a queue element at a relative position from the read index. Does not change the index itself
 */
uint8_t usb_peekQueue(usbQueue *q, uint8_t pos){
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	000a      	movs	r2, r1
 8002562:	1cfb      	adds	r3, r7, #3
 8002564:	701a      	strb	r2, [r3, #0]
	uint8_t ind = q->r_index + pos;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2241      	movs	r2, #65	; 0x41
 800256a:	5c99      	ldrb	r1, [r3, r2]
 800256c:	200f      	movs	r0, #15
 800256e:	183b      	adds	r3, r7, r0
 8002570:	1cfa      	adds	r2, r7, #3
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	188a      	adds	r2, r1, r2
 8002576:	701a      	strb	r2, [r3, #0]
	if (ind > (USB_QUEUE_SIZE)){
 8002578:	183b      	adds	r3, r7, r0
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d905      	bls.n	800258c <usb_peekQueue+0x34>
		ind = ind - (USB_QUEUE_SIZE+1);
 8002580:	220f      	movs	r2, #15
 8002582:	18bb      	adds	r3, r7, r2
 8002584:	18ba      	adds	r2, r7, r2
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	3a41      	subs	r2, #65	; 0x41
 800258a:	701a      	strb	r2, [r3, #0]
	}
	return q->queue[ind];
 800258c:	230f      	movs	r3, #15
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	5cd3      	ldrb	r3, [r2, r3]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b004      	add	sp, #16
 800259c:	bd80      	pop	{r7, pc}

0800259e <usb_GetByteFromQueue>:

/*
 * usb_GetByteFromQueue(pointer to queue)
 * returns a single byte from the queue
 */
uint8_t usb_GetByteFromQueue(usbQueue *q){
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	uint8_t return_byte = q->queue[q->r_index];
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2241      	movs	r2, #65	; 0x41
 80025aa:	5c9b      	ldrb	r3, [r3, r2]
 80025ac:	0019      	movs	r1, r3
 80025ae:	230f      	movs	r3, #15
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	5c52      	ldrb	r2, [r2, r1]
 80025b6:	701a      	strb	r2, [r3, #0]
	if (q->r_index == USB_QUEUE_SIZE){
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2241      	movs	r2, #65	; 0x41
 80025bc:	5c9b      	ldrb	r3, [r3, r2]
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d104      	bne.n	80025cc <usb_GetByteFromQueue+0x2e>
		q->r_index = 0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2241      	movs	r2, #65	; 0x41
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]
 80025ca:	e007      	b.n	80025dc <usb_GetByteFromQueue+0x3e>
	}else{
		q->r_index++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2241      	movs	r2, #65	; 0x41
 80025d0:	5c9b      	ldrb	r3, [r3, r2]
 80025d2:	3301      	adds	r3, #1
 80025d4:	b2d9      	uxtb	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2241      	movs	r2, #65	; 0x41
 80025da:	5499      	strb	r1, [r3, r2]
	}
	return return_byte;
 80025dc:	230f      	movs	r3, #15
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}

080025ea <usb_queueDiscard>:
 * usb_queueDiscard(pointer to queue)
 * discards data until (including) next frame ending
 * return the amount of discarded numbers
 * if no frame ending is found, clears the entire queue
 */
uint8_t usb_queueDiscard(usbQueue *q){;
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
	for (uint8_t i =2; i< USB_QUEUE_SIZE; i++){
 80025f2:	230f      	movs	r3, #15
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e035      	b.n	8002668 <usb_queueDiscard+0x7e>
		if (usb_peekQueue(q, i-2) == '\r' && usb_peekQueue(q, i-1) == '\n' && usb_peekQueue(q, i) == '#'){
 80025fc:	230f      	movs	r3, #15
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	3b02      	subs	r3, #2
 8002604:	b2da      	uxtb	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0011      	movs	r1, r2
 800260a:	0018      	movs	r0, r3
 800260c:	f7ff ffa4 	bl	8002558 <usb_peekQueue>
 8002610:	0003      	movs	r3, r0
 8002612:	2b0d      	cmp	r3, #13
 8002614:	d122      	bne.n	800265c <usb_queueDiscard+0x72>
 8002616:	230f      	movs	r3, #15
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	3b01      	subs	r3, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f7ff ff97 	bl	8002558 <usb_peekQueue>
 800262a:	0003      	movs	r3, r0
 800262c:	2b0a      	cmp	r3, #10
 800262e:	d115      	bne.n	800265c <usb_queueDiscard+0x72>
 8002630:	230f      	movs	r3, #15
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0011      	movs	r1, r2
 800263a:	0018      	movs	r0, r3
 800263c:	f7ff ff8c 	bl	8002558 <usb_peekQueue>
 8002640:	0003      	movs	r3, r0
 8002642:	2b23      	cmp	r3, #35	; 0x23
 8002644:	d10a      	bne.n	800265c <usb_queueDiscard+0x72>
			q->r_index = i;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	200f      	movs	r0, #15
 800264a:	183a      	adds	r2, r7, r0
 800264c:	2141      	movs	r1, #65	; 0x41
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	545a      	strb	r2, [r3, r1]
			return (i+2);
 8002652:	183b      	adds	r3, r7, r0
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	3302      	adds	r3, #2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e013      	b.n	8002684 <usb_queueDiscard+0x9a>
	for (uint8_t i =2; i< USB_QUEUE_SIZE; i++){
 800265c:	210f      	movs	r1, #15
 800265e:	187b      	adds	r3, r7, r1
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	187b      	adds	r3, r7, r1
 8002664:	3201      	adds	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	230f      	movs	r3, #15
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b3f      	cmp	r3, #63	; 0x3f
 8002670:	d9c4      	bls.n	80025fc <usb_queueDiscard+0x12>
		}
	}
	q->r_index = 0;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2241      	movs	r2, #65	; 0x41
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]
	q->w_index = 0;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2242      	movs	r2, #66	; 0x42
 800267e:	2100      	movs	r1, #0
 8002680:	5499      	strb	r1, [r3, r2]
	return (USB_QUEUE_SIZE);
 8002682:	2340      	movs	r3, #64	; 0x40
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b004      	add	sp, #16
 800268a:	bd80      	pop	{r7, pc}

0800268c <usb_processFrame>:

/*
 * Decodes a valid usb frame into device functions
 */
uint8_t usb_processFrame(uint8_t *frame){
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	static uint8_t response[USB_FRAME_SIZE];
	response[0] = '#';
 8002694:	4bee      	ldr	r3, [pc, #952]	; (8002a50 <usb_processFrame+0x3c4>)
 8002696:	2223      	movs	r2, #35	; 0x23
 8002698:	701a      	strb	r2, [r3, #0]
	uint8_t n = frame[1];
 800269a:	2314      	movs	r3, #20
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	7852      	ldrb	r2, [r2, #1]
 80026a2:	701a      	strb	r2, [r3, #0]
	UNUSED(n);
	uint8_t func = frame[2];
 80026a4:	2113      	movs	r1, #19
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	7892      	ldrb	r2, [r2, #2]
 80026ac:	701a      	strb	r2, [r3, #0]
	uint16_t value = 0;
 80026ae:	2316      	movs	r3, #22
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2200      	movs	r2, #0
 80026b4:	801a      	strh	r2, [r3, #0]
	uint8_t res_n = 0;
 80026b6:	2315      	movs	r3, #21
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
	uint16_t res_val = 0;
 80026be:	2310      	movs	r3, #16
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	801a      	strh	r2, [r3, #0]
	uint32_t res_val32 = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
	uint32_t value32 = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
	switch (func){
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b3e      	cmp	r3, #62	; 0x3e
 80026d4:	d900      	bls.n	80026d8 <usb_processFrame+0x4c>
 80026d6:	e289      	b.n	8002bec <usb_processFrame+0x560>
 80026d8:	009a      	lsls	r2, r3, #2
 80026da:	4bde      	ldr	r3, [pc, #888]	; (8002a54 <usb_processFrame+0x3c8>)
 80026dc:	18d3      	adds	r3, r2, r3
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	469f      	mov	pc, r3
	case 1://Hello
		res_n = 13;
 80026e2:	2315      	movs	r3, #21
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	220d      	movs	r2, #13
 80026e8:	701a      	strb	r2, [r3, #0]
		response[2] = 129;
 80026ea:	4bd9      	ldr	r3, [pc, #868]	; (8002a50 <usb_processFrame+0x3c4>)
 80026ec:	2281      	movs	r2, #129	; 0x81
 80026ee:	709a      	strb	r2, [r3, #2]
		response[3] = 'I';response[4] = ' ';response[5] = 'a';response[6] = 'm';response[7] = ' ';response[8] = 'a';
 80026f0:	4bd7      	ldr	r3, [pc, #860]	; (8002a50 <usb_processFrame+0x3c4>)
 80026f2:	2249      	movs	r2, #73	; 0x49
 80026f4:	70da      	strb	r2, [r3, #3]
 80026f6:	4bd6      	ldr	r3, [pc, #856]	; (8002a50 <usb_processFrame+0x3c4>)
 80026f8:	2220      	movs	r2, #32
 80026fa:	711a      	strb	r2, [r3, #4]
 80026fc:	4bd4      	ldr	r3, [pc, #848]	; (8002a50 <usb_processFrame+0x3c4>)
 80026fe:	2261      	movs	r2, #97	; 0x61
 8002700:	715a      	strb	r2, [r3, #5]
 8002702:	4bd3      	ldr	r3, [pc, #844]	; (8002a50 <usb_processFrame+0x3c4>)
 8002704:	226d      	movs	r2, #109	; 0x6d
 8002706:	719a      	strb	r2, [r3, #6]
 8002708:	4bd1      	ldr	r3, [pc, #836]	; (8002a50 <usb_processFrame+0x3c4>)
 800270a:	2220      	movs	r2, #32
 800270c:	71da      	strb	r2, [r3, #7]
 800270e:	4bd0      	ldr	r3, [pc, #832]	; (8002a50 <usb_processFrame+0x3c4>)
 8002710:	2261      	movs	r2, #97	; 0x61
 8002712:	721a      	strb	r2, [r3, #8]
		response[9] = ' ';response[10] = 'P';response[11] = 'a';response[12] = 'n';response[13] = 'd';response[14] = 'a';
 8002714:	4bce      	ldr	r3, [pc, #824]	; (8002a50 <usb_processFrame+0x3c4>)
 8002716:	2220      	movs	r2, #32
 8002718:	725a      	strb	r2, [r3, #9]
 800271a:	4bcd      	ldr	r3, [pc, #820]	; (8002a50 <usb_processFrame+0x3c4>)
 800271c:	2250      	movs	r2, #80	; 0x50
 800271e:	729a      	strb	r2, [r3, #10]
 8002720:	4bcb      	ldr	r3, [pc, #812]	; (8002a50 <usb_processFrame+0x3c4>)
 8002722:	2261      	movs	r2, #97	; 0x61
 8002724:	72da      	strb	r2, [r3, #11]
 8002726:	4bca      	ldr	r3, [pc, #808]	; (8002a50 <usb_processFrame+0x3c4>)
 8002728:	226e      	movs	r2, #110	; 0x6e
 800272a:	731a      	strb	r2, [r3, #12]
 800272c:	4bc8      	ldr	r3, [pc, #800]	; (8002a50 <usb_processFrame+0x3c4>)
 800272e:	2264      	movs	r2, #100	; 0x64
 8002730:	735a      	strb	r2, [r3, #13]
 8002732:	4bc7      	ldr	r3, [pc, #796]	; (8002a50 <usb_processFrame+0x3c4>)
 8002734:	2261      	movs	r2, #97	; 0x61
 8002736:	739a      	strb	r2, [r3, #14]
		break;
 8002738:	e263      	b.n	8002c02 <usb_processFrame+0x576>
	case 2://Get config bits
		res_n = 2;
 800273a:	2315      	movs	r3, #21
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
		response[2] = 130;
 8002742:	4bc3      	ldr	r3, [pc, #780]	; (8002a50 <usb_processFrame+0x3c4>)
 8002744:	2282      	movs	r2, #130	; 0x82
 8002746:	709a      	strb	r2, [r3, #2]
		response[3] = getConfigBits();
 8002748:	f000 fb22 	bl	8002d90 <getConfigBits>
 800274c:	0003      	movs	r3, r0
 800274e:	001a      	movs	r2, r3
 8002750:	4bbf      	ldr	r3, [pc, #764]	; (8002a50 <usb_processFrame+0x3c4>)
 8002752:	70da      	strb	r2, [r3, #3]
		break;
 8002754:	e255      	b.n	8002c02 <usb_processFrame+0x576>

	case 5://Set usb active
		value = frame[3];
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3303      	adds	r3, #3
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	2116      	movs	r1, #22
 800275e:	187b      	adds	r3, r7, r1
 8002760:	801a      	strh	r2, [r3, #0]
		setUsbActive(value);
 8002762:	187b      	adds	r3, r7, r1
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff fe2f 	bl	80023cc <setUsbActive>
	case 6://get usb active
		res_n = 2;
 800276e:	2315      	movs	r3, #21
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	2202      	movs	r2, #2
 8002774:	701a      	strb	r2, [r3, #0]
		response[2] = 134;
 8002776:	4bb6      	ldr	r3, [pc, #728]	; (8002a50 <usb_processFrame+0x3c4>)
 8002778:	2286      	movs	r2, #134	; 0x86
 800277a:	709a      	strb	r2, [r3, #2]
		response[3] = getUsbActive(value);
 800277c:	2316      	movs	r3, #22
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	0018      	movs	r0, r3
 8002784:	f7ff fe42 	bl	800240c <getUsbActive>
 8002788:	0003      	movs	r3, r0
 800278a:	001a      	movs	r2, r3
 800278c:	4bb0      	ldr	r3, [pc, #704]	; (8002a50 <usb_processFrame+0x3c4>)
 800278e:	70da      	strb	r2, [r3, #3]
		break;
 8002790:	e237      	b.n	8002c02 <usb_processFrame+0x576>

	case 10://Set user led mode
		value = frame[3];
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3303      	adds	r3, #3
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	2116      	movs	r1, #22
 800279a:	187b      	adds	r3, r7, r1
 800279c:	801a      	strh	r2, [r3, #0]
		userLedMode(value);
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7fe feeb 	bl	8001580 <userLedMode>
	case 11://Get user led mode
		res_n = 2;
 80027aa:	2315      	movs	r3, #21
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
		response[2] = 139;
 80027b2:	4ba7      	ldr	r3, [pc, #668]	; (8002a50 <usb_processFrame+0x3c4>)
 80027b4:	228b      	movs	r2, #139	; 0x8b
 80027b6:	709a      	strb	r2, [r3, #2]
		response[3] = getUserLedMode();
 80027b8:	f7fe ff1a 	bl	80015f0 <getUserLedMode>
 80027bc:	0003      	movs	r3, r0
 80027be:	001a      	movs	r2, r3
 80027c0:	4ba3      	ldr	r3, [pc, #652]	; (8002a50 <usb_processFrame+0x3c4>)
 80027c2:	70da      	strb	r2, [r3, #3]
		break;
 80027c4:	e21d      	b.n	8002c02 <usb_processFrame+0x576>

	case 12://Set user Led mode 2 Freq
		value = frame[3];
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3303      	adds	r3, #3
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	2116      	movs	r1, #22
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	801a      	strh	r2, [r3, #0]
		userLedFreq(value);
 80027d2:	187b      	adds	r3, r7, r1
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe ff13 	bl	8001604 <userLedFreq>
	case 13://Get user led mode 2 Freq
		res_n = 2;
 80027de:	2315      	movs	r3, #21
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2202      	movs	r2, #2
 80027e4:	701a      	strb	r2, [r3, #0]
		response[2] = 141;
 80027e6:	4b9a      	ldr	r3, [pc, #616]	; (8002a50 <usb_processFrame+0x3c4>)
 80027e8:	228d      	movs	r2, #141	; 0x8d
 80027ea:	709a      	strb	r2, [r3, #2]
		response[3] = getUserLedFreq();
 80027ec:	f7fe ff22 	bl	8001634 <getUserLedFreq>
 80027f0:	0003      	movs	r3, r0
 80027f2:	001a      	movs	r2, r3
 80027f4:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <usb_processFrame+0x3c4>)
 80027f6:	70da      	strb	r2, [r3, #3]
		break;
 80027f8:	e203      	b.n	8002c02 <usb_processFrame+0x576>

	case 14://Set user IO Out 1
		value = frame[3];
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3303      	adds	r3, #3
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	2116      	movs	r1, #22
 8002802:	187b      	adds	r3, r7, r1
 8002804:	801a      	strh	r2, [r3, #0]
		setUserOut(1, value);
 8002806:	187b      	adds	r3, r7, r1
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	0019      	movs	r1, r3
 800280e:	2001      	movs	r0, #1
 8002810:	f7fe ff4a 	bl	80016a8 <setUserOut>
	case 15://Get user out 1
		res_n = 2;
 8002814:	2315      	movs	r3, #21
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
		response[2] = 143;
 800281c:	4b8c      	ldr	r3, [pc, #560]	; (8002a50 <usb_processFrame+0x3c4>)
 800281e:	228f      	movs	r2, #143	; 0x8f
 8002820:	709a      	strb	r2, [r3, #2]
		response[3] = getUserOut(1);
 8002822:	2001      	movs	r0, #1
 8002824:	f7fe ff7c 	bl	8001720 <getUserOut>
 8002828:	0003      	movs	r3, r0
 800282a:	001a      	movs	r2, r3
 800282c:	4b88      	ldr	r3, [pc, #544]	; (8002a50 <usb_processFrame+0x3c4>)
 800282e:	70da      	strb	r2, [r3, #3]
		break;
 8002830:	e1e7      	b.n	8002c02 <usb_processFrame+0x576>

	case 16://Set user IO Out 2
		value = frame[3];
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3303      	adds	r3, #3
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	2116      	movs	r1, #22
 800283a:	187b      	adds	r3, r7, r1
 800283c:	801a      	strh	r2, [r3, #0]
		setUserOut(2, value);
 800283e:	187b      	adds	r3, r7, r1
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	0019      	movs	r1, r3
 8002846:	2002      	movs	r0, #2
 8002848:	f7fe ff2e 	bl	80016a8 <setUserOut>
	case 17://Get user out 2
		res_n = 2;
 800284c:	2315      	movs	r3, #21
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
		response[2] = 145;
 8002854:	4b7e      	ldr	r3, [pc, #504]	; (8002a50 <usb_processFrame+0x3c4>)
 8002856:	2291      	movs	r2, #145	; 0x91
 8002858:	709a      	strb	r2, [r3, #2]
		response[3] = getUserOut(2);
 800285a:	2002      	movs	r0, #2
 800285c:	f7fe ff60 	bl	8001720 <getUserOut>
 8002860:	0003      	movs	r3, r0
 8002862:	001a      	movs	r2, r3
 8002864:	4b7a      	ldr	r3, [pc, #488]	; (8002a50 <usb_processFrame+0x3c4>)
 8002866:	70da      	strb	r2, [r3, #3]
		break;
 8002868:	e1cb      	b.n	8002c02 <usb_processFrame+0x576>

	case 20://Read analog in 2 (amp)
		res_n = 3;
 800286a:	2315      	movs	r3, #21
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2203      	movs	r2, #3
 8002870:	701a      	strb	r2, [r3, #0]
		response[2] = 148;
 8002872:	4b77      	ldr	r3, [pc, #476]	; (8002a50 <usb_processFrame+0x3c4>)
 8002874:	2294      	movs	r2, #148	; 0x94
 8002876:	709a      	strb	r2, [r3, #2]
		res_val = getFromFilter();
 8002878:	2410      	movs	r4, #16
 800287a:	0025      	movs	r5, r4
 800287c:	193c      	adds	r4, r7, r4
 800287e:	f7fe f811 	bl	80008a4 <getFromFilter>
 8002882:	0003      	movs	r3, r0
 8002884:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 8002886:	002c      	movs	r4, r5
 8002888:	193b      	adds	r3, r7, r4
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 fa4d 	bl	8002d2c <get8MSB>
 8002892:	0003      	movs	r3, r0
 8002894:	001a      	movs	r2, r3
 8002896:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <usb_processFrame+0x3c4>)
 8002898:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 800289a:	193b      	adds	r3, r7, r4
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 fa53 	bl	8002d4a <get8LSB>
 80028a4:	0003      	movs	r3, r0
 80028a6:	001a      	movs	r2, r3
 80028a8:	4b69      	ldr	r3, [pc, #420]	; (8002a50 <usb_processFrame+0x3c4>)
 80028aa:	711a      	strb	r2, [r3, #4]
		break;
 80028ac:	e1a9      	b.n	8002c02 <usb_processFrame+0x576>

	case 21://Read user analog in 1
		res_n = 3;
 80028ae:	2315      	movs	r3, #21
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	2203      	movs	r2, #3
 80028b4:	701a      	strb	r2, [r3, #0]
		response[2] = 149;
 80028b6:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <usb_processFrame+0x3c4>)
 80028b8:	2295      	movs	r2, #149	; 0x95
 80028ba:	709a      	strb	r2, [r3, #2]
		res_val = getAnalogRead(0);
 80028bc:	2410      	movs	r4, #16
 80028be:	0025      	movs	r5, r4
 80028c0:	193c      	adds	r4, r7, r4
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fd fe20 	bl	8000508 <getAnalogRead>
 80028c8:	0003      	movs	r3, r0
 80028ca:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 80028cc:	002c      	movs	r4, r5
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 fa2a 	bl	8002d2c <get8MSB>
 80028d8:	0003      	movs	r3, r0
 80028da:	001a      	movs	r2, r3
 80028dc:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <usb_processFrame+0x3c4>)
 80028de:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 fa30 	bl	8002d4a <get8LSB>
 80028ea:	0003      	movs	r3, r0
 80028ec:	001a      	movs	r2, r3
 80028ee:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <usb_processFrame+0x3c4>)
 80028f0:	711a      	strb	r2, [r3, #4]
		break;
 80028f2:	e186      	b.n	8002c02 <usb_processFrame+0x576>

	case 22://Read user analog in 2
		res_n = 3;
 80028f4:	2315      	movs	r3, #21
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2203      	movs	r2, #3
 80028fa:	701a      	strb	r2, [r3, #0]
		response[2] = 150;
 80028fc:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <usb_processFrame+0x3c4>)
 80028fe:	2296      	movs	r2, #150	; 0x96
 8002900:	709a      	strb	r2, [r3, #2]
		res_val = getAnalogRead(1);
 8002902:	2410      	movs	r4, #16
 8002904:	0025      	movs	r5, r4
 8002906:	193c      	adds	r4, r7, r4
 8002908:	2001      	movs	r0, #1
 800290a:	f7fd fdfd 	bl	8000508 <getAnalogRead>
 800290e:	0003      	movs	r3, r0
 8002910:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 8002912:	002c      	movs	r4, r5
 8002914:	193b      	adds	r3, r7, r4
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 fa07 	bl	8002d2c <get8MSB>
 800291e:	0003      	movs	r3, r0
 8002920:	001a      	movs	r2, r3
 8002922:	4b4b      	ldr	r3, [pc, #300]	; (8002a50 <usb_processFrame+0x3c4>)
 8002924:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002926:	193b      	adds	r3, r7, r4
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fa0d 	bl	8002d4a <get8LSB>
 8002930:	0003      	movs	r3, r0
 8002932:	001a      	movs	r2, r3
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <usb_processFrame+0x3c4>)
 8002936:	711a      	strb	r2, [r3, #4]
		break;
 8002938:	e163      	b.n	8002c02 <usb_processFrame+0x576>

	case 30://read user input 1
		res_n = 2;
 800293a:	2315      	movs	r3, #21
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
		response[2] = 158;
 8002942:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <usb_processFrame+0x3c4>)
 8002944:	229e      	movs	r2, #158	; 0x9e
 8002946:	709a      	strb	r2, [r3, #2]
		response[3] = getUserIn(1);
 8002948:	2001      	movs	r0, #1
 800294a:	f7fd ff13 	bl	8000774 <getUserIn>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <usb_processFrame+0x3c4>)
 8002954:	70da      	strb	r2, [r3, #3]
		break;
 8002956:	e154      	b.n	8002c02 <usb_processFrame+0x576>

	case 31://read user input 2
		res_n = 2;
 8002958:	2315      	movs	r3, #21
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2202      	movs	r2, #2
 800295e:	701a      	strb	r2, [r3, #0]
		response[2] = 159;
 8002960:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <usb_processFrame+0x3c4>)
 8002962:	229f      	movs	r2, #159	; 0x9f
 8002964:	709a      	strb	r2, [r3, #2]
		response[3] = getUserIn(2);
 8002966:	2002      	movs	r0, #2
 8002968:	f7fd ff04 	bl	8000774 <getUserIn>
 800296c:	0003      	movs	r3, r0
 800296e:	001a      	movs	r2, r3
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <usb_processFrame+0x3c4>)
 8002972:	70da      	strb	r2, [r3, #3]
		break;
 8002974:	e145      	b.n	8002c02 <usb_processFrame+0x576>

	case 40://Set encoder mode
		value = frame[3];
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3303      	adds	r3, #3
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	2116      	movs	r1, #22
 800297e:	187b      	adds	r3, r7, r1
 8002980:	801a      	strh	r2, [r3, #0]
		setEncoderMode(value);
 8002982:	187b      	adds	r3, r7, r1
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	0018      	movs	r0, r3
 800298a:	f7fd fdf7 	bl	800057c <setEncoderMode>
	case 41://Get encoder mode
		res_n = 2;
 800298e:	2315      	movs	r3, #21
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	2202      	movs	r2, #2
 8002994:	701a      	strb	r2, [r3, #0]
		response[2] = 169;
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <usb_processFrame+0x3c4>)
 8002998:	22a9      	movs	r2, #169	; 0xa9
 800299a:	709a      	strb	r2, [r3, #2]
		response[3] = getEncoderMode();
 800299c:	f7fd fdfe 	bl	800059c <getEncoderMode>
 80029a0:	0003      	movs	r3, r0
 80029a2:	001a      	movs	r2, r3
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <usb_processFrame+0x3c4>)
 80029a6:	70da      	strb	r2, [r3, #3]
		break;
 80029a8:	e12b      	b.n	8002c02 <usb_processFrame+0x576>

	case 42://set encoder count
		value32 = (frame[3]<<24) + (frame[4]<<16) + (frame[5]<<8) + frame[6];
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3303      	adds	r3, #3
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	061a      	lsls	r2, r3, #24
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	18d2      	adds	r2, r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3305      	adds	r3, #5
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	3206      	adds	r2, #6
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	189b      	adds	r3, r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
		setEncoderCount(value32);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7fd fdaa 	bl	800052c <setEncoderCount>
	case 43://get encoder
		res_n = 5;
 80029d8:	2315      	movs	r3, #21
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2205      	movs	r2, #5
 80029de:	701a      	strb	r2, [r3, #0]
		response[2] = 171;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <usb_processFrame+0x3c4>)
 80029e2:	22ab      	movs	r2, #171	; 0xab
 80029e4:	709a      	strb	r2, [r3, #2]
		res_val32 = getEncoderCount();
 80029e6:	f7fd fde3 	bl	80005b0 <getEncoderCount>
 80029ea:	0003      	movs	r3, r0
 80029ec:	60fb      	str	r3, [r7, #12]
		response[3] = get8MSB(get16MSB(res_val32));
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 f9b7 	bl	8002d64 <get16MSB>
 80029f6:	0003      	movs	r3, r0
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f997 	bl	8002d2c <get8MSB>
 80029fe:	0003      	movs	r3, r0
 8002a00:	001a      	movs	r2, r3
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <usb_processFrame+0x3c4>)
 8002a04:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(get16MSB(res_val32));
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f9ab 	bl	8002d64 <get16MSB>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 f99a 	bl	8002d4a <get8LSB>
 8002a16:	0003      	movs	r3, r0
 8002a18:	001a      	movs	r2, r3
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <usb_processFrame+0x3c4>)
 8002a1c:	711a      	strb	r2, [r3, #4]
		response[5] = get8MSB(get16LSB(res_val32));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f9aa 	bl	8002d7a <get16LSB>
 8002a26:	0003      	movs	r3, r0
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 f97f 	bl	8002d2c <get8MSB>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	001a      	movs	r2, r3
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <usb_processFrame+0x3c4>)
 8002a34:	715a      	strb	r2, [r3, #5]
		response[6] = get8LSB(get16LSB(res_val32));
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 f99e 	bl	8002d7a <get16LSB>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f982 	bl	8002d4a <get8LSB>
 8002a46:	0003      	movs	r3, r0
 8002a48:	001a      	movs	r2, r3
 8002a4a:	4b01      	ldr	r3, [pc, #4]	; (8002a50 <usb_processFrame+0x3c4>)
 8002a4c:	719a      	strb	r2, [r3, #6]
		break;
 8002a4e:	e0d8      	b.n	8002c02 <usb_processFrame+0x576>
 8002a50:	200002fc 	.word	0x200002fc
 8002a54:	0800f438 	.word	0x0800f438

	case 44:// get pwm duty cycle
		res_n = 3;
 8002a58:	2315      	movs	r3, #21
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	701a      	strb	r2, [r3, #0]
		response[2] = 172;
 8002a60:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <usb_processFrame+0x5b8>)
 8002a62:	22ac      	movs	r2, #172	; 0xac
 8002a64:	709a      	strb	r2, [r3, #2]
		res_val = getEncoderDuty();
 8002a66:	f7fd fe7b 	bl	8000760 <getEncoderDuty>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	2410      	movs	r4, #16
 8002a6e:	193b      	adds	r3, r7, r4
 8002a70:	801a      	strh	r2, [r3, #0]
		response[3] = get8MSB(res_val);
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f958 	bl	8002d2c <get8MSB>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	001a      	movs	r2, r3
 8002a80:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <usb_processFrame+0x5b8>)
 8002a82:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f95e 	bl	8002d4a <get8LSB>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	001a      	movs	r2, r3
 8002a92:	4b6c      	ldr	r3, [pc, #432]	; (8002c44 <usb_processFrame+0x5b8>)
 8002a94:	711a      	strb	r2, [r3, #4]
		break;
 8002a96:	e0b4      	b.n	8002c02 <usb_processFrame+0x576>

	case 50://Calibrate Gain
		calibrateGain();
 8002a98:	f7fd ff50 	bl	800093c <calibrateGain>
	case 51:
		res_n = 2;
 8002a9c:	2315      	movs	r3, #21
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
		response[2] = 179;
 8002aa4:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <usb_processFrame+0x5b8>)
 8002aa6:	22b3      	movs	r2, #179	; 0xb3
 8002aa8:	709a      	strb	r2, [r3, #2]
		response[3] = getGainCalibrated();
 8002aaa:	f7fd ff91 	bl	80009d0 <getGainCalibrated>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	4b64      	ldr	r3, [pc, #400]	; (8002c44 <usb_processFrame+0x5b8>)
 8002ab4:	70da      	strb	r2, [r3, #3]
		break;
 8002ab6:	e0a4      	b.n	8002c02 <usb_processFrame+0x576>

	case 52://get RG step
		res_n = 2;
 8002ab8:	2315      	movs	r3, #21
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2202      	movs	r2, #2
 8002abe:	701a      	strb	r2, [r3, #0]
		response[2] = 180;
 8002ac0:	4b60      	ldr	r3, [pc, #384]	; (8002c44 <usb_processFrame+0x5b8>)
 8002ac2:	22b4      	movs	r2, #180	; 0xb4
 8002ac4:	709a      	strb	r2, [r3, #2]
		response[3] = getRgStep();
 8002ac6:	f7fd ff8d 	bl	80009e4 <getRgStep>
 8002aca:	0003      	movs	r3, r0
 8002acc:	001a      	movs	r2, r3
 8002ace:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <usb_processFrame+0x5b8>)
 8002ad0:	70da      	strb	r2, [r3, #3]
		break;
 8002ad2:	e096      	b.n	8002c02 <usb_processFrame+0x576>

	case 53://get RG step
		res_n = 2;
 8002ad4:	2315      	movs	r3, #21
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2202      	movs	r2, #2
 8002ada:	701a      	strb	r2, [r3, #0]
		response[2] = 181;
 8002adc:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <usb_processFrame+0x5b8>)
 8002ade:	22b5      	movs	r2, #181	; 0xb5
 8002ae0:	709a      	strb	r2, [r3, #2]
		response[3] = getRgWiper();
 8002ae2:	f7fd ff89 	bl	80009f8 <getRgWiper>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	001a      	movs	r2, r3
 8002aea:	4b56      	ldr	r3, [pc, #344]	; (8002c44 <usb_processFrame+0x5b8>)
 8002aec:	70da      	strb	r2, [r3, #3]
		break;
 8002aee:	e088      	b.n	8002c02 <usb_processFrame+0x576>

	case 54://Set amp gain
		value = (frame[3]<<8) + frame[4];
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3303      	adds	r3, #3
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	b299      	uxth	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	2016      	movs	r0, #22
 8002b06:	183b      	adds	r3, r7, r0
 8002b08:	188a      	adds	r2, r1, r2
 8002b0a:	801a      	strh	r2, [r3, #0]
		setGain(value);
 8002b0c:	183b      	adds	r3, r7, r0
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7fd ffab 	bl	8000a6c <setGain>
	case 55://get amp gain
		res_n = 3;
 8002b16:	2315      	movs	r3, #21
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	701a      	strb	r2, [r3, #0]
		response[2] = 183;
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <usb_processFrame+0x5b8>)
 8002b20:	22b7      	movs	r2, #183	; 0xb7
 8002b22:	709a      	strb	r2, [r3, #2]
		res_val = getActiveGain();
 8002b24:	2410      	movs	r4, #16
 8002b26:	0025      	movs	r5, r4
 8002b28:	193c      	adds	r4, r7, r4
 8002b2a:	f7fd ffdd 	bl	8000ae8 <getActiveGain>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 8002b32:	002c      	movs	r4, r5
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 f8f7 	bl	8002d2c <get8MSB>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	001a      	movs	r2, r3
 8002b42:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <usb_processFrame+0x5b8>)
 8002b44:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002b46:	193b      	adds	r3, r7, r4
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 f8fd 	bl	8002d4a <get8LSB>
 8002b50:	0003      	movs	r3, r0
 8002b52:	001a      	movs	r2, r3
 8002b54:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <usb_processFrame+0x5b8>)
 8002b56:	711a      	strb	r2, [r3, #4]
		break;
 8002b58:	e053      	b.n	8002c02 <usb_processFrame+0x576>

	case 60://set offset
		value = (frame[3]<<8) + frame[4];
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	b299      	uxth	r1, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	2016      	movs	r0, #22
 8002b70:	183b      	adds	r3, r7, r0
 8002b72:	188a      	adds	r2, r1, r2
 8002b74:	801a      	strh	r2, [r3, #0]
		setOffset(value);
 8002b76:	183b      	adds	r3, r7, r0
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7fd fe20 	bl	80007c0 <setOffset>

	case 61: //get offset
		res_n = 3;
 8002b80:	2315      	movs	r3, #21
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2203      	movs	r2, #3
 8002b86:	701a      	strb	r2, [r3, #0]
		response[2] = 189;
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <usb_processFrame+0x5b8>)
 8002b8a:	22bd      	movs	r2, #189	; 0xbd
 8002b8c:	709a      	strb	r2, [r3, #2]
		res_val = getOffset();
 8002b8e:	2410      	movs	r4, #16
 8002b90:	0025      	movs	r5, r4
 8002b92:	193c      	adds	r4, r7, r4
 8002b94:	f7fd fe2e 	bl	80007f4 <getOffset>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	8023      	strh	r3, [r4, #0]
		response[3] = get8MSB(res_val);
 8002b9c:	002c      	movs	r4, r5
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 f8c2 	bl	8002d2c <get8MSB>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	001a      	movs	r2, r3
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <usb_processFrame+0x5b8>)
 8002bae:	70da      	strb	r2, [r3, #3]
		response[4] = get8LSB(res_val);
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f000 f8c8 	bl	8002d4a <get8LSB>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <usb_processFrame+0x5b8>)
 8002bc0:	711a      	strb	r2, [r3, #4]
		break;
 8002bc2:	e01e      	b.n	8002c02 <usb_processFrame+0x576>

	case 62: // auto offset
		res_val = autoOffset();
 8002bc4:	f7fd ff9c 	bl	8000b00 <autoOffset>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	001a      	movs	r2, r3
 8002bcc:	2110      	movs	r1, #16
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	801a      	strh	r2, [r3, #0]
		res_n = 2;
 8002bd2:	2315      	movs	r3, #21
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	701a      	strb	r2, [r3, #0]
		response[2] = 190;
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <usb_processFrame+0x5b8>)
 8002bdc:	22be      	movs	r2, #190	; 0xbe
 8002bde:	709a      	strb	r2, [r3, #2]
		response[3] = res_val;
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <usb_processFrame+0x5b8>)
 8002be8:	70da      	strb	r2, [r3, #3]
		break;
 8002bea:	e00a      	b.n	8002c02 <usb_processFrame+0x576>
		//// development functions



	default://returns an error
		res_n = 2;
 8002bec:	2315      	movs	r3, #21
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]
		response[2] = 0;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <usb_processFrame+0x5b8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	709a      	strb	r2, [r3, #2]
		response[3] = 1;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <usb_processFrame+0x5b8>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	70da      	strb	r2, [r3, #3]
		break;
 8002c00:	46c0      	nop			; (mov r8, r8)

	}


	response[2 + res_n] = '\r';
 8002c02:	2015      	movs	r0, #21
 8002c04:	183b      	adds	r3, r7, r0
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	3302      	adds	r3, #2
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <usb_processFrame+0x5b8>)
 8002c0c:	210d      	movs	r1, #13
 8002c0e:	54d1      	strb	r1, [r2, r3]
	response[2 + res_n + 1] = '\n';
 8002c10:	183b      	adds	r3, r7, r0
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	3303      	adds	r3, #3
 8002c16:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <usb_processFrame+0x5b8>)
 8002c18:	210a      	movs	r1, #10
 8002c1a:	54d1      	strb	r1, [r2, r3]
	response[1] = res_n;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <usb_processFrame+0x5b8>)
 8002c1e:	183a      	adds	r2, r7, r0
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	705a      	strb	r2, [r3, #1]
	CDC_Transmit_FS(response, res_n + 4);
 8002c24:	183b      	adds	r3, r7, r0
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <usb_processFrame+0x5b8>)
 8002c30:	0011      	movs	r1, r2
 8002c32:	0018      	movs	r0, r3
 8002c34:	f00b fec6 	bl	800e9c4 <CDC_Transmit_FS>
	return 0;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b006      	add	sp, #24
 8002c40:	bdb0      	pop	{r4, r5, r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	200002fc 	.word	0x200002fc

08002c48 <usb_getQueuedCommand>:
/*
 * usb_getQueuedCommand(pointer to queue)
 * Get a entire frame from the queue and verify its format,
 * If valid, it gets processed and returns 1. otherwise, returns 0 *
 */
uint8_t usb_getQueuedCommand(usbQueue *q){
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	static uint8_t rx_frame[USB_FRAME_SIZE];
	if (q->queue[q->r_index] != '#'){
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2241      	movs	r2, #65	; 0x41
 8002c54:	5c9b      	ldrb	r3, [r3, r2]
 8002c56:	001a      	movs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	5c9b      	ldrb	r3, [r3, r2]
 8002c5c:	2b23      	cmp	r3, #35	; 0x23
 8002c5e:	d003      	beq.n	8002c68 <usb_getQueuedCommand+0x20>
		usb_queueDiscard(q);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7ff fcc1 	bl	80025ea <usb_queueDiscard>
	}
	if (usb_queuedData(q)){
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff fc62 	bl	8002534 <usb_queuedData>
 8002c70:	1e03      	subs	r3, r0, #0
 8002c72:	d041      	beq.n	8002cf8 <usb_getQueuedCommand+0xb0>
		uint8_t n = usb_peekQueue(q, 1);
 8002c74:	250e      	movs	r5, #14
 8002c76:	197c      	adds	r4, r7, r5
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff fc6b 	bl	8002558 <usb_peekQueue>
 8002c82:	0003      	movs	r3, r0
 8002c84:	7023      	strb	r3, [r4, #0]
		uint8_t frame_len = 2 + n + 2;
 8002c86:	230d      	movs	r3, #13
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	197a      	adds	r2, r7, r5
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	3204      	adds	r2, #4
 8002c90:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i< frame_len; i++){
 8002c92:	230f      	movs	r3, #15
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e00f      	b.n	8002cbc <usb_getQueuedCommand+0x74>
			rx_frame[i] = usb_GetByteFromQueue(q);
 8002c9c:	250f      	movs	r5, #15
 8002c9e:	197b      	adds	r3, r7, r5
 8002ca0:	781c      	ldrb	r4, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff fc7a 	bl	800259e <usb_GetByteFromQueue>
 8002caa:	0003      	movs	r3, r0
 8002cac:	001a      	movs	r2, r3
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <usb_getQueuedCommand+0xbc>)
 8002cb0:	551a      	strb	r2, [r3, r4]
		for (uint8_t i = 0; i< frame_len; i++){
 8002cb2:	197b      	adds	r3, r7, r5
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	197b      	adds	r3, r7, r5
 8002cb8:	3201      	adds	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	230f      	movs	r3, #15
 8002cbe:	18fa      	adds	r2, r7, r3
 8002cc0:	230d      	movs	r3, #13
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	7812      	ldrb	r2, [r2, #0]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d3e7      	bcc.n	8002c9c <usb_getQueuedCommand+0x54>
		}
		if (rx_frame[frame_len-2] == '\r' && rx_frame[frame_len-1] == '\n'){
 8002ccc:	230d      	movs	r3, #13
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	3b02      	subs	r3, #2
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <usb_getQueuedCommand+0xbc>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	2b0d      	cmp	r3, #13
 8002cda:	d10d      	bne.n	8002cf8 <usb_getQueuedCommand+0xb0>
 8002cdc:	230d      	movs	r3, #13
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <usb_getQueuedCommand+0xbc>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	2b0a      	cmp	r3, #10
 8002cea:	d105      	bne.n	8002cf8 <usb_getQueuedCommand+0xb0>
			usb_processFrame(rx_frame);
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <usb_getQueuedCommand+0xbc>)
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff fccc 	bl	800268c <usb_processFrame>
			return 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <usb_getQueuedCommand+0xb2>
		}
	}
	return 0;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bdb0      	pop	{r4, r5, r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	2000030c 	.word	0x2000030c

08002d08 <usbController>:

void usbController(){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
	if (usb_queuedData(&usb_Q)){
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <usbController+0x20>)
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7ff fc10 	bl	8002534 <usb_queuedData>
 8002d14:	1e03      	subs	r3, r0, #0
 8002d16:	d003      	beq.n	8002d20 <usbController+0x18>
		usb_getQueuedCommand(&usb_Q);
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <usbController+0x20>)
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f7ff ff94 	bl	8002c48 <usb_getQueuedCommand>
	}
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	20000738 	.word	0x20000738

08002d2c <get8MSB>:
#include "panda_utils.h"
#include "main.h"


//Utils functions
uint8_t get8MSB(uint16_t val){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	0002      	movs	r2, r0
 8002d34:	1dbb      	adds	r3, r7, #6
 8002d36:	801a      	strh	r2, [r3, #0]
	return val/256;
 8002d38:	1dbb      	adds	r3, r7, #6
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b002      	add	sp, #8
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <get8LSB>:
uint8_t get8LSB(uint16_t val){
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	0002      	movs	r2, r0
 8002d52:	1dbb      	adds	r3, r7, #6
 8002d54:	801a      	strh	r2, [r3, #0]
	return val%256;
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <get16MSB>:
uint16_t get16MSB(uint32_t val){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	return val/65536;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b29b      	uxth	r3, r3
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <get16LSB>:
uint16_t get16LSB(uint32_t val){
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
	return val%65536;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	b29b      	uxth	r3, r3
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <getConfigBits>:



uint8_t getConfigBits(){
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
	uint8_t config = HAL_GPIO_ReadPin(CONFIG_BIT0_GPIO_Port, CONFIG_BIT0_Pin);
 8002d96:	1dfc      	adds	r4, r7, #7
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	2390      	movs	r3, #144	; 0x90
 8002d9e:	05db      	lsls	r3, r3, #23
 8002da0:	0011      	movs	r1, r2
 8002da2:	0018      	movs	r0, r3
 8002da4:	f002 fc9e 	bl	80056e4 <HAL_GPIO_ReadPin>
 8002da8:	0003      	movs	r3, r0
 8002daa:	7023      	strb	r3, [r4, #0]
	config += 2 * HAL_GPIO_ReadPin(CONFIG_BIT1_GPIO_Port, CONFIG_BIT1_Pin);
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <getConfigBits+0x78>)
 8002dae:	2108      	movs	r1, #8
 8002db0:	0018      	movs	r0, r3
 8002db2:	f002 fc97 	bl	80056e4 <HAL_GPIO_ReadPin>
 8002db6:	0003      	movs	r3, r0
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	b2d9      	uxtb	r1, r3
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	1dfa      	adds	r2, r7, #7
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	188a      	adds	r2, r1, r2
 8002dc4:	701a      	strb	r2, [r3, #0]
	config += 4 * HAL_GPIO_ReadPin(CONFIG_BIT2_GPIO_Port, CONFIG_BIT2_Pin);
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <getConfigBits+0x78>)
 8002dc8:	2110      	movs	r1, #16
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f002 fc8a 	bl	80056e4 <HAL_GPIO_ReadPin>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	b2d9      	uxtb	r1, r3
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	1dfa      	adds	r2, r7, #7
 8002dda:	7812      	ldrb	r2, [r2, #0]
 8002ddc:	188a      	adds	r2, r1, r2
 8002dde:	701a      	strb	r2, [r3, #0]
	config += 8 * HAL_GPIO_ReadPin(CONFIG_BIT3_GPIO_Port, CONFIG_BIT3_Pin);
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <getConfigBits+0x78>)
 8002de2:	2120      	movs	r1, #32
 8002de4:	0018      	movs	r0, r3
 8002de6:	f002 fc7d 	bl	80056e4 <HAL_GPIO_ReadPin>
 8002dea:	0003      	movs	r3, r0
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	b2d9      	uxtb	r1, r3
 8002df0:	1dfb      	adds	r3, r7, #7
 8002df2:	1dfa      	adds	r2, r7, #7
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	188a      	adds	r2, r1, r2
 8002df8:	701a      	strb	r2, [r3, #0]
	return config;
 8002dfa:	1dfb      	adds	r3, r7, #7
 8002dfc:	781b      	ldrb	r3, [r3, #0]
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b003      	add	sp, #12
 8002e04:	bd90      	pop	{r4, r7, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	48000400 	.word	0x48000400

08002e0c <getActiveD>:
#define GAIN_POT_SS_PIN SPI1_SS1_Pin

SPI_HandleTypeDef *hspix;

uint8_t last_digipot_data;
uint8_t getActiveD(){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	return last_digipot_data;
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <getActiveD+0x10>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000a08 	.word	0x20000a08

08002e20 <digipotWrite>:

void digipotWrite(uint8_t ndata){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	0002      	movs	r2, r0
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GAIN_POT_SS_PORT, GAIN_POT_SS_PIN, 0);
 8002e2c:	2390      	movs	r3, #144	; 0x90
 8002e2e:	05db      	lsls	r3, r3, #23
 8002e30:	2200      	movs	r2, #0
 8002e32:	2108      	movs	r1, #8
 8002e34:	0018      	movs	r0, r3
 8002e36:	f002 fc72 	bl	800571e <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002e3a:	2032      	movs	r0, #50	; 0x32
 8002e3c:	f000 fbd0 	bl	80035e0 <HAL_Delay>
	uint8_t potdata[2];
	potdata[0] = 0b00010011;
 8002e40:	210c      	movs	r1, #12
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2213      	movs	r2, #19
 8002e46:	701a      	strb	r2, [r3, #0]
	potdata[1] = ndata;
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	1dfa      	adds	r2, r7, #7
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(hspix,potdata, 2, 50);
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <digipotWrite+0x64>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	1879      	adds	r1, r7, r1
 8002e56:	2332      	movs	r3, #50	; 0x32
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f006 fad3 	bl	8009404 <HAL_SPI_Transmit>
	HAL_Delay(50);
 8002e5e:	2032      	movs	r0, #50	; 0x32
 8002e60:	f000 fbbe 	bl	80035e0 <HAL_Delay>
	last_digipot_data = ndata;
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <digipotWrite+0x68>)
 8002e66:	1dfa      	adds	r2, r7, #7
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GAIN_POT_SS_PORT, GAIN_POT_SS_PIN, 1);
 8002e6c:	2390      	movs	r3, #144	; 0x90
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	2201      	movs	r2, #1
 8002e72:	2108      	movs	r1, #8
 8002e74:	0018      	movs	r0, r3
 8002e76:	f002 fc52 	bl	800571e <HAL_GPIO_WritePin>

}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b004      	add	sp, #16
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	20000a0c 	.word	0x20000a0c
 8002e88:	20000a08 	.word	0x20000a08

08002e8c <spiInit>:
void spiInit(SPI_HandleTypeDef *nhspix){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	hspix = nhspix;
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <spiInit+0x1c>)
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	601a      	str	r2, [r3, #0]
	digipotWrite(0);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff ffc0 	bl	8002e20 <digipotWrite>
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000a0c 	.word	0x20000a0c

08002eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_MspInit+0x44>)
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_MspInit+0x44>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	619a      	str	r2, [r3, #24]
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0549      	lsls	r1, r1, #21
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	61da      	str	r2, [r3, #28]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_MspInit+0x44>)
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	055b      	lsls	r3, r3, #21
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b002      	add	sp, #8
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	2314      	movs	r3, #20
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	0018      	movs	r0, r3
 8002f02:	2314      	movs	r3, #20
 8002f04:	001a      	movs	r2, r3
 8002f06:	2100      	movs	r1, #0
 8002f08:	f00c fa40 	bl	800f38c <memset>
  if(hadc->Instance==ADC1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <HAL_ADC_MspInit+0xd8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d155      	bne.n	8002fc2 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_ADC_MspInit+0xdc>)
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_ADC_MspInit+0xdc>)
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	0089      	lsls	r1, r1, #2
 8002f20:	430a      	orrs	r2, r1
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_ADC_MspInit+0xdc>)
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_ADC_MspInit+0xdc>)
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_ADC_MspInit+0xdc>)
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	0289      	lsls	r1, r1, #10
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	615a      	str	r2, [r3, #20]
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_ADC_MspInit+0xdc>)
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	029b      	lsls	r3, r3, #10
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = ANALOG_IN1_Pin|ANALOG_IN2_Pin|AMP_OUT_Pin;
 8002f4e:	2114      	movs	r1, #20
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	2207      	movs	r2, #7
 8002f54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f62:	187a      	adds	r2, r7, r1
 8002f64:	2390      	movs	r3, #144	; 0x90
 8002f66:	05db      	lsls	r3, r3, #23
 8002f68:	0011      	movs	r1, r2
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f002 fa42 	bl	80053f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_ADC_MspInit+0xe4>)
 8002f74:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f76:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002f84:	2280      	movs	r2, #128	; 0x80
 8002f86:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	0052      	lsls	r2, r2, #1
 8002f8e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	00d2      	lsls	r2, r2, #3
 8002f96:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	0192      	lsls	r2, r2, #6
 8002fa4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f002 f839 	bl	8005020 <HAL_DMA_Init>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8002fb2:	f7fe fa83 	bl	80014bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_ADC_MspInit+0xe0>)
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b00a      	add	sp, #40	; 0x28
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	40012400 	.word	0x40012400
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	20000958 	.word	0x20000958
 8002fd8:	40020008 	.word	0x40020008

08002fdc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	2314      	movs	r3, #20
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	0018      	movs	r0, r3
 8002fea:	2314      	movs	r3, #20
 8002fec:	001a      	movs	r2, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f00c f9cc 	bl	800f38c <memset>
  if(hcan->Instance==CAN)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	; (800307c <HAL_CAN_MspInit+0xa0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d13a      	bne.n	8003074 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_CAN_MspInit+0xa4>)
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_CAN_MspInit+0xa4>)
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	0489      	lsls	r1, r1, #18
 8003008:	430a      	orrs	r2, r1
 800300a:	61da      	str	r2, [r3, #28]
 800300c:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_CAN_MspInit+0xa4>)
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	049b      	lsls	r3, r3, #18
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_CAN_MspInit+0xa4>)
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_CAN_MspInit+0xa4>)
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	02c9      	lsls	r1, r1, #11
 8003024:	430a      	orrs	r2, r1
 8003026:	615a      	str	r2, [r3, #20]
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_CAN_MspInit+0xa4>)
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	02db      	lsls	r3, r3, #11
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003036:	2114      	movs	r1, #20
 8003038:	187b      	adds	r3, r7, r1
 800303a:	22c0      	movs	r2, #192	; 0xc0
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	187b      	adds	r3, r7, r1
 8003042:	2202      	movs	r2, #2
 8003044:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	187b      	adds	r3, r7, r1
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800304c:	187b      	adds	r3, r7, r1
 800304e:	2203      	movs	r2, #3
 8003050:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2204      	movs	r2, #4
 8003056:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003058:	187b      	adds	r3, r7, r1
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_CAN_MspInit+0xa8>)
 800305c:	0019      	movs	r1, r3
 800305e:	0010      	movs	r0, r2
 8003060:	f002 f9c8 	bl	80053f4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	2100      	movs	r1, #0
 8003068:	201e      	movs	r0, #30
 800306a:	f001 fcf5 	bl	8004a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800306e:	201e      	movs	r0, #30
 8003070:	f001 fd07 	bl	8004a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b00a      	add	sp, #40	; 0x28
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40006400 	.word	0x40006400
 8003080:	40021000 	.word	0x40021000
 8003084:	48000400 	.word	0x48000400

08003088 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a09      	ldr	r2, [pc, #36]	; (80030bc <HAL_CRC_MspInit+0x34>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10b      	bne.n	80030b2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_CRC_MspInit+0x38>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_CRC_MspInit+0x38>)
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	430a      	orrs	r2, r1
 80030a4:	615a      	str	r2, [r3, #20]
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_CRC_MspInit+0x38>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2240      	movs	r2, #64	; 0x40
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b004      	add	sp, #16
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	40023000 	.word	0x40023000
 80030c0:	40021000 	.word	0x40021000

080030c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	2314      	movs	r3, #20
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	0018      	movs	r0, r3
 80030d2:	2314      	movs	r3, #20
 80030d4:	001a      	movs	r2, r3
 80030d6:	2100      	movs	r1, #0
 80030d8:	f00c f958 	bl	800f38c <memset>
  if(hdac->Instance==DAC)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_DAC_MspInit+0x84>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d12c      	bne.n	8003140 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_DAC_MspInit+0x88>)
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_DAC_MspInit+0x88>)
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	0589      	lsls	r1, r1, #22
 80030f0:	430a      	orrs	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_DAC_MspInit+0x88>)
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	059b      	lsls	r3, r3, #22
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_DAC_MspInit+0x88>)
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_DAC_MspInit+0x88>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0289      	lsls	r1, r1, #10
 800310c:	430a      	orrs	r2, r1
 800310e:	615a      	str	r2, [r3, #20]
 8003110:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_DAC_MspInit+0x88>)
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	029b      	lsls	r3, r3, #10
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800311e:	2114      	movs	r1, #20
 8003120:	187b      	adds	r3, r7, r1
 8003122:	2210      	movs	r2, #16
 8003124:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003126:	187b      	adds	r3, r7, r1
 8003128:	2203      	movs	r2, #3
 800312a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	187b      	adds	r3, r7, r1
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	187a      	adds	r2, r7, r1
 8003134:	2390      	movs	r3, #144	; 0x90
 8003136:	05db      	lsls	r3, r3, #23
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f002 f95a 	bl	80053f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b00a      	add	sp, #40	; 0x28
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40007400 	.word	0x40007400
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	2314      	movs	r3, #20
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	0018      	movs	r0, r3
 800315e:	2314      	movs	r3, #20
 8003160:	001a      	movs	r2, r3
 8003162:	2100      	movs	r1, #0
 8003164:	f00c f912 	bl	800f38c <memset>
  if(hi2c->Instance==I2C1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a20      	ldr	r2, [pc, #128]	; (80031f0 <HAL_I2C_MspInit+0xa0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d139      	bne.n	80031e6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_I2C_MspInit+0xa4>)
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <HAL_I2C_MspInit+0xa4>)
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	02c9      	lsls	r1, r1, #11
 800317c:	430a      	orrs	r2, r1
 800317e:	615a      	str	r2, [r3, #20]
 8003180:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <HAL_I2C_MspInit+0xa4>)
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	02db      	lsls	r3, r3, #11
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800318e:	2114      	movs	r1, #20
 8003190:	187b      	adds	r3, r7, r1
 8003192:	22c0      	movs	r2, #192	; 0xc0
 8003194:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2212      	movs	r2, #18
 800319a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2201      	movs	r2, #1
 80031a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2203      	movs	r2, #3
 80031a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2201      	movs	r2, #1
 80031ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <HAL_I2C_MspInit+0xa8>)
 80031b2:	0019      	movs	r1, r3
 80031b4:	0010      	movs	r0, r2
 80031b6:	f002 f91d 	bl	80053f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_I2C_MspInit+0xa4>)
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <HAL_I2C_MspInit+0xa4>)
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	0389      	lsls	r1, r1, #14
 80031c4:	430a      	orrs	r2, r1
 80031c6:	61da      	str	r2, [r3, #28]
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_I2C_MspInit+0xa4>)
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	039b      	lsls	r3, r3, #14
 80031d0:	4013      	ands	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	2017      	movs	r0, #23
 80031dc:	f001 fc3c 	bl	8004a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80031e0:	2017      	movs	r0, #23
 80031e2:	f001 fc4e 	bl	8004a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b00a      	add	sp, #40	; 0x28
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	40005400 	.word	0x40005400
 80031f4:	40021000 	.word	0x40021000
 80031f8:	48000400 	.word	0x48000400

080031fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	2314      	movs	r3, #20
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	0018      	movs	r0, r3
 800320a:	2314      	movs	r3, #20
 800320c:	001a      	movs	r2, r3
 800320e:	2100      	movs	r1, #0
 8003210:	f00c f8bc 	bl	800f38c <memset>
  if(hspi->Instance==SPI1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_SPI_MspInit+0x90>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d132      	bne.n	8003284 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <HAL_SPI_MspInit+0x94>)
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_SPI_MspInit+0x94>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0149      	lsls	r1, r1, #5
 8003228:	430a      	orrs	r2, r1
 800322a:	619a      	str	r2, [r3, #24]
 800322c:	4b18      	ldr	r3, [pc, #96]	; (8003290 <HAL_SPI_MspInit+0x94>)
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	015b      	lsls	r3, r3, #5
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <HAL_SPI_MspInit+0x94>)
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_SPI_MspInit+0x94>)
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	0289      	lsls	r1, r1, #10
 8003244:	430a      	orrs	r2, r1
 8003246:	615a      	str	r2, [r3, #20]
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_SPI_MspInit+0x94>)
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	029b      	lsls	r3, r3, #10
 8003250:	4013      	ands	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003256:	2114      	movs	r1, #20
 8003258:	187b      	adds	r3, r7, r1
 800325a:	22e0      	movs	r2, #224	; 0xe0
 800325c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2202      	movs	r2, #2
 8003262:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003264:	187b      	adds	r3, r7, r1
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2203      	movs	r2, #3
 800326e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003276:	187a      	adds	r2, r7, r1
 8003278:	2390      	movs	r3, #144	; 0x90
 800327a:	05db      	lsls	r3, r3, #23
 800327c:	0011      	movs	r1, r2
 800327e:	0018      	movs	r0, r3
 8003280:	f002 f8b8 	bl	80053f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b00a      	add	sp, #40	; 0x28
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40013000 	.word	0x40013000
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	05db      	lsls	r3, r3, #23
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d10c      	bne.n	80032c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_TIM_Base_MspInit+0x6c>)
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	4b14      	ldr	r3, [pc, #80]	; (8003300 <HAL_TIM_Base_MspInit+0x6c>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	61da      	str	r2, [r3, #28]
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_TIM_Base_MspInit+0x6c>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2201      	movs	r2, #1
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80032c0:	e01a      	b.n	80032f8 <HAL_TIM_Base_MspInit+0x64>
  else if(htim_base->Instance==TIM14)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_TIM_Base_MspInit+0x70>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d115      	bne.n	80032f8 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_TIM_Base_MspInit+0x6c>)
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_TIM_Base_MspInit+0x6c>)
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	0049      	lsls	r1, r1, #1
 80032d6:	430a      	orrs	r2, r1
 80032d8:	61da      	str	r2, [r3, #28]
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_TIM_Base_MspInit+0x6c>)
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2100      	movs	r1, #0
 80032ec:	2013      	movs	r0, #19
 80032ee:	f001 fbb3 	bl	8004a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80032f2:	2013      	movs	r0, #19
 80032f4:	f001 fbc5 	bl	8004a82 <HAL_NVIC_EnableIRQ>
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b004      	add	sp, #16
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	40002000 	.word	0x40002000

08003308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	2314      	movs	r3, #20
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	0018      	movs	r0, r3
 8003316:	2314      	movs	r3, #20
 8003318:	001a      	movs	r2, r3
 800331a:	2100      	movs	r1, #0
 800331c:	f00c f836 	bl	800f38c <memset>
  if(huart->Instance==USART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_UART_MspInit+0xa4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d13b      	bne.n	80033a2 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_UART_MspInit+0xa8>)
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_UART_MspInit+0xa8>)
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	01c9      	lsls	r1, r1, #7
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_UART_MspInit+0xa8>)
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	01db      	lsls	r3, r3, #7
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_UART_MspInit+0xa8>)
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_UART_MspInit+0xa8>)
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	0289      	lsls	r1, r1, #10
 8003350:	430a      	orrs	r2, r1
 8003352:	615a      	str	r2, [r3, #20]
 8003354:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <HAL_UART_MspInit+0xa8>)
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	029b      	lsls	r3, r3, #10
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003362:	2114      	movs	r1, #20
 8003364:	187b      	adds	r3, r7, r1
 8003366:	22c0      	movs	r2, #192	; 0xc0
 8003368:	00d2      	lsls	r2, r2, #3
 800336a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2202      	movs	r2, #2
 8003370:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2203      	movs	r2, #3
 800337c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800337e:	187b      	adds	r3, r7, r1
 8003380:	2201      	movs	r2, #1
 8003382:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003384:	187a      	adds	r2, r7, r1
 8003386:	2390      	movs	r3, #144	; 0x90
 8003388:	05db      	lsls	r3, r3, #23
 800338a:	0011      	movs	r1, r2
 800338c:	0018      	movs	r0, r3
 800338e:	f002 f831 	bl	80053f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003392:	2200      	movs	r2, #0
 8003394:	2100      	movs	r1, #0
 8003396:	201b      	movs	r0, #27
 8003398:	f001 fb5e 	bl	8004a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800339c:	201b      	movs	r0, #27
 800339e:	f001 fb70 	bl	8004a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b00a      	add	sp, #40	; 0x28
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	40013800 	.word	0x40013800
 80033b0:	40021000 	.word	0x40021000

080033b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c2:	e7fe      	b.n	80033c2 <HardFault_Handler+0x4>

080033c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033dc:	f000 f8e4 	bl	80035a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	015b      	lsls	r3, r3, #5
 80033ee:	0018      	movs	r0, r3
 80033f0:	f002 f9ce 	bl	8005790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	019b      	lsls	r3, r3, #6
 80033f8:	0018      	movs	r0, r3
 80033fa:	f002 f9c9 	bl	8005790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <DMA1_Channel1_IRQHandler+0x14>)
 800340a:	0018      	movs	r0, r3
 800340c:	f001 fefc 	bl	8005208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	20000958 	.word	0x20000958

0800341c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	statusLedController();
 8003420:	f7fe f852 	bl	80014c8 <statusLedController>

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <TIM14_IRQHandler+0x18>)
 8003426:	0018      	movs	r0, r3
 8003428:	f006 fae6 	bl	80099f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	20000918 	.word	0x20000918

08003438 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <I2C1_IRQHandler+0x2c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	23e0      	movs	r3, #224	; 0xe0
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4013      	ands	r3, r2
 8003448:	d004      	beq.n	8003454 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <I2C1_IRQHandler+0x2c>)
 800344c:	0018      	movs	r0, r3
 800344e:	f002 fc8b 	bl	8005d68 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003452:	e003      	b.n	800345c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <I2C1_IRQHandler+0x2c>)
 8003456:	0018      	movs	r0, r3
 8003458:	f002 fc6c 	bl	8005d34 <HAL_I2C_EV_IRQHandler>
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	2000065c 	.word	0x2000065c

08003468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	serial_ISR(&huart1);
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <USART1_IRQHandler+0x1c>)
 800346e:	0018      	movs	r0, r3
 8003470:	f7fe fc78 	bl	8001d64 <serial_ISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <USART1_IRQHandler+0x1c>)
 8003476:	0018      	movs	r0, r3
 8003478:	f006 ff3e 	bl	800a2f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	2000077c 	.word	0x2000077c

08003488 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */
  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <CEC_CAN_IRQHandler+0x14>)
 800348e:	0018      	movs	r0, r3
 8003490:	f001 f824 	bl	80044dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	200006e4 	.word	0x200006e4

080034a0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <USB_IRQHandler+0x14>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f003 fda8 	bl	8006ffc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	200016a8 	.word	0x200016a8

080034b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034c4:	480d      	ldr	r0, [pc, #52]	; (80034fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c8:	480d      	ldr	r0, [pc, #52]	; (8003500 <LoopForever+0x6>)
  ldr r1, =_edata
 80034ca:	490e      	ldr	r1, [pc, #56]	; (8003504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034cc:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <LoopForever+0xe>)
  movs r3, #0
 80034ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d0:	e002      	b.n	80034d8 <LoopCopyDataInit>

080034d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034d6:	3304      	adds	r3, #4

080034d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034dc:	d3f9      	bcc.n	80034d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <LoopForever+0x12>)
  ldr r4, =_ebss
 80034e0:	4c0b      	ldr	r4, [pc, #44]	; (8003510 <LoopForever+0x16>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e4:	e001      	b.n	80034ea <LoopFillZerobss>

080034e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e8:	3204      	adds	r2, #4

080034ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ec:	d3fb      	bcc.n	80034e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034ee:	f7ff ffe3 	bl	80034b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80034f2:	f00b ff27 	bl	800f344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034f6:	f7fd fb7b 	bl	8000bf0 <main>

080034fa <LoopForever>:

LoopForever:
    b LoopForever
 80034fa:	e7fe      	b.n	80034fa <LoopForever>
  ldr   r0, =_estack
 80034fc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003504:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8003508:	0800f644 	.word	0x0800f644
  ldr r2, =_sbss
 800350c:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8003510:	2000199c 	.word	0x2000199c

08003514 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003514:	e7fe      	b.n	8003514 <ADC1_COMP_IRQHandler>
	...

08003518 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_Init+0x24>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_Init+0x24>)
 8003522:	2110      	movs	r1, #16
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003528:	2000      	movs	r0, #0
 800352a:	f000 f809 	bl	8003540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800352e:	f7ff fcbd 	bl	8002eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	40022000 	.word	0x40022000

08003540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_InitTick+0x5c>)
 800354a:	681c      	ldr	r4, [r3, #0]
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <HAL_InitTick+0x60>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	0019      	movs	r1, r3
 8003552:	23fa      	movs	r3, #250	; 0xfa
 8003554:	0098      	lsls	r0, r3, #2
 8003556:	f7fc fdd7 	bl	8000108 <__udivsi3>
 800355a:	0003      	movs	r3, r0
 800355c:	0019      	movs	r1, r3
 800355e:	0020      	movs	r0, r4
 8003560:	f7fc fdd2 	bl	8000108 <__udivsi3>
 8003564:	0003      	movs	r3, r0
 8003566:	0018      	movs	r0, r3
 8003568:	f001 fa9b 	bl	8004aa2 <HAL_SYSTICK_Config>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d001      	beq.n	8003574 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e00f      	b.n	8003594 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d80b      	bhi.n	8003592 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	2301      	movs	r3, #1
 800357e:	425b      	negs	r3, r3
 8003580:	2200      	movs	r2, #0
 8003582:	0018      	movs	r0, r3
 8003584:	f001 fa68 	bl	8004a58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_InitTick+0x64>)
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b003      	add	sp, #12
 800359a:	bd90      	pop	{r4, r7, pc}
 800359c:	2000010c 	.word	0x2000010c
 80035a0:	20000114 	.word	0x20000114
 80035a4:	20000110 	.word	0x20000110

080035a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_IncTick+0x1c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	001a      	movs	r2, r3
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_IncTick+0x20>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	18d2      	adds	r2, r2, r3
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_IncTick+0x20>)
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	20000114 	.word	0x20000114
 80035c8:	20000a10 	.word	0x20000a10

080035cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  return uwTick;
 80035d0:	4b02      	ldr	r3, [pc, #8]	; (80035dc <HAL_GetTick+0x10>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	20000a10 	.word	0x20000a10

080035e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035e8:	f7ff fff0 	bl	80035cc <HAL_GetTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3301      	adds	r3, #1
 80035f8:	d005      	beq.n	8003606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_Delay+0x40>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	001a      	movs	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	189b      	adds	r3, r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	f7ff ffe0 	bl	80035cc <HAL_GetTick>
 800360c:	0002      	movs	r2, r0
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d8f7      	bhi.n	8003608 <HAL_Delay+0x28>
  {
  }
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b004      	add	sp, #16
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000114 	.word	0x20000114

08003624 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800362c:	230f      	movs	r3, #15
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e125      	b.n	800388e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2234      	movs	r2, #52	; 0x34
 8003654:	2100      	movs	r1, #0
 8003656:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f7ff fc4a 	bl	8002ef4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	2210      	movs	r2, #16
 8003666:	4013      	ands	r3, r2
 8003668:	d000      	beq.n	800366c <HAL_ADC_Init+0x48>
 800366a:	e103      	b.n	8003874 <HAL_ADC_Init+0x250>
 800366c:	230f      	movs	r3, #15
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d000      	beq.n	8003678 <HAL_ADC_Init+0x54>
 8003676:	e0fd      	b.n	8003874 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2204      	movs	r2, #4
 8003680:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003682:	d000      	beq.n	8003686 <HAL_ADC_Init+0x62>
 8003684:	e0f6      	b.n	8003874 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	4a83      	ldr	r2, [pc, #524]	; (8003898 <HAL_ADC_Init+0x274>)
 800368c:	4013      	ands	r3, r2
 800368e:	2202      	movs	r2, #2
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2203      	movs	r2, #3
 800369e:	4013      	ands	r3, r2
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d112      	bne.n	80036ca <HAL_ADC_Init+0xa6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d009      	beq.n	80036c6 <HAL_ADC_Init+0xa2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	401a      	ands	r2, r3
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_Init+0xa6>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_ADC_Init+0xa8>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2218      	movs	r2, #24
 80036d8:	4393      	bics	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	0899      	lsrs	r1, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4964      	ldr	r1, [pc, #400]	; (800389c <HAL_ADC_Init+0x278>)
 800370a:	400a      	ands	r2, r1
 800370c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7e1b      	ldrb	r3, [r3, #24]
 8003712:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7e5b      	ldrb	r3, [r3, #25]
 8003718:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800371a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7e9b      	ldrb	r3, [r3, #26]
 8003720:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003722:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	2b01      	cmp	r3, #1
 800372a:	d002      	beq.n	8003732 <HAL_ADC_Init+0x10e>
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	015b      	lsls	r3, r3, #5
 8003730:	e000      	b.n	8003734 <HAL_ADC_Init+0x110>
 8003732:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003734:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800373a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d101      	bne.n	8003748 <HAL_ADC_Init+0x124>
 8003744:	2304      	movs	r3, #4
 8003746:	e000      	b.n	800374a <HAL_ADC_Init+0x126>
 8003748:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800374a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2124      	movs	r1, #36	; 0x24
 8003750:	5c5b      	ldrb	r3, [r3, r1]
 8003752:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003754:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	4313      	orrs	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7edb      	ldrb	r3, [r3, #27]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d115      	bne.n	8003790 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7e9b      	ldrb	r3, [r3, #26]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	0252      	lsls	r2, r2, #9
 8003772:	4313      	orrs	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	e00b      	b.n	8003790 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	2220      	movs	r2, #32
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	2201      	movs	r2, #1
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	23c2      	movs	r3, #194	; 0xc2
 8003796:	33ff      	adds	r3, #255	; 0xff
 8003798:	429a      	cmp	r2, r3
 800379a:	d007      	beq.n	80037ac <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80037a4:	4313      	orrs	r3, r2
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68d9      	ldr	r1, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	055b      	lsls	r3, r3, #21
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d01b      	beq.n	8003800 <HAL_ADC_Init+0x1dc>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d017      	beq.n	8003800 <HAL_ADC_Init+0x1dc>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d013      	beq.n	8003800 <HAL_ADC_Init+0x1dc>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d00f      	beq.n	8003800 <HAL_ADC_Init+0x1dc>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d00b      	beq.n	8003800 <HAL_ADC_Init+0x1dc>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d007      	beq.n	8003800 <HAL_ADC_Init+0x1dc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	d003      	beq.n	8003800 <HAL_ADC_Init+0x1dc>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2b07      	cmp	r3, #7
 80037fe:	d112      	bne.n	8003826 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2107      	movs	r1, #7
 800380c:	438a      	bics	r2, r1
 800380e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6959      	ldr	r1, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	2207      	movs	r2, #7
 800381c:	401a      	ands	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_ADC_Init+0x27c>)
 800382e:	4013      	ands	r3, r2
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d10b      	bne.n	800384e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	2203      	movs	r2, #3
 8003842:	4393      	bics	r3, r2
 8003844:	2201      	movs	r2, #1
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800384c:	e01c      	b.n	8003888 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	2212      	movs	r2, #18
 8003854:	4393      	bics	r3, r2
 8003856:	2210      	movs	r2, #16
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	2201      	movs	r2, #1
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800386a:	230f      	movs	r3, #15
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003872:	e009      	b.n	8003888 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	2210      	movs	r2, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003880:	230f      	movs	r3, #15
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003888:	230f      	movs	r3, #15
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	781b      	ldrb	r3, [r3, #0]
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b004      	add	sp, #16
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	fffffefd 	.word	0xfffffefd
 800389c:	fffe0219 	.word	0xfffe0219
 80038a0:	833fffe7 	.word	0x833fffe7

080038a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b0:	2317      	movs	r3, #23
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2204      	movs	r2, #4
 80038c0:	4013      	ands	r3, r2
 80038c2:	d15e      	bne.n	8003982 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2234      	movs	r2, #52	; 0x34
 80038c8:	5c9b      	ldrb	r3, [r3, r2]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_Start_DMA+0x2e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e05e      	b.n	8003990 <HAL_ADC_Start_DMA+0xec>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2234      	movs	r2, #52	; 0x34
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	7e5b      	ldrb	r3, [r3, #25]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d007      	beq.n	80038f2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80038e2:	2317      	movs	r3, #23
 80038e4:	18fc      	adds	r4, r7, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 f97b 	bl	8003be4 <ADC_Enable>
 80038ee:	0003      	movs	r3, r0
 80038f0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038f2:	2317      	movs	r3, #23
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d146      	bne.n	800398a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	4a25      	ldr	r2, [pc, #148]	; (8003998 <HAL_ADC_Start_DMA+0xf4>)
 8003902:	4013      	ands	r3, r2
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	0052      	lsls	r2, r2, #1
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2234      	movs	r2, #52	; 0x34
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_ADC_Start_DMA+0xf8>)
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_ADC_Start_DMA+0xfc>)
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <HAL_ADC_Start_DMA+0x100>)
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	221c      	movs	r2, #28
 800393a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2110      	movs	r1, #16
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2101      	movs	r1, #1
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3340      	adds	r3, #64	; 0x40
 8003966:	0019      	movs	r1, r3
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f001 fba0 	bl	80050b0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2104      	movs	r1, #4
 800397c:	430a      	orrs	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	e003      	b.n	800398a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003982:	2317      	movs	r3, #23
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800398a:	2317      	movs	r3, #23
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	781b      	ldrb	r3, [r3, #0]
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b007      	add	sp, #28
 8003996:	bd90      	pop	{r4, r7, pc}
 8003998:	fffff0fe 	.word	0xfffff0fe
 800399c:	08003cdd 	.word	0x08003cdd
 80039a0:	08003d91 	.word	0x08003d91
 80039a4:	08003daf 	.word	0x08003daf

080039a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b002      	add	sp, #8
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d2:	230f      	movs	r3, #15
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	055b      	lsls	r3, r3, #21
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d011      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x46>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d00d      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x46>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d009      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x46>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d005      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x46>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d001      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x46>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2234      	movs	r2, #52	; 0x34
 8003a12:	5c9b      	ldrb	r3, [r3, r2]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x54>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e0d0      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x1f6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2234      	movs	r2, #52	; 0x34
 8003a20:	2101      	movs	r1, #1
 8003a22:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d000      	beq.n	8003a32 <HAL_ADC_ConfigChannel+0x6a>
 8003a30:	e0b4      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4a64      	ldr	r2, [pc, #400]	; (8003bc8 <HAL_ADC_ConfigChannel+0x200>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x76>
 8003a3c:	e082      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	055b      	lsls	r3, r3, #21
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d037      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d033      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d02f      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d02b      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d027      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d023      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	d01f      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2b07      	cmp	r3, #7
 8003a96:	d01b      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2107      	movs	r1, #7
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d012      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2107      	movs	r1, #7
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6959      	ldr	r1, [r3, #20]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2207      	movs	r2, #7
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d007      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x120>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b11      	cmp	r3, #17
 8003ade:	d003      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x120>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b12      	cmp	r3, #18
 8003ae6:	d163      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ae8:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_ADC_ConfigChannel+0x204>)
 8003aea:	6819      	ldr	r1, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d009      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x140>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b11      	cmp	r3, #17
 8003afa:	d102      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x13a>
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	03db      	lsls	r3, r3, #15
 8003b00:	e004      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x144>
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	045b      	lsls	r3, r3, #17
 8003b06:	e001      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x144>
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	4a2f      	ldr	r2, [pc, #188]	; (8003bcc <HAL_ADC_ConfigChannel+0x204>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d14a      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_ADC_ConfigChannel+0x208>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	492d      	ldr	r1, [pc, #180]	; (8003bd4 <HAL_ADC_ConfigChannel+0x20c>)
 8003b20:	0018      	movs	r0, r3
 8003b22:	f7fc faf1 	bl	8000108 <__udivsi3>
 8003b26:	0003      	movs	r3, r0
 8003b28:	001a      	movs	r2, r3
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b34:	e002      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f9      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x16e>
 8003b42:	e035      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4099      	lsls	r1, r3
 8003b52:	000b      	movs	r3, r1
 8003b54:	43d9      	mvns	r1, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d007      	beq.n	8003b76 <HAL_ADC_ConfigChannel+0x1ae>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b11      	cmp	r3, #17
 8003b6c:	d003      	beq.n	8003b76 <HAL_ADC_ConfigChannel+0x1ae>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b12      	cmp	r3, #18
 8003b74:	d11c      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_ADC_ConfigChannel+0x204>)
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d007      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x1ca>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b11      	cmp	r3, #17
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x1c6>
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_ADC_ConfigChannel+0x210>)
 8003b8c:	e002      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x1cc>
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <HAL_ADC_ConfigChannel+0x214>)
 8003b90:	e000      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x1cc>
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_ADC_ConfigChannel+0x218>)
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <HAL_ADC_ConfigChannel+0x204>)
 8003b96:	400b      	ands	r3, r1
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e009      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003ba8:	230f      	movs	r3, #15
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2234      	movs	r2, #52	; 0x34
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003bb8:	230f      	movs	r3, #15
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	00001001 	.word	0x00001001
 8003bcc:	40012708 	.word	0x40012708
 8003bd0:	2000010c 	.word	0x2000010c
 8003bd4:	000f4240 	.word	0x000f4240
 8003bd8:	ffbfffff 	.word	0xffbfffff
 8003bdc:	feffffff 	.word	0xfeffffff
 8003be0:	ff7fffff 	.word	0xff7fffff

08003be4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d112      	bne.n	8003c28 <ADC_Enable+0x44>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d009      	beq.n	8003c24 <ADC_Enable+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d101      	bne.n	8003c28 <ADC_Enable+0x44>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <ADC_Enable+0x46>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d14b      	bne.n	8003cc6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <ADC_Enable+0xec>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	d00d      	beq.n	8003c56 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	2210      	movs	r2, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e038      	b.n	8003cc8 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2101      	movs	r1, #1
 8003c62:	430a      	orrs	r2, r1
 8003c64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c66:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <ADC_Enable+0xf0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <ADC_Enable+0xf4>)
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7fc fa4b 	bl	8000108 <__udivsi3>
 8003c72:	0003      	movs	r3, r0
 8003c74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c76:	e002      	b.n	8003c7e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f9      	bne.n	8003c78 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c84:	f7ff fca2 	bl	80035cc <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c8c:	e014      	b.n	8003cb8 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c8e:	f7ff fc9d 	bl	80035cc <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d90d      	bls.n	8003cb8 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	2201      	movs	r2, #1
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d1e3      	bne.n	8003c8e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	80000017 	.word	0x80000017
 8003cd4:	2000010c 	.word	0x2000010c
 8003cd8:	000f4240 	.word	0x000f4240

08003cdc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	2250      	movs	r2, #80	; 0x50
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d140      	bne.n	8003d76 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	23c0      	movs	r3, #192	; 0xc0
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d12d      	bne.n	8003d6c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d129      	bne.n	8003d6c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2208      	movs	r2, #8
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d122      	bne.n	8003d6c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d110      	bne.n	8003d54 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	210c      	movs	r1, #12
 8003d3e:	438a      	bics	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <ADC_DMAConvCplt+0xb0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
 8003d52:	e00b      	b.n	8003d6c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	2220      	movs	r2, #32
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	2201      	movs	r2, #1
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7fd fb34 	bl	80013dc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003d74:	e005      	b.n	8003d82 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	0010      	movs	r0, r2
 8003d80:	4798      	blx	r3
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b004      	add	sp, #16
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	fffffefe 	.word	0xfffffefe

08003d90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff fe01 	bl	80039a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b004      	add	sp, #16
 8003dac:	bd80      	pop	{r7, pc}

08003dae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	2240      	movs	r2, #64	; 0x40
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	2204      	movs	r2, #4
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7ff fdee 	bl	80039b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0f0      	b.n	8003fd8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff f8e9 	bl	8002fdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2102      	movs	r1, #2
 8003e16:	438a      	bics	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e1a:	f7ff fbd7 	bl	80035cc <HAL_GetTick>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e22:	e013      	b.n	8003e4c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e24:	f7ff fbd2 	bl	80035cc <HAL_GetTick>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b0a      	cmp	r3, #10
 8003e30:	d90c      	bls.n	8003e4c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	0292      	lsls	r2, r2, #10
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	2105      	movs	r1, #5
 8003e46:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0c5      	b.n	8003fd8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	4013      	ands	r3, r2
 8003e56:	d1e5      	bne.n	8003e24 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2101      	movs	r1, #1
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e68:	f7ff fbb0 	bl	80035cc <HAL_GetTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e70:	e013      	b.n	8003e9a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e72:	f7ff fbab 	bl	80035cc <HAL_GetTick>
 8003e76:	0002      	movs	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b0a      	cmp	r3, #10
 8003e7e:	d90c      	bls.n	8003e9a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	2280      	movs	r2, #128	; 0x80
 8003e86:	0292      	lsls	r2, r2, #10
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	2105      	movs	r1, #5
 8003e94:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e09e      	b.n	8003fd8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d0e5      	beq.n	8003e72 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7e1b      	ldrb	r3, [r3, #24]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d108      	bne.n	8003ec0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2180      	movs	r1, #128	; 0x80
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e007      	b.n	8003ed0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	438a      	bics	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	7e5b      	ldrb	r3, [r3, #25]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d108      	bne.n	8003eea <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2140      	movs	r1, #64	; 0x40
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e007      	b.n	8003efa <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2140      	movs	r1, #64	; 0x40
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7e9b      	ldrb	r3, [r3, #26]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e007      	b.n	8003f24 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2120      	movs	r1, #32
 8003f20:	438a      	bics	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7edb      	ldrb	r3, [r3, #27]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d108      	bne.n	8003f3e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2110      	movs	r1, #16
 8003f38:	438a      	bics	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e007      	b.n	8003f4e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2110      	movs	r1, #16
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7f1b      	ldrb	r3, [r3, #28]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d108      	bne.n	8003f68 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2108      	movs	r1, #8
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e007      	b.n	8003f78 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2108      	movs	r1, #8
 8003f74:	438a      	bics	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7f5b      	ldrb	r3, [r3, #29]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d108      	bne.n	8003f92 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e007      	b.n	8003fa2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2104      	movs	r1, #4
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	0011      	movs	r1, r2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	1e5a      	subs	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b004      	add	sp, #16
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ff0:	2013      	movs	r0, #19
 8003ff2:	183b      	adds	r3, r7, r0
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	5c52      	ldrb	r2, [r2, r1]
 8003ffa:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ffc:	183b      	adds	r3, r7, r0
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d005      	beq.n	8004010 <HAL_CAN_ConfigFilter+0x30>
 8004004:	2313      	movs	r3, #19
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d000      	beq.n	8004010 <HAL_CAN_ConfigFilter+0x30>
 800400e:	e0cd      	b.n	80041ac <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	58d3      	ldr	r3, [r2, r3]
 8004018:	2201      	movs	r2, #1
 800401a:	431a      	orrs	r2, r3
 800401c:	0011      	movs	r1, r2
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	221f      	movs	r2, #31
 800402c:	4013      	ands	r3, r2
 800402e:	2201      	movs	r2, #1
 8004030:	409a      	lsls	r2, r3
 8004032:	0013      	movs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	2387      	movs	r3, #135	; 0x87
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	58d3      	ldr	r3, [r2, r3]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	43d2      	mvns	r2, r2
 8004042:	401a      	ands	r2, r3
 8004044:	0011      	movs	r1, r2
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	2387      	movs	r3, #135	; 0x87
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d129      	bne.n	80040aa <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	2383      	movs	r3, #131	; 0x83
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	58d3      	ldr	r3, [r2, r3]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	43d2      	mvns	r2, r2
 8004062:	401a      	ands	r2, r3
 8004064:	0011      	movs	r1, r2
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	2383      	movs	r3, #131	; 0x83
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004080:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3248      	adds	r2, #72	; 0x48
 8004086:	00d2      	lsls	r2, r2, #3
 8004088:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800409c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800409e:	6979      	ldr	r1, [r7, #20]
 80040a0:	3348      	adds	r3, #72	; 0x48
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	18cb      	adds	r3, r1, r3
 80040a6:	3304      	adds	r3, #4
 80040a8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d128      	bne.n	8004104 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	2383      	movs	r3, #131	; 0x83
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	58d2      	ldr	r2, [r2, r3]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	431a      	orrs	r2, r3
 80040be:	0011      	movs	r1, r2
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	2383      	movs	r3, #131	; 0x83
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040da:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3248      	adds	r2, #72	; 0x48
 80040e0:	00d2      	lsls	r2, r2, #3
 80040e2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	3348      	adds	r3, #72	; 0x48
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	18cb      	adds	r3, r1, r3
 8004100:	3304      	adds	r3, #4
 8004102:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10c      	bne.n	8004126 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	2381      	movs	r3, #129	; 0x81
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	58d3      	ldr	r3, [r2, r3]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	43d2      	mvns	r2, r2
 8004118:	401a      	ands	r2, r3
 800411a:	0011      	movs	r1, r2
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	2381      	movs	r3, #129	; 0x81
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	50d1      	str	r1, [r2, r3]
 8004124:	e00a      	b.n	800413c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	2381      	movs	r3, #129	; 0x81
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	58d2      	ldr	r2, [r2, r3]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	431a      	orrs	r2, r3
 8004132:	0011      	movs	r1, r2
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	2381      	movs	r3, #129	; 0x81
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10c      	bne.n	800415e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	2385      	movs	r3, #133	; 0x85
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	58d3      	ldr	r3, [r2, r3]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	43d2      	mvns	r2, r2
 8004150:	401a      	ands	r2, r3
 8004152:	0011      	movs	r1, r2
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	2385      	movs	r3, #133	; 0x85
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	50d1      	str	r1, [r2, r3]
 800415c:	e00a      	b.n	8004174 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	2385      	movs	r3, #133	; 0x85
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	58d2      	ldr	r2, [r2, r3]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	431a      	orrs	r2, r3
 800416a:	0011      	movs	r1, r2
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	2385      	movs	r3, #133	; 0x85
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10a      	bne.n	8004192 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	2387      	movs	r3, #135	; 0x87
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	58d2      	ldr	r2, [r2, r3]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	431a      	orrs	r2, r3
 8004188:	0011      	movs	r1, r2
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	2387      	movs	r3, #135	; 0x87
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	58d3      	ldr	r3, [r2, r3]
 800419a:	2201      	movs	r2, #1
 800419c:	4393      	bics	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e007      	b.n	80041bc <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	02d2      	lsls	r2, r2, #11
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
  }
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b006      	add	sp, #24
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	5c9b      	ldrb	r3, [r3, r2]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d12f      	bne.n	8004238 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	2102      	movs	r1, #2
 80041de:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2101      	movs	r1, #1
 80041ec:	438a      	bics	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041f0:	f7ff f9ec 	bl	80035cc <HAL_GetTick>
 80041f4:	0003      	movs	r3, r0
 80041f6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041f8:	e013      	b.n	8004222 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041fa:	f7ff f9e7 	bl	80035cc <HAL_GetTick>
 80041fe:	0002      	movs	r2, r0
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b0a      	cmp	r3, #10
 8004206:	d90c      	bls.n	8004222 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	0292      	lsls	r2, r2, #10
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	2105      	movs	r1, #5
 800421c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e012      	b.n	8004248 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	4013      	ands	r3, r2
 800422c:	d1e5      	bne.n	80041fa <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e007      	b.n	8004248 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	0312      	lsls	r2, r2, #12
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
  }
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b004      	add	sp, #16
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800425e:	2017      	movs	r0, #23
 8004260:	183b      	adds	r3, r7, r0
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	2120      	movs	r1, #32
 8004266:	5c52      	ldrb	r2, [r2, r1]
 8004268:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800426a:	183b      	adds	r3, r7, r0
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d005      	beq.n	800427e <HAL_CAN_GetRxMessage+0x2e>
 8004272:	2317      	movs	r3, #23
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d000      	beq.n	800427e <HAL_CAN_GetRxMessage+0x2e>
 800427c:	e0f8      	b.n	8004470 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10e      	bne.n	80042a2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2203      	movs	r2, #3
 800428c:	4013      	ands	r3, r2
 800428e:	d117      	bne.n	80042c0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	0392      	lsls	r2, r2, #14
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0ee      	b.n	8004480 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2203      	movs	r2, #3
 80042aa:	4013      	ands	r3, r2
 80042ac:	d108      	bne.n	80042c0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	0392      	lsls	r2, r2, #14
 80042b6:	431a      	orrs	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0df      	b.n	8004480 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	321b      	adds	r2, #27
 80042c8:	0112      	lsls	r2, r2, #4
 80042ca:	58d3      	ldr	r3, [r2, r3]
 80042cc:	2204      	movs	r2, #4
 80042ce:	401a      	ands	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	321b      	adds	r2, #27
 80042e4:	0112      	lsls	r2, r2, #4
 80042e6:	58d3      	ldr	r3, [r2, r3]
 80042e8:	0d5b      	lsrs	r3, r3, #21
 80042ea:	055b      	lsls	r3, r3, #21
 80042ec:	0d5a      	lsrs	r2, r3, #21
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00a      	b.n	800430a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	321b      	adds	r2, #27
 80042fc:	0112      	lsls	r2, r2, #4
 80042fe:	58d3      	ldr	r3, [r2, r3]
 8004300:	08db      	lsrs	r3, r3, #3
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	08da      	lsrs	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	321b      	adds	r2, #27
 8004312:	0112      	lsls	r2, r2, #4
 8004314:	58d3      	ldr	r3, [r2, r3]
 8004316:	2202      	movs	r2, #2
 8004318:	401a      	ands	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	331b      	adds	r3, #27
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	18d3      	adds	r3, r2, r3
 800432a:	3304      	adds	r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	220f      	movs	r2, #15
 8004330:	401a      	ands	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	331b      	adds	r3, #27
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	18d3      	adds	r3, r2, r3
 8004342:	3304      	adds	r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	22ff      	movs	r2, #255	; 0xff
 800434a:	401a      	ands	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	331b      	adds	r3, #27
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	18d3      	adds	r3, r2, r3
 800435c:	3304      	adds	r3, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	0c1a      	lsrs	r2, r3, #16
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	23dc      	movs	r3, #220	; 0xdc
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	0112      	lsls	r2, r2, #4
 8004376:	188a      	adds	r2, r1, r2
 8004378:	18d3      	adds	r3, r2, r3
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	23dc      	movs	r3, #220	; 0xdc
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	0112      	lsls	r2, r2, #4
 800438e:	188a      	adds	r2, r1, r2
 8004390:	18d3      	adds	r3, r2, r3
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	0a1a      	lsrs	r2, r3, #8
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	23dc      	movs	r3, #220	; 0xdc
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	188a      	adds	r2, r1, r2
 80043ac:	18d3      	adds	r3, r2, r3
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	0c1a      	lsrs	r2, r3, #16
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	3302      	adds	r3, #2
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	23dc      	movs	r3, #220	; 0xdc
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	188a      	adds	r2, r1, r2
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	0e1a      	lsrs	r2, r3, #24
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	3303      	adds	r3, #3
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6819      	ldr	r1, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	23de      	movs	r3, #222	; 0xde
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	0112      	lsls	r2, r2, #4
 80043e2:	188a      	adds	r2, r1, r2
 80043e4:	18d3      	adds	r3, r2, r3
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	23de      	movs	r3, #222	; 0xde
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	188a      	adds	r2, r1, r2
 80043fe:	18d3      	adds	r3, r2, r3
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	0a1a      	lsrs	r2, r3, #8
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	3305      	adds	r3, #5
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	23de      	movs	r3, #222	; 0xde
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	0112      	lsls	r2, r2, #4
 8004418:	188a      	adds	r2, r1, r2
 800441a:	18d3      	adds	r3, r2, r3
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	0c1a      	lsrs	r2, r3, #16
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	3306      	adds	r3, #6
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	23de      	movs	r3, #222	; 0xde
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	188a      	adds	r2, r1, r2
 8004436:	18d3      	adds	r3, r2, r3
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	0e1a      	lsrs	r2, r3, #24
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	3307      	adds	r3, #7
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d108      	bne.n	800445c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2120      	movs	r1, #32
 8004456:	430a      	orrs	r2, r1
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e007      	b.n	800446c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2120      	movs	r1, #32
 8004468:	430a      	orrs	r2, r1
 800446a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e007      	b.n	8004480 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2280      	movs	r2, #128	; 0x80
 8004476:	02d2      	lsls	r2, r2, #11
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
  }
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b006      	add	sp, #24
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004492:	200f      	movs	r0, #15
 8004494:	183b      	adds	r3, r7, r0
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	2120      	movs	r1, #32
 800449a:	5c52      	ldrb	r2, [r2, r1]
 800449c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800449e:	183b      	adds	r3, r7, r0
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d004      	beq.n	80044b0 <HAL_CAN_ActivateNotification+0x28>
 80044a6:	230f      	movs	r3, #15
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d109      	bne.n	80044c4 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6959      	ldr	r1, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e007      	b.n	80044d4 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	02d2      	lsls	r2, r2, #11
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
  }
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b004      	add	sp, #16
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	2201      	movs	r2, #1
 800451c:	4013      	ands	r3, r2
 800451e:	d100      	bne.n	8004522 <HAL_CAN_IRQHandler+0x46>
 8004520:	e084      	b.n	800462c <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2201      	movs	r2, #1
 8004526:	4013      	ands	r3, r2
 8004528:	d024      	beq.n	8004574 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2201      	movs	r2, #1
 8004530:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2202      	movs	r2, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f000 f97e 	bl	800483e <HAL_CAN_TxMailbox0CompleteCallback>
 8004542:	e017      	b.n	8004574 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2204      	movs	r2, #4
 8004548:	4013      	ands	r3, r2
 800454a:	d005      	beq.n	8004558 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	0112      	lsls	r2, r2, #4
 8004552:	4313      	orrs	r3, r2
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
 8004556:	e00d      	b.n	8004574 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2208      	movs	r2, #8
 800455c:	4013      	ands	r3, r2
 800455e:	d005      	beq.n	800456c <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	0152      	lsls	r2, r2, #5
 8004566:	4313      	orrs	r3, r2
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	e003      	b.n	8004574 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 f97d 	bl	800486e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4013      	ands	r3, r2
 800457c:	d028      	beq.n	80045d0 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	0052      	lsls	r2, r2, #1
 8004586:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 f95a 	bl	800484e <HAL_CAN_TxMailbox1CompleteCallback>
 800459a:	e019      	b.n	80045d0 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	4013      	ands	r3, r2
 80045a4:	d005      	beq.n	80045b2 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	0192      	lsls	r2, r2, #6
 80045ac:	4313      	orrs	r3, r2
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	e00e      	b.n	80045d0 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4013      	ands	r3, r2
 80045ba:	d005      	beq.n	80045c8 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	2280      	movs	r2, #128	; 0x80
 80045c0:	01d2      	lsls	r2, r2, #7
 80045c2:	4313      	orrs	r3, r2
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
 80045c6:	e003      	b.n	80045d0 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 f957 	bl	800487e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	025b      	lsls	r3, r3, #9
 80045d6:	4013      	ands	r3, r2
 80045d8:	d028      	beq.n	800462c <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	0252      	lsls	r2, r2, #9
 80045e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	029b      	lsls	r3, r3, #10
 80045ea:	4013      	ands	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 f934 	bl	800485e <HAL_CAN_TxMailbox2CompleteCallback>
 80045f6:	e019      	b.n	800462c <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	02db      	lsls	r3, r3, #11
 80045fe:	4013      	ands	r3, r2
 8004600:	d005      	beq.n	800460e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	2280      	movs	r2, #128	; 0x80
 8004606:	0212      	lsls	r2, r2, #8
 8004608:	4313      	orrs	r3, r2
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
 800460c:	e00e      	b.n	800462c <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	031b      	lsls	r3, r3, #12
 8004614:	4013      	ands	r3, r2
 8004616:	d005      	beq.n	8004624 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	0252      	lsls	r2, r2, #9
 800461e:	4313      	orrs	r3, r2
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
 8004622:	e003      	b.n	800462c <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f000 f931 	bl	800488e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2208      	movs	r2, #8
 8004630:	4013      	ands	r3, r2
 8004632:	d00c      	beq.n	800464e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2210      	movs	r2, #16
 8004638:	4013      	ands	r3, r2
 800463a:	d008      	beq.n	800464e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	2280      	movs	r2, #128	; 0x80
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	4313      	orrs	r3, r2
 8004644:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2210      	movs	r2, #16
 800464c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	2204      	movs	r2, #4
 8004652:	4013      	ands	r3, r2
 8004654:	d00b      	beq.n	800466e <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2208      	movs	r2, #8
 800465a:	4013      	ands	r3, r2
 800465c:	d007      	beq.n	800466e <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2208      	movs	r2, #8
 8004664:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0018      	movs	r0, r3
 800466a:	f000 f918 	bl	800489e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	2202      	movs	r2, #2
 8004672:	4013      	ands	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2203      	movs	r2, #3
 800467e:	4013      	ands	r3, r2
 8004680:	d003      	beq.n	800468a <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f7fc ff07 	bl	8001498 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	2240      	movs	r2, #64	; 0x40
 800468e:	4013      	ands	r3, r2
 8004690:	d00c      	beq.n	80046ac <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2210      	movs	r2, #16
 8004696:	4013      	ands	r3, r2
 8004698:	d008      	beq.n	80046ac <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	2280      	movs	r2, #128	; 0x80
 800469e:	00d2      	lsls	r2, r2, #3
 80046a0:	4313      	orrs	r3, r2
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2210      	movs	r2, #16
 80046aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	2220      	movs	r2, #32
 80046b0:	4013      	ands	r3, r2
 80046b2:	d00b      	beq.n	80046cc <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2208      	movs	r2, #8
 80046b8:	4013      	ands	r3, r2
 80046ba:	d007      	beq.n	80046cc <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2208      	movs	r2, #8
 80046c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 f8f9 	bl	80048be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2210      	movs	r2, #16
 80046d0:	4013      	ands	r3, r2
 80046d2:	d009      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2203      	movs	r2, #3
 80046dc:	4013      	ands	r3, r2
 80046de:	d003      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 f8e3 	bl	80048ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	029b      	lsls	r3, r3, #10
 80046ee:	4013      	ands	r3, r2
 80046f0:	d00b      	beq.n	800470a <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2210      	movs	r2, #16
 80046f6:	4013      	ands	r3, r2
 80046f8:	d007      	beq.n	800470a <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2210      	movs	r2, #16
 8004700:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	0018      	movs	r0, r3
 8004706:	f000 f8e2 	bl	80048ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	025b      	lsls	r3, r3, #9
 8004710:	4013      	ands	r3, r2
 8004712:	d00b      	beq.n	800472c <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2208      	movs	r2, #8
 8004718:	4013      	ands	r3, r2
 800471a:	d007      	beq.n	800472c <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	0018      	movs	r0, r3
 8004728:	f000 f8d9 	bl	80048de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800472c:	6a3a      	ldr	r2, [r7, #32]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	4013      	ands	r3, r2
 8004734:	d100      	bne.n	8004738 <HAL_CAN_IRQHandler+0x25c>
 8004736:	e071      	b.n	800481c <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2204      	movs	r2, #4
 800473c:	4013      	ands	r3, r2
 800473e:	d100      	bne.n	8004742 <HAL_CAN_IRQHandler+0x266>
 8004740:	e068      	b.n	8004814 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004742:	6a3a      	ldr	r2, [r7, #32]
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4013      	ands	r3, r2
 800474a:	d007      	beq.n	800475c <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004752:	d003      	beq.n	800475c <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	2201      	movs	r2, #1
 8004758:	4313      	orrs	r3, r2
 800475a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4013      	ands	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800476c:	d003      	beq.n	8004776 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	2202      	movs	r2, #2
 8004772:	4313      	orrs	r3, r2
 8004774:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4013      	ands	r3, r2
 800477e:	d007      	beq.n	8004790 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2204      	movs	r2, #4
 8004784:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004786:	d003      	beq.n	8004790 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	2204      	movs	r2, #4
 800478c:	4313      	orrs	r3, r2
 800478e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004790:	6a3a      	ldr	r2, [r7, #32]
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	4013      	ands	r3, r2
 8004798:	d03c      	beq.n	8004814 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2270      	movs	r2, #112	; 0x70
 800479e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047a0:	d038      	beq.n	8004814 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2270      	movs	r2, #112	; 0x70
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b30      	cmp	r3, #48	; 0x30
 80047aa:	d016      	beq.n	80047da <HAL_CAN_IRQHandler+0x2fe>
 80047ac:	d804      	bhi.n	80047b8 <HAL_CAN_IRQHandler+0x2dc>
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d009      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x2ea>
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d00c      	beq.n	80047d0 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80047b6:	e025      	b.n	8004804 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 80047b8:	2b50      	cmp	r3, #80	; 0x50
 80047ba:	d018      	beq.n	80047ee <HAL_CAN_IRQHandler+0x312>
 80047bc:	2b60      	cmp	r3, #96	; 0x60
 80047be:	d01b      	beq.n	80047f8 <HAL_CAN_IRQHandler+0x31c>
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d00f      	beq.n	80047e4 <HAL_CAN_IRQHandler+0x308>
            break;
 80047c4:	e01e      	b.n	8004804 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	2208      	movs	r2, #8
 80047ca:	4313      	orrs	r3, r2
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047ce:	e019      	b.n	8004804 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	2210      	movs	r2, #16
 80047d4:	4313      	orrs	r3, r2
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047d8:	e014      	b.n	8004804 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	2220      	movs	r2, #32
 80047de:	4313      	orrs	r3, r2
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047e2:	e00f      	b.n	8004804 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	2240      	movs	r2, #64	; 0x40
 80047e8:	4313      	orrs	r3, r2
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047ec:	e00a      	b.n	8004804 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	4313      	orrs	r3, r2
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047f6:	e005      	b.n	8004804 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	2280      	movs	r2, #128	; 0x80
 80047fc:	0052      	lsls	r2, r2, #1
 80047fe:	4313      	orrs	r3, r2
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004802:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2170      	movs	r1, #112	; 0x70
 8004810:	438a      	bics	r2, r1
 8004812:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2204      	movs	r2, #4
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f000 f85c 	bl	80048ee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b00a      	add	sp, #40	; 0x28
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b002      	add	sp, #8
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	46bd      	mov	sp, r7
 800486a:	b002      	add	sp, #8
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b002      	add	sp, #8
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	46bd      	mov	sp, r7
 800489a:	b002      	add	sp, #8
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b002      	add	sp, #8
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b002      	add	sp, #8
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b002      	add	sp, #8
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b002      	add	sp, #8
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	0002      	movs	r2, r0
 8004908:	1dfb      	adds	r3, r7, #7
 800490a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800490c:	1dfb      	adds	r3, r7, #7
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b7f      	cmp	r3, #127	; 0x7f
 8004912:	d809      	bhi.n	8004928 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004914:	1dfb      	adds	r3, r7, #7
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	001a      	movs	r2, r3
 800491a:	231f      	movs	r3, #31
 800491c:	401a      	ands	r2, r3
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <__NVIC_EnableIRQ+0x30>)
 8004920:	2101      	movs	r1, #1
 8004922:	4091      	lsls	r1, r2
 8004924:	000a      	movs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
  }
}
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	b002      	add	sp, #8
 800492e:	bd80      	pop	{r7, pc}
 8004930:	e000e100 	.word	0xe000e100

08004934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	0002      	movs	r2, r0
 800493c:	6039      	str	r1, [r7, #0]
 800493e:	1dfb      	adds	r3, r7, #7
 8004940:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004942:	1dfb      	adds	r3, r7, #7
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b7f      	cmp	r3, #127	; 0x7f
 8004948:	d828      	bhi.n	800499c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800494a:	4a2f      	ldr	r2, [pc, #188]	; (8004a08 <__NVIC_SetPriority+0xd4>)
 800494c:	1dfb      	adds	r3, r7, #7
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b25b      	sxtb	r3, r3
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	33c0      	adds	r3, #192	; 0xc0
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	589b      	ldr	r3, [r3, r2]
 800495a:	1dfa      	adds	r2, r7, #7
 800495c:	7812      	ldrb	r2, [r2, #0]
 800495e:	0011      	movs	r1, r2
 8004960:	2203      	movs	r2, #3
 8004962:	400a      	ands	r2, r1
 8004964:	00d2      	lsls	r2, r2, #3
 8004966:	21ff      	movs	r1, #255	; 0xff
 8004968:	4091      	lsls	r1, r2
 800496a:	000a      	movs	r2, r1
 800496c:	43d2      	mvns	r2, r2
 800496e:	401a      	ands	r2, r3
 8004970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	22ff      	movs	r2, #255	; 0xff
 8004978:	401a      	ands	r2, r3
 800497a:	1dfb      	adds	r3, r7, #7
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	0018      	movs	r0, r3
 8004980:	2303      	movs	r3, #3
 8004982:	4003      	ands	r3, r0
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004988:	481f      	ldr	r0, [pc, #124]	; (8004a08 <__NVIC_SetPriority+0xd4>)
 800498a:	1dfb      	adds	r3, r7, #7
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	b25b      	sxtb	r3, r3
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	430a      	orrs	r2, r1
 8004994:	33c0      	adds	r3, #192	; 0xc0
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800499a:	e031      	b.n	8004a00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800499c:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <__NVIC_SetPriority+0xd8>)
 800499e:	1dfb      	adds	r3, r7, #7
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	0019      	movs	r1, r3
 80049a4:	230f      	movs	r3, #15
 80049a6:	400b      	ands	r3, r1
 80049a8:	3b08      	subs	r3, #8
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	3306      	adds	r3, #6
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	18d3      	adds	r3, r2, r3
 80049b2:	3304      	adds	r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	1dfa      	adds	r2, r7, #7
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	0011      	movs	r1, r2
 80049bc:	2203      	movs	r2, #3
 80049be:	400a      	ands	r2, r1
 80049c0:	00d2      	lsls	r2, r2, #3
 80049c2:	21ff      	movs	r1, #255	; 0xff
 80049c4:	4091      	lsls	r1, r2
 80049c6:	000a      	movs	r2, r1
 80049c8:	43d2      	mvns	r2, r2
 80049ca:	401a      	ands	r2, r3
 80049cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	22ff      	movs	r2, #255	; 0xff
 80049d4:	401a      	ands	r2, r3
 80049d6:	1dfb      	adds	r3, r7, #7
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	0018      	movs	r0, r3
 80049dc:	2303      	movs	r3, #3
 80049de:	4003      	ands	r3, r0
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049e4:	4809      	ldr	r0, [pc, #36]	; (8004a0c <__NVIC_SetPriority+0xd8>)
 80049e6:	1dfb      	adds	r3, r7, #7
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	001c      	movs	r4, r3
 80049ec:	230f      	movs	r3, #15
 80049ee:	4023      	ands	r3, r4
 80049f0:	3b08      	subs	r3, #8
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	430a      	orrs	r2, r1
 80049f6:	3306      	adds	r3, #6
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	18c3      	adds	r3, r0, r3
 80049fc:	3304      	adds	r3, #4
 80049fe:	601a      	str	r2, [r3, #0]
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b003      	add	sp, #12
 8004a06:	bd90      	pop	{r4, r7, pc}
 8004a08:	e000e100 	.word	0xe000e100
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a0c      	ldr	r2, [pc, #48]	; (8004a50 <SysTick_Config+0x40>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a22:	2301      	movs	r3, #1
 8004a24:	e010      	b.n	8004a48 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <SysTick_Config+0x44>)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a2e:	2301      	movs	r3, #1
 8004a30:	425b      	negs	r3, r3
 8004a32:	2103      	movs	r1, #3
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7ff ff7d 	bl	8004934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <SysTick_Config+0x44>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <SysTick_Config+0x44>)
 8004a42:	2207      	movs	r2, #7
 8004a44:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00ffffff 	.word	0x00ffffff
 8004a54:	e000e010 	.word	0xe000e010

08004a58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	210f      	movs	r1, #15
 8004a64:	187b      	adds	r3, r7, r1
 8004a66:	1c02      	adds	r2, r0, #0
 8004a68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	187b      	adds	r3, r7, r1
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	0011      	movs	r1, r2
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7ff ff5d 	bl	8004934 <__NVIC_SetPriority>
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	0002      	movs	r2, r0
 8004a8a:	1dfb      	adds	r3, r7, #7
 8004a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a8e:	1dfb      	adds	r3, r7, #7
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7ff ff33 	bl	8004900 <__NVIC_EnableIRQ>
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7ff ffaf 	bl	8004a10 <SysTick_Config>
 8004ab2:	0003      	movs	r3, r0
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e056      	b.n	8004b7c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	7f5b      	ldrb	r3, [r3, #29]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7fe fad1 	bl	8003088 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	791b      	ldrb	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10c      	bne.n	8004b0e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <HAL_CRC_Init+0xc8>)
 8004afa:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2118      	movs	r1, #24
 8004b08:	438a      	bics	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	e00b      	b.n	8004b26 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6899      	ldr	r1, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f000 f94a 	bl	8004db2 <HAL_CRCEx_Polynomial_Set>
 8004b1e:	1e03      	subs	r3, r0, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e02a      	b.n	8004b7c <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	795b      	ldrb	r3, [r3, #5]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2201      	movs	r2, #1
 8004b34:	4252      	negs	r2, r2
 8004b36:	611a      	str	r2, [r3, #16]
 8004b38:	e004      	b.n	8004b44 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6912      	ldr	r2, [r2, #16]
 8004b42:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2260      	movs	r2, #96	; 0x60
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695a      	ldr	r2, [r3, #20]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	4393      	bics	r3, r2
 8004b66:	0019      	movs	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	04c11db7 	.word	0x04c11db7

08004b88 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2101      	movs	r1, #1
 8004baa:	430a      	orrs	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d024      	beq.n	8004c00 <HAL_CRC_Calculate+0x78>
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d002      	beq.n	8004bc0 <HAL_CRC_Calculate+0x38>
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d017      	beq.n	8004bee <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004bbe:	e028      	b.n	8004c12 <HAL_CRC_Calculate+0x8a>
      for (index = 0U; index < BufferLength; index++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e00a      	b.n	8004bdc <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	18d2      	adds	r2, r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3f0      	bcc.n	8004bc6 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	613b      	str	r3, [r7, #16]
      break;
 8004bec:	e011      	b.n	8004c12 <HAL_CRC_Calculate+0x8a>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 f814 	bl	8004c22 <CRC_Handle_8>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	613b      	str	r3, [r7, #16]
      break;
 8004bfe:	e008      	b.n	8004c12 <HAL_CRC_Calculate+0x8a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	0018      	movs	r0, r3
 8004c08:	f000 f89c 	bl	8004d44 <CRC_Handle_16>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	613b      	str	r3, [r7, #16]
      break;
 8004c10:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004c18:	693b      	ldr	r3, [r7, #16]
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b006      	add	sp, #24
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b088      	sub	sp, #32
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	e023      	b.n	8004c7c <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	3301      	adds	r3, #1
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	18cb      	adds	r3, r1, r3
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004c4e:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	3302      	adds	r3, #2
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	18cb      	adds	r3, r1, r3
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004c5e:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	3303      	adds	r3, #3
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	18cb      	adds	r3, r1, r3
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004c72:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d3d6      	bcc.n	8004c34 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d053      	beq.n	8004d36 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2203      	movs	r2, #3
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	18d2      	adds	r2, r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	7812      	ldrb	r2, [r2, #0]
 8004ca6:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2203      	movs	r2, #3
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d119      	bne.n	8004ce6 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	18d3      	adds	r3, r2, r3
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	b21a      	sxth	r2, r3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	18cb      	adds	r3, r1, r3
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	b21a      	sxth	r2, r3
 8004cd2:	211a      	movs	r1, #26
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	187a      	adds	r2, r7, r1
 8004ce2:	8812      	ldrh	r2, [r2, #0]
 8004ce4:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2203      	movs	r2, #3
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d122      	bne.n	8004d36 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	18d3      	adds	r3, r2, r3
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	b21a      	sxth	r2, r3
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3301      	adds	r3, #1
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	18cb      	adds	r3, r1, r3
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b21b      	sxth	r3, r3
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	b21a      	sxth	r2, r3
 8004d10:	211a      	movs	r1, #26
 8004d12:	187b      	adds	r3, r7, r1
 8004d14:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	187a      	adds	r2, r7, r1
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	3302      	adds	r3, #2
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	18d2      	adds	r2, r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b008      	add	sp, #32
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e013      	b.n	8004d7e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	041a      	lsls	r2, r3, #16
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3302      	adds	r3, #2
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	18cb      	adds	r3, r1, r3
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	0019      	movs	r1, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d3e6      	bcc.n	8004d56 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	18d3      	adds	r3, r2, r3
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b006      	add	sp, #24
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b086      	sub	sp, #24
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbe:	2317      	movs	r3, #23
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004dc6:	231f      	movs	r3, #31
 8004dc8:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1e5a      	subs	r2, r3, #1
 8004dd0:	613a      	str	r2, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_CRCEx_Polynomial_Set+0x36>
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	221f      	movs	r2, #31
 8004dda:	4013      	ands	r3, r2
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	40da      	lsrs	r2, r3
 8004de0:	0013      	movs	r3, r2
 8004de2:	2201      	movs	r2, #1
 8004de4:	4013      	ands	r3, r2
 8004de6:	d0f1      	beq.n	8004dcc <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d017      	beq.n	8004e1e <HAL_CRCEx_Polynomial_Set+0x6c>
 8004dee:	d802      	bhi.n	8004df6 <HAL_CRCEx_Polynomial_Set+0x44>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d021      	beq.n	8004e38 <HAL_CRCEx_Polynomial_Set+0x86>
 8004df4:	e01b      	b.n	8004e2e <HAL_CRCEx_Polynomial_Set+0x7c>
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d009      	beq.n	8004e0e <HAL_CRCEx_Polynomial_Set+0x5c>
 8004dfa:	2b18      	cmp	r3, #24
 8004dfc:	d117      	bne.n	8004e2e <HAL_CRCEx_Polynomial_Set+0x7c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b06      	cmp	r3, #6
 8004e02:	d91b      	bls.n	8004e3c <HAL_CRCEx_Polynomial_Set+0x8a>
      {
        status =   HAL_ERROR;
 8004e04:	2317      	movs	r3, #23
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004e0c:	e016      	b.n	8004e3c <HAL_CRCEx_Polynomial_Set+0x8a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b07      	cmp	r3, #7
 8004e12:	d915      	bls.n	8004e40 <HAL_CRCEx_Polynomial_Set+0x8e>
      {
        status =   HAL_ERROR;
 8004e14:	2317      	movs	r3, #23
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	2201      	movs	r2, #1
 8004e1a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004e1c:	e010      	b.n	8004e40 <HAL_CRCEx_Polynomial_Set+0x8e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d90f      	bls.n	8004e44 <HAL_CRCEx_Polynomial_Set+0x92>
      {
        status =   HAL_ERROR;
 8004e24:	2317      	movs	r3, #23
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	2201      	movs	r2, #1
 8004e2a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004e2c:	e00a      	b.n	8004e44 <HAL_CRCEx_Polynomial_Set+0x92>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004e2e:	2317      	movs	r3, #23
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
      break;
 8004e36:	e006      	b.n	8004e46 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	e004      	b.n	8004e46 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	e002      	b.n	8004e46 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	e000      	b.n	8004e46 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8004e44:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8004e46:	2317      	movs	r3, #23
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10e      	bne.n	8004e6e <HAL_CRCEx_Polynomial_Set+0xbc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2218      	movs	r2, #24
 8004e60:	4393      	bics	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004e6e:	2317      	movs	r3, #23
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	781b      	ldrb	r3, [r3, #0]
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b006      	add	sp, #24
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e015      	b.n	8004eba <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	791b      	ldrb	r3, [r3, #4]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fe f90f 	bl	80030c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e004      	b.n	8004ef6 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	18d3      	adds	r3, r2, r3
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b006      	add	sp, #24
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	795b      	ldrb	r3, [r3, #5]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_DAC_ConfigChannel+0x20>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e029      	b.n	8004f7c <HAL_DAC_ConfigChannel+0x74>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2202      	movs	r2, #2
 8004f32:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8004f3c:	4a11      	ldr	r2, [pc, #68]	; (8004f84 <HAL_DAC_ConfigChannel+0x7c>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	409a      	lsls	r2, r3
 8004f42:	0013      	movs	r3, r2
 8004f44:	43da      	mvns	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	0013      	movs	r3, r2
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b006      	add	sp, #24
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	00000ffe 	.word	0x00000ffe

08004f88 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	795b      	ldrb	r3, [r3, #5]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_DAC_Start+0x16>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e03b      	b.n	8005016 <HAL_DAC_Start+0x8e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	223c      	movs	r2, #60	; 0x3c
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b3c      	cmp	r3, #60	; 0x3c
 8004fd0:	d11a      	bne.n	8005008 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	e011      	b.n	8005008 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	23f0      	movs	r3, #240	; 0xf0
 8004fec:	039b      	lsls	r3, r3, #14
 8004fee:	401a      	ands	r2, r3
 8004ff0:	23f0      	movs	r3, #240	; 0xf0
 8004ff2:	039b      	lsls	r3, r3, #14
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d107      	bne.n	8005008 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2102      	movs	r1, #2
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	0018      	movs	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	b002      	add	sp, #8
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e036      	b.n	80050a4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2221      	movs	r2, #33	; 0x21
 800503a:	2102      	movs	r1, #2
 800503c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_DMA_Init+0x8c>)
 800504a:	4013      	ands	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	0018      	movs	r0, r3
 8005088:	f000 f998 	bl	80053bc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2221      	movs	r2, #33	; 0x21
 8005096:	2101      	movs	r1, #1
 8005098:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	2100      	movs	r1, #0
 80050a0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}  
 80050a4:	0018      	movs	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b004      	add	sp, #16
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	ffffc00f 	.word	0xffffc00f

080050b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80050be:	2317      	movs	r3, #23
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	5c9b      	ldrb	r3, [r3, r2]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_DMA_Start_IT+0x24>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e04f      	b.n	8005174 <HAL_DMA_Start_IT+0xc4>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2221      	movs	r2, #33	; 0x21
 80050e0:	5c9b      	ldrb	r3, [r3, r2]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d13a      	bne.n	800515e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2221      	movs	r2, #33	; 0x21
 80050ec:	2102      	movs	r1, #2
 80050ee:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2101      	movs	r1, #1
 8005102:	438a      	bics	r2, r1
 8005104:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f929 	bl	8005364 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	210e      	movs	r1, #14
 8005126:	430a      	orrs	r2, r1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e00f      	b.n	800514c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	210a      	movs	r1, #10
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2104      	movs	r1, #4
 8005148:	438a      	bics	r2, r1
 800514a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2101      	movs	r1, #1
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e007      	b.n	800516e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	2100      	movs	r1, #0
 8005164:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005166:	2317      	movs	r3, #23
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	2202      	movs	r2, #2
 800516c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800516e:	2317      	movs	r3, #23
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	781b      	ldrb	r3, [r3, #0]
} 
 8005174:	0018      	movs	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	b006      	add	sp, #24
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005184:	230f      	movs	r3, #15
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2221      	movs	r2, #33	; 0x21
 8005190:	5c9b      	ldrb	r3, [r3, r2]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d007      	beq.n	80051a8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2204      	movs	r2, #4
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800519e:	230f      	movs	r3, #15
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e028      	b.n	80051fa <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	210e      	movs	r1, #14
 80051b4:	438a      	bics	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2101      	movs	r1, #1
 80051c4:	438a      	bics	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d0:	2101      	movs	r1, #1
 80051d2:	4091      	lsls	r1, r2
 80051d4:	000a      	movs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2221      	movs	r2, #33	; 0x21
 80051dc:	2101      	movs	r1, #1
 80051de:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	2100      	movs	r1, #0
 80051e6:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	0010      	movs	r0, r2
 80051f8:	4798      	blx	r3
    } 
  }
  return status;
 80051fa:	230f      	movs	r3, #15
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	781b      	ldrb	r3, [r3, #0]
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b004      	add	sp, #16
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	2204      	movs	r2, #4
 8005226:	409a      	lsls	r2, r3
 8005228:	0013      	movs	r3, r2
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4013      	ands	r3, r2
 800522e:	d024      	beq.n	800527a <HAL_DMA_IRQHandler+0x72>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2204      	movs	r2, #4
 8005234:	4013      	ands	r3, r2
 8005236:	d020      	beq.n	800527a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2220      	movs	r2, #32
 8005240:	4013      	ands	r3, r2
 8005242:	d107      	bne.n	8005254 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2104      	movs	r1, #4
 8005250:	438a      	bics	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	2104      	movs	r1, #4
 800525e:	4091      	lsls	r1, r2
 8005260:	000a      	movs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d100      	bne.n	800526e <HAL_DMA_IRQHandler+0x66>
 800526c:	e06a      	b.n	8005344 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	0010      	movs	r0, r2
 8005276:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005278:	e064      	b.n	8005344 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2202      	movs	r2, #2
 8005280:	409a      	lsls	r2, r3
 8005282:	0013      	movs	r3, r2
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4013      	ands	r3, r2
 8005288:	d02b      	beq.n	80052e2 <HAL_DMA_IRQHandler+0xda>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2202      	movs	r2, #2
 800528e:	4013      	ands	r3, r2
 8005290:	d027      	beq.n	80052e2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2220      	movs	r2, #32
 800529a:	4013      	ands	r3, r2
 800529c:	d10b      	bne.n	80052b6 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	210a      	movs	r1, #10
 80052aa:	438a      	bics	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2221      	movs	r2, #33	; 0x21
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2102      	movs	r1, #2
 80052c0:	4091      	lsls	r1, r2
 80052c2:	000a      	movs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	2100      	movs	r1, #0
 80052cc:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d036      	beq.n	8005344 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	0010      	movs	r0, r2
 80052de:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80052e0:	e030      	b.n	8005344 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2208      	movs	r2, #8
 80052e8:	409a      	lsls	r2, r3
 80052ea:	0013      	movs	r3, r2
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4013      	ands	r3, r2
 80052f0:	d028      	beq.n	8005344 <HAL_DMA_IRQHandler+0x13c>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2208      	movs	r2, #8
 80052f6:	4013      	ands	r3, r2
 80052f8:	d024      	beq.n	8005344 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	210e      	movs	r1, #14
 8005306:	438a      	bics	r2, r1
 8005308:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	2101      	movs	r1, #1
 8005314:	4091      	lsls	r1, r2
 8005316:	000a      	movs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2221      	movs	r2, #33	; 0x21
 8005324:	2101      	movs	r1, #1
 8005326:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	2100      	movs	r1, #0
 800532e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	0010      	movs	r0, r2
 8005340:	4798      	blx	r3
    }
   }
}  
 8005342:	e7ff      	b.n	8005344 <HAL_DMA_IRQHandler+0x13c>
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2221      	movs	r2, #33	; 0x21
 8005358:	5c9b      	ldrb	r3, [r3, r2]
 800535a:	b2db      	uxtb	r3, r3
}
 800535c:	0018      	movs	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	b002      	add	sp, #8
 8005362:	bd80      	pop	{r7, pc}

08005364 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537a:	2101      	movs	r1, #1
 800537c:	4091      	lsls	r1, r2
 800537e:	000a      	movs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b10      	cmp	r3, #16
 8005390:	d108      	bne.n	80053a4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053a2:	e007      	b.n	80053b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]
}
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b004      	add	sp, #16
 80053ba:	bd80      	pop	{r7, pc}

080053bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a08      	ldr	r2, [pc, #32]	; (80053ec <DMA_CalcBaseAndBitshift+0x30>)
 80053ca:	4694      	mov	ip, r2
 80053cc:	4463      	add	r3, ip
 80053ce:	2114      	movs	r1, #20
 80053d0:	0018      	movs	r0, r3
 80053d2:	f7fa fe99 	bl	8000108 <__udivsi3>
 80053d6:	0003      	movs	r3, r0
 80053d8:	009a      	lsls	r2, r3, #2
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a03      	ldr	r2, [pc, #12]	; (80053f0 <DMA_CalcBaseAndBitshift+0x34>)
 80053e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b002      	add	sp, #8
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	bffdfff8 	.word	0xbffdfff8
 80053f0:	40020000 	.word	0x40020000

080053f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005402:	e155      	b.n	80056b0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2101      	movs	r1, #1
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4091      	lsls	r1, r2
 800540e:	000a      	movs	r2, r1
 8005410:	4013      	ands	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d100      	bne.n	800541c <HAL_GPIO_Init+0x28>
 800541a:	e146      	b.n	80056aa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d00b      	beq.n	800543c <HAL_GPIO_Init+0x48>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d007      	beq.n	800543c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005430:	2b11      	cmp	r3, #17
 8005432:	d003      	beq.n	800543c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b12      	cmp	r3, #18
 800543a:	d130      	bne.n	800549e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	2203      	movs	r2, #3
 8005448:	409a      	lsls	r2, r3
 800544a:	0013      	movs	r3, r2
 800544c:	43da      	mvns	r2, r3
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4013      	ands	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	409a      	lsls	r2, r3
 800545e:	0013      	movs	r3, r2
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005472:	2201      	movs	r2, #1
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	409a      	lsls	r2, r3
 8005478:	0013      	movs	r3, r2
 800547a:	43da      	mvns	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4013      	ands	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	2201      	movs	r2, #1
 800548a:	401a      	ands	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	409a      	lsls	r2, r3
 8005490:	0013      	movs	r3, r2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	2203      	movs	r2, #3
 80054aa:	409a      	lsls	r2, r3
 80054ac:	0013      	movs	r3, r2
 80054ae:	43da      	mvns	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	0013      	movs	r3, r2
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_Init+0xea>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b12      	cmp	r3, #18
 80054dc:	d123      	bne.n	8005526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	08da      	lsrs	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3208      	adds	r2, #8
 80054e6:	0092      	lsls	r2, r2, #2
 80054e8:	58d3      	ldr	r3, [r2, r3]
 80054ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2207      	movs	r2, #7
 80054f0:	4013      	ands	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	220f      	movs	r2, #15
 80054f6:	409a      	lsls	r2, r3
 80054f8:	0013      	movs	r3, r2
 80054fa:	43da      	mvns	r2, r3
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4013      	ands	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2107      	movs	r1, #7
 800550a:	400b      	ands	r3, r1
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	409a      	lsls	r2, r3
 8005510:	0013      	movs	r3, r2
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	08da      	lsrs	r2, r3, #3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3208      	adds	r2, #8
 8005520:	0092      	lsls	r2, r2, #2
 8005522:	6939      	ldr	r1, [r7, #16]
 8005524:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	2203      	movs	r2, #3
 8005532:	409a      	lsls	r2, r3
 8005534:	0013      	movs	r3, r2
 8005536:	43da      	mvns	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2203      	movs	r2, #3
 8005544:	401a      	ands	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	409a      	lsls	r2, r3
 800554c:	0013      	movs	r3, r2
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	055b      	lsls	r3, r3, #21
 8005562:	4013      	ands	r3, r2
 8005564:	d100      	bne.n	8005568 <HAL_GPIO_Init+0x174>
 8005566:	e0a0      	b.n	80056aa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005568:	4b57      	ldr	r3, [pc, #348]	; (80056c8 <HAL_GPIO_Init+0x2d4>)
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	4b56      	ldr	r3, [pc, #344]	; (80056c8 <HAL_GPIO_Init+0x2d4>)
 800556e:	2101      	movs	r1, #1
 8005570:	430a      	orrs	r2, r1
 8005572:	619a      	str	r2, [r3, #24]
 8005574:	4b54      	ldr	r3, [pc, #336]	; (80056c8 <HAL_GPIO_Init+0x2d4>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2201      	movs	r2, #1
 800557a:	4013      	ands	r3, r2
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005580:	4a52      	ldr	r2, [pc, #328]	; (80056cc <HAL_GPIO_Init+0x2d8>)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	3302      	adds	r3, #2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	589b      	ldr	r3, [r3, r2]
 800558c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2203      	movs	r2, #3
 8005592:	4013      	ands	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	220f      	movs	r2, #15
 8005598:	409a      	lsls	r2, r3
 800559a:	0013      	movs	r3, r2
 800559c:	43da      	mvns	r2, r3
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4013      	ands	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	2390      	movs	r3, #144	; 0x90
 80055a8:	05db      	lsls	r3, r3, #23
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d019      	beq.n	80055e2 <HAL_GPIO_Init+0x1ee>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a47      	ldr	r2, [pc, #284]	; (80056d0 <HAL_GPIO_Init+0x2dc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_GPIO_Init+0x1ea>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a46      	ldr	r2, [pc, #280]	; (80056d4 <HAL_GPIO_Init+0x2e0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00d      	beq.n	80055da <HAL_GPIO_Init+0x1e6>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a45      	ldr	r2, [pc, #276]	; (80056d8 <HAL_GPIO_Init+0x2e4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d007      	beq.n	80055d6 <HAL_GPIO_Init+0x1e2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a44      	ldr	r2, [pc, #272]	; (80056dc <HAL_GPIO_Init+0x2e8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d101      	bne.n	80055d2 <HAL_GPIO_Init+0x1de>
 80055ce:	2304      	movs	r3, #4
 80055d0:	e008      	b.n	80055e4 <HAL_GPIO_Init+0x1f0>
 80055d2:	2305      	movs	r3, #5
 80055d4:	e006      	b.n	80055e4 <HAL_GPIO_Init+0x1f0>
 80055d6:	2303      	movs	r3, #3
 80055d8:	e004      	b.n	80055e4 <HAL_GPIO_Init+0x1f0>
 80055da:	2302      	movs	r3, #2
 80055dc:	e002      	b.n	80055e4 <HAL_GPIO_Init+0x1f0>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <HAL_GPIO_Init+0x1f0>
 80055e2:	2300      	movs	r3, #0
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	2103      	movs	r1, #3
 80055e8:	400a      	ands	r2, r1
 80055ea:	0092      	lsls	r2, r2, #2
 80055ec:	4093      	lsls	r3, r2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055f4:	4935      	ldr	r1, [pc, #212]	; (80056cc <HAL_GPIO_Init+0x2d8>)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	089b      	lsrs	r3, r3, #2
 80055fa:	3302      	adds	r3, #2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005602:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <HAL_GPIO_Init+0x2ec>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	43da      	mvns	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4013      	ands	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	025b      	lsls	r3, r3, #9
 800561a:	4013      	ands	r3, r2
 800561c:	d003      	beq.n	8005626 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005626:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <HAL_GPIO_Init+0x2ec>)
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800562c:	4b2c      	ldr	r3, [pc, #176]	; (80056e0 <HAL_GPIO_Init+0x2ec>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	43da      	mvns	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4013      	ands	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	029b      	lsls	r3, r3, #10
 8005644:	4013      	ands	r3, r2
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005650:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <HAL_GPIO_Init+0x2ec>)
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005656:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_GPIO_Init+0x2ec>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43da      	mvns	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	035b      	lsls	r3, r3, #13
 800566e:	4013      	ands	r3, r2
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800567a:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <HAL_GPIO_Init+0x2ec>)
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005680:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <HAL_GPIO_Init+0x2ec>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	43da      	mvns	r2, r3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	039b      	lsls	r3, r3, #14
 8005698:	4013      	ands	r3, r2
 800569a:	d003      	beq.n	80056a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80056a4:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <HAL_GPIO_Init+0x2ec>)
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	3301      	adds	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	40da      	lsrs	r2, r3
 80056b8:	1e13      	subs	r3, r2, #0
 80056ba:	d000      	beq.n	80056be <HAL_GPIO_Init+0x2ca>
 80056bc:	e6a2      	b.n	8005404 <HAL_GPIO_Init+0x10>
  } 
}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b006      	add	sp, #24
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40010000 	.word	0x40010000
 80056d0:	48000400 	.word	0x48000400
 80056d4:	48000800 	.word	0x48000800
 80056d8:	48000c00 	.word	0x48000c00
 80056dc:	48001000 	.word	0x48001000
 80056e0:	40010400 	.word	0x40010400

080056e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	000a      	movs	r2, r1
 80056ee:	1cbb      	adds	r3, r7, #2
 80056f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	1cba      	adds	r2, r7, #2
 80056f8:	8812      	ldrh	r2, [r2, #0]
 80056fa:	4013      	ands	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80056fe:	230f      	movs	r3, #15
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	2201      	movs	r2, #1
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e003      	b.n	8005710 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005708:	230f      	movs	r3, #15
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005710:	230f      	movs	r3, #15
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	781b      	ldrb	r3, [r3, #0]
  }
 8005716:	0018      	movs	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	b004      	add	sp, #16
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	0008      	movs	r0, r1
 8005728:	0011      	movs	r1, r2
 800572a:	1cbb      	adds	r3, r7, #2
 800572c:	1c02      	adds	r2, r0, #0
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	1c7b      	adds	r3, r7, #1
 8005732:	1c0a      	adds	r2, r1, #0
 8005734:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005736:	1c7b      	adds	r3, r7, #1
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800573e:	1cbb      	adds	r3, r7, #2
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005746:	e003      	b.n	8005750 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005748:	1cbb      	adds	r3, r7, #2
 800574a:	881a      	ldrh	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	000a      	movs	r2, r1
 8005762:	1cbb      	adds	r3, r7, #2
 8005764:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800576c:	1cbb      	adds	r3, r7, #2
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4013      	ands	r3, r2
 8005774:	041a      	lsls	r2, r3, #16
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	43db      	mvns	r3, r3
 800577a:	1cb9      	adds	r1, r7, #2
 800577c:	8809      	ldrh	r1, [r1, #0]
 800577e:	400b      	ands	r3, r1
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	619a      	str	r2, [r3, #24]
}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	46bd      	mov	sp, r7
 800578a:	b004      	add	sp, #16
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	0002      	movs	r2, r0
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	1dba      	adds	r2, r7, #6
 80057a2:	8812      	ldrh	r2, [r2, #0]
 80057a4:	4013      	ands	r3, r2
 80057a6:	d008      	beq.n	80057ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80057aa:	1dba      	adds	r2, r7, #6
 80057ac:	8812      	ldrh	r2, [r2, #0]
 80057ae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057b0:	1dbb      	adds	r3, r7, #6
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7fb fdf9 	bl	80013ac <HAL_GPIO_EXTI_Callback>
  }
}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	46bd      	mov	sp, r7
 80057be:	b002      	add	sp, #8
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	40010400 	.word	0x40010400

080057c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e082      	b.n	80058e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2241      	movs	r2, #65	; 0x41
 80057de:	5c9b      	ldrb	r3, [r3, r2]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d107      	bne.n	80057f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2240      	movs	r2, #64	; 0x40
 80057ea:	2100      	movs	r1, #0
 80057ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7fd fcad 	bl	8003150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2241      	movs	r2, #65	; 0x41
 80057fa:	2124      	movs	r1, #36	; 0x24
 80057fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2101      	movs	r1, #1
 800580a:	438a      	bics	r2, r1
 800580c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4934      	ldr	r1, [pc, #208]	; (80058e8 <HAL_I2C_Init+0x120>)
 8005818:	400a      	ands	r2, r1
 800581a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4931      	ldr	r1, [pc, #196]	; (80058ec <HAL_I2C_Init+0x124>)
 8005828:	400a      	ands	r2, r1
 800582a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d108      	bne.n	8005846 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	0209      	lsls	r1, r1, #8
 8005840:	430a      	orrs	r2, r1
 8005842:	609a      	str	r2, [r3, #8]
 8005844:	e007      	b.n	8005856 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2184      	movs	r1, #132	; 0x84
 8005850:	0209      	lsls	r1, r1, #8
 8005852:	430a      	orrs	r2, r1
 8005854:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d104      	bne.n	8005868 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2280      	movs	r2, #128	; 0x80
 8005864:	0112      	lsls	r2, r2, #4
 8005866:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	491f      	ldr	r1, [pc, #124]	; (80058f0 <HAL_I2C_Init+0x128>)
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	491a      	ldr	r1, [pc, #104]	; (80058ec <HAL_I2C_Init+0x124>)
 8005884:	400a      	ands	r2, r1
 8005886:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	431a      	orrs	r2, r3
 8005892:	0011      	movs	r1, r2
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69d9      	ldr	r1, [r3, #28]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1a      	ldr	r2, [r3, #32]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2101      	movs	r1, #1
 80058be:	430a      	orrs	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2241      	movs	r2, #65	; 0x41
 80058cc:	2120      	movs	r1, #32
 80058ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2242      	movs	r2, #66	; 0x42
 80058da:	2100      	movs	r1, #0
 80058dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	0018      	movs	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b002      	add	sp, #8
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	f0ffffff 	.word	0xf0ffffff
 80058ec:	ffff7fff 	.word	0xffff7fff
 80058f0:	02008000 	.word	0x02008000

080058f4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	1dbb      	adds	r3, r7, #6
 8005902:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2241      	movs	r2, #65	; 0x41
 8005908:	5c9b      	ldrb	r3, [r3, r2]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	d000      	beq.n	8005912 <HAL_I2C_Slave_Transmit+0x1e>
 8005910:	e0fe      	b.n	8005b10 <HAL_I2C_Slave_Transmit+0x21c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_I2C_Slave_Transmit+0x2c>
 8005918:	1dbb      	adds	r3, r7, #6
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	0092      	lsls	r2, r2, #2
 8005926:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0f2      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2240      	movs	r2, #64	; 0x40
 8005930:	5c9b      	ldrb	r3, [r3, r2]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_I2C_Slave_Transmit+0x46>
 8005936:	2302      	movs	r3, #2
 8005938:	e0eb      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2240      	movs	r2, #64	; 0x40
 800593e:	2101      	movs	r1, #1
 8005940:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005942:	f7fd fe43 	bl	80035cc <HAL_GetTick>
 8005946:	0003      	movs	r3, r0
 8005948:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2241      	movs	r2, #65	; 0x41
 800594e:	2121      	movs	r1, #33	; 0x21
 8005950:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2242      	movs	r2, #66	; 0x42
 8005956:	2120      	movs	r1, #32
 8005958:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1dba      	adds	r2, r7, #6
 800596a:	8812      	ldrh	r2, [r2, #0]
 800596c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4967      	ldr	r1, [pc, #412]	; (8005b1c <HAL_I2C_Slave_Transmit+0x228>)
 8005980:	400a      	ands	r2, r1
 8005982:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	0013      	movs	r3, r2
 800598e:	2200      	movs	r2, #0
 8005990:	2108      	movs	r1, #8
 8005992:	f000 ff75 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8005996:	1e03      	subs	r3, r0, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2180      	movs	r1, #128	; 0x80
 80059a6:	0209      	lsls	r1, r1, #8
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0b0      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2208      	movs	r2, #8
 80059b6:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d119      	bne.n	80059f4 <HAL_I2C_Slave_Transmit+0x100>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	0013      	movs	r3, r2
 80059ca:	2200      	movs	r2, #0
 80059cc:	2108      	movs	r1, #8
 80059ce:	f000 ff57 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 80059d2:	1e03      	subs	r3, r0, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_I2C_Slave_Transmit+0xf8>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2180      	movs	r1, #128	; 0x80
 80059e2:	0209      	lsls	r1, r1, #8
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e092      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2208      	movs	r2, #8
 80059f2:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	0259      	lsls	r1, r3, #9
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	0013      	movs	r3, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	f000 ff3c 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d02f      	beq.n	8005a6c <HAL_I2C_Slave_Transmit+0x178>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	0209      	lsls	r1, r1, #8
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e077      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f000 ff68 	bl	80068fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005a2e:	1e03      	subs	r3, r0, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_I2C_Slave_Transmit+0x154>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2180      	movs	r1, #128	; 0x80
 8005a3e:	0209      	lsls	r1, r1, #8
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e064      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1d5      	bne.n	8005a22 <HAL_I2C_Slave_Transmit+0x12e>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f000 ff7d 	bl	800697c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a82:	1e03      	subs	r3, r0, #0
 8005a84:	d012      	beq.n	8005aac <HAL_I2C_Slave_Transmit+0x1b8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	0209      	lsls	r1, r1, #8
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d103      	bne.n	8005aa8 <HAL_I2C_Slave_Transmit+0x1b4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44
 8005aa6:	e001      	b.n	8005aac <HAL_I2C_Slave_Transmit+0x1b8>
      }
      else
      {
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e032      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	0219      	lsls	r1, r3, #8
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	0013      	movs	r3, r2
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f000 fedc 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8005ac8:	1e03      	subs	r3, r0, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_I2C_Slave_Transmit+0x1ee>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2180      	movs	r1, #128	; 0x80
 8005ad8:	0209      	lsls	r1, r1, #8
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e017      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2180      	movs	r1, #128	; 0x80
 8005aee:	0209      	lsls	r1, r1, #8
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2241      	movs	r2, #65	; 0x41
 8005af8:	2120      	movs	r1, #32
 8005afa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2242      	movs	r2, #66	; 0x42
 8005b00:	2100      	movs	r1, #0
 8005b02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2240      	movs	r2, #64	; 0x40
 8005b08:	2100      	movs	r1, #0
 8005b0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_I2C_Slave_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	0018      	movs	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b006      	add	sp, #24
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	ffff7fff 	.word	0xffff7fff

08005b20 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	1dbb      	adds	r3, r7, #6
 8005b2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2241      	movs	r2, #65	; 0x41
 8005b34:	5c9b      	ldrb	r3, [r3, r2]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d000      	beq.n	8005b3e <HAL_I2C_Slave_Receive+0x1e>
 8005b3c:	e0f3      	b.n	8005d26 <HAL_I2C_Slave_Receive+0x206>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_I2C_Slave_Receive+0x2c>
 8005b44:	1dbb      	adds	r3, r7, #6
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <HAL_I2C_Slave_Receive+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2280      	movs	r2, #128	; 0x80
 8005b50:	0092      	lsls	r2, r2, #2
 8005b52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0e7      	b.n	8005d28 <HAL_I2C_Slave_Receive+0x208>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2240      	movs	r2, #64	; 0x40
 8005b5c:	5c9b      	ldrb	r3, [r3, r2]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_I2C_Slave_Receive+0x46>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e0e0      	b.n	8005d28 <HAL_I2C_Slave_Receive+0x208>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2240      	movs	r2, #64	; 0x40
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b6e:	f7fd fd2d 	bl	80035cc <HAL_GetTick>
 8005b72:	0003      	movs	r3, r0
 8005b74:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2241      	movs	r2, #65	; 0x41
 8005b7a:	2122      	movs	r1, #34	; 0x22
 8005b7c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2242      	movs	r2, #66	; 0x42
 8005b82:	2120      	movs	r1, #32
 8005b84:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1dba      	adds	r2, r7, #6
 8005b96:	8812      	ldrh	r2, [r2, #0]
 8005b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4961      	ldr	r1, [pc, #388]	; (8005d30 <HAL_I2C_Slave_Receive+0x210>)
 8005bac:	400a      	ands	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	0013      	movs	r3, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2108      	movs	r1, #8
 8005bbe:	f000 fe5f 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8005bc2:	1e03      	subs	r3, r0, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_I2C_Slave_Receive+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2180      	movs	r1, #128	; 0x80
 8005bd2:	0209      	lsls	r1, r1, #8
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0a5      	b.n	8005d28 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2208      	movs	r2, #8
 8005be2:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	2380      	movs	r3, #128	; 0x80
 8005be8:	0259      	lsls	r1, r3, #9
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	0013      	movs	r3, r2
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f000 fe44 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	1e03      	subs	r3, r0, #0
 8005bfa:	d04a      	beq.n	8005c92 <HAL_I2C_Slave_Receive+0x172>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2180      	movs	r1, #128	; 0x80
 8005c08:	0209      	lsls	r1, r1, #8
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e08a      	b.n	8005d28 <HAL_I2C_Slave_Receive+0x208>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 feeb 	bl	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c1e:	1e03      	subs	r3, r0, #0
 8005c20:	d024      	beq.n	8005c6c <HAL_I2C_Slave_Receive+0x14c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2180      	movs	r1, #128	; 0x80
 8005c2e:	0209      	lsls	r1, r1, #8
 8005c30:	430a      	orrs	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d112      	bne.n	8005c68 <HAL_I2C_Slave_Receive+0x148>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e05d      	b.n	8005d28 <HAL_I2C_Slave_Receive+0x208>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1ba      	bne.n	8005c12 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 fe6a 	bl	800697c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ca8:	1e03      	subs	r3, r0, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_I2C_Slave_Receive+0x1a2>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2180      	movs	r1, #128	; 0x80
 8005cb8:	0209      	lsls	r1, r1, #8
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e032      	b.n	8005d28 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	0219      	lsls	r1, r3, #8
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	0013      	movs	r3, r2
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f000 fdd1 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8005cde:	1e03      	subs	r3, r0, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_I2C_Slave_Receive+0x1d8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	0209      	lsls	r1, r1, #8
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e017      	b.n	8005d28 <HAL_I2C_Slave_Receive+0x208>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2180      	movs	r1, #128	; 0x80
 8005d04:	0209      	lsls	r1, r1, #8
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2241      	movs	r2, #65	; 0x41
 8005d0e:	2120      	movs	r1, #32
 8005d10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2242      	movs	r2, #66	; 0x42
 8005d16:	2100      	movs	r1, #0
 8005d18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2240      	movs	r2, #64	; 0x40
 8005d1e:	2100      	movs	r1, #0
 8005d20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e000      	b.n	8005d28 <HAL_I2C_Slave_Receive+0x208>
  }
  else
  {
    return HAL_BUSY;
 8005d26:	2302      	movs	r3, #2
  }
}
 8005d28:	0018      	movs	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b006      	add	sp, #24
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	ffff7fff 	.word	0xffff7fff

08005d34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
  }
}
 8005d60:	46c0      	nop			; (mov r8, r8)
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b004      	add	sp, #16
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	0a1b      	lsrs	r3, r3, #8
 8005d84:	001a      	movs	r2, r3
 8005d86:	2301      	movs	r3, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d010      	beq.n	8005dae <HAL_I2C_ER_IRQHandler+0x46>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	09db      	lsrs	r3, r3, #7
 8005d90:	001a      	movs	r2, r3
 8005d92:	2301      	movs	r3, #1
 8005d94:	4013      	ands	r3, r2
 8005d96:	d00a      	beq.n	8005dae <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2280      	movs	r2, #128	; 0x80
 8005daa:	0052      	lsls	r2, r2, #1
 8005dac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	0a9b      	lsrs	r3, r3, #10
 8005db2:	001a      	movs	r2, r3
 8005db4:	2301      	movs	r3, #1
 8005db6:	4013      	ands	r3, r2
 8005db8:	d010      	beq.n	8005ddc <HAL_I2C_ER_IRQHandler+0x74>
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	09db      	lsrs	r3, r3, #7
 8005dbe:	001a      	movs	r2, r3
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d00a      	beq.n	8005ddc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	2208      	movs	r2, #8
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2280      	movs	r2, #128	; 0x80
 8005dd8:	00d2      	lsls	r2, r2, #3
 8005dda:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	0a5b      	lsrs	r3, r3, #9
 8005de0:	001a      	movs	r2, r3
 8005de2:	2301      	movs	r3, #1
 8005de4:	4013      	ands	r3, r2
 8005de6:	d010      	beq.n	8005e0a <HAL_I2C_ER_IRQHandler+0xa2>
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	09db      	lsrs	r3, r3, #7
 8005dec:	001a      	movs	r2, r3
 8005dee:	2301      	movs	r3, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	d00a      	beq.n	8005e0a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df8:	2202      	movs	r2, #2
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2280      	movs	r2, #128	; 0x80
 8005e06:	0092      	lsls	r2, r2, #2
 8005e08:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	220b      	movs	r2, #11
 8005e14:	4013      	ands	r3, r2
 8005e16:	d005      	beq.n	8005e24 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0011      	movs	r1, r2
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fbe0 	bl	80065e4 <I2C_ITError>
  }
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b006      	add	sp, #24
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	0008      	movs	r0, r1
 8005e56:	0011      	movs	r1, r2
 8005e58:	1cfb      	adds	r3, r7, #3
 8005e5a:	1c02      	adds	r2, r0, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	003b      	movs	r3, r7
 8005e60:	1c0a      	adds	r2, r1, #0
 8005e62:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e64:	46c0      	nop			; (mov r8, r8)
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b002      	add	sp, #8
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e84:	46c0      	nop			; (mov r8, r8)
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b002      	add	sp, #8
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e94:	46c0      	nop			; (mov r8, r8)
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b002      	add	sp, #8
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2240      	movs	r2, #64	; 0x40
 8005eb6:	5c9b      	ldrb	r3, [r3, r2]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <I2C_Slave_ISR_IT+0x24>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e0fa      	b.n	80060b6 <I2C_Slave_ISR_IT+0x21a>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2240      	movs	r2, #64	; 0x40
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	001a      	movs	r2, r3
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <I2C_Slave_ISR_IT+0x50>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	001a      	movs	r2, r3
 8005eda:	2301      	movs	r3, #1
 8005edc:	4013      	ands	r3, r2
 8005ede:	d005      	beq.n	8005eec <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	0011      	movs	r1, r2
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 f9fc 	bl	80062e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	091b      	lsrs	r3, r3, #4
 8005ef0:	001a      	movs	r2, r3
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d054      	beq.n	8005fa2 <I2C_Slave_ISR_IT+0x106>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	001a      	movs	r2, r3
 8005efe:	2301      	movs	r3, #1
 8005f00:	4013      	ands	r3, r2
 8005f02:	d04e      	beq.n	8005fa2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d12d      	bne.n	8005f6a <I2C_Slave_ISR_IT+0xce>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2241      	movs	r2, #65	; 0x41
 8005f12:	5c9b      	ldrb	r3, [r3, r2]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b28      	cmp	r3, #40	; 0x28
 8005f18:	d10b      	bne.n	8005f32 <I2C_Slave_ISR_IT+0x96>
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	049b      	lsls	r3, r3, #18
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d106      	bne.n	8005f32 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	0011      	movs	r1, r2
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f000 fb00 	bl	8006530 <I2C_ITListenCplt>
 8005f30:	e036      	b.n	8005fa0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2241      	movs	r2, #65	; 0x41
 8005f36:	5c9b      	ldrb	r3, [r3, r2]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b29      	cmp	r3, #41	; 0x29
 8005f3c:	d110      	bne.n	8005f60 <I2C_Slave_ISR_IT+0xc4>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	4a5f      	ldr	r2, [pc, #380]	; (80060c0 <I2C_Slave_ISR_IT+0x224>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00c      	beq.n	8005f60 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 fc54 	bl	80067fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 f95d 	bl	8006218 <I2C_ITSlaveSeqCplt>
 8005f5e:	e01f      	b.n	8005fa0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2210      	movs	r2, #16
 8005f66:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005f68:	e09d      	b.n	80060a6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2210      	movs	r2, #16
 8005f70:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	2204      	movs	r2, #4
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <I2C_Slave_ISR_IT+0xf4>
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	2380      	movs	r3, #128	; 0x80
 8005f88:	045b      	lsls	r3, r3, #17
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d000      	beq.n	8005f90 <I2C_Slave_ISR_IT+0xf4>
 8005f8e:	e08a      	b.n	80060a6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	0011      	movs	r1, r2
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f000 fb23 	bl	80065e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005f9e:	e082      	b.n	80060a6 <I2C_Slave_ISR_IT+0x20a>
 8005fa0:	e081      	b.n	80060a6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	089b      	lsrs	r3, r3, #2
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4013      	ands	r3, r2
 8005fac:	d031      	beq.n	8006012 <I2C_Slave_ISR_IT+0x176>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	089b      	lsrs	r3, r3, #2
 8005fb2:	001a      	movs	r2, r3
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d02b      	beq.n	8006012 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d018      	beq.n	8005ff6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d154      	bne.n	80060aa <I2C_Slave_ISR_IT+0x20e>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4a2f      	ldr	r2, [pc, #188]	; (80060c0 <I2C_Slave_ISR_IT+0x224>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d050      	beq.n	80060aa <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f904 	bl	8006218 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006010:	e04b      	b.n	80060aa <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	08db      	lsrs	r3, r3, #3
 8006016:	001a      	movs	r2, r3
 8006018:	2301      	movs	r3, #1
 800601a:	4013      	ands	r3, r2
 800601c:	d00c      	beq.n	8006038 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	08db      	lsrs	r3, r3, #3
 8006022:	001a      	movs	r2, r3
 8006024:	2301      	movs	r3, #1
 8006026:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006028:	d006      	beq.n	8006038 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f000 f847 	bl	80060c4 <I2C_ITAddrCplt>
 8006036:	e039      	b.n	80060ac <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	001a      	movs	r2, r3
 800603e:	2301      	movs	r3, #1
 8006040:	4013      	ands	r3, r2
 8006042:	d033      	beq.n	80060ac <I2C_Slave_ISR_IT+0x210>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	001a      	movs	r2, r3
 800604a:	2301      	movs	r3, #1
 800604c:	4013      	ands	r3, r2
 800604e:	d02d      	beq.n	80060ac <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d018      	beq.n	800608c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	851a      	strh	r2, [r3, #40]	; 0x28
 800608a:	e00f      	b.n	80060ac <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	045b      	lsls	r3, r3, #17
 8006092:	429a      	cmp	r2, r3
 8006094:	d002      	beq.n	800609c <I2C_Slave_ISR_IT+0x200>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d107      	bne.n	80060ac <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	0018      	movs	r0, r3
 80060a0:	f000 f8ba 	bl	8006218 <I2C_ITSlaveSeqCplt>
 80060a4:	e002      	b.n	80060ac <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	e000      	b.n	80060ac <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80060aa:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2240      	movs	r2, #64	; 0x40
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b006      	add	sp, #24
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	ffff0000 	.word	0xffff0000

080060c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060c4:	b590      	push	{r4, r7, lr}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2241      	movs	r2, #65	; 0x41
 80060d2:	5c9b      	ldrb	r3, [r3, r2]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	001a      	movs	r2, r3
 80060d8:	2328      	movs	r3, #40	; 0x28
 80060da:	4013      	ands	r3, r2
 80060dc:	2b28      	cmp	r3, #40	; 0x28
 80060de:	d000      	beq.n	80060e2 <I2C_ITAddrCplt+0x1e>
 80060e0:	e08d      	b.n	80061fe <I2C_ITAddrCplt+0x13a>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	230f      	movs	r3, #15
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	2101      	movs	r1, #1
 80060f2:	400a      	ands	r2, r1
 80060f4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	b29a      	uxth	r2, r3
 8006100:	230c      	movs	r3, #12
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	21fe      	movs	r1, #254	; 0xfe
 8006106:	400a      	ands	r2, r1
 8006108:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	b29a      	uxth	r2, r3
 8006112:	230a      	movs	r3, #10
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	0592      	lsls	r2, r2, #22
 8006118:	0d92      	lsrs	r2, r2, #22
 800611a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	b29a      	uxth	r2, r3
 8006124:	2308      	movs	r3, #8
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	21fe      	movs	r1, #254	; 0xfe
 800612a:	400a      	ands	r2, r1
 800612c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d14d      	bne.n	80061d2 <I2C_ITAddrCplt+0x10e>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006136:	230a      	movs	r3, #10
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	09db      	lsrs	r3, r3, #7
 800613e:	b29a      	uxth	r2, r3
 8006140:	230c      	movs	r3, #12
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	4053      	eors	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	001a      	movs	r2, r3
 800614c:	2306      	movs	r3, #6
 800614e:	4013      	ands	r3, r2
 8006150:	d124      	bne.n	800619c <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 8006152:	230c      	movs	r3, #12
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	220a      	movs	r2, #10
 8006158:	18ba      	adds	r2, r7, r2
 800615a:	8812      	ldrh	r2, [r2, #0]
 800615c:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616c:	2b02      	cmp	r3, #2
 800616e:	d14e      	bne.n	800620e <I2C_ITAddrCplt+0x14a>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2208      	movs	r2, #8
 800617c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	2100      	movs	r1, #0
 8006184:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006186:	230c      	movs	r3, #12
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	881a      	ldrh	r2, [r3, #0]
 800618c:	230f      	movs	r3, #15
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	7819      	ldrb	r1, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	0018      	movs	r0, r3
 8006196:	f7ff fe59 	bl	8005e4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800619a:	e038      	b.n	800620e <I2C_ITAddrCplt+0x14a>
        slaveaddrcode = ownadd2code;
 800619c:	240c      	movs	r4, #12
 800619e:	193b      	adds	r3, r7, r4
 80061a0:	2208      	movs	r2, #8
 80061a2:	18ba      	adds	r2, r7, r2
 80061a4:	8812      	ldrh	r2, [r2, #0]
 80061a6:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	021a      	lsls	r2, r3, #8
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	0011      	movs	r1, r2
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fcf1 	bl	8006b98 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2240      	movs	r2, #64	; 0x40
 80061ba:	2100      	movs	r1, #0
 80061bc:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061be:	193b      	adds	r3, r7, r4
 80061c0:	881a      	ldrh	r2, [r3, #0]
 80061c2:	230f      	movs	r3, #15
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	7819      	ldrb	r1, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7ff fe3e 	bl	8005e4c <HAL_I2C_AddrCallback>
}
 80061d0:	e01d      	b.n	800620e <I2C_ITAddrCplt+0x14a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	021a      	lsls	r2, r3, #8
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	0011      	movs	r1, r2
 80061da:	0018      	movs	r0, r3
 80061dc:	f000 fcdc 	bl	8006b98 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2240      	movs	r2, #64	; 0x40
 80061e4:	2100      	movs	r1, #0
 80061e6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80061e8:	230c      	movs	r3, #12
 80061ea:	18fb      	adds	r3, r7, r3
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	230f      	movs	r3, #15
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	7819      	ldrb	r1, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	0018      	movs	r0, r3
 80061f8:	f7ff fe28 	bl	8005e4c <HAL_I2C_AddrCallback>
}
 80061fc:	e007      	b.n	800620e <I2C_ITAddrCplt+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2208      	movs	r2, #8
 8006204:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2240      	movs	r2, #64	; 0x40
 800620a:	2100      	movs	r1, #0
 800620c:	5499      	strb	r1, [r3, r2]
}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	46bd      	mov	sp, r7
 8006212:	b005      	add	sp, #20
 8006214:	bd90      	pop	{r4, r7, pc}
	...

08006218 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2242      	movs	r2, #66	; 0x42
 800622c:	2100      	movs	r1, #0
 800622e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	0b9b      	lsrs	r3, r3, #14
 8006234:	001a      	movs	r2, r3
 8006236:	2301      	movs	r3, #1
 8006238:	4013      	ands	r3, r2
 800623a:	d008      	beq.n	800624e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4925      	ldr	r1, [pc, #148]	; (80062dc <I2C_ITSlaveSeqCplt+0xc4>)
 8006248:	400a      	ands	r2, r1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e00d      	b.n	800626a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	0bdb      	lsrs	r3, r3, #15
 8006252:	001a      	movs	r2, r3
 8006254:	2301      	movs	r3, #1
 8006256:	4013      	ands	r3, r2
 8006258:	d007      	beq.n	800626a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	491e      	ldr	r1, [pc, #120]	; (80062e0 <I2C_ITSlaveSeqCplt+0xc8>)
 8006266:	400a      	ands	r2, r1
 8006268:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2241      	movs	r2, #65	; 0x41
 800626e:	5c9b      	ldrb	r3, [r3, r2]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b29      	cmp	r3, #41	; 0x29
 8006274:	d114      	bne.n	80062a0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2241      	movs	r2, #65	; 0x41
 800627a:	2128      	movs	r1, #40	; 0x28
 800627c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2221      	movs	r2, #33	; 0x21
 8006282:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2101      	movs	r1, #1
 8006288:	0018      	movs	r0, r3
 800628a:	f000 fc85 	bl	8006b98 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2240      	movs	r2, #64	; 0x40
 8006292:	2100      	movs	r1, #0
 8006294:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	0018      	movs	r0, r3
 800629a:	f7ff fdc7 	bl	8005e2c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800629e:	e019      	b.n	80062d4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2241      	movs	r2, #65	; 0x41
 80062a4:	5c9b      	ldrb	r3, [r3, r2]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b2a      	cmp	r3, #42	; 0x2a
 80062aa:	d113      	bne.n	80062d4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2241      	movs	r2, #65	; 0x41
 80062b0:	2128      	movs	r1, #40	; 0x28
 80062b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2222      	movs	r2, #34	; 0x22
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2102      	movs	r1, #2
 80062be:	0018      	movs	r0, r3
 80062c0:	f000 fc6a 	bl	8006b98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2240      	movs	r2, #64	; 0x40
 80062c8:	2100      	movs	r1, #0
 80062ca:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7ff fdb4 	bl	8005e3c <HAL_I2C_SlaveRxCpltCallback>
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b004      	add	sp, #16
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	ffffbfff 	.word	0xffffbfff
 80062e0:	ffff7fff 	.word	0xffff7fff

080062e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80062fa:	200f      	movs	r0, #15
 80062fc:	183b      	adds	r3, r7, r0
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	2141      	movs	r1, #65	; 0x41
 8006302:	5c52      	ldrb	r2, [r2, r1]
 8006304:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2220      	movs	r2, #32
 800630c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800630e:	183b      	adds	r3, r7, r0
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b21      	cmp	r3, #33	; 0x21
 8006314:	d004      	beq.n	8006320 <I2C_ITSlaveCplt+0x3c>
 8006316:	230f      	movs	r3, #15
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b29      	cmp	r3, #41	; 0x29
 800631e:	d109      	bne.n	8006334 <I2C_ITSlaveCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006320:	4a7d      	ldr	r2, [pc, #500]	; (8006518 <I2C_ITSlaveCplt+0x234>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0011      	movs	r1, r2
 8006326:	0018      	movs	r0, r3
 8006328:	f000 fc36 	bl	8006b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2221      	movs	r2, #33	; 0x21
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
 8006332:	e012      	b.n	800635a <I2C_ITSlaveCplt+0x76>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006334:	230f      	movs	r3, #15
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b22      	cmp	r3, #34	; 0x22
 800633c:	d004      	beq.n	8006348 <I2C_ITSlaveCplt+0x64>
 800633e:	230f      	movs	r3, #15
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b2a      	cmp	r3, #42	; 0x2a
 8006346:	d108      	bne.n	800635a <I2C_ITSlaveCplt+0x76>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006348:	4a74      	ldr	r2, [pc, #464]	; (800651c <I2C_ITSlaveCplt+0x238>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	0011      	movs	r1, r2
 800634e:	0018      	movs	r0, r3
 8006350:	f000 fc22 	bl	8006b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2222      	movs	r2, #34	; 0x22
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2180      	movs	r1, #128	; 0x80
 8006366:	0209      	lsls	r1, r1, #8
 8006368:	430a      	orrs	r2, r1
 800636a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	496a      	ldr	r1, [pc, #424]	; (8006520 <I2C_ITSlaveCplt+0x23c>)
 8006378:	400a      	ands	r2, r1
 800637a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	0018      	movs	r0, r3
 8006380:	f000 fa3d 	bl	80067fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	0b9b      	lsrs	r3, r3, #14
 8006388:	001a      	movs	r2, r3
 800638a:	2301      	movs	r3, #1
 800638c:	4013      	ands	r3, r2
 800638e:	d013      	beq.n	80063b8 <I2C_ITSlaveCplt+0xd4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4962      	ldr	r1, [pc, #392]	; (8006524 <I2C_ITSlaveCplt+0x240>)
 800639c:	400a      	ands	r2, r1
 800639e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d020      	beq.n	80063ea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063b6:	e018      	b.n	80063ea <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	0bdb      	lsrs	r3, r3, #15
 80063bc:	001a      	movs	r2, r3
 80063be:	2301      	movs	r3, #1
 80063c0:	4013      	ands	r3, r2
 80063c2:	d012      	beq.n	80063ea <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4956      	ldr	r1, [pc, #344]	; (8006528 <I2C_ITSlaveCplt+0x244>)
 80063d0:	400a      	ands	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d006      	beq.n	80063ea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	089b      	lsrs	r3, r3, #2
 80063ee:	001a      	movs	r2, r3
 80063f0:	2301      	movs	r3, #1
 80063f2:	4013      	ands	r3, r2
 80063f4:	d020      	beq.n	8006438 <I2C_ITSlaveCplt+0x154>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2204      	movs	r2, #4
 80063fa:	4393      	bics	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00c      	beq.n	8006438 <I2C_ITSlaveCplt+0x154>
    {
      hi2c->XferSize--;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <I2C_ITSlaveCplt+0x16a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	2204      	movs	r2, #4
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2242      	movs	r2, #66	; 0x42
 8006452:	2100      	movs	r1, #0
 8006454:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006460:	2b00      	cmp	r3, #0
 8006462:	d013      	beq.n	800648c <I2C_ITSlaveCplt+0x1a8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	0011      	movs	r1, r2
 800646c:	0018      	movs	r0, r3
 800646e:	f000 f8b9 	bl	80065e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2241      	movs	r2, #65	; 0x41
 8006476:	5c9b      	ldrb	r3, [r3, r2]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b28      	cmp	r3, #40	; 0x28
 800647c:	d147      	bne.n	800650e <I2C_ITSlaveCplt+0x22a>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	0011      	movs	r1, r2
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f853 	bl	8006530 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800648a:	e040      	b.n	800650e <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	4a26      	ldr	r2, [pc, #152]	; (800652c <I2C_ITSlaveCplt+0x248>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d016      	beq.n	80064c4 <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	0018      	movs	r0, r3
 800649a:	f7ff febd 	bl	8006218 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a22      	ldr	r2, [pc, #136]	; (800652c <I2C_ITSlaveCplt+0x248>)
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2241      	movs	r2, #65	; 0x41
 80064a8:	2120      	movs	r1, #32
 80064aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2240      	movs	r2, #64	; 0x40
 80064b6:	2100      	movs	r1, #0
 80064b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	0018      	movs	r0, r3
 80064be:	f7ff fcd5 	bl	8005e6c <HAL_I2C_ListenCpltCallback>
}
 80064c2:	e024      	b.n	800650e <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2241      	movs	r2, #65	; 0x41
 80064c8:	5c9b      	ldrb	r3, [r3, r2]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b22      	cmp	r3, #34	; 0x22
 80064ce:	d10f      	bne.n	80064f0 <I2C_ITSlaveCplt+0x20c>
    hi2c->State = HAL_I2C_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2241      	movs	r2, #65	; 0x41
 80064d4:	2120      	movs	r1, #32
 80064d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2240      	movs	r2, #64	; 0x40
 80064e2:	2100      	movs	r1, #0
 80064e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7ff fca7 	bl	8005e3c <HAL_I2C_SlaveRxCpltCallback>
}
 80064ee:	e00e      	b.n	800650e <I2C_ITSlaveCplt+0x22a>
    hi2c->State = HAL_I2C_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2241      	movs	r2, #65	; 0x41
 80064f4:	2120      	movs	r1, #32
 80064f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2240      	movs	r2, #64	; 0x40
 8006502:	2100      	movs	r1, #0
 8006504:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	0018      	movs	r0, r3
 800650a:	f7ff fc8f 	bl	8005e2c <HAL_I2C_SlaveTxCpltCallback>
}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	46bd      	mov	sp, r7
 8006512:	b006      	add	sp, #24
 8006514:	bd80      	pop	{r7, pc}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	00008001 	.word	0x00008001
 800651c:	00008002 	.word	0x00008002
 8006520:	fe00e800 	.word	0xfe00e800
 8006524:	ffffbfff 	.word	0xffffbfff
 8006528:	ffff7fff 	.word	0xffff7fff
 800652c:	ffff0000 	.word	0xffff0000

08006530 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a27      	ldr	r2, [pc, #156]	; (80065dc <I2C_ITListenCplt+0xac>)
 800653e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2241      	movs	r2, #65	; 0x41
 800654a:	2120      	movs	r1, #32
 800654c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2242      	movs	r2, #66	; 0x42
 8006552:	2100      	movs	r1, #0
 8006554:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	089b      	lsrs	r3, r3, #2
 8006560:	001a      	movs	r2, r3
 8006562:	2301      	movs	r3, #1
 8006564:	4013      	ands	r3, r2
 8006566:	d022      	beq.n	80065ae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006584:	2b00      	cmp	r3, #0
 8006586:	d012      	beq.n	80065ae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a6:	2204      	movs	r2, #4
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80065ae:	4a0c      	ldr	r2, [pc, #48]	; (80065e0 <I2C_ITListenCplt+0xb0>)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	0011      	movs	r1, r2
 80065b4:	0018      	movs	r0, r3
 80065b6:	f000 faef 	bl	8006b98 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2210      	movs	r2, #16
 80065c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2240      	movs	r2, #64	; 0x40
 80065c6:	2100      	movs	r1, #0
 80065c8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7ff fc4d 	bl	8005e6c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b002      	add	sp, #8
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	ffff0000 	.word	0xffff0000
 80065e0:	00008003 	.word	0x00008003

080065e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80065ee:	200f      	movs	r0, #15
 80065f0:	183b      	adds	r3, r7, r0
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	2141      	movs	r1, #65	; 0x41
 80065f6:	5c52      	ldrb	r2, [r2, r1]
 80065f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2242      	movs	r2, #66	; 0x42
 80065fe:	2100      	movs	r1, #0
 8006600:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a63      	ldr	r2, [pc, #396]	; (8006794 <I2C_ITError+0x1b0>)
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800661a:	183b      	adds	r3, r7, r0
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b28      	cmp	r3, #40	; 0x28
 8006620:	d009      	beq.n	8006636 <I2C_ITError+0x52>
 8006622:	230f      	movs	r3, #15
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b29      	cmp	r3, #41	; 0x29
 800662a:	d004      	beq.n	8006636 <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800662c:	230f      	movs	r3, #15
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b2a      	cmp	r3, #42	; 0x2a
 8006634:	d10c      	bne.n	8006650 <I2C_ITError+0x6c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2103      	movs	r1, #3
 800663a:	0018      	movs	r0, r3
 800663c:	f000 faac 	bl	8006b98 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2241      	movs	r2, #65	; 0x41
 8006644:	2128      	movs	r1, #40	; 0x28
 8006646:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a53      	ldr	r2, [pc, #332]	; (8006798 <I2C_ITError+0x1b4>)
 800664c:	635a      	str	r2, [r3, #52]	; 0x34
 800664e:	e012      	b.n	8006676 <I2C_ITError+0x92>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006650:	4a52      	ldr	r2, [pc, #328]	; (800679c <I2C_ITError+0x1b8>)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	0011      	movs	r1, r2
 8006656:	0018      	movs	r0, r3
 8006658:	f000 fa9e 	bl	8006b98 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2241      	movs	r2, #65	; 0x41
 8006660:	5c9b      	ldrb	r3, [r3, r2]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b60      	cmp	r3, #96	; 0x60
 8006666:	d003      	beq.n	8006670 <I2C_ITError+0x8c>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2241      	movs	r2, #65	; 0x41
 800666c:	2120      	movs	r1, #32
 800666e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	2b00      	cmp	r3, #0
 8006682:	d03b      	beq.n	80066fc <I2C_ITError+0x118>
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2b11      	cmp	r3, #17
 8006688:	d002      	beq.n	8006690 <I2C_ITError+0xac>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b21      	cmp	r3, #33	; 0x21
 800668e:	d135      	bne.n	80066fc <I2C_ITError+0x118>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	2380      	movs	r3, #128	; 0x80
 8006698:	01db      	lsls	r3, r3, #7
 800669a:	401a      	ands	r2, r3
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	01db      	lsls	r3, r3, #7
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d107      	bne.n	80066b4 <I2C_ITError+0xd0>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	493c      	ldr	r1, [pc, #240]	; (80067a0 <I2C_ITError+0x1bc>)
 80066b0:	400a      	ands	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	0018      	movs	r0, r3
 80066ba:	f7fe fe47 	bl	800534c <HAL_DMA_GetState>
 80066be:	0003      	movs	r3, r0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d016      	beq.n	80066f2 <I2C_ITError+0x10e>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	4a36      	ldr	r2, [pc, #216]	; (80067a4 <I2C_ITError+0x1c0>)
 80066ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2240      	movs	r2, #64	; 0x40
 80066d0:	2100      	movs	r1, #0
 80066d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	0018      	movs	r0, r3
 80066da:	f7fe fd4f 	bl	800517c <HAL_DMA_Abort_IT>
 80066de:	1e03      	subs	r3, r0, #0
 80066e0:	d051      	beq.n	8006786 <I2C_ITError+0x1a2>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	0018      	movs	r0, r3
 80066ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066f0:	e049      	b.n	8006786 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f000 f859 	bl	80067ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066fa:	e044      	b.n	8006786 <I2C_ITError+0x1a2>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d03b      	beq.n	800677c <I2C_ITError+0x198>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b12      	cmp	r3, #18
 8006708:	d002      	beq.n	8006710 <I2C_ITError+0x12c>
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b22      	cmp	r3, #34	; 0x22
 800670e:	d135      	bne.n	800677c <I2C_ITError+0x198>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	401a      	ands	r2, r3
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	429a      	cmp	r2, r3
 8006722:	d107      	bne.n	8006734 <I2C_ITError+0x150>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	491e      	ldr	r1, [pc, #120]	; (80067a8 <I2C_ITError+0x1c4>)
 8006730:	400a      	ands	r2, r1
 8006732:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006738:	0018      	movs	r0, r3
 800673a:	f7fe fe07 	bl	800534c <HAL_DMA_GetState>
 800673e:	0003      	movs	r3, r0
 8006740:	2b01      	cmp	r3, #1
 8006742:	d016      	beq.n	8006772 <I2C_ITError+0x18e>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006748:	4a16      	ldr	r2, [pc, #88]	; (80067a4 <I2C_ITError+0x1c0>)
 800674a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2240      	movs	r2, #64	; 0x40
 8006750:	2100      	movs	r1, #0
 8006752:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	0018      	movs	r0, r3
 800675a:	f7fe fd0f 	bl	800517c <HAL_DMA_Abort_IT>
 800675e:	1e03      	subs	r3, r0, #0
 8006760:	d013      	beq.n	800678a <I2C_ITError+0x1a6>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676c:	0018      	movs	r0, r3
 800676e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006770:	e00b      	b.n	800678a <I2C_ITError+0x1a6>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	0018      	movs	r0, r3
 8006776:	f000 f819 	bl	80067ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800677a:	e006      	b.n	800678a <I2C_ITError+0x1a6>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	0018      	movs	r0, r3
 8006780:	f000 f814 	bl	80067ac <I2C_TreatErrorCallback>
  }
}
 8006784:	e002      	b.n	800678c <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	e000      	b.n	800678c <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800678a:	46c0      	nop			; (mov r8, r8)
}
 800678c:	46c0      	nop			; (mov r8, r8)
 800678e:	46bd      	mov	sp, r7
 8006790:	b004      	add	sp, #16
 8006792:	bd80      	pop	{r7, pc}
 8006794:	ffff0000 	.word	0xffff0000
 8006798:	08005e9d 	.word	0x08005e9d
 800679c:	00008003 	.word	0x00008003
 80067a0:	ffffbfff 	.word	0xffffbfff
 80067a4:	08006843 	.word	0x08006843
 80067a8:	ffff7fff 	.word	0xffff7fff

080067ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2241      	movs	r2, #65	; 0x41
 80067b8:	5c9b      	ldrb	r3, [r3, r2]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b60      	cmp	r3, #96	; 0x60
 80067be:	d10f      	bne.n	80067e0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2241      	movs	r2, #65	; 0x41
 80067c4:	2120      	movs	r1, #32
 80067c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2240      	movs	r2, #64	; 0x40
 80067d2:	2100      	movs	r1, #0
 80067d4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	0018      	movs	r0, r3
 80067da:	f7ff fb57 	bl	8005e8c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067de:	e00a      	b.n	80067f6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2240      	movs	r2, #64	; 0x40
 80067ea:	2100      	movs	r1, #0
 80067ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7ff fb43 	bl	8005e7c <HAL_I2C_ErrorCallback>
}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b002      	add	sp, #8
 80067fc:	bd80      	pop	{r7, pc}

080067fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	2202      	movs	r2, #2
 800680e:	4013      	ands	r3, r2
 8006810:	2b02      	cmp	r3, #2
 8006812:	d103      	bne.n	800681c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2200      	movs	r2, #0
 800681a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2201      	movs	r2, #1
 8006824:	4013      	ands	r3, r2
 8006826:	2b01      	cmp	r3, #1
 8006828:	d007      	beq.n	800683a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2101      	movs	r1, #1
 8006836:	430a      	orrs	r2, r1
 8006838:	619a      	str	r2, [r3, #24]
  }
}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	46bd      	mov	sp, r7
 800683e:	b002      	add	sp, #8
 8006840:	bd80      	pop	{r7, pc}

08006842 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	2200      	movs	r2, #0
 800685e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686c:	2200      	movs	r2, #0
 800686e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	0018      	movs	r0, r3
 8006874:	f7ff ff9a 	bl	80067ac <I2C_TreatErrorCallback>
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	b004      	add	sp, #16
 800687e:	bd80      	pop	{r7, pc}

08006880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006890:	e021      	b.n	80068d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	3301      	adds	r3, #1
 8006896:	d01e      	beq.n	80068d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006898:	f7fc fe98 	bl	80035cc <HAL_GetTick>
 800689c:	0002      	movs	r2, r0
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d302      	bcc.n	80068ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d113      	bne.n	80068d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	2220      	movs	r2, #32
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2241      	movs	r2, #65	; 0x41
 80068be:	2120      	movs	r1, #32
 80068c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2242      	movs	r2, #66	; 0x42
 80068c6:	2100      	movs	r1, #0
 80068c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2240      	movs	r2, #64	; 0x40
 80068ce:	2100      	movs	r1, #0
 80068d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e00f      	b.n	80068f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	4013      	ands	r3, r2
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	425a      	negs	r2, r3
 80068e6:	4153      	adcs	r3, r2
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	001a      	movs	r2, r3
 80068ec:	1dfb      	adds	r3, r7, #7
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d0ce      	beq.n	8006892 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	0018      	movs	r0, r3
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b004      	add	sp, #16
 80068fc:	bd80      	pop	{r7, pc}

080068fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800690a:	e02b      	b.n	8006964 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	0018      	movs	r0, r3
 8006914:	f000 f8da 	bl	8006acc <I2C_IsAcknowledgeFailed>
 8006918:	1e03      	subs	r3, r0, #0
 800691a:	d001      	beq.n	8006920 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e029      	b.n	8006974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	3301      	adds	r3, #1
 8006924:	d01e      	beq.n	8006964 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7fc fe51 	bl	80035cc <HAL_GetTick>
 800692a:	0002      	movs	r2, r0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d113      	bne.n	8006964 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	2220      	movs	r2, #32
 8006942:	431a      	orrs	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2241      	movs	r2, #65	; 0x41
 800694c:	2120      	movs	r1, #32
 800694e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2242      	movs	r2, #66	; 0x42
 8006954:	2100      	movs	r1, #0
 8006956:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	2100      	movs	r1, #0
 800695e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e007      	b.n	8006974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2202      	movs	r2, #2
 800696c:	4013      	ands	r3, r2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d1cc      	bne.n	800690c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b004      	add	sp, #16
 800697a:	bd80      	pop	{r7, pc}

0800697c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006988:	e028      	b.n	80069dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	0018      	movs	r0, r3
 8006992:	f000 f89b 	bl	8006acc <I2C_IsAcknowledgeFailed>
 8006996:	1e03      	subs	r3, r0, #0
 8006998:	d001      	beq.n	800699e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e026      	b.n	80069ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699e:	f7fc fe15 	bl	80035cc <HAL_GetTick>
 80069a2:	0002      	movs	r2, r0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d302      	bcc.n	80069b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d113      	bne.n	80069dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b8:	2220      	movs	r2, #32
 80069ba:	431a      	orrs	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2241      	movs	r2, #65	; 0x41
 80069c4:	2120      	movs	r1, #32
 80069c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2242      	movs	r2, #66	; 0x42
 80069cc:	2100      	movs	r1, #0
 80069ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2240      	movs	r2, #64	; 0x40
 80069d4:	2100      	movs	r1, #0
 80069d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e007      	b.n	80069ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	2220      	movs	r2, #32
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d1cf      	bne.n	800698a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	0018      	movs	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b004      	add	sp, #16
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a00:	e055      	b.n	8006aae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 f85f 	bl	8006acc <I2C_IsAcknowledgeFailed>
 8006a0e:	1e03      	subs	r3, r0, #0
 8006a10:	d001      	beq.n	8006a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e053      	b.n	8006abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d129      	bne.n	8006a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d105      	bne.n	8006a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e03f      	b.n	8006abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2220      	movs	r2, #32
 8006a44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	491d      	ldr	r1, [pc, #116]	; (8006ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006a52:	400a      	ands	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2241      	movs	r2, #65	; 0x41
 8006a60:	2120      	movs	r1, #32
 8006a62:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2242      	movs	r2, #66	; 0x42
 8006a68:	2100      	movs	r1, #0
 8006a6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2240      	movs	r2, #64	; 0x40
 8006a70:	2100      	movs	r1, #0
 8006a72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e022      	b.n	8006abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a78:	f7fc fda8 	bl	80035cc <HAL_GetTick>
 8006a7c:	0002      	movs	r2, r0
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d302      	bcc.n	8006a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10f      	bne.n	8006aae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a92:	2220      	movs	r2, #32
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2241      	movs	r2, #65	; 0x41
 8006a9e:	2120      	movs	r1, #32
 8006aa0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2240      	movs	r2, #64	; 0x40
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e007      	b.n	8006abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d1a2      	bne.n	8006a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	0018      	movs	r0, r3
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	b004      	add	sp, #16
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	fe00e800 	.word	0xfe00e800

08006acc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2210      	movs	r2, #16
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d151      	bne.n	8006b8a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae6:	e021      	b.n	8006b2c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	3301      	adds	r3, #1
 8006aec:	d01e      	beq.n	8006b2c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fc fd6d 	bl	80035cc <HAL_GetTick>
 8006af2:	0002      	movs	r2, r0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <I2C_IsAcknowledgeFailed+0x38>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d113      	bne.n	8006b2c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	2220      	movs	r2, #32
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2241      	movs	r2, #65	; 0x41
 8006b14:	2120      	movs	r1, #32
 8006b16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2242      	movs	r2, #66	; 0x42
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2240      	movs	r2, #64	; 0x40
 8006b24:	2100      	movs	r1, #0
 8006b26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e02f      	b.n	8006b8c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	2220      	movs	r2, #32
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d1d6      	bne.n	8006ae8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2210      	movs	r2, #16
 8006b40:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2220      	movs	r2, #32
 8006b48:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f7ff fe56 	bl	80067fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	490d      	ldr	r1, [pc, #52]	; (8006b94 <I2C_IsAcknowledgeFailed+0xc8>)
 8006b5e:	400a      	ands	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	2204      	movs	r2, #4
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2241      	movs	r2, #65	; 0x41
 8006b72:	2120      	movs	r1, #32
 8006b74:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2242      	movs	r2, #66	; 0x42
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2240      	movs	r2, #64	; 0x40
 8006b82:	2100      	movs	r1, #0
 8006b84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b004      	add	sp, #16
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	fe00e800 	.word	0xfe00e800

08006b98 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	000a      	movs	r2, r1
 8006ba2:	1cbb      	adds	r3, r7, #2
 8006ba4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006baa:	1cbb      	adds	r3, r7, #2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d010      	beq.n	8006bd6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2242      	movs	r2, #66	; 0x42
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2241      	movs	r2, #65	; 0x41
 8006bc0:	5c9b      	ldrb	r3, [r3, r2]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	2328      	movs	r3, #40	; 0x28
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b28      	cmp	r3, #40	; 0x28
 8006bcc:	d003      	beq.n	8006bd6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	22b0      	movs	r2, #176	; 0xb0
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006bd6:	1cbb      	adds	r3, r7, #2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d010      	beq.n	8006c02 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2244      	movs	r2, #68	; 0x44
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2241      	movs	r2, #65	; 0x41
 8006bec:	5c9b      	ldrb	r3, [r3, r2]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	001a      	movs	r2, r3
 8006bf2:	2328      	movs	r3, #40	; 0x28
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b28      	cmp	r3, #40	; 0x28
 8006bf8:	d003      	beq.n	8006c02 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	22b0      	movs	r2, #176	; 0xb0
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c02:	1cbb      	adds	r3, r7, #2
 8006c04:	2200      	movs	r2, #0
 8006c06:	5e9b      	ldrsh	r3, [r3, r2]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	da03      	bge.n	8006c14 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	22b8      	movs	r2, #184	; 0xb8
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c14:	1cbb      	adds	r3, r7, #2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d103      	bne.n	8006c24 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2290      	movs	r2, #144	; 0x90
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c24:	1cbb      	adds	r3, r7, #2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d103      	bne.n	8006c34 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c34:	1cbb      	adds	r3, r7, #2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	2b40      	cmp	r3, #64	; 0x40
 8006c3a:	d103      	bne.n	8006c44 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2240      	movs	r2, #64	; 0x40
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	43d9      	mvns	r1, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	400a      	ands	r2, r1
 8006c54:	601a      	str	r2, [r3, #0]
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b004      	add	sp, #16
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2241      	movs	r2, #65	; 0x41
 8006c6e:	5c9b      	ldrb	r3, [r3, r2]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d138      	bne.n	8006ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2240      	movs	r2, #64	; 0x40
 8006c7a:	5c9b      	ldrb	r3, [r3, r2]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e032      	b.n	8006cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2240      	movs	r2, #64	; 0x40
 8006c88:	2101      	movs	r1, #1
 8006c8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2241      	movs	r2, #65	; 0x41
 8006c90:	2124      	movs	r1, #36	; 0x24
 8006c92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4911      	ldr	r1, [pc, #68]	; (8006cf4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006cb0:	400a      	ands	r2, r1
 8006cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2101      	movs	r1, #1
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2241      	movs	r2, #65	; 0x41
 8006cd8:	2120      	movs	r1, #32
 8006cda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2240      	movs	r2, #64	; 0x40
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	e000      	b.n	8006cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ce8:	2302      	movs	r3, #2
  }
}
 8006cea:	0018      	movs	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b002      	add	sp, #8
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	ffffefff 	.word	0xffffefff

08006cf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2241      	movs	r2, #65	; 0x41
 8006d06:	5c9b      	ldrb	r3, [r3, r2]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d139      	bne.n	8006d82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2240      	movs	r2, #64	; 0x40
 8006d12:	5c9b      	ldrb	r3, [r3, r2]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e033      	b.n	8006d84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2240      	movs	r2, #64	; 0x40
 8006d20:	2101      	movs	r1, #1
 8006d22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2241      	movs	r2, #65	; 0x41
 8006d28:	2124      	movs	r1, #36	; 0x24
 8006d2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2101      	movs	r1, #1
 8006d38:	438a      	bics	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4a11      	ldr	r2, [pc, #68]	; (8006d8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2101      	movs	r1, #1
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2241      	movs	r2, #65	; 0x41
 8006d72:	2120      	movs	r1, #32
 8006d74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2240      	movs	r2, #64	; 0x40
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e000      	b.n	8006d84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d82:	2302      	movs	r3, #2
  }
}
 8006d84:	0018      	movs	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b004      	add	sp, #16
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	fffff0ff 	.word	0xfffff0ff

08006d90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d92:	b08b      	sub	sp, #44	; 0x2c
 8006d94:	af06      	add	r7, sp, #24
 8006d96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e100      	b.n	8006fa4 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a81      	ldr	r2, [pc, #516]	; (8006fac <HAL_PCD_Init+0x21c>)
 8006da6:	5c9b      	ldrb	r3, [r3, r2]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d108      	bne.n	8006dc0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	23aa      	movs	r3, #170	; 0xaa
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	2100      	movs	r1, #0
 8006db6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f007 ff5e 	bl	800ec7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a7a      	ldr	r2, [pc, #488]	; (8006fac <HAL_PCD_Init+0x21c>)
 8006dc4:	2103      	movs	r1, #3
 8006dc6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f003 ff93 	bl	800acf8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dd2:	230f      	movs	r3, #15
 8006dd4:	18fb      	adds	r3, r7, r3
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	e058      	b.n	8006e8e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ddc:	200f      	movs	r0, #15
 8006dde:	183b      	adds	r3, r7, r0
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	0013      	movs	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	189b      	adds	r3, r3, r2
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	18cb      	adds	r3, r1, r3
 8006df0:	3301      	adds	r3, #1
 8006df2:	2201      	movs	r2, #1
 8006df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006df6:	183b      	adds	r3, r7, r0
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	0013      	movs	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	189b      	adds	r3, r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	183a      	adds	r2, r7, r0
 8006e08:	7812      	ldrb	r2, [r2, #0]
 8006e0a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e0c:	183b      	adds	r3, r7, r0
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	0004      	movs	r4, r0
 8006e12:	183b      	adds	r3, r7, r0
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b298      	uxth	r0, r3
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	0013      	movs	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	189b      	adds	r3, r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	18cb      	adds	r3, r1, r3
 8006e24:	3336      	adds	r3, #54	; 0x36
 8006e26:	1c02      	adds	r2, r0, #0
 8006e28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e2a:	193b      	adds	r3, r7, r4
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	0013      	movs	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	18cb      	adds	r3, r1, r3
 8006e3c:	3303      	adds	r3, #3
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e42:	193b      	adds	r3, r7, r4
 8006e44:	781a      	ldrb	r2, [r3, #0]
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	0013      	movs	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	189b      	adds	r3, r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	18cb      	adds	r3, r1, r3
 8006e52:	3338      	adds	r3, #56	; 0x38
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e58:	193b      	adds	r3, r7, r4
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	0013      	movs	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	189b      	adds	r3, r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	18cb      	adds	r3, r1, r3
 8006e68:	333c      	adds	r3, #60	; 0x3c
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e6e:	193b      	adds	r3, r7, r4
 8006e70:	781a      	ldrb	r2, [r3, #0]
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	0013      	movs	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	189b      	adds	r3, r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	18cb      	adds	r3, r1, r3
 8006e7e:	3340      	adds	r3, #64	; 0x40
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e84:	193b      	adds	r3, r7, r4
 8006e86:	781a      	ldrb	r2, [r3, #0]
 8006e88:	193b      	adds	r3, r7, r4
 8006e8a:	3201      	adds	r2, #1
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	230f      	movs	r3, #15
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	781a      	ldrb	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d39f      	bcc.n	8006ddc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e9c:	230f      	movs	r3, #15
 8006e9e:	18fb      	adds	r3, r7, r3
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	e056      	b.n	8006f54 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ea6:	240f      	movs	r4, #15
 8006ea8:	193b      	adds	r3, r7, r4
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	236a      	movs	r3, #106	; 0x6a
 8006eb0:	33ff      	adds	r3, #255	; 0xff
 8006eb2:	0019      	movs	r1, r3
 8006eb4:	0013      	movs	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	189b      	adds	r3, r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	18c3      	adds	r3, r0, r3
 8006ebe:	185b      	adds	r3, r3, r1
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ec4:	193b      	adds	r3, r7, r4
 8006ec6:	781a      	ldrb	r2, [r3, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	23b4      	movs	r3, #180	; 0xb4
 8006ecc:	0059      	lsls	r1, r3, #1
 8006ece:	0013      	movs	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	189b      	adds	r3, r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	18c3      	adds	r3, r0, r3
 8006ed8:	185b      	adds	r3, r3, r1
 8006eda:	193a      	adds	r2, r7, r4
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ee0:	193b      	adds	r3, r7, r4
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	236c      	movs	r3, #108	; 0x6c
 8006ee8:	33ff      	adds	r3, #255	; 0xff
 8006eea:	0019      	movs	r1, r3
 8006eec:	0013      	movs	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	189b      	adds	r3, r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	18c3      	adds	r3, r0, r3
 8006ef6:	185b      	adds	r3, r3, r1
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006efc:	193b      	adds	r3, r7, r4
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	23bc      	movs	r3, #188	; 0xbc
 8006f04:	0059      	lsls	r1, r3, #1
 8006f06:	0013      	movs	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	18c3      	adds	r3, r0, r3
 8006f10:	185b      	adds	r3, r3, r1
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f16:	193b      	adds	r3, r7, r4
 8006f18:	781a      	ldrb	r2, [r3, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	23be      	movs	r3, #190	; 0xbe
 8006f1e:	0059      	lsls	r1, r3, #1
 8006f20:	0013      	movs	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	189b      	adds	r3, r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	18c3      	adds	r3, r0, r3
 8006f2a:	185b      	adds	r3, r3, r1
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f30:	193b      	adds	r3, r7, r4
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	23c0      	movs	r3, #192	; 0xc0
 8006f38:	0059      	lsls	r1, r3, #1
 8006f3a:	0013      	movs	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	189b      	adds	r3, r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	18c3      	adds	r3, r0, r3
 8006f44:	185b      	adds	r3, r3, r1
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f4a:	193b      	adds	r3, r7, r4
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	193b      	adds	r3, r7, r4
 8006f50:	3201      	adds	r2, #1
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	230f      	movs	r3, #15
 8006f56:	18fb      	adds	r3, r7, r3
 8006f58:	781a      	ldrb	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d3a1      	bcc.n	8006ea6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	466a      	mov	r2, sp
 8006f6a:	0011      	movs	r1, r2
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	3210      	adds	r2, #16
 8006f70:	ca70      	ldmia	r2!, {r4, r5, r6}
 8006f72:	c170      	stmia	r1!, {r4, r5, r6}
 8006f74:	ca30      	ldmia	r2!, {r4, r5}
 8006f76:	c130      	stmia	r1!, {r4, r5}
 8006f78:	6859      	ldr	r1, [r3, #4]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f003 fed5 	bl	800ad2c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2224      	movs	r2, #36	; 0x24
 8006f86:	2100      	movs	r1, #0
 8006f88:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a07      	ldr	r2, [pc, #28]	; (8006fac <HAL_PCD_Init+0x21c>)
 8006f8e:	2101      	movs	r1, #1
 8006f90:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d103      	bne.n	8006fa2 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f001 fb63 	bl	8008668 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b005      	add	sp, #20
 8006faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fac:	000002a9 	.word	0x000002a9

08006fb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	23aa      	movs	r3, #170	; 0xaa
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	5cd3      	ldrb	r3, [r2, r3]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_PCD_Start+0x18>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e014      	b.n	8006ff2 <HAL_PCD_Start+0x42>
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	23aa      	movs	r3, #170	; 0xaa
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	2101      	movs	r1, #1
 8006fd0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f003 fe78 	bl	800accc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f005 fe51 	bl	800cc88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	23aa      	movs	r3, #170	; 0xaa
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	2100      	movs	r1, #0
 8006fee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b002      	add	sp, #8
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	0018      	movs	r0, r3
 800700a:	f005 fe53 	bl	800ccb4 <USB_ReadInterrupts>
 800700e:	0002      	movs	r2, r0
 8007010:	2380      	movs	r3, #128	; 0x80
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	401a      	ands	r2, r3
 8007016:	2380      	movs	r3, #128	; 0x80
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	429a      	cmp	r2, r3
 800701c:	d103      	bne.n	8007026 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	0018      	movs	r0, r3
 8007022:	f000 fbbb 	bl	800779c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	0018      	movs	r0, r3
 800702c:	f005 fe42 	bl	800ccb4 <USB_ReadInterrupts>
 8007030:	0002      	movs	r2, r0
 8007032:	2380      	movs	r3, #128	; 0x80
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	401a      	ands	r2, r3
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	429a      	cmp	r2, r3
 800703e:	d114      	bne.n	800706a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2244      	movs	r2, #68	; 0x44
 8007046:	5a9b      	ldrh	r3, [r3, r2]
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	49a2      	ldr	r1, [pc, #648]	; (80072d8 <HAL_PCD_IRQHandler+0x2dc>)
 8007050:	400a      	ands	r2, r1
 8007052:	b291      	uxth	r1, r2
 8007054:	2244      	movs	r2, #68	; 0x44
 8007056:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	0018      	movs	r0, r3
 800705c:	f007 fe99 	bl	800ed92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2100      	movs	r1, #0
 8007064:	0018      	movs	r0, r3
 8007066:	f000 f945 	bl	80072f4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	0018      	movs	r0, r3
 8007070:	f005 fe20 	bl	800ccb4 <USB_ReadInterrupts>
 8007074:	0002      	movs	r2, r0
 8007076:	2380      	movs	r3, #128	; 0x80
 8007078:	01db      	lsls	r3, r3, #7
 800707a:	401a      	ands	r2, r3
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	01db      	lsls	r3, r3, #7
 8007080:	429a      	cmp	r2, r3
 8007082:	d10b      	bne.n	800709c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2244      	movs	r2, #68	; 0x44
 800708a:	5a9b      	ldrh	r3, [r3, r2]
 800708c:	b29a      	uxth	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4992      	ldr	r1, [pc, #584]	; (80072dc <HAL_PCD_IRQHandler+0x2e0>)
 8007094:	400a      	ands	r2, r1
 8007096:	b291      	uxth	r1, r2
 8007098:	2244      	movs	r2, #68	; 0x44
 800709a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f005 fe07 	bl	800ccb4 <USB_ReadInterrupts>
 80070a6:	0002      	movs	r2, r0
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	019b      	lsls	r3, r3, #6
 80070ac:	401a      	ands	r2, r3
 80070ae:	2380      	movs	r3, #128	; 0x80
 80070b0:	019b      	lsls	r3, r3, #6
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d10b      	bne.n	80070ce <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2244      	movs	r2, #68	; 0x44
 80070bc:	5a9b      	ldrh	r3, [r3, r2]
 80070be:	b29a      	uxth	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4986      	ldr	r1, [pc, #536]	; (80072e0 <HAL_PCD_IRQHandler+0x2e4>)
 80070c6:	400a      	ands	r2, r1
 80070c8:	b291      	uxth	r1, r2
 80070ca:	2244      	movs	r2, #68	; 0x44
 80070cc:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	0018      	movs	r0, r3
 80070d4:	f005 fdee 	bl	800ccb4 <USB_ReadInterrupts>
 80070d8:	0002      	movs	r2, r0
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	015b      	lsls	r3, r3, #5
 80070de:	401a      	ands	r2, r3
 80070e0:	2380      	movs	r3, #128	; 0x80
 80070e2:	015b      	lsls	r3, r3, #5
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d137      	bne.n	8007158 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2240      	movs	r2, #64	; 0x40
 80070ee:	5a9b      	ldrh	r3, [r3, r2]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2104      	movs	r1, #4
 80070f8:	438a      	bics	r2, r1
 80070fa:	b291      	uxth	r1, r2
 80070fc:	2240      	movs	r2, #64	; 0x40
 80070fe:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2240      	movs	r2, #64	; 0x40
 8007106:	5a9b      	ldrh	r3, [r3, r2]
 8007108:	b29a      	uxth	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2108      	movs	r1, #8
 8007110:	438a      	bics	r2, r1
 8007112:	b291      	uxth	r1, r2
 8007114:	2240      	movs	r2, #64	; 0x40
 8007116:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	23b8      	movs	r3, #184	; 0xb8
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	5cd3      	ldrb	r3, [r2, r3]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d109      	bne.n	8007138 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	23b8      	movs	r3, #184	; 0xb8
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	2100      	movs	r1, #0
 800712c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2100      	movs	r1, #0
 8007132:	0018      	movs	r0, r3
 8007134:	f001 fac2 	bl	80086bc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0018      	movs	r0, r3
 800713c:	f007 fe6a 	bl	800ee14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2244      	movs	r2, #68	; 0x44
 8007146:	5a9b      	ldrh	r3, [r3, r2]
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4965      	ldr	r1, [pc, #404]	; (80072e4 <HAL_PCD_IRQHandler+0x2e8>)
 8007150:	400a      	ands	r2, r1
 8007152:	b291      	uxth	r1, r2
 8007154:	2244      	movs	r2, #68	; 0x44
 8007156:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	0018      	movs	r0, r3
 800715e:	f005 fda9 	bl	800ccb4 <USB_ReadInterrupts>
 8007162:	0002      	movs	r2, r0
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	401a      	ands	r2, r3
 800716a:	2380      	movs	r3, #128	; 0x80
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	429a      	cmp	r2, r3
 8007170:	d127      	bne.n	80071c2 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2240      	movs	r2, #64	; 0x40
 8007178:	5a9b      	ldrh	r3, [r3, r2]
 800717a:	b29a      	uxth	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2108      	movs	r1, #8
 8007182:	430a      	orrs	r2, r1
 8007184:	b291      	uxth	r1, r2
 8007186:	2240      	movs	r2, #64	; 0x40
 8007188:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2244      	movs	r2, #68	; 0x44
 8007190:	5a9b      	ldrh	r3, [r3, r2]
 8007192:	b29a      	uxth	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4953      	ldr	r1, [pc, #332]	; (80072e8 <HAL_PCD_IRQHandler+0x2ec>)
 800719a:	400a      	ands	r2, r1
 800719c:	b291      	uxth	r1, r2
 800719e:	2244      	movs	r2, #68	; 0x44
 80071a0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2240      	movs	r2, #64	; 0x40
 80071a8:	5a9b      	ldrh	r3, [r3, r2]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2104      	movs	r1, #4
 80071b2:	430a      	orrs	r2, r1
 80071b4:	b291      	uxth	r1, r2
 80071b6:	2240      	movs	r2, #64	; 0x40
 80071b8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	0018      	movs	r0, r3
 80071be:	f007 fe0d 	bl	800eddc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	0018      	movs	r0, r3
 80071c8:	f005 fd74 	bl	800ccb4 <USB_ReadInterrupts>
 80071cc:	0002      	movs	r2, r0
 80071ce:	2380      	movs	r3, #128	; 0x80
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b80      	cmp	r3, #128	; 0x80
 80071d4:	d145      	bne.n	8007262 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2244      	movs	r2, #68	; 0x44
 80071dc:	5a9b      	ldrh	r3, [r3, r2]
 80071de:	b29a      	uxth	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2180      	movs	r1, #128	; 0x80
 80071e6:	438a      	bics	r2, r1
 80071e8:	b291      	uxth	r1, r2
 80071ea:	2244      	movs	r2, #68	; 0x44
 80071ec:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	23b8      	movs	r3, #184	; 0xb8
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	5cd3      	ldrb	r3, [r2, r3]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d12f      	bne.n	800725a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2240      	movs	r2, #64	; 0x40
 8007200:	5a9b      	ldrh	r3, [r3, r2]
 8007202:	b29a      	uxth	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2104      	movs	r1, #4
 800720a:	430a      	orrs	r2, r1
 800720c:	b291      	uxth	r1, r2
 800720e:	2240      	movs	r2, #64	; 0x40
 8007210:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	5a9b      	ldrh	r3, [r3, r2]
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2108      	movs	r1, #8
 8007222:	430a      	orrs	r2, r1
 8007224:	b291      	uxth	r1, r2
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	23b8      	movs	r3, #184	; 0xb8
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	2101      	movs	r1, #1
 8007232:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2254      	movs	r2, #84	; 0x54
 800723a:	5a9b      	ldrh	r3, [r3, r2]
 800723c:	b29b      	uxth	r3, r3
 800723e:	089b      	lsrs	r3, r3, #2
 8007240:	223c      	movs	r2, #60	; 0x3c
 8007242:	4013      	ands	r3, r2
 8007244:	0019      	movs	r1, r3
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	23b9      	movs	r3, #185	; 0xb9
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2101      	movs	r1, #1
 8007252:	0018      	movs	r0, r3
 8007254:	f001 fa32 	bl	80086bc <HAL_PCDEx_LPM_Callback>
 8007258:	e003      	b.n	8007262 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	0018      	movs	r0, r3
 800725e:	f007 fdbd 	bl	800eddc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	0018      	movs	r0, r3
 8007268:	f005 fd24 	bl	800ccb4 <USB_ReadInterrupts>
 800726c:	0002      	movs	r2, r0
 800726e:	2380      	movs	r3, #128	; 0x80
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	401a      	ands	r2, r3
 8007274:	2380      	movs	r3, #128	; 0x80
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	429a      	cmp	r2, r3
 800727a:	d10f      	bne.n	800729c <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2244      	movs	r2, #68	; 0x44
 8007282:	5a9b      	ldrh	r3, [r3, r2]
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4918      	ldr	r1, [pc, #96]	; (80072ec <HAL_PCD_IRQHandler+0x2f0>)
 800728c:	400a      	ands	r2, r1
 800728e:	b291      	uxth	r1, r2
 8007290:	2244      	movs	r2, #68	; 0x44
 8007292:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	0018      	movs	r0, r3
 8007298:	f007 fd6c 	bl	800ed74 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	0018      	movs	r0, r3
 80072a2:	f005 fd07 	bl	800ccb4 <USB_ReadInterrupts>
 80072a6:	0002      	movs	r2, r0
 80072a8:	2380      	movs	r3, #128	; 0x80
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	401a      	ands	r2, r3
 80072ae:	2380      	movs	r3, #128	; 0x80
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d10b      	bne.n	80072ce <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2244      	movs	r2, #68	; 0x44
 80072bc:	5a9b      	ldrh	r3, [r3, r2]
 80072be:	b29a      	uxth	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	490a      	ldr	r1, [pc, #40]	; (80072f0 <HAL_PCD_IRQHandler+0x2f4>)
 80072c6:	400a      	ands	r2, r1
 80072c8:	b291      	uxth	r1, r2
 80072ca:	2244      	movs	r2, #68	; 0x44
 80072cc:	5299      	strh	r1, [r3, r2]
  }
}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	46bd      	mov	sp, r7
 80072d2:	b002      	add	sp, #8
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	fffffbff 	.word	0xfffffbff
 80072dc:	ffffbfff 	.word	0xffffbfff
 80072e0:	ffffdfff 	.word	0xffffdfff
 80072e4:	ffffefff 	.word	0xffffefff
 80072e8:	fffff7ff 	.word	0xfffff7ff
 80072ec:	fffffdff 	.word	0xfffffdff
 80072f0:	fffffeff 	.word	0xfffffeff

080072f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	000a      	movs	r2, r1
 80072fe:	1cfb      	adds	r3, r7, #3
 8007300:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	23aa      	movs	r3, #170	; 0xaa
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	5cd3      	ldrb	r3, [r2, r3]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d101      	bne.n	8007312 <HAL_PCD_SetAddress+0x1e>
 800730e:	2302      	movs	r3, #2
 8007310:	e017      	b.n	8007342 <HAL_PCD_SetAddress+0x4e>
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	23aa      	movs	r3, #170	; 0xaa
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	2101      	movs	r1, #1
 800731a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	1cfa      	adds	r2, r7, #3
 8007320:	2124      	movs	r1, #36	; 0x24
 8007322:	7812      	ldrb	r2, [r2, #0]
 8007324:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	1cfb      	adds	r3, r7, #3
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	0019      	movs	r1, r3
 8007330:	0010      	movs	r0, r2
 8007332:	f005 fc95 	bl	800cc60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	23aa      	movs	r3, #170	; 0xaa
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	2100      	movs	r1, #0
 800733e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b002      	add	sp, #8
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800734a:	b590      	push	{r4, r7, lr}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	000c      	movs	r4, r1
 8007354:	0010      	movs	r0, r2
 8007356:	0019      	movs	r1, r3
 8007358:	1cfb      	adds	r3, r7, #3
 800735a:	1c22      	adds	r2, r4, #0
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	003b      	movs	r3, r7
 8007360:	1c02      	adds	r2, r0, #0
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	1cbb      	adds	r3, r7, #2
 8007366:	1c0a      	adds	r2, r1, #0
 8007368:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800736a:	230b      	movs	r3, #11
 800736c:	18fb      	adds	r3, r7, r3
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007372:	1cfb      	adds	r3, r7, #3
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b25b      	sxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	da0f      	bge.n	800739c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800737c:	1cfb      	adds	r3, r7, #3
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2207      	movs	r2, #7
 8007382:	4013      	ands	r3, r2
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	0013      	movs	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	189b      	adds	r3, r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	18d3      	adds	r3, r2, r3
 8007392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	705a      	strb	r2, [r3, #1]
 800739a:	e00f      	b.n	80073bc <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800739c:	1cfb      	adds	r3, r7, #3
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2207      	movs	r2, #7
 80073a2:	401a      	ands	r2, r3
 80073a4:	0013      	movs	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	189b      	adds	r3, r3, r2
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	3369      	adds	r3, #105	; 0x69
 80073ae:	33ff      	adds	r3, #255	; 0xff
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	18d3      	adds	r3, r2, r3
 80073b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80073bc:	1cfb      	adds	r3, r7, #3
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2207      	movs	r2, #7
 80073c2:	4013      	ands	r3, r2
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80073ca:	003b      	movs	r3, r7
 80073cc:	881a      	ldrh	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1cba      	adds	r2, r7, #2
 80073d6:	7812      	ldrb	r2, [r2, #0]
 80073d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	785b      	ldrb	r3, [r3, #1]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073ec:	1cbb      	adds	r3, r7, #2
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d102      	bne.n	80073fa <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	23aa      	movs	r3, #170	; 0xaa
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	5cd3      	ldrb	r3, [r2, r3]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_PCD_EP_Open+0xc0>
 8007406:	2302      	movs	r3, #2
 8007408:	e013      	b.n	8007432 <HAL_PCD_EP_Open+0xe8>
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	23aa      	movs	r3, #170	; 0xaa
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	2101      	movs	r1, #1
 8007412:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	0011      	movs	r1, r2
 800741c:	0018      	movs	r0, r3
 800741e:	f003 fcb1 	bl	800ad84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	23aa      	movs	r3, #170	; 0xaa
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	2100      	movs	r1, #0
 800742a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800742c:	230b      	movs	r3, #11
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	781b      	ldrb	r3, [r3, #0]
}
 8007432:	0018      	movs	r0, r3
 8007434:	46bd      	mov	sp, r7
 8007436:	b005      	add	sp, #20
 8007438:	bd90      	pop	{r4, r7, pc}

0800743a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	000a      	movs	r2, r1
 8007444:	1cfb      	adds	r3, r7, #3
 8007446:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007448:	1cfb      	adds	r3, r7, #3
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b25b      	sxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	da0f      	bge.n	8007472 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007452:	1cfb      	adds	r3, r7, #3
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2207      	movs	r2, #7
 8007458:	4013      	ands	r3, r2
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	0013      	movs	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	189b      	adds	r3, r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	18d3      	adds	r3, r2, r3
 8007468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	705a      	strb	r2, [r3, #1]
 8007470:	e00f      	b.n	8007492 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007472:	1cfb      	adds	r3, r7, #3
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2207      	movs	r2, #7
 8007478:	401a      	ands	r2, r3
 800747a:	0013      	movs	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	189b      	adds	r3, r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	3369      	adds	r3, #105	; 0x69
 8007484:	33ff      	adds	r3, #255	; 0xff
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	18d3      	adds	r3, r2, r3
 800748a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007492:	1cfb      	adds	r3, r7, #3
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2207      	movs	r2, #7
 8007498:	4013      	ands	r3, r2
 800749a:	b2da      	uxtb	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	23aa      	movs	r3, #170	; 0xaa
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	5cd3      	ldrb	r3, [r2, r3]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_PCD_EP_Close+0x76>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e011      	b.n	80074d4 <HAL_PCD_EP_Close+0x9a>
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	23aa      	movs	r3, #170	; 0xaa
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	2101      	movs	r1, #1
 80074b8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	0011      	movs	r1, r2
 80074c2:	0018      	movs	r0, r3
 80074c4:	f003 ffb4 	bl	800b430 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	23aa      	movs	r3, #170	; 0xaa
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	2100      	movs	r1, #0
 80074d0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	0018      	movs	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b004      	add	sp, #16
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	200b      	movs	r0, #11
 80074ea:	183b      	adds	r3, r7, r0
 80074ec:	1c0a      	adds	r2, r1, #0
 80074ee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074f0:	0001      	movs	r1, r0
 80074f2:	187b      	adds	r3, r7, r1
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2207      	movs	r2, #7
 80074f8:	401a      	ands	r2, r3
 80074fa:	0013      	movs	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	3369      	adds	r3, #105	; 0x69
 8007504:	33ff      	adds	r3, #255	; 0xff
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	18d3      	adds	r3, r2, r3
 800750a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2200      	movs	r2, #0
 800751c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2200      	movs	r2, #0
 8007522:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007524:	187b      	adds	r3, r7, r1
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2207      	movs	r2, #7
 800752a:	4013      	ands	r3, r2
 800752c:	b2da      	uxtb	r2, r3
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007532:	187b      	adds	r3, r7, r1
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2207      	movs	r2, #7
 8007538:	4013      	ands	r3, r2
 800753a:	d107      	bne.n	800754c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	0011      	movs	r1, r2
 8007544:	0018      	movs	r0, r3
 8007546:	f004 f933 	bl	800b7b0 <USB_EPStartXfer>
 800754a:	e006      	b.n	800755a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	0011      	movs	r1, r2
 8007554:	0018      	movs	r0, r3
 8007556:	f004 f92b 	bl	800b7b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	0018      	movs	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	b006      	add	sp, #24
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	000a      	movs	r2, r1
 800756e:	1cfb      	adds	r3, r7, #3
 8007570:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007572:	1cfb      	adds	r3, r7, #3
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2207      	movs	r2, #7
 8007578:	401a      	ands	r2, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	23c2      	movs	r3, #194	; 0xc2
 800757e:	0059      	lsls	r1, r3, #1
 8007580:	0013      	movs	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	189b      	adds	r3, r3, r2
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	18c3      	adds	r3, r0, r3
 800758a:	185b      	adds	r3, r3, r1
 800758c:	681b      	ldr	r3, [r3, #0]
}
 800758e:	0018      	movs	r0, r3
 8007590:	46bd      	mov	sp, r7
 8007592:	b002      	add	sp, #8
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b086      	sub	sp, #24
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
 80075a2:	200b      	movs	r0, #11
 80075a4:	183b      	adds	r3, r7, r0
 80075a6:	1c0a      	adds	r2, r1, #0
 80075a8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075aa:	183b      	adds	r3, r7, r0
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2207      	movs	r2, #7
 80075b0:	4013      	ands	r3, r2
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	0013      	movs	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	189b      	adds	r3, r3, r2
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	18d3      	adds	r3, r2, r3
 80075c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2224      	movs	r2, #36	; 0x24
 80075d2:	2101      	movs	r1, #1
 80075d4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2200      	movs	r2, #0
 80075e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2201      	movs	r2, #1
 80075e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075e8:	183b      	adds	r3, r7, r0
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2207      	movs	r2, #7
 80075ee:	4013      	ands	r3, r2
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075f6:	183b      	adds	r3, r7, r0
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2207      	movs	r2, #7
 80075fc:	4013      	ands	r3, r2
 80075fe:	d107      	bne.n	8007610 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	0011      	movs	r1, r2
 8007608:	0018      	movs	r0, r3
 800760a:	f004 f8d1 	bl	800b7b0 <USB_EPStartXfer>
 800760e:	e006      	b.n	800761e <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	0011      	movs	r1, r2
 8007618:	0018      	movs	r0, r3
 800761a:	f004 f8c9 	bl	800b7b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	0018      	movs	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	b006      	add	sp, #24
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	000a      	movs	r2, r1
 8007632:	1cfb      	adds	r3, r7, #3
 8007634:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007636:	1cfb      	adds	r3, r7, #3
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2207      	movs	r2, #7
 800763c:	401a      	ands	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	429a      	cmp	r2, r3
 8007644:	d901      	bls.n	800764a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e046      	b.n	80076d8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800764a:	1cfb      	adds	r3, r7, #3
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	b25b      	sxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	da0f      	bge.n	8007674 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007654:	1cfb      	adds	r3, r7, #3
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2207      	movs	r2, #7
 800765a:	4013      	ands	r3, r2
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	0013      	movs	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	189b      	adds	r3, r3, r2
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	18d3      	adds	r3, r2, r3
 800766a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	705a      	strb	r2, [r3, #1]
 8007672:	e00d      	b.n	8007690 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007674:	1cfb      	adds	r3, r7, #3
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	0013      	movs	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	189b      	adds	r3, r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	3369      	adds	r3, #105	; 0x69
 8007682:	33ff      	adds	r3, #255	; 0xff
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	18d3      	adds	r3, r2, r3
 8007688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007696:	1cfb      	adds	r3, r7, #3
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2207      	movs	r2, #7
 800769c:	4013      	ands	r3, r2
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	23aa      	movs	r3, #170	; 0xaa
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	5cd3      	ldrb	r3, [r2, r3]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_PCD_EP_SetStall+0x8c>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e011      	b.n	80076d8 <HAL_PCD_EP_SetStall+0xb0>
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	23aa      	movs	r3, #170	; 0xaa
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	2101      	movs	r1, #1
 80076bc:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	0011      	movs	r1, r2
 80076c6:	0018      	movs	r0, r3
 80076c8:	f005 f9c8 	bl	800ca5c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	23aa      	movs	r3, #170	; 0xaa
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	2100      	movs	r1, #0
 80076d4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	0018      	movs	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	b004      	add	sp, #16
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	000a      	movs	r2, r1
 80076ea:	1cfb      	adds	r3, r7, #3
 80076ec:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80076ee:	1cfb      	adds	r3, r7, #3
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	220f      	movs	r2, #15
 80076f4:	401a      	ands	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d901      	bls.n	8007702 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e048      	b.n	8007794 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007702:	1cfb      	adds	r3, r7, #3
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	b25b      	sxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	da0f      	bge.n	800772c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800770c:	1cfb      	adds	r3, r7, #3
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2207      	movs	r2, #7
 8007712:	4013      	ands	r3, r2
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	0013      	movs	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	189b      	adds	r3, r3, r2
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	18d3      	adds	r3, r2, r3
 8007722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	705a      	strb	r2, [r3, #1]
 800772a:	e00f      	b.n	800774c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800772c:	1cfb      	adds	r3, r7, #3
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2207      	movs	r2, #7
 8007732:	401a      	ands	r2, r3
 8007734:	0013      	movs	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	189b      	adds	r3, r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	3369      	adds	r3, #105	; 0x69
 800773e:	33ff      	adds	r3, #255	; 0xff
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	18d3      	adds	r3, r2, r3
 8007744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007752:	1cfb      	adds	r3, r7, #3
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	2207      	movs	r2, #7
 8007758:	4013      	ands	r3, r2
 800775a:	b2da      	uxtb	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	23aa      	movs	r3, #170	; 0xaa
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	5cd3      	ldrb	r3, [r2, r3]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_PCD_EP_ClrStall+0x90>
 800776c:	2302      	movs	r3, #2
 800776e:	e011      	b.n	8007794 <HAL_PCD_EP_ClrStall+0xb4>
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	23aa      	movs	r3, #170	; 0xaa
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	2101      	movs	r1, #1
 8007778:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	0011      	movs	r1, r2
 8007782:	0018      	movs	r0, r3
 8007784:	f005 f9ba 	bl	800cafc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	23aa      	movs	r3, #170	; 0xaa
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	2100      	movs	r1, #0
 8007790:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	0018      	movs	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	b004      	add	sp, #16
 800779a:	bd80      	pop	{r7, pc}

0800779c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800779c:	b590      	push	{r4, r7, lr}
 800779e:	b08f      	sub	sp, #60	; 0x3c
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80077a4:	e323      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
  {
    wIstr = hpcd->Instance->ISTR;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	202e      	movs	r0, #46	; 0x2e
 80077ac:	183b      	adds	r3, r7, r0
 80077ae:	2144      	movs	r1, #68	; 0x44
 80077b0:	5a52      	ldrh	r2, [r2, r1]
 80077b2:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80077b4:	183b      	adds	r3, r7, r0
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	202d      	movs	r0, #45	; 0x2d
 80077bc:	183b      	adds	r3, r7, r0
 80077be:	210f      	movs	r1, #15
 80077c0:	400a      	ands	r2, r1
 80077c2:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80077c4:	183b      	adds	r3, r7, r0
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d000      	beq.n	80077ce <PCD_EP_ISR_Handler+0x32>
 80077cc:	e15e      	b.n	8007a8c <PCD_EP_ISR_Handler+0x2f0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80077ce:	232e      	movs	r3, #46	; 0x2e
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	2210      	movs	r2, #16
 80077d6:	4013      	ands	r3, r2
 80077d8:	d152      	bne.n	8007880 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	200e      	movs	r0, #14
 80077e4:	183b      	adds	r3, r7, r0
 80077e6:	49db      	ldr	r1, [pc, #876]	; (8007b54 <PCD_EP_ISR_Handler+0x3b8>)
 80077e8:	400a      	ands	r2, r1
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	183a      	adds	r2, r7, r0
 80077f2:	8812      	ldrh	r2, [r2, #0]
 80077f4:	49d8      	ldr	r1, [pc, #864]	; (8007b58 <PCD_EP_ISR_Handler+0x3bc>)
 80077f6:	430a      	orrs	r2, r1
 80077f8:	b292      	uxth	r2, r2
 80077fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3328      	adds	r3, #40	; 0x28
 8007800:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2250      	movs	r2, #80	; 0x50
 8007808:	5a9b      	ldrh	r3, [r3, r2]
 800780a:	b29b      	uxth	r3, r3
 800780c:	001a      	movs	r2, r3
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	18d2      	adds	r2, r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	18d3      	adds	r3, r2, r3
 800781c:	4acf      	ldr	r2, [pc, #828]	; (8007b5c <PCD_EP_ISR_Handler+0x3c0>)
 800781e:	4694      	mov	ip, r2
 8007820:	4463      	add	r3, ip
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	059b      	lsls	r3, r3, #22
 8007826:	0d9a      	lsrs	r2, r3, #22
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	695a      	ldr	r2, [r3, #20]
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	18d2      	adds	r2, r2, r3
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2100      	movs	r1, #0
 800783e:	0018      	movs	r0, r3
 8007840:	f007 fa7a 	bl	800ed38 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2224      	movs	r2, #36	; 0x24
 8007848:	5c9b      	ldrb	r3, [r3, r2]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d100      	bne.n	8007852 <PCD_EP_ISR_Handler+0xb6>
 8007850:	e2cd      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d000      	beq.n	800785c <PCD_EP_ISR_Handler+0xc0>
 800785a:	e2c8      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2224      	movs	r2, #36	; 0x24
 8007860:	5c9b      	ldrb	r3, [r3, r2]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2280      	movs	r2, #128	; 0x80
 8007866:	4252      	negs	r2, r2
 8007868:	4313      	orrs	r3, r2
 800786a:	b2da      	uxtb	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	b291      	uxth	r1, r2
 8007872:	224c      	movs	r2, #76	; 0x4c
 8007874:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2224      	movs	r2, #36	; 0x24
 800787a:	2100      	movs	r1, #0
 800787c:	5499      	strb	r1, [r3, r2]
 800787e:	e2b6      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3369      	adds	r3, #105	; 0x69
 8007884:	33ff      	adds	r3, #255	; 0xff
 8007886:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	212a      	movs	r1, #42	; 0x2a
 800788e:	187b      	adds	r3, r7, r1
 8007890:	8812      	ldrh	r2, [r2, #0]
 8007892:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007894:	187b      	adds	r3, r7, r1
 8007896:	881a      	ldrh	r2, [r3, #0]
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	4013      	ands	r3, r2
 800789e:	d037      	beq.n	8007910 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2250      	movs	r2, #80	; 0x50
 80078a6:	5a9b      	ldrh	r3, [r3, r2]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	001a      	movs	r2, r3
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	18d2      	adds	r2, r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	18d3      	adds	r3, r2, r3
 80078ba:	4aa9      	ldr	r2, [pc, #676]	; (8007b60 <PCD_EP_ISR_Handler+0x3c4>)
 80078bc:	4694      	mov	ip, r2
 80078be:	4463      	add	r3, ip
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	059b      	lsls	r3, r3, #22
 80078c4:	0d9a      	lsrs	r2, r3, #22
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	22ac      	movs	r2, #172	; 0xac
 80078d2:	0092      	lsls	r2, r2, #2
 80078d4:	1899      	adds	r1, r3, r2
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f005 fa39 	bl	800cd56 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	2010      	movs	r0, #16
 80078ee:	183b      	adds	r3, r7, r0
 80078f0:	499c      	ldr	r1, [pc, #624]	; (8007b64 <PCD_EP_ISR_Handler+0x3c8>)
 80078f2:	400a      	ands	r2, r1
 80078f4:	801a      	strh	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	183a      	adds	r2, r7, r0
 80078fc:	8812      	ldrh	r2, [r2, #0]
 80078fe:	2180      	movs	r1, #128	; 0x80
 8007900:	430a      	orrs	r2, r1
 8007902:	b292      	uxth	r2, r2
 8007904:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	0018      	movs	r0, r3
 800790a:	f007 f9df 	bl	800eccc <HAL_PCD_SetupStageCallback>
 800790e:	e26e      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007910:	232a      	movs	r3, #42	; 0x2a
 8007912:	18fb      	adds	r3, r7, r3
 8007914:	2200      	movs	r2, #0
 8007916:	5e9b      	ldrsh	r3, [r3, r2]
 8007918:	2b00      	cmp	r3, #0
 800791a:	db00      	blt.n	800791e <PCD_EP_ISR_Handler+0x182>
 800791c:	e267      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29a      	uxth	r2, r3
 8007926:	201c      	movs	r0, #28
 8007928:	183b      	adds	r3, r7, r0
 800792a:	498e      	ldr	r1, [pc, #568]	; (8007b64 <PCD_EP_ISR_Handler+0x3c8>)
 800792c:	400a      	ands	r2, r1
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	183a      	adds	r2, r7, r0
 8007936:	8812      	ldrh	r2, [r2, #0]
 8007938:	2180      	movs	r1, #128	; 0x80
 800793a:	430a      	orrs	r2, r1
 800793c:	b292      	uxth	r2, r2
 800793e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2250      	movs	r2, #80	; 0x50
 8007946:	5a9b      	ldrh	r3, [r3, r2]
 8007948:	b29b      	uxth	r3, r3
 800794a:	001a      	movs	r2, r3
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	18d2      	adds	r2, r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	18d3      	adds	r3, r2, r3
 800795a:	4a81      	ldr	r2, [pc, #516]	; (8007b60 <PCD_EP_ISR_Handler+0x3c4>)
 800795c:	4694      	mov	ip, r2
 800795e:	4463      	add	r3, ip
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	059b      	lsls	r3, r3, #22
 8007964:	0d9a      	lsrs	r2, r3, #22
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01a      	beq.n	80079a8 <PCD_EP_ISR_Handler+0x20c>
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d016      	beq.n	80079a8 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	6959      	ldr	r1, [r3, #20]
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800798a:	b29b      	uxth	r3, r3
 800798c:	f005 f9e3 	bl	800cd56 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	695a      	ldr	r2, [r3, #20]
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	18d2      	adds	r2, r2, r3
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2100      	movs	r1, #0
 80079a2:	0018      	movs	r0, r3
 80079a4:	f007 f9a7 	bl	800ecf6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	61bb      	str	r3, [r7, #24]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2250      	movs	r2, #80	; 0x50
 80079b4:	5a9b      	ldrh	r3, [r3, r2]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	001a      	movs	r2, r3
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	189b      	adds	r3, r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	4a67      	ldr	r2, [pc, #412]	; (8007b60 <PCD_EP_ISR_Handler+0x3c4>)
 80079c4:	4694      	mov	ip, r2
 80079c6:	4463      	add	r3, ip
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d110      	bne.n	80079f4 <PCD_EP_ISR_Handler+0x258>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4a63      	ldr	r2, [pc, #396]	; (8007b68 <PCD_EP_ISR_Handler+0x3cc>)
 80079da:	4013      	ands	r3, r2
 80079dc:	b29a      	uxth	r2, r3
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	4a5b      	ldr	r2, [pc, #364]	; (8007b58 <PCD_EP_ISR_Handler+0x3bc>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	e02b      	b.n	8007a4c <PCD_EP_ISR_Handler+0x2b0>
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b3e      	cmp	r3, #62	; 0x3e
 80079fa:	d812      	bhi.n	8007a22 <PCD_EP_ISR_Handler+0x286>
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	085b      	lsrs	r3, r3, #1
 8007a02:	633b      	str	r3, [r7, #48]	; 0x30
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	d002      	beq.n	8007a14 <PCD_EP_ISR_Handler+0x278>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	3301      	adds	r3, #1
 8007a12:	633b      	str	r3, [r7, #48]	; 0x30
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	029b      	lsls	r3, r3, #10
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	e014      	b.n	8007a4c <PCD_EP_ISR_Handler+0x2b0>
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	633b      	str	r3, [r7, #48]	; 0x30
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	221f      	movs	r2, #31
 8007a30:	4013      	ands	r3, r2
 8007a32:	d102      	bne.n	8007a3a <PCD_EP_ISR_Handler+0x29e>
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	3b01      	subs	r3, #1
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	029b      	lsls	r3, r3, #10
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4a45      	ldr	r2, [pc, #276]	; (8007b58 <PCD_EP_ISR_Handler+0x3bc>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	2012      	movs	r0, #18
 8007a56:	183b      	adds	r3, r7, r0
 8007a58:	4944      	ldr	r1, [pc, #272]	; (8007b6c <PCD_EP_ISR_Handler+0x3d0>)
 8007a5a:	400a      	ands	r2, r1
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	183b      	adds	r3, r7, r0
 8007a60:	183a      	adds	r2, r7, r0
 8007a62:	8812      	ldrh	r2, [r2, #0]
 8007a64:	2180      	movs	r1, #128	; 0x80
 8007a66:	0149      	lsls	r1, r1, #5
 8007a68:	404a      	eors	r2, r1
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	183b      	adds	r3, r7, r0
 8007a6e:	183a      	adds	r2, r7, r0
 8007a70:	8812      	ldrh	r2, [r2, #0]
 8007a72:	2180      	movs	r1, #128	; 0x80
 8007a74:	0189      	lsls	r1, r1, #6
 8007a76:	404a      	eors	r2, r1
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	183a      	adds	r2, r7, r0
 8007a80:	8812      	ldrh	r2, [r2, #0]
 8007a82:	493b      	ldr	r1, [pc, #236]	; (8007b70 <PCD_EP_ISR_Handler+0x3d4>)
 8007a84:	430a      	orrs	r2, r1
 8007a86:	b292      	uxth	r2, r2
 8007a88:	801a      	strh	r2, [r3, #0]
 8007a8a:	e1b0      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	001a      	movs	r2, r3
 8007a92:	232d      	movs	r3, #45	; 0x2d
 8007a94:	18fb      	adds	r3, r7, r3
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	18d2      	adds	r2, r2, r3
 8007a9c:	212a      	movs	r1, #42	; 0x2a
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	8812      	ldrh	r2, [r2, #0]
 8007aa2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007aa4:	187b      	adds	r3, r7, r1
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	5e9b      	ldrsh	r3, [r3, r2]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	db00      	blt.n	8007ab0 <PCD_EP_ISR_Handler+0x314>
 8007aae:	e10f      	b.n	8007cd0 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	001a      	movs	r2, r3
 8007ab6:	202d      	movs	r0, #45	; 0x2d
 8007ab8:	183b      	adds	r3, r7, r0
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	18d3      	adds	r3, r2, r3
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	2428      	movs	r4, #40	; 0x28
 8007ac6:	193b      	adds	r3, r7, r4
 8007ac8:	4926      	ldr	r1, [pc, #152]	; (8007b64 <PCD_EP_ISR_Handler+0x3c8>)
 8007aca:	400a      	ands	r2, r1
 8007acc:	801a      	strh	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	183b      	adds	r3, r7, r0
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	18d3      	adds	r3, r2, r3
 8007adc:	193a      	adds	r2, r7, r4
 8007ade:	8812      	ldrh	r2, [r2, #0]
 8007ae0:	2180      	movs	r1, #128	; 0x80
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007ae8:	183b      	adds	r3, r7, r0
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	0013      	movs	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	189b      	adds	r3, r3, r2
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	3369      	adds	r3, #105	; 0x69
 8007af6:	33ff      	adds	r3, #255	; 0xff
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	18d3      	adds	r3, r2, r3
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	7b1b      	ldrb	r3, [r3, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d136      	bne.n	8007b74 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2250      	movs	r2, #80	; 0x50
 8007b0c:	5a9b      	ldrh	r3, [r3, r2]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	001a      	movs	r2, r3
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	18d2      	adds	r2, r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	18d3      	adds	r3, r2, r3
 8007b20:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <PCD_EP_ISR_Handler+0x3c4>)
 8007b22:	4694      	mov	ip, r2
 8007b24:	4463      	add	r3, ip
 8007b26:	881a      	ldrh	r2, [r3, #0]
 8007b28:	2136      	movs	r1, #54	; 0x36
 8007b2a:	187b      	adds	r3, r7, r1
 8007b2c:	0592      	lsls	r2, r2, #22
 8007b2e:	0d92      	lsrs	r2, r2, #22
 8007b30:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8007b32:	187b      	adds	r3, r7, r1
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d100      	bne.n	8007b3c <PCD_EP_ISR_Handler+0x3a0>
 8007b3a:	e0a0      	b.n	8007c7e <PCD_EP_ISR_Handler+0x4e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	6959      	ldr	r1, [r3, #20]
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	88da      	ldrh	r2, [r3, #6]
 8007b48:	2336      	movs	r3, #54	; 0x36
 8007b4a:	18fb      	adds	r3, r7, r3
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	f005 f902 	bl	800cd56 <USB_ReadPMA>
 8007b52:	e094      	b.n	8007c7e <PCD_EP_ISR_Handler+0x4e2>
 8007b54:	ffff8f0f 	.word	0xffff8f0f
 8007b58:	ffff8000 	.word	0xffff8000
 8007b5c:	00000402 	.word	0x00000402
 8007b60:	00000406 	.word	0x00000406
 8007b64:	00000f8f 	.word	0x00000f8f
 8007b68:	ffff83ff 	.word	0xffff83ff
 8007b6c:	ffffbf8f 	.word	0xffffbf8f
 8007b70:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	78db      	ldrb	r3, [r3, #3]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d10c      	bne.n	8007b96 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007b7c:	2336      	movs	r3, #54	; 0x36
 8007b7e:	18fc      	adds	r4, r7, r3
 8007b80:	232a      	movs	r3, #42	; 0x2a
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	881a      	ldrh	r2, [r3, #0]
 8007b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f000 f94a 	bl	8007e24 <HAL_PCD_EP_DB_Receive>
 8007b90:	0003      	movs	r3, r0
 8007b92:	8023      	strh	r3, [r4, #0]
 8007b94:	e073      	b.n	8007c7e <PCD_EP_ISR_Handler+0x4e2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	001a      	movs	r2, r3
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	18d3      	adds	r3, r2, r3
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	2022      	movs	r0, #34	; 0x22
 8007baa:	183b      	adds	r3, r7, r0
 8007bac:	4997      	ldr	r1, [pc, #604]	; (8007e0c <PCD_EP_ISR_Handler+0x670>)
 8007bae:	400a      	ands	r2, r1
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	001a      	movs	r2, r3
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	18d3      	adds	r3, r2, r3
 8007bc0:	183a      	adds	r2, r7, r0
 8007bc2:	8812      	ldrh	r2, [r2, #0]
 8007bc4:	4992      	ldr	r1, [pc, #584]	; (8007e10 <PCD_EP_ISR_Handler+0x674>)
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	b292      	uxth	r2, r2
 8007bca:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	001a      	movs	r2, r3
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	18d3      	adds	r3, r2, r3
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	001a      	movs	r2, r3
 8007be0:	2380      	movs	r3, #128	; 0x80
 8007be2:	01db      	lsls	r3, r3, #7
 8007be4:	4013      	ands	r3, r2
 8007be6:	d025      	beq.n	8007c34 <PCD_EP_ISR_Handler+0x498>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2250      	movs	r2, #80	; 0x50
 8007bee:	5a9b      	ldrh	r3, [r3, r2]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	001a      	movs	r2, r3
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	18d2      	adds	r2, r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	18d3      	adds	r3, r2, r3
 8007c02:	4a84      	ldr	r2, [pc, #528]	; (8007e14 <PCD_EP_ISR_Handler+0x678>)
 8007c04:	4694      	mov	ip, r2
 8007c06:	4463      	add	r3, ip
 8007c08:	881a      	ldrh	r2, [r3, #0]
 8007c0a:	2136      	movs	r1, #54	; 0x36
 8007c0c:	187b      	adds	r3, r7, r1
 8007c0e:	0592      	lsls	r2, r2, #22
 8007c10:	0d92      	lsrs	r2, r2, #22
 8007c12:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8007c14:	187b      	adds	r3, r7, r1
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d030      	beq.n	8007c7e <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	6959      	ldr	r1, [r3, #20]
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	891a      	ldrh	r2, [r3, #8]
 8007c28:	2336      	movs	r3, #54	; 0x36
 8007c2a:	18fb      	adds	r3, r7, r3
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	f005 f892 	bl	800cd56 <USB_ReadPMA>
 8007c32:	e024      	b.n	8007c7e <PCD_EP_ISR_Handler+0x4e2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2250      	movs	r2, #80	; 0x50
 8007c3a:	5a9b      	ldrh	r3, [r3, r2]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	001a      	movs	r2, r3
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	18d2      	adds	r2, r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	18d3      	adds	r3, r2, r3
 8007c4e:	4a72      	ldr	r2, [pc, #456]	; (8007e18 <PCD_EP_ISR_Handler+0x67c>)
 8007c50:	4694      	mov	ip, r2
 8007c52:	4463      	add	r3, ip
 8007c54:	881a      	ldrh	r2, [r3, #0]
 8007c56:	2136      	movs	r1, #54	; 0x36
 8007c58:	187b      	adds	r3, r7, r1
 8007c5a:	0592      	lsls	r2, r2, #22
 8007c5c:	0d92      	lsrs	r2, r2, #22
 8007c5e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8007c60:	187b      	adds	r3, r7, r1
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	6959      	ldr	r1, [r3, #20]
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	895a      	ldrh	r2, [r3, #10]
 8007c74:	2336      	movs	r3, #54	; 0x36
 8007c76:	18fb      	adds	r3, r7, r3
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	f005 f86c 	bl	800cd56 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	69da      	ldr	r2, [r3, #28]
 8007c82:	2136      	movs	r1, #54	; 0x36
 8007c84:	187b      	adds	r3, r7, r1
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	18d2      	adds	r2, r2, r3
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	187b      	adds	r3, r7, r1
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	18d2      	adds	r2, r2, r3
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d006      	beq.n	8007cb2 <PCD_EP_ISR_Handler+0x516>
 8007ca4:	2336      	movs	r3, #54	; 0x36
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	881a      	ldrh	r2, [r3, #0]
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d207      	bcs.n	8007cc2 <PCD_EP_ISR_Handler+0x526>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	781a      	ldrb	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	0011      	movs	r1, r2
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f007 f81b 	bl	800ecf6 <HAL_PCD_DataOutStageCallback>
 8007cc0:	e006      	b.n	8007cd0 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc8:	0011      	movs	r1, r2
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f003 fd70 	bl	800b7b0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007cd0:	232a      	movs	r3, #42	; 0x2a
 8007cd2:	18fb      	adds	r3, r7, r3
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	2280      	movs	r2, #128	; 0x80
 8007cd8:	4013      	ands	r3, r2
 8007cda:	d100      	bne.n	8007cde <PCD_EP_ISR_Handler+0x542>
 8007cdc:	e087      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
      {
        ep = &hpcd->IN_ep[epindex];
 8007cde:	202d      	movs	r0, #45	; 0x2d
 8007ce0:	183b      	adds	r3, r7, r0
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	0013      	movs	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	189b      	adds	r3, r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	18d3      	adds	r3, r2, r3
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	001a      	movs	r2, r3
 8007cfa:	183b      	adds	r3, r7, r0
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	18d3      	adds	r3, r2, r3
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	2420      	movs	r4, #32
 8007d08:	193b      	adds	r3, r7, r4
 8007d0a:	4944      	ldr	r1, [pc, #272]	; (8007e1c <PCD_EP_ISR_Handler+0x680>)
 8007d0c:	400a      	ands	r2, r1
 8007d0e:	801a      	strh	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	001a      	movs	r2, r3
 8007d16:	183b      	adds	r3, r7, r0
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	18d3      	adds	r3, r2, r3
 8007d1e:	193a      	adds	r2, r7, r4
 8007d20:	8812      	ldrh	r2, [r2, #0]
 8007d22:	493f      	ldr	r1, [pc, #252]	; (8007e20 <PCD_EP_ISR_Handler+0x684>)
 8007d24:	430a      	orrs	r2, r1
 8007d26:	b292      	uxth	r2, r2
 8007d28:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d10a      	bne.n	8007d48 <PCD_EP_ISR_Handler+0x5ac>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d151      	bne.n	8007dde <PCD_EP_ISR_Handler+0x642>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007d3a:	232a      	movs	r3, #42	; 0x2a
 8007d3c:	18fb      	adds	r3, r7, r3
 8007d3e:	881a      	ldrh	r2, [r3, #0]
 8007d40:	2380      	movs	r3, #128	; 0x80
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	4013      	ands	r3, r2
 8007d46:	d14a      	bne.n	8007dde <PCD_EP_ISR_Handler+0x642>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2250      	movs	r2, #80	; 0x50
 8007d4e:	5a9b      	ldrh	r3, [r3, r2]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	001a      	movs	r2, r3
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	18d2      	adds	r2, r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	18d3      	adds	r3, r2, r3
 8007d62:	4a2c      	ldr	r2, [pc, #176]	; (8007e14 <PCD_EP_ISR_Handler+0x678>)
 8007d64:	4694      	mov	ip, r2
 8007d66:	4463      	add	r3, ip
 8007d68:	881a      	ldrh	r2, [r3, #0]
 8007d6a:	211e      	movs	r1, #30
 8007d6c:	187b      	adds	r3, r7, r1
 8007d6e:	0592      	lsls	r2, r2, #22
 8007d70:	0d92      	lsrs	r2, r2, #22
 8007d72:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	699a      	ldr	r2, [r3, #24]
 8007d78:	187b      	adds	r3, r7, r1
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d908      	bls.n	8007d92 <PCD_EP_ISR_Handler+0x5f6>
          {
            ep->xfer_len -= TxByteNbre;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	699a      	ldr	r2, [r3, #24]
 8007d84:	231e      	movs	r3, #30
 8007d86:	18fb      	adds	r3, r7, r3
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	1ad2      	subs	r2, r2, r3
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	619a      	str	r2, [r3, #24]
 8007d90:	e002      	b.n	8007d98 <PCD_EP_ISR_Handler+0x5fc>
          }
          else
          {
            ep->xfer_len = 0U;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	2200      	movs	r2, #0
 8007d96:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d107      	bne.n	8007db0 <PCD_EP_ISR_Handler+0x614>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	781a      	ldrb	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	0011      	movs	r1, r2
 8007da8:	0018      	movs	r0, r3
 8007daa:	f006 ffc5 	bl	800ed38 <HAL_PCD_DataInStageCallback>
 8007dae:	e01e      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	695a      	ldr	r2, [r3, #20]
 8007db4:	211e      	movs	r1, #30
 8007db6:	187b      	adds	r3, r7, r1
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	18d2      	adds	r2, r2, r3
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	187b      	adds	r3, r7, r1
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	18d2      	adds	r2, r2, r3
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd4:	0011      	movs	r1, r2
 8007dd6:	0018      	movs	r0, r3
 8007dd8:	f003 fcea 	bl	800b7b0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8007ddc:	e007      	b.n	8007dee <PCD_EP_ISR_Handler+0x652>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007dde:	232a      	movs	r3, #42	; 0x2a
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	881a      	ldrh	r2, [r3, #0]
 8007de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	0018      	movs	r0, r3
 8007dea:	f000 f93b 	bl	8008064 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2244      	movs	r2, #68	; 0x44
 8007df4:	5a9b      	ldrh	r3, [r3, r2]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	b21b      	sxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da00      	bge.n	8007e00 <PCD_EP_ISR_Handler+0x664>
 8007dfe:	e4d2      	b.n	80077a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b00f      	add	sp, #60	; 0x3c
 8007e08:	bd90      	pop	{r4, r7, pc}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	ffff8f8f 	.word	0xffff8f8f
 8007e10:	ffff80c0 	.word	0xffff80c0
 8007e14:	00000402 	.word	0x00000402
 8007e18:	00000406 	.word	0x00000406
 8007e1c:	ffff8f0f 	.word	0xffff8f0f
 8007e20:	ffff8000 	.word	0xffff8000

08007e24 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	1dbb      	adds	r3, r7, #6
 8007e30:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007e32:	1dbb      	adds	r3, r7, #6
 8007e34:	881a      	ldrh	r2, [r3, #0]
 8007e36:	2380      	movs	r3, #128	; 0x80
 8007e38:	01db      	lsls	r3, r3, #7
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	d100      	bne.n	8007e40 <HAL_PCD_EP_DB_Receive+0x1c>
 8007e3e:	e07f      	b.n	8007f40 <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2250      	movs	r2, #80	; 0x50
 8007e46:	5a9b      	ldrh	r3, [r3, r2]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	001a      	movs	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	18d2      	adds	r2, r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	18d3      	adds	r3, r2, r3
 8007e5a:	4a7c      	ldr	r2, [pc, #496]	; (800804c <HAL_PCD_EP_DB_Receive+0x228>)
 8007e5c:	4694      	mov	ip, r2
 8007e5e:	4463      	add	r3, ip
 8007e60:	881a      	ldrh	r2, [r3, #0]
 8007e62:	211a      	movs	r1, #26
 8007e64:	187b      	adds	r3, r7, r1
 8007e66:	0592      	lsls	r2, r2, #22
 8007e68:	0d92      	lsrs	r2, r2, #22
 8007e6a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	187b      	adds	r3, r7, r1
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d308      	bcc.n	8007e8a <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	699a      	ldr	r2, [r3, #24]
 8007e7c:	231a      	movs	r3, #26
 8007e7e:	18fb      	adds	r3, r7, r3
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	1ad2      	subs	r2, r2, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	619a      	str	r2, [r3, #24]
 8007e88:	e002      	b.n	8007e90 <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d121      	bne.n	8007edc <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	001a      	movs	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	18d3      	adds	r3, r2, r3
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	2018      	movs	r0, #24
 8007eac:	183b      	adds	r3, r7, r0
 8007eae:	4968      	ldr	r1, [pc, #416]	; (8008050 <HAL_PCD_EP_DB_Receive+0x22c>)
 8007eb0:	400a      	ands	r2, r1
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	183b      	adds	r3, r7, r0
 8007eb6:	183a      	adds	r2, r7, r0
 8007eb8:	8812      	ldrh	r2, [r2, #0]
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	0189      	lsls	r1, r1, #6
 8007ebe:	404a      	eors	r2, r1
 8007ec0:	801a      	strh	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	001a      	movs	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	18d3      	adds	r3, r2, r3
 8007ed0:	183a      	adds	r2, r7, r0
 8007ed2:	8812      	ldrh	r2, [r2, #0]
 8007ed4:	495f      	ldr	r1, [pc, #380]	; (8008054 <HAL_PCD_EP_DB_Receive+0x230>)
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	b292      	uxth	r2, r2
 8007eda:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007edc:	1dbb      	adds	r3, r7, #6
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	2240      	movs	r2, #64	; 0x40
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	d01a      	beq.n	8007f1c <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	001a      	movs	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	18d3      	adds	r3, r2, r3
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	2016      	movs	r0, #22
 8007efa:	183b      	adds	r3, r7, r0
 8007efc:	4956      	ldr	r1, [pc, #344]	; (8008058 <HAL_PCD_EP_DB_Receive+0x234>)
 8007efe:	400a      	ands	r2, r1
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	001a      	movs	r2, r3
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	18d3      	adds	r3, r2, r3
 8007f10:	183a      	adds	r2, r7, r0
 8007f12:	8812      	ldrh	r2, [r2, #0]
 8007f14:	4951      	ldr	r1, [pc, #324]	; (800805c <HAL_PCD_EP_DB_Receive+0x238>)
 8007f16:	430a      	orrs	r2, r1
 8007f18:	b292      	uxth	r2, r2
 8007f1a:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8007f1c:	231a      	movs	r3, #26
 8007f1e:	18fb      	adds	r3, r7, r3
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d100      	bne.n	8007f28 <HAL_PCD_EP_DB_Receive+0x104>
 8007f26:	e089      	b.n	800803c <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	6959      	ldr	r1, [r3, #20]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	891a      	ldrh	r2, [r3, #8]
 8007f34:	231a      	movs	r3, #26
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	f004 ff0c 	bl	800cd56 <USB_ReadPMA>
 8007f3e:	e07d      	b.n	800803c <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2250      	movs	r2, #80	; 0x50
 8007f46:	5a9b      	ldrh	r3, [r3, r2]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	001a      	movs	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	18d2      	adds	r2, r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	18d3      	adds	r3, r2, r3
 8007f5a:	4a41      	ldr	r2, [pc, #260]	; (8008060 <HAL_PCD_EP_DB_Receive+0x23c>)
 8007f5c:	4694      	mov	ip, r2
 8007f5e:	4463      	add	r3, ip
 8007f60:	881a      	ldrh	r2, [r3, #0]
 8007f62:	211a      	movs	r1, #26
 8007f64:	187b      	adds	r3, r7, r1
 8007f66:	0592      	lsls	r2, r2, #22
 8007f68:	0d92      	lsrs	r2, r2, #22
 8007f6a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	699a      	ldr	r2, [r3, #24]
 8007f70:	187b      	adds	r3, r7, r1
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d308      	bcc.n	8007f8a <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	231a      	movs	r3, #26
 8007f7e:	18fb      	adds	r3, r7, r3
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	1ad2      	subs	r2, r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	619a      	str	r2, [r3, #24]
 8007f88:	e002      	b.n	8007f90 <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d121      	bne.n	8007fdc <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	001a      	movs	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	18d3      	adds	r3, r2, r3
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	201e      	movs	r0, #30
 8007fac:	183b      	adds	r3, r7, r0
 8007fae:	4928      	ldr	r1, [pc, #160]	; (8008050 <HAL_PCD_EP_DB_Receive+0x22c>)
 8007fb0:	400a      	ands	r2, r1
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	183b      	adds	r3, r7, r0
 8007fb6:	183a      	adds	r2, r7, r0
 8007fb8:	8812      	ldrh	r2, [r2, #0]
 8007fba:	2180      	movs	r1, #128	; 0x80
 8007fbc:	0189      	lsls	r1, r1, #6
 8007fbe:	404a      	eors	r2, r1
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	001a      	movs	r2, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	18d3      	adds	r3, r2, r3
 8007fd0:	183a      	adds	r2, r7, r0
 8007fd2:	8812      	ldrh	r2, [r2, #0]
 8007fd4:	491f      	ldr	r1, [pc, #124]	; (8008054 <HAL_PCD_EP_DB_Receive+0x230>)
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	b292      	uxth	r2, r2
 8007fda:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007fdc:	1dbb      	adds	r3, r7, #6
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	2240      	movs	r2, #64	; 0x40
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	d11a      	bne.n	800801c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	001a      	movs	r2, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	18d3      	adds	r3, r2, r3
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	201c      	movs	r0, #28
 8007ffa:	183b      	adds	r3, r7, r0
 8007ffc:	4916      	ldr	r1, [pc, #88]	; (8008058 <HAL_PCD_EP_DB_Receive+0x234>)
 8007ffe:	400a      	ands	r2, r1
 8008000:	801a      	strh	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	001a      	movs	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	18d3      	adds	r3, r2, r3
 8008010:	183a      	adds	r2, r7, r0
 8008012:	8812      	ldrh	r2, [r2, #0]
 8008014:	4911      	ldr	r1, [pc, #68]	; (800805c <HAL_PCD_EP_DB_Receive+0x238>)
 8008016:	430a      	orrs	r2, r1
 8008018:	b292      	uxth	r2, r2
 800801a:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800801c:	231a      	movs	r3, #26
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6959      	ldr	r1, [r3, #20]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	895a      	ldrh	r2, [r3, #10]
 8008032:	231a      	movs	r3, #26
 8008034:	18fb      	adds	r3, r7, r3
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	f004 fe8d 	bl	800cd56 <USB_ReadPMA>
    }
  }

  return count;
 800803c:	231a      	movs	r3, #26
 800803e:	18fb      	adds	r3, r7, r3
 8008040:	881b      	ldrh	r3, [r3, #0]
}
 8008042:	0018      	movs	r0, r3
 8008044:	46bd      	mov	sp, r7
 8008046:	b008      	add	sp, #32
 8008048:	bd80      	pop	{r7, pc}
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	00000402 	.word	0x00000402
 8008050:	ffffbf8f 	.word	0xffffbf8f
 8008054:	ffff8080 	.word	0xffff8080
 8008058:	ffff8f8f 	.word	0xffff8f8f
 800805c:	ffff80c0 	.word	0xffff80c0
 8008060:	00000406 	.word	0x00000406

08008064 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b092      	sub	sp, #72	; 0x48
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	1dbb      	adds	r3, r7, #6
 8008070:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008072:	1dbb      	adds	r3, r7, #6
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	2240      	movs	r2, #64	; 0x40
 8008078:	4013      	ands	r3, r2
 800807a:	d100      	bne.n	800807e <HAL_PCD_EP_DB_Transmit+0x1a>
 800807c:	e12f      	b.n	80082de <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2250      	movs	r2, #80	; 0x50
 8008084:	5a9b      	ldrh	r3, [r3, r2]
 8008086:	b29b      	uxth	r3, r3
 8008088:	001a      	movs	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	18d2      	adds	r2, r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	18d3      	adds	r3, r2, r3
 8008098:	4abc      	ldr	r2, [pc, #752]	; (800838c <HAL_PCD_EP_DB_Transmit+0x328>)
 800809a:	4694      	mov	ip, r2
 800809c:	4463      	add	r3, ip
 800809e:	881a      	ldrh	r2, [r3, #0]
 80080a0:	212e      	movs	r1, #46	; 0x2e
 80080a2:	187b      	adds	r3, r7, r1
 80080a4:	0592      	lsls	r2, r2, #22
 80080a6:	0d92      	lsrs	r2, r2, #22
 80080a8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	187b      	adds	r3, r7, r1
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d908      	bls.n	80080c8 <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	699a      	ldr	r2, [r3, #24]
 80080ba:	232e      	movs	r3, #46	; 0x2e
 80080bc:	18fb      	adds	r3, r7, r3
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	1ad2      	subs	r2, r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	619a      	str	r2, [r3, #24]
 80080c6:	e002      	b.n	80080ce <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2200      	movs	r2, #0
 80080cc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d129      	bne.n	800812a <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	0011      	movs	r1, r2
 80080de:	0018      	movs	r0, r3
 80080e0:	f006 fe2a 	bl	800ed38 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80080e4:	1dbb      	adds	r3, r7, #6
 80080e6:	881a      	ldrh	r2, [r3, #0]
 80080e8:	2380      	movs	r3, #128	; 0x80
 80080ea:	01db      	lsls	r3, r3, #7
 80080ec:	4013      	ands	r3, r2
 80080ee:	d100      	bne.n	80080f2 <HAL_PCD_EP_DB_Transmit+0x8e>
 80080f0:	e231      	b.n	8008556 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	001a      	movs	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	18d3      	adds	r3, r2, r3
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29a      	uxth	r2, r3
 8008104:	2012      	movs	r0, #18
 8008106:	183b      	adds	r3, r7, r0
 8008108:	49a1      	ldr	r1, [pc, #644]	; (8008390 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800810a:	400a      	ands	r2, r1
 800810c:	801a      	strh	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	001a      	movs	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	18d3      	adds	r3, r2, r3
 800811c:	183a      	adds	r2, r7, r0
 800811e:	8812      	ldrh	r2, [r2, #0]
 8008120:	499c      	ldr	r1, [pc, #624]	; (8008394 <HAL_PCD_EP_DB_Transmit+0x330>)
 8008122:	430a      	orrs	r2, r1
 8008124:	b292      	uxth	r2, r2
 8008126:	801a      	strh	r2, [r3, #0]
 8008128:	e215      	b.n	8008556 <HAL_PCD_EP_DB_Transmit+0x4f2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800812a:	1dbb      	adds	r3, r7, #6
 800812c:	881a      	ldrh	r2, [r3, #0]
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	01db      	lsls	r3, r3, #7
 8008132:	4013      	ands	r3, r2
 8008134:	d01a      	beq.n	800816c <HAL_PCD_EP_DB_Transmit+0x108>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	001a      	movs	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	18d3      	adds	r3, r2, r3
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29a      	uxth	r2, r3
 8008148:	2024      	movs	r0, #36	; 0x24
 800814a:	183b      	adds	r3, r7, r0
 800814c:	4990      	ldr	r1, [pc, #576]	; (8008390 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800814e:	400a      	ands	r2, r1
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	001a      	movs	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	18d3      	adds	r3, r2, r3
 8008160:	183a      	adds	r2, r7, r0
 8008162:	8812      	ldrh	r2, [r2, #0]
 8008164:	498b      	ldr	r1, [pc, #556]	; (8008394 <HAL_PCD_EP_DB_Transmit+0x330>)
 8008166:	430a      	orrs	r2, r1
 8008168:	b292      	uxth	r2, r2
 800816a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2224      	movs	r2, #36	; 0x24
 8008170:	5c9b      	ldrb	r3, [r3, r2]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d000      	beq.n	8008178 <HAL_PCD_EP_DB_Transmit+0x114>
 8008176:	e1ee      	b.n	8008556 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	695a      	ldr	r2, [r3, #20]
 800817c:	212e      	movs	r1, #46	; 0x2e
 800817e:	187b      	adds	r3, r7, r1
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	18d2      	adds	r2, r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	69da      	ldr	r2, [r3, #28]
 800818c:	187b      	adds	r3, r7, r1
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	18d2      	adds	r2, r2, r3
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6a1a      	ldr	r2, [r3, #32]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d309      	bcc.n	80081b6 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	6a1a      	ldr	r2, [r3, #32]
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	621a      	str	r2, [r3, #32]
 80081b4:	e016      	b.n	80081e4 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else if (ep->xfer_len_db == 0U)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d108      	bne.n	80081d0 <HAL_PCD_EP_DB_Transmit+0x16c>
        {
          len = TxByteNbre;
 80081be:	232e      	movs	r3, #46	; 0x2e
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2224      	movs	r2, #36	; 0x24
 80081ca:	2100      	movs	r1, #0
 80081cc:	5499      	strb	r1, [r3, r2]
 80081ce:	e009      	b.n	80081e4 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2224      	movs	r2, #36	; 0x24
 80081d4:	2100      	movs	r1, #0
 80081d6:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2200      	movs	r2, #0
 80081e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d150      	bne.n	800828e <HAL_PCD_EP_DB_Transmit+0x22a>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	61bb      	str	r3, [r7, #24]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2250      	movs	r2, #80	; 0x50
 80081f8:	5a9b      	ldrh	r3, [r3, r2]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	001a      	movs	r2, r3
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	189b      	adds	r3, r3, r2
 8008202:	61bb      	str	r3, [r7, #24]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	00da      	lsls	r2, r3, #3
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	18d3      	adds	r3, r2, r3
 800820e:	4a5f      	ldr	r2, [pc, #380]	; (800838c <HAL_PCD_EP_DB_Transmit+0x328>)
 8008210:	4694      	mov	ip, r2
 8008212:	4463      	add	r3, ip
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d110      	bne.n	800823e <HAL_PCD_EP_DB_Transmit+0x1da>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	4a5d      	ldr	r2, [pc, #372]	; (8008398 <HAL_PCD_EP_DB_Transmit+0x334>)
 8008224:	4013      	ands	r3, r2
 8008226:	b29a      	uxth	r2, r3
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	4a5a      	ldr	r2, [pc, #360]	; (800839c <HAL_PCD_EP_DB_Transmit+0x338>)
 8008234:	4313      	orrs	r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	e044      	b.n	80082c8 <HAL_PCD_EP_DB_Transmit+0x264>
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	2b3e      	cmp	r3, #62	; 0x3e
 8008242:	d810      	bhi.n	8008266 <HAL_PCD_EP_DB_Transmit+0x202>
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	2201      	movs	r2, #1
 800824e:	4013      	ands	r3, r2
 8008250:	d002      	beq.n	8008258 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	3301      	adds	r3, #1
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	b29b      	uxth	r3, r3
 800825c:	029b      	lsls	r3, r3, #10
 800825e:	b29a      	uxth	r2, r3
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	e030      	b.n	80082c8 <HAL_PCD_EP_DB_Transmit+0x264>
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	095b      	lsrs	r3, r3, #5
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	221f      	movs	r2, #31
 8008270:	4013      	ands	r3, r2
 8008272:	d102      	bne.n	800827a <HAL_PCD_EP_DB_Transmit+0x216>
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	3b01      	subs	r3, #1
 8008278:	62bb      	str	r3, [r7, #40]	; 0x28
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	b29b      	uxth	r3, r3
 800827e:	029b      	lsls	r3, r3, #10
 8008280:	b29b      	uxth	r3, r3
 8008282:	4a46      	ldr	r2, [pc, #280]	; (800839c <HAL_PCD_EP_DB_Transmit+0x338>)
 8008284:	4313      	orrs	r3, r2
 8008286:	b29a      	uxth	r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	e01c      	b.n	80082c8 <HAL_PCD_EP_DB_Transmit+0x264>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	785b      	ldrb	r3, [r3, #1]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d118      	bne.n	80082c8 <HAL_PCD_EP_DB_Transmit+0x264>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	623b      	str	r3, [r7, #32]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2250      	movs	r2, #80	; 0x50
 80082a2:	5a9b      	ldrh	r3, [r3, r2]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	001a      	movs	r2, r3
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	189b      	adds	r3, r3, r2
 80082ac:	623b      	str	r3, [r7, #32]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	00da      	lsls	r2, r3, #3
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	18d3      	adds	r3, r2, r3
 80082b8:	4a34      	ldr	r2, [pc, #208]	; (800838c <HAL_PCD_EP_DB_Transmit+0x328>)
 80082ba:	4694      	mov	ip, r2
 80082bc:	4463      	add	r3, ip
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6959      	ldr	r1, [r3, #20]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	891a      	ldrh	r2, [r3, #8]
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f004 fcfa 	bl	800ccd0 <USB_WritePMA>
 80082dc:	e13b      	b.n	8008556 <HAL_PCD_EP_DB_Transmit+0x4f2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2250      	movs	r2, #80	; 0x50
 80082e4:	5a9b      	ldrh	r3, [r3, r2]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	001a      	movs	r2, r3
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	18d2      	adds	r2, r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	18d3      	adds	r3, r2, r3
 80082f8:	4a29      	ldr	r2, [pc, #164]	; (80083a0 <HAL_PCD_EP_DB_Transmit+0x33c>)
 80082fa:	4694      	mov	ip, r2
 80082fc:	4463      	add	r3, ip
 80082fe:	881a      	ldrh	r2, [r3, #0]
 8008300:	212e      	movs	r1, #46	; 0x2e
 8008302:	187b      	adds	r3, r7, r1
 8008304:	0592      	lsls	r2, r2, #22
 8008306:	0d92      	lsrs	r2, r2, #22
 8008308:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	187b      	adds	r3, r7, r1
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d308      	bcc.n	8008328 <HAL_PCD_EP_DB_Transmit+0x2c4>
    {
      ep->xfer_len -= TxByteNbre;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	232e      	movs	r3, #46	; 0x2e
 800831c:	18fb      	adds	r3, r7, r3
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	1ad2      	subs	r2, r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	619a      	str	r2, [r3, #24]
 8008326:	e002      	b.n	800832e <HAL_PCD_EP_DB_Transmit+0x2ca>
    }
    else
    {
      ep->xfer_len = 0U;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2200      	movs	r2, #0
 800832c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d136      	bne.n	80083a4 <HAL_PCD_EP_DB_Transmit+0x340>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	0011      	movs	r1, r2
 800833e:	0018      	movs	r0, r3
 8008340:	f006 fcfa 	bl	800ed38 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008344:	1dbb      	adds	r3, r7, #6
 8008346:	881a      	ldrh	r2, [r3, #0]
 8008348:	2380      	movs	r3, #128	; 0x80
 800834a:	01db      	lsls	r3, r3, #7
 800834c:	4013      	ands	r3, r2
 800834e:	d000      	beq.n	8008352 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8008350:	e101      	b.n	8008556 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	001a      	movs	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	18d3      	adds	r3, r2, r3
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29a      	uxth	r2, r3
 8008364:	2026      	movs	r0, #38	; 0x26
 8008366:	183b      	adds	r3, r7, r0
 8008368:	4909      	ldr	r1, [pc, #36]	; (8008390 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800836a:	400a      	ands	r2, r1
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	001a      	movs	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	18d3      	adds	r3, r2, r3
 800837c:	183a      	adds	r2, r7, r0
 800837e:	8812      	ldrh	r2, [r2, #0]
 8008380:	4904      	ldr	r1, [pc, #16]	; (8008394 <HAL_PCD_EP_DB_Transmit+0x330>)
 8008382:	430a      	orrs	r2, r1
 8008384:	b292      	uxth	r2, r2
 8008386:	801a      	strh	r2, [r3, #0]
 8008388:	e0e5      	b.n	8008556 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	00000402 	.word	0x00000402
 8008390:	ffff8f8f 	.word	0xffff8f8f
 8008394:	ffffc080 	.word	0xffffc080
 8008398:	ffff83ff 	.word	0xffff83ff
 800839c:	ffff8000 	.word	0xffff8000
 80083a0:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80083a4:	1dbb      	adds	r3, r7, #6
 80083a6:	881a      	ldrh	r2, [r3, #0]
 80083a8:	2380      	movs	r3, #128	; 0x80
 80083aa:	01db      	lsls	r3, r3, #7
 80083ac:	4013      	ands	r3, r2
 80083ae:	d11a      	bne.n	80083e6 <HAL_PCD_EP_DB_Transmit+0x382>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	001a      	movs	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	18d3      	adds	r3, r2, r3
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	202c      	movs	r0, #44	; 0x2c
 80083c4:	183b      	adds	r3, r7, r0
 80083c6:	497a      	ldr	r1, [pc, #488]	; (80085b0 <HAL_PCD_EP_DB_Transmit+0x54c>)
 80083c8:	400a      	ands	r2, r1
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	001a      	movs	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	18d3      	adds	r3, r2, r3
 80083da:	183a      	adds	r2, r7, r0
 80083dc:	8812      	ldrh	r2, [r2, #0]
 80083de:	4975      	ldr	r1, [pc, #468]	; (80085b4 <HAL_PCD_EP_DB_Transmit+0x550>)
 80083e0:	430a      	orrs	r2, r1
 80083e2:	b292      	uxth	r2, r2
 80083e4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2224      	movs	r2, #36	; 0x24
 80083ea:	5c9b      	ldrb	r3, [r3, r2]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d000      	beq.n	80083f2 <HAL_PCD_EP_DB_Transmit+0x38e>
 80083f0:	e0b1      	b.n	8008556 <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	695a      	ldr	r2, [r3, #20]
 80083f6:	212e      	movs	r1, #46	; 0x2e
 80083f8:	187b      	adds	r3, r7, r1
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	18d2      	adds	r2, r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	69da      	ldr	r2, [r3, #28]
 8008406:	187b      	adds	r3, r7, r1
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	18d2      	adds	r2, r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	6a1a      	ldr	r2, [r3, #32]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	429a      	cmp	r2, r3
 800841a:	d309      	bcc.n	8008430 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = ep->maxpacket;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6a1a      	ldr	r2, [r3, #32]
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	621a      	str	r2, [r3, #32]
 800842e:	e016      	b.n	800845e <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else if (ep->xfer_len_db == 0U)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d108      	bne.n	800844a <HAL_PCD_EP_DB_Transmit+0x3e6>
        {
          len = TxByteNbre;
 8008438:	232e      	movs	r3, #46	; 0x2e
 800843a:	18fb      	adds	r3, r7, r3
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2224      	movs	r2, #36	; 0x24
 8008444:	2100      	movs	r1, #0
 8008446:	5499      	strb	r1, [r3, r2]
 8008448:	e009      	b.n	800845e <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else
        {
          len = ep->xfer_len_db;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2224      	movs	r2, #36	; 0x24
 800845a:	2100      	movs	r1, #0
 800845c:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	637b      	str	r3, [r7, #52]	; 0x34
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d150      	bne.n	800850e <HAL_PCD_EP_DB_Transmit+0x4aa>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	647b      	str	r3, [r7, #68]	; 0x44
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2250      	movs	r2, #80	; 0x50
 8008478:	5a9b      	ldrh	r3, [r3, r2]
 800847a:	b29b      	uxth	r3, r3
 800847c:	001a      	movs	r2, r3
 800847e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008480:	189b      	adds	r3, r3, r2
 8008482:	647b      	str	r3, [r7, #68]	; 0x44
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	00da      	lsls	r2, r3, #3
 800848a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848c:	18d3      	adds	r3, r2, r3
 800848e:	4a4a      	ldr	r2, [pc, #296]	; (80085b8 <HAL_PCD_EP_DB_Transmit+0x554>)
 8008490:	4694      	mov	ip, r2
 8008492:	4463      	add	r3, ip
 8008494:	643b      	str	r3, [r7, #64]	; 0x40
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	2b00      	cmp	r3, #0
 800849a:	d110      	bne.n	80084be <HAL_PCD_EP_DB_Transmit+0x45a>
 800849c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	4a46      	ldr	r2, [pc, #280]	; (80085bc <HAL_PCD_EP_DB_Transmit+0x558>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084aa:	801a      	strh	r2, [r3, #0]
 80084ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4a43      	ldr	r2, [pc, #268]	; (80085c0 <HAL_PCD_EP_DB_Transmit+0x55c>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e041      	b.n	8008542 <HAL_PCD_EP_DB_Transmit+0x4de>
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	2b3e      	cmp	r3, #62	; 0x3e
 80084c2:	d810      	bhi.n	80084e6 <HAL_PCD_EP_DB_Transmit+0x482>
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	2201      	movs	r2, #1
 80084ce:	4013      	ands	r3, r2
 80084d0:	d002      	beq.n	80084d8 <HAL_PCD_EP_DB_Transmit+0x474>
 80084d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d4:	3301      	adds	r3, #1
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084da:	b29b      	uxth	r3, r3
 80084dc:	029b      	lsls	r3, r3, #10
 80084de:	b29a      	uxth	r2, r3
 80084e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e2:	801a      	strh	r2, [r3, #0]
 80084e4:	e02d      	b.n	8008542 <HAL_PCD_EP_DB_Transmit+0x4de>
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	221f      	movs	r2, #31
 80084f0:	4013      	ands	r3, r2
 80084f2:	d102      	bne.n	80084fa <HAL_PCD_EP_DB_Transmit+0x496>
 80084f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f6:	3b01      	subs	r3, #1
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	029b      	lsls	r3, r3, #10
 8008500:	b29b      	uxth	r3, r3
 8008502:	4a2f      	ldr	r2, [pc, #188]	; (80085c0 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8008504:	4313      	orrs	r3, r2
 8008506:	b29a      	uxth	r2, r3
 8008508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850a:	801a      	strh	r2, [r3, #0]
 800850c:	e019      	b.n	8008542 <HAL_PCD_EP_DB_Transmit+0x4de>
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d115      	bne.n	8008542 <HAL_PCD_EP_DB_Transmit+0x4de>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2250      	movs	r2, #80	; 0x50
 800851c:	5a9b      	ldrh	r3, [r3, r2]
 800851e:	b29b      	uxth	r3, r3
 8008520:	001a      	movs	r2, r3
 8008522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008524:	189b      	adds	r3, r3, r2
 8008526:	637b      	str	r3, [r7, #52]	; 0x34
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	00da      	lsls	r2, r3, #3
 800852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008530:	18d3      	adds	r3, r2, r3
 8008532:	4a21      	ldr	r2, [pc, #132]	; (80085b8 <HAL_PCD_EP_DB_Transmit+0x554>)
 8008534:	4694      	mov	ip, r2
 8008536:	4463      	add	r3, ip
 8008538:	633b      	str	r3, [r7, #48]	; 0x30
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	b29a      	uxth	r2, r3
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6959      	ldr	r1, [r3, #20]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	895a      	ldrh	r2, [r3, #10]
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	b29b      	uxth	r3, r3
 8008552:	f004 fbbd 	bl	800ccd0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	001a      	movs	r2, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	18d3      	adds	r3, r2, r3
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29a      	uxth	r2, r3
 8008568:	2010      	movs	r0, #16
 800856a:	183b      	adds	r3, r7, r0
 800856c:	4915      	ldr	r1, [pc, #84]	; (80085c4 <HAL_PCD_EP_DB_Transmit+0x560>)
 800856e:	400a      	ands	r2, r1
 8008570:	801a      	strh	r2, [r3, #0]
 8008572:	183b      	adds	r3, r7, r0
 8008574:	183a      	adds	r2, r7, r0
 8008576:	8812      	ldrh	r2, [r2, #0]
 8008578:	2110      	movs	r1, #16
 800857a:	404a      	eors	r2, r1
 800857c:	801a      	strh	r2, [r3, #0]
 800857e:	183b      	adds	r3, r7, r0
 8008580:	183a      	adds	r2, r7, r0
 8008582:	8812      	ldrh	r2, [r2, #0]
 8008584:	2120      	movs	r1, #32
 8008586:	404a      	eors	r2, r1
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	001a      	movs	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	18d3      	adds	r3, r2, r3
 8008598:	183a      	adds	r2, r7, r0
 800859a:	8812      	ldrh	r2, [r2, #0]
 800859c:	490a      	ldr	r1, [pc, #40]	; (80085c8 <HAL_PCD_EP_DB_Transmit+0x564>)
 800859e:	430a      	orrs	r2, r1
 80085a0:	b292      	uxth	r2, r2
 80085a2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	0018      	movs	r0, r3
 80085a8:	46bd      	mov	sp, r7
 80085aa:	b012      	add	sp, #72	; 0x48
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	ffff8f8f 	.word	0xffff8f8f
 80085b4:	ffffc080 	.word	0xffffc080
 80085b8:	00000406 	.word	0x00000406
 80085bc:	ffff83ff 	.word	0xffff83ff
 80085c0:	ffff8000 	.word	0xffff8000
 80085c4:	ffff8fbf 	.word	0xffff8fbf
 80085c8:	ffff8080 	.word	0xffff8080

080085cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80085cc:	b590      	push	{r4, r7, lr}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	0008      	movs	r0, r1
 80085d6:	0011      	movs	r1, r2
 80085d8:	607b      	str	r3, [r7, #4]
 80085da:	240a      	movs	r4, #10
 80085dc:	193b      	adds	r3, r7, r4
 80085de:	1c02      	adds	r2, r0, #0
 80085e0:	801a      	strh	r2, [r3, #0]
 80085e2:	2308      	movs	r3, #8
 80085e4:	18fb      	adds	r3, r7, r3
 80085e6:	1c0a      	adds	r2, r1, #0
 80085e8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80085ea:	193b      	adds	r3, r7, r4
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	2280      	movs	r2, #128	; 0x80
 80085f0:	4013      	ands	r3, r2
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00d      	beq.n	8008614 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085f8:	230a      	movs	r3, #10
 80085fa:	18fb      	adds	r3, r7, r3
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	2207      	movs	r2, #7
 8008600:	4013      	ands	r3, r2
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	0013      	movs	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	189b      	adds	r3, r3, r2
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	18d3      	adds	r3, r2, r3
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	e00b      	b.n	800862c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008614:	230a      	movs	r3, #10
 8008616:	18fb      	adds	r3, r7, r3
 8008618:	881a      	ldrh	r2, [r3, #0]
 800861a:	0013      	movs	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	189b      	adds	r3, r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	3369      	adds	r3, #105	; 0x69
 8008624:	33ff      	adds	r3, #255	; 0xff
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	18d3      	adds	r3, r2, r3
 800862a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800862c:	2308      	movs	r3, #8
 800862e:	18fb      	adds	r3, r7, r3
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2200      	movs	r2, #0
 800863a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	b29a      	uxth	r2, r3
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	80da      	strh	r2, [r3, #6]
 8008644:	e00b      	b.n	800865e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2201      	movs	r2, #1
 800864a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	b29a      	uxth	r2, r3
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	b29a      	uxth	r2, r3
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	0018      	movs	r0, r3
 8008662:	46bd      	mov	sp, r7
 8008664:	b007      	add	sp, #28
 8008666:	bd90      	pop	{r4, r7, pc}

08008668 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	23ba      	movs	r3, #186	; 0xba
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	2101      	movs	r1, #1
 800867e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	23b8      	movs	r3, #184	; 0xb8
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	2100      	movs	r1, #0
 8008688:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2254      	movs	r2, #84	; 0x54
 800868e:	5a9b      	ldrh	r3, [r3, r2]
 8008690:	b29b      	uxth	r3, r3
 8008692:	2201      	movs	r2, #1
 8008694:	4313      	orrs	r3, r2
 8008696:	b299      	uxth	r1, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2254      	movs	r2, #84	; 0x54
 800869c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2254      	movs	r2, #84	; 0x54
 80086a2:	5a9b      	ldrh	r3, [r3, r2]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2202      	movs	r2, #2
 80086a8:	4313      	orrs	r3, r2
 80086aa:	b299      	uxth	r1, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2254      	movs	r2, #84	; 0x54
 80086b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	0018      	movs	r0, r3
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b004      	add	sp, #16
 80086ba:	bd80      	pop	{r7, pc}

080086bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	000a      	movs	r2, r1
 80086c6:	1cfb      	adds	r3, r7, #3
 80086c8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b002      	add	sp, #8
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f000 fb76 	bl	8008dd4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2201      	movs	r2, #1
 80086ee:	4013      	ands	r3, r2
 80086f0:	d100      	bne.n	80086f4 <HAL_RCC_OscConfig+0x20>
 80086f2:	e08e      	b.n	8008812 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80086f4:	4bc5      	ldr	r3, [pc, #788]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	220c      	movs	r2, #12
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	d00e      	beq.n	800871e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008700:	4bc2      	ldr	r3, [pc, #776]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	220c      	movs	r2, #12
 8008706:	4013      	ands	r3, r2
 8008708:	2b08      	cmp	r3, #8
 800870a:	d117      	bne.n	800873c <HAL_RCC_OscConfig+0x68>
 800870c:	4bbf      	ldr	r3, [pc, #764]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	23c0      	movs	r3, #192	; 0xc0
 8008712:	025b      	lsls	r3, r3, #9
 8008714:	401a      	ands	r2, r3
 8008716:	2380      	movs	r3, #128	; 0x80
 8008718:	025b      	lsls	r3, r3, #9
 800871a:	429a      	cmp	r2, r3
 800871c:	d10e      	bne.n	800873c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800871e:	4bbb      	ldr	r3, [pc, #748]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	2380      	movs	r3, #128	; 0x80
 8008724:	029b      	lsls	r3, r3, #10
 8008726:	4013      	ands	r3, r2
 8008728:	d100      	bne.n	800872c <HAL_RCC_OscConfig+0x58>
 800872a:	e071      	b.n	8008810 <HAL_RCC_OscConfig+0x13c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d000      	beq.n	8008736 <HAL_RCC_OscConfig+0x62>
 8008734:	e06c      	b.n	8008810 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	f000 fb4c 	bl	8008dd4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d107      	bne.n	8008754 <HAL_RCC_OscConfig+0x80>
 8008744:	4bb1      	ldr	r3, [pc, #708]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4bb0      	ldr	r3, [pc, #704]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800874a:	2180      	movs	r1, #128	; 0x80
 800874c:	0249      	lsls	r1, r1, #9
 800874e:	430a      	orrs	r2, r1
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e02f      	b.n	80087b4 <HAL_RCC_OscConfig+0xe0>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10c      	bne.n	8008776 <HAL_RCC_OscConfig+0xa2>
 800875c:	4bab      	ldr	r3, [pc, #684]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4baa      	ldr	r3, [pc, #680]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008762:	49ab      	ldr	r1, [pc, #684]	; (8008a10 <HAL_RCC_OscConfig+0x33c>)
 8008764:	400a      	ands	r2, r1
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	4ba8      	ldr	r3, [pc, #672]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4ba7      	ldr	r3, [pc, #668]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800876e:	49a9      	ldr	r1, [pc, #676]	; (8008a14 <HAL_RCC_OscConfig+0x340>)
 8008770:	400a      	ands	r2, r1
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e01e      	b.n	80087b4 <HAL_RCC_OscConfig+0xe0>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b05      	cmp	r3, #5
 800877c:	d10e      	bne.n	800879c <HAL_RCC_OscConfig+0xc8>
 800877e:	4ba3      	ldr	r3, [pc, #652]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4ba2      	ldr	r3, [pc, #648]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008784:	2180      	movs	r1, #128	; 0x80
 8008786:	02c9      	lsls	r1, r1, #11
 8008788:	430a      	orrs	r2, r1
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	4b9f      	ldr	r3, [pc, #636]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	4b9e      	ldr	r3, [pc, #632]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008792:	2180      	movs	r1, #128	; 0x80
 8008794:	0249      	lsls	r1, r1, #9
 8008796:	430a      	orrs	r2, r1
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	e00b      	b.n	80087b4 <HAL_RCC_OscConfig+0xe0>
 800879c:	4b9b      	ldr	r3, [pc, #620]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	4b9a      	ldr	r3, [pc, #616]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80087a2:	499b      	ldr	r1, [pc, #620]	; (8008a10 <HAL_RCC_OscConfig+0x33c>)
 80087a4:	400a      	ands	r2, r1
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	4b98      	ldr	r3, [pc, #608]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b97      	ldr	r3, [pc, #604]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80087ae:	4999      	ldr	r1, [pc, #612]	; (8008a14 <HAL_RCC_OscConfig+0x340>)
 80087b0:	400a      	ands	r2, r1
 80087b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d014      	beq.n	80087e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087bc:	f7fa ff06 	bl	80035cc <HAL_GetTick>
 80087c0:	0003      	movs	r3, r0
 80087c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087c4:	e008      	b.n	80087d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087c6:	f7fa ff01 	bl	80035cc <HAL_GetTick>
 80087ca:	0002      	movs	r2, r0
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b64      	cmp	r3, #100	; 0x64
 80087d2:	d901      	bls.n	80087d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e2fd      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087d8:	4b8c      	ldr	r3, [pc, #560]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	2380      	movs	r3, #128	; 0x80
 80087de:	029b      	lsls	r3, r3, #10
 80087e0:	4013      	ands	r3, r2
 80087e2:	d0f0      	beq.n	80087c6 <HAL_RCC_OscConfig+0xf2>
 80087e4:	e015      	b.n	8008812 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e6:	f7fa fef1 	bl	80035cc <HAL_GetTick>
 80087ea:	0003      	movs	r3, r0
 80087ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087f0:	f7fa feec 	bl	80035cc <HAL_GetTick>
 80087f4:	0002      	movs	r2, r0
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b64      	cmp	r3, #100	; 0x64
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e2e8      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008802:	4b82      	ldr	r3, [pc, #520]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	2380      	movs	r3, #128	; 0x80
 8008808:	029b      	lsls	r3, r3, #10
 800880a:	4013      	ands	r3, r2
 800880c:	d1f0      	bne.n	80087f0 <HAL_RCC_OscConfig+0x11c>
 800880e:	e000      	b.n	8008812 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008810:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2202      	movs	r2, #2
 8008818:	4013      	ands	r3, r2
 800881a:	d100      	bne.n	800881e <HAL_RCC_OscConfig+0x14a>
 800881c:	e06c      	b.n	80088f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800881e:	4b7b      	ldr	r3, [pc, #492]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	220c      	movs	r2, #12
 8008824:	4013      	ands	r3, r2
 8008826:	d00e      	beq.n	8008846 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008828:	4b78      	ldr	r3, [pc, #480]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	220c      	movs	r2, #12
 800882e:	4013      	ands	r3, r2
 8008830:	2b08      	cmp	r3, #8
 8008832:	d11f      	bne.n	8008874 <HAL_RCC_OscConfig+0x1a0>
 8008834:	4b75      	ldr	r3, [pc, #468]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	23c0      	movs	r3, #192	; 0xc0
 800883a:	025b      	lsls	r3, r3, #9
 800883c:	401a      	ands	r2, r3
 800883e:	2380      	movs	r3, #128	; 0x80
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	429a      	cmp	r2, r3
 8008844:	d116      	bne.n	8008874 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008846:	4b71      	ldr	r3, [pc, #452]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2202      	movs	r2, #2
 800884c:	4013      	ands	r3, r2
 800884e:	d005      	beq.n	800885c <HAL_RCC_OscConfig+0x188>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d001      	beq.n	800885c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e2bb      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800885c:	4b6b      	ldr	r3, [pc, #428]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	22f8      	movs	r2, #248	; 0xf8
 8008862:	4393      	bics	r3, r2
 8008864:	0019      	movs	r1, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	00da      	lsls	r2, r3, #3
 800886c:	4b67      	ldr	r3, [pc, #412]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800886e:	430a      	orrs	r2, r1
 8008870:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008872:	e041      	b.n	80088f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d024      	beq.n	80088c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800887c:	4b63      	ldr	r3, [pc, #396]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	4b62      	ldr	r3, [pc, #392]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008882:	2101      	movs	r1, #1
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008888:	f7fa fea0 	bl	80035cc <HAL_GetTick>
 800888c:	0003      	movs	r3, r0
 800888e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008892:	f7fa fe9b 	bl	80035cc <HAL_GetTick>
 8008896:	0002      	movs	r2, r0
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e297      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088a4:	4b59      	ldr	r3, [pc, #356]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2202      	movs	r2, #2
 80088aa:	4013      	ands	r3, r2
 80088ac:	d0f1      	beq.n	8008892 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ae:	4b57      	ldr	r3, [pc, #348]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	22f8      	movs	r2, #248	; 0xf8
 80088b4:	4393      	bics	r3, r2
 80088b6:	0019      	movs	r1, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	00da      	lsls	r2, r3, #3
 80088be:	4b53      	ldr	r3, [pc, #332]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80088c0:	430a      	orrs	r2, r1
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e018      	b.n	80088f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088c6:	4b51      	ldr	r3, [pc, #324]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b50      	ldr	r3, [pc, #320]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80088cc:	2101      	movs	r1, #1
 80088ce:	438a      	bics	r2, r1
 80088d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d2:	f7fa fe7b 	bl	80035cc <HAL_GetTick>
 80088d6:	0003      	movs	r3, r0
 80088d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088dc:	f7fa fe76 	bl	80035cc <HAL_GetTick>
 80088e0:	0002      	movs	r2, r0
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e272      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ee:	4b47      	ldr	r3, [pc, #284]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2202      	movs	r2, #2
 80088f4:	4013      	ands	r3, r2
 80088f6:	d1f1      	bne.n	80088dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2208      	movs	r2, #8
 80088fe:	4013      	ands	r3, r2
 8008900:	d036      	beq.n	8008970 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d019      	beq.n	800893e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800890a:	4b40      	ldr	r3, [pc, #256]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 800890c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800890e:	4b3f      	ldr	r3, [pc, #252]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008910:	2101      	movs	r1, #1
 8008912:	430a      	orrs	r2, r1
 8008914:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008916:	f7fa fe59 	bl	80035cc <HAL_GetTick>
 800891a:	0003      	movs	r3, r0
 800891c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800891e:	e008      	b.n	8008932 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008920:	f7fa fe54 	bl	80035cc <HAL_GetTick>
 8008924:	0002      	movs	r2, r0
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e250      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008932:	4b36      	ldr	r3, [pc, #216]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	2202      	movs	r2, #2
 8008938:	4013      	ands	r3, r2
 800893a:	d0f1      	beq.n	8008920 <HAL_RCC_OscConfig+0x24c>
 800893c:	e018      	b.n	8008970 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800893e:	4b33      	ldr	r3, [pc, #204]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008942:	4b32      	ldr	r3, [pc, #200]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008944:	2101      	movs	r1, #1
 8008946:	438a      	bics	r2, r1
 8008948:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800894a:	f7fa fe3f 	bl	80035cc <HAL_GetTick>
 800894e:	0003      	movs	r3, r0
 8008950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008952:	e008      	b.n	8008966 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008954:	f7fa fe3a 	bl	80035cc <HAL_GetTick>
 8008958:	0002      	movs	r2, r0
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e236      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008966:	4b29      	ldr	r3, [pc, #164]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	2202      	movs	r2, #2
 800896c:	4013      	ands	r3, r2
 800896e:	d1f1      	bne.n	8008954 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2204      	movs	r2, #4
 8008976:	4013      	ands	r3, r2
 8008978:	d100      	bne.n	800897c <HAL_RCC_OscConfig+0x2a8>
 800897a:	e0b5      	b.n	8008ae8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800897c:	231f      	movs	r3, #31
 800897e:	18fb      	adds	r3, r7, r3
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008984:	4b21      	ldr	r3, [pc, #132]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008986:	69da      	ldr	r2, [r3, #28]
 8008988:	2380      	movs	r3, #128	; 0x80
 800898a:	055b      	lsls	r3, r3, #21
 800898c:	4013      	ands	r3, r2
 800898e:	d111      	bne.n	80089b4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008990:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008996:	2180      	movs	r1, #128	; 0x80
 8008998:	0549      	lsls	r1, r1, #21
 800899a:	430a      	orrs	r2, r1
 800899c:	61da      	str	r2, [r3, #28]
 800899e:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 80089a0:	69da      	ldr	r2, [r3, #28]
 80089a2:	2380      	movs	r3, #128	; 0x80
 80089a4:	055b      	lsls	r3, r3, #21
 80089a6:	4013      	ands	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80089ac:	231f      	movs	r3, #31
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	2201      	movs	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089b4:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <HAL_RCC_OscConfig+0x344>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	2380      	movs	r3, #128	; 0x80
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	4013      	ands	r3, r2
 80089be:	d11a      	bne.n	80089f6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089c0:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <HAL_RCC_OscConfig+0x344>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <HAL_RCC_OscConfig+0x344>)
 80089c6:	2180      	movs	r1, #128	; 0x80
 80089c8:	0049      	lsls	r1, r1, #1
 80089ca:	430a      	orrs	r2, r1
 80089cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ce:	f7fa fdfd 	bl	80035cc <HAL_GetTick>
 80089d2:	0003      	movs	r3, r0
 80089d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089d8:	f7fa fdf8 	bl	80035cc <HAL_GetTick>
 80089dc:	0002      	movs	r2, r0
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b64      	cmp	r3, #100	; 0x64
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e1f4      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <HAL_RCC_OscConfig+0x344>)
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	2380      	movs	r3, #128	; 0x80
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	4013      	ands	r3, r2
 80089f4:	d0f0      	beq.n	80089d8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d10e      	bne.n	8008a1c <HAL_RCC_OscConfig+0x348>
 80089fe:	4b03      	ldr	r3, [pc, #12]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008a00:	6a1a      	ldr	r2, [r3, #32]
 8008a02:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <HAL_RCC_OscConfig+0x338>)
 8008a04:	2101      	movs	r1, #1
 8008a06:	430a      	orrs	r2, r1
 8008a08:	621a      	str	r2, [r3, #32]
 8008a0a:	e035      	b.n	8008a78 <HAL_RCC_OscConfig+0x3a4>
 8008a0c:	40021000 	.word	0x40021000
 8008a10:	fffeffff 	.word	0xfffeffff
 8008a14:	fffbffff 	.word	0xfffbffff
 8008a18:	40007000 	.word	0x40007000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10c      	bne.n	8008a3e <HAL_RCC_OscConfig+0x36a>
 8008a24:	4bca      	ldr	r3, [pc, #808]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a26:	6a1a      	ldr	r2, [r3, #32]
 8008a28:	4bc9      	ldr	r3, [pc, #804]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	438a      	bics	r2, r1
 8008a2e:	621a      	str	r2, [r3, #32]
 8008a30:	4bc7      	ldr	r3, [pc, #796]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	4bc6      	ldr	r3, [pc, #792]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a36:	2104      	movs	r1, #4
 8008a38:	438a      	bics	r2, r1
 8008a3a:	621a      	str	r2, [r3, #32]
 8008a3c:	e01c      	b.n	8008a78 <HAL_RCC_OscConfig+0x3a4>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	2b05      	cmp	r3, #5
 8008a44:	d10c      	bne.n	8008a60 <HAL_RCC_OscConfig+0x38c>
 8008a46:	4bc2      	ldr	r3, [pc, #776]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a48:	6a1a      	ldr	r2, [r3, #32]
 8008a4a:	4bc1      	ldr	r3, [pc, #772]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a4c:	2104      	movs	r1, #4
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	621a      	str	r2, [r3, #32]
 8008a52:	4bbf      	ldr	r3, [pc, #764]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a54:	6a1a      	ldr	r2, [r3, #32]
 8008a56:	4bbe      	ldr	r3, [pc, #760]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a58:	2101      	movs	r1, #1
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	621a      	str	r2, [r3, #32]
 8008a5e:	e00b      	b.n	8008a78 <HAL_RCC_OscConfig+0x3a4>
 8008a60:	4bbb      	ldr	r3, [pc, #748]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a62:	6a1a      	ldr	r2, [r3, #32]
 8008a64:	4bba      	ldr	r3, [pc, #744]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a66:	2101      	movs	r1, #1
 8008a68:	438a      	bics	r2, r1
 8008a6a:	621a      	str	r2, [r3, #32]
 8008a6c:	4bb8      	ldr	r3, [pc, #736]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a6e:	6a1a      	ldr	r2, [r3, #32]
 8008a70:	4bb7      	ldr	r3, [pc, #732]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008a72:	2104      	movs	r1, #4
 8008a74:	438a      	bics	r2, r1
 8008a76:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d014      	beq.n	8008aaa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a80:	f7fa fda4 	bl	80035cc <HAL_GetTick>
 8008a84:	0003      	movs	r3, r0
 8008a86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a88:	e009      	b.n	8008a9e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a8a:	f7fa fd9f 	bl	80035cc <HAL_GetTick>
 8008a8e:	0002      	movs	r2, r0
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	4aaf      	ldr	r2, [pc, #700]	; (8008d54 <HAL_RCC_OscConfig+0x680>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e19a      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a9e:	4bac      	ldr	r3, [pc, #688]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	d0f0      	beq.n	8008a8a <HAL_RCC_OscConfig+0x3b6>
 8008aa8:	e013      	b.n	8008ad2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aaa:	f7fa fd8f 	bl	80035cc <HAL_GetTick>
 8008aae:	0003      	movs	r3, r0
 8008ab0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ab2:	e009      	b.n	8008ac8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ab4:	f7fa fd8a 	bl	80035cc <HAL_GetTick>
 8008ab8:	0002      	movs	r2, r0
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	4aa5      	ldr	r2, [pc, #660]	; (8008d54 <HAL_RCC_OscConfig+0x680>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e185      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ac8:	4ba1      	ldr	r3, [pc, #644]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008aca:	6a1b      	ldr	r3, [r3, #32]
 8008acc:	2202      	movs	r2, #2
 8008ace:	4013      	ands	r3, r2
 8008ad0:	d1f0      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ad2:	231f      	movs	r3, #31
 8008ad4:	18fb      	adds	r3, r7, r3
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d105      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008adc:	4b9c      	ldr	r3, [pc, #624]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008ade:	69da      	ldr	r2, [r3, #28]
 8008ae0:	4b9b      	ldr	r3, [pc, #620]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008ae2:	499d      	ldr	r1, [pc, #628]	; (8008d58 <HAL_RCC_OscConfig+0x684>)
 8008ae4:	400a      	ands	r2, r1
 8008ae6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2210      	movs	r2, #16
 8008aee:	4013      	ands	r3, r2
 8008af0:	d063      	beq.n	8008bba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d12a      	bne.n	8008b50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008afa:	4b95      	ldr	r3, [pc, #596]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008afe:	4b94      	ldr	r3, [pc, #592]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b00:	2104      	movs	r1, #4
 8008b02:	430a      	orrs	r2, r1
 8008b04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8008b06:	4b92      	ldr	r3, [pc, #584]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b0a:	4b91      	ldr	r3, [pc, #580]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b12:	f7fa fd5b 	bl	80035cc <HAL_GetTick>
 8008b16:	0003      	movs	r3, r0
 8008b18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008b1a:	e008      	b.n	8008b2e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008b1c:	f7fa fd56 	bl	80035cc <HAL_GetTick>
 8008b20:	0002      	movs	r2, r0
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e152      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008b2e:	4b88      	ldr	r3, [pc, #544]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b32:	2202      	movs	r2, #2
 8008b34:	4013      	ands	r3, r2
 8008b36:	d0f1      	beq.n	8008b1c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008b38:	4b85      	ldr	r3, [pc, #532]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	22f8      	movs	r2, #248	; 0xf8
 8008b3e:	4393      	bics	r3, r2
 8008b40:	0019      	movs	r1, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	00da      	lsls	r2, r3, #3
 8008b48:	4b81      	ldr	r3, [pc, #516]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8008b4e:	e034      	b.n	8008bba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	3305      	adds	r3, #5
 8008b56:	d111      	bne.n	8008b7c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8008b58:	4b7d      	ldr	r3, [pc, #500]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b5c:	4b7c      	ldr	r3, [pc, #496]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b5e:	2104      	movs	r1, #4
 8008b60:	438a      	bics	r2, r1
 8008b62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008b64:	4b7a      	ldr	r3, [pc, #488]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b68:	22f8      	movs	r2, #248	; 0xf8
 8008b6a:	4393      	bics	r3, r2
 8008b6c:	0019      	movs	r1, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	00da      	lsls	r2, r3, #3
 8008b74:	4b76      	ldr	r3, [pc, #472]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b76:	430a      	orrs	r2, r1
 8008b78:	635a      	str	r2, [r3, #52]	; 0x34
 8008b7a:	e01e      	b.n	8008bba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008b7c:	4b74      	ldr	r3, [pc, #464]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b80:	4b73      	ldr	r3, [pc, #460]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b82:	2104      	movs	r1, #4
 8008b84:	430a      	orrs	r2, r1
 8008b86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8008b88:	4b71      	ldr	r3, [pc, #452]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b8c:	4b70      	ldr	r3, [pc, #448]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008b8e:	2101      	movs	r1, #1
 8008b90:	438a      	bics	r2, r1
 8008b92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b94:	f7fa fd1a 	bl	80035cc <HAL_GetTick>
 8008b98:	0003      	movs	r3, r0
 8008b9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008b9c:	e008      	b.n	8008bb0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008b9e:	f7fa fd15 	bl	80035cc <HAL_GetTick>
 8008ba2:	0002      	movs	r2, r0
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d901      	bls.n	8008bb0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e111      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008bb0:	4b67      	ldr	r3, [pc, #412]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	d1f1      	bne.n	8008b9e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	d05c      	beq.n	8008c7e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008bc4:	4b62      	ldr	r3, [pc, #392]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	220c      	movs	r2, #12
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b0c      	cmp	r3, #12
 8008bce:	d00e      	beq.n	8008bee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008bd0:	4b5f      	ldr	r3, [pc, #380]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	220c      	movs	r2, #12
 8008bd6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d114      	bne.n	8008c06 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008bdc:	4b5c      	ldr	r3, [pc, #368]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	23c0      	movs	r3, #192	; 0xc0
 8008be2:	025b      	lsls	r3, r3, #9
 8008be4:	401a      	ands	r2, r3
 8008be6:	23c0      	movs	r3, #192	; 0xc0
 8008be8:	025b      	lsls	r3, r3, #9
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d10b      	bne.n	8008c06 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008bee:	4b58      	ldr	r3, [pc, #352]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bf2:	2380      	movs	r3, #128	; 0x80
 8008bf4:	025b      	lsls	r3, r3, #9
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	d040      	beq.n	8008c7c <HAL_RCC_OscConfig+0x5a8>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d03c      	beq.n	8008c7c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e0e6      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d01b      	beq.n	8008c46 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008c0e:	4b50      	ldr	r3, [pc, #320]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c12:	4b4f      	ldr	r3, [pc, #316]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008c14:	2180      	movs	r1, #128	; 0x80
 8008c16:	0249      	lsls	r1, r1, #9
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c1c:	f7fa fcd6 	bl	80035cc <HAL_GetTick>
 8008c20:	0003      	movs	r3, r0
 8008c22:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008c24:	e008      	b.n	8008c38 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c26:	f7fa fcd1 	bl	80035cc <HAL_GetTick>
 8008c2a:	0002      	movs	r2, r0
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d901      	bls.n	8008c38 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e0cd      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008c38:	4b45      	ldr	r3, [pc, #276]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c3c:	2380      	movs	r3, #128	; 0x80
 8008c3e:	025b      	lsls	r3, r3, #9
 8008c40:	4013      	ands	r3, r2
 8008c42:	d0f0      	beq.n	8008c26 <HAL_RCC_OscConfig+0x552>
 8008c44:	e01b      	b.n	8008c7e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008c46:	4b42      	ldr	r3, [pc, #264]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c4a:	4b41      	ldr	r3, [pc, #260]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008c4c:	4943      	ldr	r1, [pc, #268]	; (8008d5c <HAL_RCC_OscConfig+0x688>)
 8008c4e:	400a      	ands	r2, r1
 8008c50:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c52:	f7fa fcbb 	bl	80035cc <HAL_GetTick>
 8008c56:	0003      	movs	r3, r0
 8008c58:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c5c:	f7fa fcb6 	bl	80035cc <HAL_GetTick>
 8008c60:	0002      	movs	r2, r0
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e0b2      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008c6e:	4b38      	ldr	r3, [pc, #224]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c72:	2380      	movs	r3, #128	; 0x80
 8008c74:	025b      	lsls	r3, r3, #9
 8008c76:	4013      	ands	r3, r2
 8008c78:	d1f0      	bne.n	8008c5c <HAL_RCC_OscConfig+0x588>
 8008c7a:	e000      	b.n	8008c7e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008c7c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d100      	bne.n	8008c88 <HAL_RCC_OscConfig+0x5b4>
 8008c86:	e0a4      	b.n	8008dd2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c88:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	220c      	movs	r2, #12
 8008c8e:	4013      	ands	r3, r2
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d100      	bne.n	8008c96 <HAL_RCC_OscConfig+0x5c2>
 8008c94:	e078      	b.n	8008d88 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d14c      	bne.n	8008d38 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c9e:	4b2c      	ldr	r3, [pc, #176]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	4b2b      	ldr	r3, [pc, #172]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008ca4:	492e      	ldr	r1, [pc, #184]	; (8008d60 <HAL_RCC_OscConfig+0x68c>)
 8008ca6:	400a      	ands	r2, r1
 8008ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008caa:	f7fa fc8f 	bl	80035cc <HAL_GetTick>
 8008cae:	0003      	movs	r3, r0
 8008cb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cb4:	f7fa fc8a 	bl	80035cc <HAL_GetTick>
 8008cb8:	0002      	movs	r2, r0
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e086      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cc6:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	2380      	movs	r3, #128	; 0x80
 8008ccc:	049b      	lsls	r3, r3, #18
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cd2:	4b1f      	ldr	r3, [pc, #124]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	220f      	movs	r2, #15
 8008cd8:	4393      	bics	r3, r2
 8008cda:	0019      	movs	r1, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ce0:	4b1b      	ldr	r3, [pc, #108]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ce6:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	4a1e      	ldr	r2, [pc, #120]	; (8008d64 <HAL_RCC_OscConfig+0x690>)
 8008cec:	4013      	ands	r3, r2
 8008cee:	0019      	movs	r1, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d00:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008d06:	2180      	movs	r1, #128	; 0x80
 8008d08:	0449      	lsls	r1, r1, #17
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d0e:	f7fa fc5d 	bl	80035cc <HAL_GetTick>
 8008d12:	0003      	movs	r3, r0
 8008d14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d16:	e008      	b.n	8008d2a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d18:	f7fa fc58 	bl	80035cc <HAL_GetTick>
 8008d1c:	0002      	movs	r2, r0
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e054      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d2a:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	2380      	movs	r3, #128	; 0x80
 8008d30:	049b      	lsls	r3, r3, #18
 8008d32:	4013      	ands	r3, r2
 8008d34:	d0f0      	beq.n	8008d18 <HAL_RCC_OscConfig+0x644>
 8008d36:	e04c      	b.n	8008dd2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <HAL_RCC_OscConfig+0x67c>)
 8008d3e:	4908      	ldr	r1, [pc, #32]	; (8008d60 <HAL_RCC_OscConfig+0x68c>)
 8008d40:	400a      	ands	r2, r1
 8008d42:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d44:	f7fa fc42 	bl	80035cc <HAL_GetTick>
 8008d48:	0003      	movs	r3, r0
 8008d4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d4c:	e015      	b.n	8008d7a <HAL_RCC_OscConfig+0x6a6>
 8008d4e:	46c0      	nop			; (mov r8, r8)
 8008d50:	40021000 	.word	0x40021000
 8008d54:	00001388 	.word	0x00001388
 8008d58:	efffffff 	.word	0xefffffff
 8008d5c:	fffeffff 	.word	0xfffeffff
 8008d60:	feffffff 	.word	0xfeffffff
 8008d64:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d68:	f7fa fc30 	bl	80035cc <HAL_GetTick>
 8008d6c:	0002      	movs	r2, r0
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e02c      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d7a:	4b18      	ldr	r3, [pc, #96]	; (8008ddc <HAL_RCC_OscConfig+0x708>)
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	2380      	movs	r3, #128	; 0x80
 8008d80:	049b      	lsls	r3, r3, #18
 8008d82:	4013      	ands	r3, r2
 8008d84:	d1f0      	bne.n	8008d68 <HAL_RCC_OscConfig+0x694>
 8008d86:	e024      	b.n	8008dd2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d101      	bne.n	8008d94 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e01f      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8008d94:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <HAL_RCC_OscConfig+0x708>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8008d9a:	4b10      	ldr	r3, [pc, #64]	; (8008ddc <HAL_RCC_OscConfig+0x708>)
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	23c0      	movs	r3, #192	; 0xc0
 8008da4:	025b      	lsls	r3, r3, #9
 8008da6:	401a      	ands	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d10e      	bne.n	8008dce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	220f      	movs	r2, #15
 8008db4:	401a      	ands	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d107      	bne.n	8008dce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	23f0      	movs	r3, #240	; 0xf0
 8008dc2:	039b      	lsls	r3, r3, #14
 8008dc4:	401a      	ands	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d001      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	b008      	add	sp, #32
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	40021000 	.word	0x40021000

08008de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e0bf      	b.n	8008f74 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008df4:	4b61      	ldr	r3, [pc, #388]	; (8008f7c <HAL_RCC_ClockConfig+0x19c>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d911      	bls.n	8008e26 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e02:	4b5e      	ldr	r3, [pc, #376]	; (8008f7c <HAL_RCC_ClockConfig+0x19c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2201      	movs	r2, #1
 8008e08:	4393      	bics	r3, r2
 8008e0a:	0019      	movs	r1, r3
 8008e0c:	4b5b      	ldr	r3, [pc, #364]	; (8008f7c <HAL_RCC_ClockConfig+0x19c>)
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e14:	4b59      	ldr	r3, [pc, #356]	; (8008f7c <HAL_RCC_ClockConfig+0x19c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d001      	beq.n	8008e26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e0a6      	b.n	8008f74 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	d015      	beq.n	8008e5c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2204      	movs	r2, #4
 8008e36:	4013      	ands	r3, r2
 8008e38:	d006      	beq.n	8008e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008e3a:	4b51      	ldr	r3, [pc, #324]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	4b50      	ldr	r3, [pc, #320]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008e40:	21e0      	movs	r1, #224	; 0xe0
 8008e42:	00c9      	lsls	r1, r1, #3
 8008e44:	430a      	orrs	r2, r1
 8008e46:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e48:	4b4d      	ldr	r3, [pc, #308]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	22f0      	movs	r2, #240	; 0xf0
 8008e4e:	4393      	bics	r3, r2
 8008e50:	0019      	movs	r1, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	4b4a      	ldr	r3, [pc, #296]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2201      	movs	r2, #1
 8008e62:	4013      	ands	r3, r2
 8008e64:	d04c      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d107      	bne.n	8008e7e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e6e:	4b44      	ldr	r3, [pc, #272]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	2380      	movs	r3, #128	; 0x80
 8008e74:	029b      	lsls	r3, r3, #10
 8008e76:	4013      	ands	r3, r2
 8008e78:	d120      	bne.n	8008ebc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e07a      	b.n	8008f74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d107      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e86:	4b3e      	ldr	r3, [pc, #248]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	2380      	movs	r3, #128	; 0x80
 8008e8c:	049b      	lsls	r3, r3, #18
 8008e8e:	4013      	ands	r3, r2
 8008e90:	d114      	bne.n	8008ebc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e06e      	b.n	8008f74 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d107      	bne.n	8008eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008e9e:	4b38      	ldr	r3, [pc, #224]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ea2:	2380      	movs	r3, #128	; 0x80
 8008ea4:	025b      	lsls	r3, r3, #9
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	d108      	bne.n	8008ebc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e062      	b.n	8008f74 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eae:	4b34      	ldr	r3, [pc, #208]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d101      	bne.n	8008ebc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e05b      	b.n	8008f74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ebc:	4b30      	ldr	r3, [pc, #192]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2203      	movs	r2, #3
 8008ec2:	4393      	bics	r3, r2
 8008ec4:	0019      	movs	r1, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	4b2d      	ldr	r3, [pc, #180]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ed0:	f7fa fb7c 	bl	80035cc <HAL_GetTick>
 8008ed4:	0003      	movs	r3, r0
 8008ed6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ed8:	e009      	b.n	8008eee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eda:	f7fa fb77 	bl	80035cc <HAL_GetTick>
 8008ede:	0002      	movs	r2, r0
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	4a27      	ldr	r2, [pc, #156]	; (8008f84 <HAL_RCC_ClockConfig+0x1a4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d901      	bls.n	8008eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e042      	b.n	8008f74 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eee:	4b24      	ldr	r3, [pc, #144]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	220c      	movs	r2, #12
 8008ef4:	401a      	ands	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d1ec      	bne.n	8008eda <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <HAL_RCC_ClockConfig+0x19c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2201      	movs	r2, #1
 8008f06:	4013      	ands	r3, r2
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d211      	bcs.n	8008f32 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f0e:	4b1b      	ldr	r3, [pc, #108]	; (8008f7c <HAL_RCC_ClockConfig+0x19c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2201      	movs	r2, #1
 8008f14:	4393      	bics	r3, r2
 8008f16:	0019      	movs	r1, r3
 8008f18:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <HAL_RCC_ClockConfig+0x19c>)
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f20:	4b16      	ldr	r3, [pc, #88]	; (8008f7c <HAL_RCC_ClockConfig+0x19c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2201      	movs	r2, #1
 8008f26:	4013      	ands	r3, r2
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d001      	beq.n	8008f32 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e020      	b.n	8008f74 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2204      	movs	r2, #4
 8008f38:	4013      	ands	r3, r2
 8008f3a:	d009      	beq.n	8008f50 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008f3c:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	4a11      	ldr	r2, [pc, #68]	; (8008f88 <HAL_RCC_ClockConfig+0x1a8>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	0019      	movs	r1, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	4b0d      	ldr	r3, [pc, #52]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008f50:	f000 f820 	bl	8008f94 <HAL_RCC_GetSysClockFreq>
 8008f54:	0001      	movs	r1, r0
 8008f56:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <HAL_RCC_ClockConfig+0x1a0>)
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	091b      	lsrs	r3, r3, #4
 8008f5c:	220f      	movs	r2, #15
 8008f5e:	4013      	ands	r3, r2
 8008f60:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <HAL_RCC_ClockConfig+0x1ac>)
 8008f62:	5cd3      	ldrb	r3, [r2, r3]
 8008f64:	000a      	movs	r2, r1
 8008f66:	40da      	lsrs	r2, r3
 8008f68:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <HAL_RCC_ClockConfig+0x1b0>)
 8008f6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f7fa fae7 	bl	8003540 <HAL_InitTick>
  
  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	0018      	movs	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b004      	add	sp, #16
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40022000 	.word	0x40022000
 8008f80:	40021000 	.word	0x40021000
 8008f84:	00001388 	.word	0x00001388
 8008f88:	fffff8ff 	.word	0xfffff8ff
 8008f8c:	0800f534 	.word	0x0800f534
 8008f90:	2000010c 	.word	0x2000010c

08008f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b08f      	sub	sp, #60	; 0x3c
 8008f98:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8008f9a:	2314      	movs	r3, #20
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	4a37      	ldr	r2, [pc, #220]	; (800907c <HAL_RCC_GetSysClockFreq+0xe8>)
 8008fa0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008fa2:	c313      	stmia	r3!, {r0, r1, r4}
 8008fa4:	6812      	ldr	r2, [r2, #0]
 8008fa6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8008fa8:	1d3b      	adds	r3, r7, #4
 8008faa:	4a35      	ldr	r2, [pc, #212]	; (8009080 <HAL_RCC_GetSysClockFreq+0xec>)
 8008fac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008fae:	c313      	stmia	r3!, {r0, r1, r4}
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fb8:	2300      	movs	r3, #0
 8008fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8008fc8:	4b2e      	ldr	r3, [pc, #184]	; (8009084 <HAL_RCC_GetSysClockFreq+0xf0>)
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	220c      	movs	r2, #12
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d006      	beq.n	8008fe6 <HAL_RCC_GetSysClockFreq+0x52>
 8008fd8:	2b0c      	cmp	r3, #12
 8008fda:	d043      	beq.n	8009064 <HAL_RCC_GetSysClockFreq+0xd0>
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d144      	bne.n	800906a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008fe0:	4b29      	ldr	r3, [pc, #164]	; (8009088 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008fe2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008fe4:	e044      	b.n	8009070 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	0c9b      	lsrs	r3, r3, #18
 8008fea:	220f      	movs	r2, #15
 8008fec:	4013      	ands	r3, r2
 8008fee:	2214      	movs	r2, #20
 8008ff0:	18ba      	adds	r2, r7, r2
 8008ff2:	5cd3      	ldrb	r3, [r2, r3]
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8008ff6:	4b23      	ldr	r3, [pc, #140]	; (8009084 <HAL_RCC_GetSysClockFreq+0xf0>)
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffa:	220f      	movs	r2, #15
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	1d3a      	adds	r2, r7, #4
 8009000:	5cd3      	ldrb	r3, [r2, r3]
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009006:	23c0      	movs	r3, #192	; 0xc0
 8009008:	025b      	lsls	r3, r3, #9
 800900a:	401a      	ands	r2, r3
 800900c:	2380      	movs	r3, #128	; 0x80
 800900e:	025b      	lsls	r3, r3, #9
 8009010:	429a      	cmp	r2, r3
 8009012:	d109      	bne.n	8009028 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009016:	481c      	ldr	r0, [pc, #112]	; (8009088 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009018:	f7f7 f876 	bl	8000108 <__udivsi3>
 800901c:	0003      	movs	r3, r0
 800901e:	001a      	movs	r2, r3
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	4353      	muls	r3, r2
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
 8009026:	e01a      	b.n	800905e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8009028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800902a:	23c0      	movs	r3, #192	; 0xc0
 800902c:	025b      	lsls	r3, r3, #9
 800902e:	401a      	ands	r2, r3
 8009030:	23c0      	movs	r3, #192	; 0xc0
 8009032:	025b      	lsls	r3, r3, #9
 8009034:	429a      	cmp	r2, r3
 8009036:	d109      	bne.n	800904c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800903a:	4814      	ldr	r0, [pc, #80]	; (800908c <HAL_RCC_GetSysClockFreq+0xf8>)
 800903c:	f7f7 f864 	bl	8000108 <__udivsi3>
 8009040:	0003      	movs	r3, r0
 8009042:	001a      	movs	r2, r3
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	4353      	muls	r3, r2
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
 800904a:	e008      	b.n	800905e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800904c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800904e:	480e      	ldr	r0, [pc, #56]	; (8009088 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009050:	f7f7 f85a 	bl	8000108 <__udivsi3>
 8009054:	0003      	movs	r3, r0
 8009056:	001a      	movs	r2, r3
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	4353      	muls	r3, r2
 800905c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800905e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009060:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009062:	e005      	b.n	8009070 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8009064:	4b09      	ldr	r3, [pc, #36]	; (800908c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009066:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009068:	e002      	b.n	8009070 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800906a:	4b07      	ldr	r3, [pc, #28]	; (8009088 <HAL_RCC_GetSysClockFreq+0xf4>)
 800906c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800906e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009072:	0018      	movs	r0, r3
 8009074:	46bd      	mov	sp, r7
 8009076:	b00f      	add	sp, #60	; 0x3c
 8009078:	bd90      	pop	{r4, r7, pc}
 800907a:	46c0      	nop			; (mov r8, r8)
 800907c:	0800f3b4 	.word	0x0800f3b4
 8009080:	0800f3c4 	.word	0x0800f3c4
 8009084:	40021000 	.word	0x40021000
 8009088:	007a1200 	.word	0x007a1200
 800908c:	02dc6c00 	.word	0x02dc6c00

08009090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009094:	4b02      	ldr	r3, [pc, #8]	; (80090a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8009096:	681b      	ldr	r3, [r3, #0]
}
 8009098:	0018      	movs	r0, r3
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	2000010c 	.word	0x2000010c

080090a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80090a8:	f7ff fff2 	bl	8009090 <HAL_RCC_GetHCLKFreq>
 80090ac:	0001      	movs	r1, r0
 80090ae:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	0a1b      	lsrs	r3, r3, #8
 80090b4:	2207      	movs	r2, #7
 80090b6:	4013      	ands	r3, r2
 80090b8:	4a04      	ldr	r2, [pc, #16]	; (80090cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80090ba:	5cd3      	ldrb	r3, [r2, r3]
 80090bc:	40d9      	lsrs	r1, r3
 80090be:	000b      	movs	r3, r1
}    
 80090c0:	0018      	movs	r0, r3
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	40021000 	.word	0x40021000
 80090cc:	0800f544 	.word	0x0800f544

080090d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	2380      	movs	r3, #128	; 0x80
 80090e6:	025b      	lsls	r3, r3, #9
 80090e8:	4013      	ands	r3, r2
 80090ea:	d100      	bne.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80090ec:	e08f      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80090ee:	2317      	movs	r3, #23
 80090f0:	18fb      	adds	r3, r7, r3
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090f6:	4b6f      	ldr	r3, [pc, #444]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80090f8:	69da      	ldr	r2, [r3, #28]
 80090fa:	2380      	movs	r3, #128	; 0x80
 80090fc:	055b      	lsls	r3, r3, #21
 80090fe:	4013      	ands	r3, r2
 8009100:	d111      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009102:	4b6c      	ldr	r3, [pc, #432]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009104:	69da      	ldr	r2, [r3, #28]
 8009106:	4b6b      	ldr	r3, [pc, #428]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009108:	2180      	movs	r1, #128	; 0x80
 800910a:	0549      	lsls	r1, r1, #21
 800910c:	430a      	orrs	r2, r1
 800910e:	61da      	str	r2, [r3, #28]
 8009110:	4b68      	ldr	r3, [pc, #416]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009112:	69da      	ldr	r2, [r3, #28]
 8009114:	2380      	movs	r3, #128	; 0x80
 8009116:	055b      	lsls	r3, r3, #21
 8009118:	4013      	ands	r3, r2
 800911a:	60bb      	str	r3, [r7, #8]
 800911c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800911e:	2317      	movs	r3, #23
 8009120:	18fb      	adds	r3, r7, r3
 8009122:	2201      	movs	r2, #1
 8009124:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009126:	4b64      	ldr	r3, [pc, #400]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	2380      	movs	r3, #128	; 0x80
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	4013      	ands	r3, r2
 8009130:	d11a      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009132:	4b61      	ldr	r3, [pc, #388]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	4b60      	ldr	r3, [pc, #384]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009138:	2180      	movs	r1, #128	; 0x80
 800913a:	0049      	lsls	r1, r1, #1
 800913c:	430a      	orrs	r2, r1
 800913e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009140:	f7fa fa44 	bl	80035cc <HAL_GetTick>
 8009144:	0003      	movs	r3, r0
 8009146:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009148:	e008      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800914a:	f7fa fa3f 	bl	80035cc <HAL_GetTick>
 800914e:	0002      	movs	r2, r0
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	2b64      	cmp	r3, #100	; 0x64
 8009156:	d901      	bls.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e0a6      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800915c:	4b56      	ldr	r3, [pc, #344]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	2380      	movs	r3, #128	; 0x80
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	4013      	ands	r3, r2
 8009166:	d0f0      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009168:	4b52      	ldr	r3, [pc, #328]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800916a:	6a1a      	ldr	r2, [r3, #32]
 800916c:	23c0      	movs	r3, #192	; 0xc0
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4013      	ands	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d034      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	23c0      	movs	r3, #192	; 0xc0
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4013      	ands	r3, r2
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	429a      	cmp	r2, r3
 8009188:	d02c      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800918a:	4b4a      	ldr	r3, [pc, #296]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	4a4b      	ldr	r2, [pc, #300]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8009190:	4013      	ands	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009194:	4b47      	ldr	r3, [pc, #284]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009196:	6a1a      	ldr	r2, [r3, #32]
 8009198:	4b46      	ldr	r3, [pc, #280]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800919a:	2180      	movs	r1, #128	; 0x80
 800919c:	0249      	lsls	r1, r1, #9
 800919e:	430a      	orrs	r2, r1
 80091a0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091a2:	4b44      	ldr	r3, [pc, #272]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80091a4:	6a1a      	ldr	r2, [r3, #32]
 80091a6:	4b43      	ldr	r3, [pc, #268]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80091a8:	4945      	ldr	r1, [pc, #276]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80091aa:	400a      	ands	r2, r1
 80091ac:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80091ae:	4b41      	ldr	r3, [pc, #260]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	4013      	ands	r3, r2
 80091ba:	d013      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091bc:	f7fa fa06 	bl	80035cc <HAL_GetTick>
 80091c0:	0003      	movs	r3, r0
 80091c2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091c4:	e009      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091c6:	f7fa fa01 	bl	80035cc <HAL_GetTick>
 80091ca:	0002      	movs	r2, r0
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	4a3c      	ldr	r2, [pc, #240]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d901      	bls.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e067      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091da:	4b36      	ldr	r3, [pc, #216]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	2202      	movs	r2, #2
 80091e0:	4013      	ands	r3, r2
 80091e2:	d0f0      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091e4:	4b33      	ldr	r3, [pc, #204]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	4a34      	ldr	r2, [pc, #208]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80091ea:	4013      	ands	r3, r2
 80091ec:	0019      	movs	r1, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	4b30      	ldr	r3, [pc, #192]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80091f4:	430a      	orrs	r2, r1
 80091f6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80091f8:	2317      	movs	r3, #23
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d105      	bne.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009202:	4b2c      	ldr	r3, [pc, #176]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009204:	69da      	ldr	r2, [r3, #28]
 8009206:	4b2b      	ldr	r3, [pc, #172]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009208:	492f      	ldr	r1, [pc, #188]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800920a:	400a      	ands	r2, r1
 800920c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2201      	movs	r2, #1
 8009214:	4013      	ands	r3, r2
 8009216:	d009      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009218:	4b26      	ldr	r3, [pc, #152]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800921a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921c:	2203      	movs	r2, #3
 800921e:	4393      	bics	r3, r2
 8009220:	0019      	movs	r1, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	4b23      	ldr	r3, [pc, #140]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009228:	430a      	orrs	r2, r1
 800922a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2202      	movs	r2, #2
 8009232:	4013      	ands	r3, r2
 8009234:	d009      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009236:	4b1f      	ldr	r3, [pc, #124]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	4a24      	ldr	r2, [pc, #144]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800923c:	4013      	ands	r3, r2
 800923e:	0019      	movs	r1, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	4b1b      	ldr	r3, [pc, #108]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009246:	430a      	orrs	r2, r1
 8009248:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2220      	movs	r2, #32
 8009250:	4013      	ands	r3, r2
 8009252:	d009      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009254:	4b17      	ldr	r3, [pc, #92]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009258:	2210      	movs	r2, #16
 800925a:	4393      	bics	r3, r2
 800925c:	0019      	movs	r1, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691a      	ldr	r2, [r3, #16]
 8009262:	4b14      	ldr	r3, [pc, #80]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009264:	430a      	orrs	r2, r1
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	2380      	movs	r3, #128	; 0x80
 800926e:	029b      	lsls	r3, r3, #10
 8009270:	4013      	ands	r3, r2
 8009272:	d009      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009274:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009278:	2280      	movs	r2, #128	; 0x80
 800927a:	4393      	bics	r3, r2
 800927c:	0019      	movs	r1, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009284:	430a      	orrs	r2, r1
 8009286:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	2380      	movs	r3, #128	; 0x80
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	4013      	ands	r3, r2
 8009292:	d009      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009294:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009298:	2240      	movs	r2, #64	; 0x40
 800929a:	4393      	bics	r3, r2
 800929c:	0019      	movs	r1, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	695a      	ldr	r2, [r3, #20]
 80092a2:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80092a4:	430a      	orrs	r2, r1
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	0018      	movs	r0, r3
 80092ac:	46bd      	mov	sp, r7
 80092ae:	b006      	add	sp, #24
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	46c0      	nop			; (mov r8, r8)
 80092b4:	40021000 	.word	0x40021000
 80092b8:	40007000 	.word	0x40007000
 80092bc:	fffffcff 	.word	0xfffffcff
 80092c0:	fffeffff 	.word	0xfffeffff
 80092c4:	00001388 	.word	0x00001388
 80092c8:	efffffff 	.word	0xefffffff
 80092cc:	fffcffff 	.word	0xfffcffff

080092d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e08a      	b.n	80093f8 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	225d      	movs	r2, #93	; 0x5d
 80092ec:	5c9b      	ldrb	r3, [r3, r2]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d107      	bne.n	8009304 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	225c      	movs	r2, #92	; 0x5c
 80092f8:	2100      	movs	r1, #0
 80092fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	0018      	movs	r0, r3
 8009300:	f7f9 ff7c 	bl	80031fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	225d      	movs	r2, #93	; 0x5d
 8009308:	2102      	movs	r1, #2
 800930a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2140      	movs	r1, #64	; 0x40
 8009318:	438a      	bics	r2, r1
 800931a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	23e0      	movs	r3, #224	; 0xe0
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	429a      	cmp	r2, r3
 8009326:	d902      	bls.n	800932e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	e002      	b.n	8009334 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800932e:	2380      	movs	r3, #128	; 0x80
 8009330:	015b      	lsls	r3, r3, #5
 8009332:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68da      	ldr	r2, [r3, #12]
 8009338:	23f0      	movs	r3, #240	; 0xf0
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	429a      	cmp	r2, r3
 800933e:	d008      	beq.n	8009352 <HAL_SPI_Init+0x82>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	23e0      	movs	r3, #224	; 0xe0
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	429a      	cmp	r2, r3
 800934a:	d002      	beq.n	8009352 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10c      	bne.n	8009374 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	23e0      	movs	r3, #224	; 0xe0
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	429a      	cmp	r2, r3
 8009364:	d903      	bls.n	800936e <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2202      	movs	r2, #2
 800936a:	631a      	str	r2, [r3, #48]	; 0x30
 800936c:	e002      	b.n	8009374 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	431a      	orrs	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6999      	ldr	r1, [r3, #24]
 800938e:	2380      	movs	r3, #128	; 0x80
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	400b      	ands	r3, r1
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	431a      	orrs	r2, r3
 80093a2:	0011      	movs	r1, r2
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	0c1b      	lsrs	r3, r3, #16
 80093b6:	2204      	movs	r2, #4
 80093b8:	401a      	ands	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	431a      	orrs	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	431a      	orrs	r2, r3
 80093cc:	0011      	movs	r1, r2
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69da      	ldr	r2, [r3, #28]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4907      	ldr	r1, [pc, #28]	; (8009400 <HAL_SPI_Init+0x130>)
 80093e4:	400a      	ands	r2, r1
 80093e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	225d      	movs	r2, #93	; 0x5d
 80093f2:	2101      	movs	r1, #1
 80093f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	0018      	movs	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	b004      	add	sp, #16
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	fffff7ff 	.word	0xfffff7ff

08009404 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	1dbb      	adds	r3, r7, #6
 8009412:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009414:	231f      	movs	r3, #31
 8009416:	18fb      	adds	r3, r7, r3
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	225c      	movs	r2, #92	; 0x5c
 8009420:	5c9b      	ldrb	r3, [r3, r2]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_SPI_Transmit+0x26>
 8009426:	2302      	movs	r3, #2
 8009428:	e169      	b.n	80096fe <HAL_SPI_Transmit+0x2fa>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	225c      	movs	r2, #92	; 0x5c
 800942e:	2101      	movs	r1, #1
 8009430:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009432:	f7fa f8cb 	bl	80035cc <HAL_GetTick>
 8009436:	0003      	movs	r3, r0
 8009438:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800943a:	2316      	movs	r3, #22
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	1dba      	adds	r2, r7, #6
 8009440:	8812      	ldrh	r2, [r2, #0]
 8009442:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	225d      	movs	r2, #93	; 0x5d
 8009448:	5c9b      	ldrb	r3, [r3, r2]
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b01      	cmp	r3, #1
 800944e:	d004      	beq.n	800945a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009450:	231f      	movs	r3, #31
 8009452:	18fb      	adds	r3, r7, r3
 8009454:	2202      	movs	r2, #2
 8009456:	701a      	strb	r2, [r3, #0]
    goto error;
 8009458:	e146      	b.n	80096e8 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <HAL_SPI_Transmit+0x64>
 8009460:	1dbb      	adds	r3, r7, #6
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009468:	231f      	movs	r3, #31
 800946a:	18fb      	adds	r3, r7, r3
 800946c:	2201      	movs	r2, #1
 800946e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009470:	e13a      	b.n	80096e8 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	225d      	movs	r2, #93	; 0x5d
 8009476:	2103      	movs	r1, #3
 8009478:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	1dba      	adds	r2, r7, #6
 800948a:	8812      	ldrh	r2, [r2, #0]
 800948c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1dba      	adds	r2, r7, #6
 8009492:	8812      	ldrh	r2, [r2, #0]
 8009494:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2244      	movs	r2, #68	; 0x44
 80094a0:	2100      	movs	r1, #0
 80094a2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2246      	movs	r2, #70	; 0x46
 80094a8:	2100      	movs	r1, #0
 80094aa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	2380      	movs	r3, #128	; 0x80
 80094be:	021b      	lsls	r3, r3, #8
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d108      	bne.n	80094d6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2180      	movs	r1, #128	; 0x80
 80094d0:	01c9      	lsls	r1, r1, #7
 80094d2:	430a      	orrs	r2, r1
 80094d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2240      	movs	r2, #64	; 0x40
 80094de:	4013      	ands	r3, r2
 80094e0:	2b40      	cmp	r3, #64	; 0x40
 80094e2:	d007      	beq.n	80094f4 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2140      	movs	r1, #64	; 0x40
 80094f0:	430a      	orrs	r2, r1
 80094f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	68da      	ldr	r2, [r3, #12]
 80094f8:	23e0      	movs	r3, #224	; 0xe0
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d94e      	bls.n	800959e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <HAL_SPI_Transmit+0x10e>
 8009508:	2316      	movs	r3, #22
 800950a:	18fb      	adds	r3, r7, r3
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d13f      	bne.n	8009592 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	881a      	ldrh	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	1c9a      	adds	r2, r3, #2
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800952c:	b29b      	uxth	r3, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	b29a      	uxth	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009536:	e02c      	b.n	8009592 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2202      	movs	r2, #2
 8009540:	4013      	ands	r3, r2
 8009542:	2b02      	cmp	r3, #2
 8009544:	d112      	bne.n	800956c <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954a:	881a      	ldrh	r2, [r3, #0]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	1c9a      	adds	r2, r3, #2
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800956a:	e012      	b.n	8009592 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800956c:	f7fa f82e 	bl	80035cc <HAL_GetTick>
 8009570:	0002      	movs	r2, r0
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d802      	bhi.n	8009582 <HAL_SPI_Transmit+0x17e>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	3301      	adds	r3, #1
 8009580:	d102      	bne.n	8009588 <HAL_SPI_Transmit+0x184>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d104      	bne.n	8009592 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8009588:	231f      	movs	r3, #31
 800958a:	18fb      	adds	r3, r7, r3
 800958c:	2203      	movs	r2, #3
 800958e:	701a      	strb	r2, [r3, #0]
          goto error;
 8009590:	e0aa      	b.n	80096e8 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009596:	b29b      	uxth	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1cd      	bne.n	8009538 <HAL_SPI_Transmit+0x134>
 800959c:	e080      	b.n	80096a0 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <HAL_SPI_Transmit+0x1ae>
 80095a6:	2316      	movs	r3, #22
 80095a8:	18fb      	adds	r3, r7, r3
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d000      	beq.n	80095b2 <HAL_SPI_Transmit+0x1ae>
 80095b0:	e071      	b.n	8009696 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d912      	bls.n	80095e2 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c0:	881a      	ldrh	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095cc:	1c9a      	adds	r2, r3, #2
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	3b02      	subs	r3, #2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095e0:	e059      	b.n	8009696 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	330c      	adds	r3, #12
 80095ec:	7812      	ldrb	r2, [r2, #0]
 80095ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095fe:	b29b      	uxth	r3, r3
 8009600:	3b01      	subs	r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009608:	e045      	b.n	8009696 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	2202      	movs	r2, #2
 8009612:	4013      	ands	r3, r2
 8009614:	2b02      	cmp	r3, #2
 8009616:	d12b      	bne.n	8009670 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b01      	cmp	r3, #1
 8009620:	d912      	bls.n	8009648 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	881a      	ldrh	r2, [r3, #0]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009632:	1c9a      	adds	r2, r3, #2
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800963c:	b29b      	uxth	r3, r3
 800963e:	3b02      	subs	r3, #2
 8009640:	b29a      	uxth	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009646:	e026      	b.n	8009696 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	330c      	adds	r3, #12
 8009652:	7812      	ldrb	r2, [r2, #0]
 8009654:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800966e:	e012      	b.n	8009696 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009670:	f7f9 ffac 	bl	80035cc <HAL_GetTick>
 8009674:	0002      	movs	r2, r0
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d802      	bhi.n	8009686 <HAL_SPI_Transmit+0x282>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	3301      	adds	r3, #1
 8009684:	d102      	bne.n	800968c <HAL_SPI_Transmit+0x288>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 800968c:	231f      	movs	r3, #31
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	2203      	movs	r2, #3
 8009692:	701a      	strb	r2, [r3, #0]
          goto error;
 8009694:	e028      	b.n	80096e8 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1b4      	bne.n	800960a <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	0018      	movs	r0, r3
 80096a8:	f000 f912 	bl	80098d0 <SPI_EndRxTxTransaction>
 80096ac:	1e03      	subs	r3, r0, #0
 80096ae:	d002      	beq.n	80096b6 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096be:	2300      	movs	r3, #0
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	613b      	str	r3, [r7, #16]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	613b      	str	r3, [r7, #16]
 80096d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 80096dc:	231f      	movs	r3, #31
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	2201      	movs	r2, #1
 80096e2:	701a      	strb	r2, [r3, #0]
 80096e4:	e000      	b.n	80096e8 <HAL_SPI_Transmit+0x2e4>
  }

error:
 80096e6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	225d      	movs	r2, #93	; 0x5d
 80096ec:	2101      	movs	r1, #1
 80096ee:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	225c      	movs	r2, #92	; 0x5c
 80096f4:	2100      	movs	r1, #0
 80096f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80096f8:	231f      	movs	r3, #31
 80096fa:	18fb      	adds	r3, r7, r3
 80096fc:	781b      	ldrb	r3, [r3, #0]
}
 80096fe:	0018      	movs	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	b008      	add	sp, #32
 8009704:	bd80      	pop	{r7, pc}
	...

08009708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	1dfb      	adds	r3, r7, #7
 8009716:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009718:	e050      	b.n	80097bc <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	3301      	adds	r3, #1
 800971e:	d04d      	beq.n	80097bc <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009720:	f7f9 ff54 	bl	80035cc <HAL_GetTick>
 8009724:	0002      	movs	r2, r0
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d902      	bls.n	8009736 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d142      	bne.n	80097bc <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	21e0      	movs	r1, #224	; 0xe0
 8009742:	438a      	bics	r2, r1
 8009744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	2382      	movs	r3, #130	; 0x82
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	429a      	cmp	r2, r3
 8009750:	d113      	bne.n	800977a <SPI_WaitFlagStateUntilTimeout+0x72>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	2380      	movs	r3, #128	; 0x80
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	429a      	cmp	r2, r3
 800975c:	d005      	beq.n	800976a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	2380      	movs	r3, #128	; 0x80
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	429a      	cmp	r2, r3
 8009768:	d107      	bne.n	800977a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2140      	movs	r1, #64	; 0x40
 8009776:	438a      	bics	r2, r1
 8009778:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800977e:	2380      	movs	r3, #128	; 0x80
 8009780:	019b      	lsls	r3, r3, #6
 8009782:	429a      	cmp	r2, r3
 8009784:	d110      	bne.n	80097a8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4914      	ldr	r1, [pc, #80]	; (80097e4 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8009792:	400a      	ands	r2, r1
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2180      	movs	r1, #128	; 0x80
 80097a2:	0189      	lsls	r1, r1, #6
 80097a4:	430a      	orrs	r2, r1
 80097a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	225d      	movs	r2, #93	; 0x5d
 80097ac:	2101      	movs	r1, #1
 80097ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	225c      	movs	r2, #92	; 0x5c
 80097b4:	2100      	movs	r1, #0
 80097b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e00f      	b.n	80097dc <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	4013      	ands	r3, r2
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	425a      	negs	r2, r3
 80097cc:	4153      	adcs	r3, r2
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	001a      	movs	r2, r3
 80097d2:	1dfb      	adds	r3, r7, #7
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d19f      	bne.n	800971a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	b004      	add	sp, #16
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	ffffdfff 	.word	0xffffdfff

080097e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80097f6:	e05c      	b.n	80098b2 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	23c0      	movs	r3, #192	; 0xc0
 80097fc:	00db      	lsls	r3, r3, #3
 80097fe:	429a      	cmp	r2, r3
 8009800:	d106      	bne.n	8009810 <SPI_WaitFifoStateUntilTimeout+0x28>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	330c      	adds	r3, #12
 800980e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	3301      	adds	r3, #1
 8009814:	d04d      	beq.n	80098b2 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009816:	f7f9 fed9 	bl	80035cc <HAL_GetTick>
 800981a:	0002      	movs	r2, r0
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d902      	bls.n	800982c <SPI_WaitFifoStateUntilTimeout+0x44>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d142      	bne.n	80098b2 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	21e0      	movs	r1, #224	; 0xe0
 8009838:	438a      	bics	r2, r1
 800983a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	2382      	movs	r3, #130	; 0x82
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	429a      	cmp	r2, r3
 8009846:	d113      	bne.n	8009870 <SPI_WaitFifoStateUntilTimeout+0x88>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	2380      	movs	r3, #128	; 0x80
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	429a      	cmp	r2, r3
 8009852:	d005      	beq.n	8009860 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	689a      	ldr	r2, [r3, #8]
 8009858:	2380      	movs	r3, #128	; 0x80
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	429a      	cmp	r2, r3
 800985e:	d107      	bne.n	8009870 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2140      	movs	r1, #64	; 0x40
 800986c:	438a      	bics	r2, r1
 800986e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009874:	2380      	movs	r3, #128	; 0x80
 8009876:	019b      	lsls	r3, r3, #6
 8009878:	429a      	cmp	r2, r3
 800987a:	d110      	bne.n	800989e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4911      	ldr	r1, [pc, #68]	; (80098cc <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8009888:	400a      	ands	r2, r1
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2180      	movs	r1, #128	; 0x80
 8009898:	0189      	lsls	r1, r1, #6
 800989a:	430a      	orrs	r2, r1
 800989c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	225d      	movs	r2, #93	; 0x5d
 80098a2:	2101      	movs	r1, #1
 80098a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	225c      	movs	r2, #92	; 0x5c
 80098aa:	2100      	movs	r1, #0
 80098ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e008      	b.n	80098c4 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	4013      	ands	r3, r2
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d19a      	bne.n	80097f8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	0018      	movs	r0, r3
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b004      	add	sp, #16
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	ffffdfff 	.word	0xffffdfff

080098d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af02      	add	r7, sp, #8
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	23c0      	movs	r3, #192	; 0xc0
 80098e0:	0159      	lsls	r1, r3, #5
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	0013      	movs	r3, r2
 80098ea:	2200      	movs	r2, #0
 80098ec:	f7ff ff7c 	bl	80097e8 <SPI_WaitFifoStateUntilTimeout>
 80098f0:	1e03      	subs	r3, r0, #0
 80098f2:	d007      	beq.n	8009904 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f8:	2220      	movs	r2, #32
 80098fa:	431a      	orrs	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e027      	b.n	8009954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	0013      	movs	r3, r2
 800990e:	2200      	movs	r2, #0
 8009910:	2180      	movs	r1, #128	; 0x80
 8009912:	f7ff fef9 	bl	8009708 <SPI_WaitFlagStateUntilTimeout>
 8009916:	1e03      	subs	r3, r0, #0
 8009918:	d007      	beq.n	800992a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800991e:	2220      	movs	r2, #32
 8009920:	431a      	orrs	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e014      	b.n	8009954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	23c0      	movs	r3, #192	; 0xc0
 800992e:	00d9      	lsls	r1, r3, #3
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	0013      	movs	r3, r2
 8009938:	2200      	movs	r2, #0
 800993a:	f7ff ff55 	bl	80097e8 <SPI_WaitFifoStateUntilTimeout>
 800993e:	1e03      	subs	r3, r0, #0
 8009940:	d007      	beq.n	8009952 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009946:	2220      	movs	r2, #32
 8009948:	431a      	orrs	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e000      	b.n	8009954 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	0018      	movs	r0, r3
 8009956:	46bd      	mov	sp, r7
 8009958:	b004      	add	sp, #16
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e01e      	b.n	80099ac <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	223d      	movs	r2, #61	; 0x3d
 8009972:	5c9b      	ldrb	r3, [r3, r2]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d107      	bne.n	800998a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	223c      	movs	r2, #60	; 0x3c
 800997e:	2100      	movs	r1, #0
 8009980:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	0018      	movs	r0, r3
 8009986:	f7f9 fc85 	bl	8003294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	223d      	movs	r2, #61	; 0x3d
 800998e:	2102      	movs	r1, #2
 8009990:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	0019      	movs	r1, r3
 800999c:	0010      	movs	r0, r2
 800999e:	f000 fa27 	bl	8009df0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	223d      	movs	r2, #61	; 0x3d
 80099a6:	2101      	movs	r1, #1
 80099a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	0018      	movs	r0, r3
 80099ae:	46bd      	mov	sp, r7
 80099b0:	b002      	add	sp, #8
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2101      	movs	r1, #1
 80099c8:	430a      	orrs	r2, r1
 80099ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	2207      	movs	r2, #7
 80099d4:	4013      	ands	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b06      	cmp	r3, #6
 80099dc:	d007      	beq.n	80099ee <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2101      	movs	r1, #1
 80099ea:	430a      	orrs	r2, r1
 80099ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	0018      	movs	r0, r3
 80099f2:	46bd      	mov	sp, r7
 80099f4:	b004      	add	sp, #16
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2202      	movs	r2, #2
 8009a08:	4013      	ands	r3, r2
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d124      	bne.n	8009a58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	2202      	movs	r2, #2
 8009a16:	4013      	ands	r3, r2
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d11d      	bne.n	8009a58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2203      	movs	r2, #3
 8009a22:	4252      	negs	r2, r2
 8009a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	2203      	movs	r2, #3
 8009a34:	4013      	ands	r3, r2
 8009a36:	d004      	beq.n	8009a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f000 f9c0 	bl	8009dc0 <HAL_TIM_IC_CaptureCallback>
 8009a40:	e007      	b.n	8009a52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	0018      	movs	r0, r3
 8009a46:	f000 f9b3 	bl	8009db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	0018      	movs	r0, r3
 8009a4e:	f000 f9bf 	bl	8009dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	2204      	movs	r2, #4
 8009a60:	4013      	ands	r3, r2
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d125      	bne.n	8009ab2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	4013      	ands	r3, r2
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	d11e      	bne.n	8009ab2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2205      	movs	r2, #5
 8009a7a:	4252      	negs	r2, r2
 8009a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2202      	movs	r2, #2
 8009a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	23c0      	movs	r3, #192	; 0xc0
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4013      	ands	r3, r2
 8009a90:	d004      	beq.n	8009a9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	0018      	movs	r0, r3
 8009a96:	f000 f993 	bl	8009dc0 <HAL_TIM_IC_CaptureCallback>
 8009a9a:	e007      	b.n	8009aac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	f000 f986 	bl	8009db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f000 f992 	bl	8009dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	2208      	movs	r2, #8
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b08      	cmp	r3, #8
 8009abe:	d124      	bne.n	8009b0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	2208      	movs	r2, #8
 8009ac8:	4013      	ands	r3, r2
 8009aca:	2b08      	cmp	r3, #8
 8009acc:	d11d      	bne.n	8009b0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2209      	movs	r2, #9
 8009ad4:	4252      	negs	r2, r2
 8009ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2204      	movs	r2, #4
 8009adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	2203      	movs	r2, #3
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	d004      	beq.n	8009af4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	0018      	movs	r0, r3
 8009aee:	f000 f967 	bl	8009dc0 <HAL_TIM_IC_CaptureCallback>
 8009af2:	e007      	b.n	8009b04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	0018      	movs	r0, r3
 8009af8:	f000 f95a 	bl	8009db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	0018      	movs	r0, r3
 8009b00:	f000 f966 	bl	8009dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	2210      	movs	r2, #16
 8009b12:	4013      	ands	r3, r2
 8009b14:	2b10      	cmp	r3, #16
 8009b16:	d125      	bne.n	8009b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	2210      	movs	r2, #16
 8009b20:	4013      	ands	r3, r2
 8009b22:	2b10      	cmp	r3, #16
 8009b24:	d11e      	bne.n	8009b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2211      	movs	r2, #17
 8009b2c:	4252      	negs	r2, r2
 8009b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2208      	movs	r2, #8
 8009b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69da      	ldr	r2, [r3, #28]
 8009b3c:	23c0      	movs	r3, #192	; 0xc0
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4013      	ands	r3, r2
 8009b42:	d004      	beq.n	8009b4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	0018      	movs	r0, r3
 8009b48:	f000 f93a 	bl	8009dc0 <HAL_TIM_IC_CaptureCallback>
 8009b4c:	e007      	b.n	8009b5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	0018      	movs	r0, r3
 8009b52:	f000 f92d 	bl	8009db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	0018      	movs	r0, r3
 8009b5a:	f000 f939 	bl	8009dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d10f      	bne.n	8009b92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d108      	bne.n	8009b92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2202      	movs	r2, #2
 8009b86:	4252      	negs	r2, r2
 8009b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f000 f907 	bl	8009da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	2280      	movs	r2, #128	; 0x80
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b80      	cmp	r3, #128	; 0x80
 8009b9e:	d10f      	bne.n	8009bc0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	2280      	movs	r2, #128	; 0x80
 8009ba8:	4013      	ands	r3, r2
 8009baa:	2b80      	cmp	r3, #128	; 0x80
 8009bac:	d108      	bne.n	8009bc0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2281      	movs	r2, #129	; 0x81
 8009bb4:	4252      	negs	r2, r2
 8009bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	0018      	movs	r0, r3
 8009bbc:	f000 fa98 	bl	800a0f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2240      	movs	r2, #64	; 0x40
 8009bc8:	4013      	ands	r3, r2
 8009bca:	2b40      	cmp	r3, #64	; 0x40
 8009bcc:	d10f      	bne.n	8009bee <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	2240      	movs	r2, #64	; 0x40
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	2b40      	cmp	r3, #64	; 0x40
 8009bda:	d108      	bne.n	8009bee <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2241      	movs	r2, #65	; 0x41
 8009be2:	4252      	negs	r2, r2
 8009be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	0018      	movs	r0, r3
 8009bea:	f000 f8f9 	bl	8009de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	d10f      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	2220      	movs	r2, #32
 8009c04:	4013      	ands	r3, r2
 8009c06:	2b20      	cmp	r3, #32
 8009c08:	d108      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2221      	movs	r2, #33	; 0x21
 8009c10:	4252      	negs	r2, r2
 8009c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	0018      	movs	r0, r3
 8009c18:	f000 fa62 	bl	800a0e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c1c:	46c0      	nop			; (mov r8, r8)
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b002      	add	sp, #8
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	223c      	movs	r2, #60	; 0x3c
 8009c32:	5c9b      	ldrb	r3, [r3, r2]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_TIM_ConfigClockSource+0x18>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e0ab      	b.n	8009d94 <HAL_TIM_ConfigClockSource+0x170>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	223c      	movs	r2, #60	; 0x3c
 8009c40:	2101      	movs	r1, #1
 8009c42:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	223d      	movs	r2, #61	; 0x3d
 8009c48:	2102      	movs	r1, #2
 8009c4a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2277      	movs	r2, #119	; 0x77
 8009c58:	4393      	bics	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4a4f      	ldr	r2, [pc, #316]	; (8009d9c <HAL_TIM_ConfigClockSource+0x178>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b40      	cmp	r3, #64	; 0x40
 8009c72:	d100      	bne.n	8009c76 <HAL_TIM_ConfigClockSource+0x52>
 8009c74:	e06b      	b.n	8009d4e <HAL_TIM_ConfigClockSource+0x12a>
 8009c76:	d80e      	bhi.n	8009c96 <HAL_TIM_ConfigClockSource+0x72>
 8009c78:	2b10      	cmp	r3, #16
 8009c7a:	d100      	bne.n	8009c7e <HAL_TIM_ConfigClockSource+0x5a>
 8009c7c:	e077      	b.n	8009d6e <HAL_TIM_ConfigClockSource+0x14a>
 8009c7e:	d803      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x64>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d100      	bne.n	8009c86 <HAL_TIM_ConfigClockSource+0x62>
 8009c84:	e073      	b.n	8009d6e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009c86:	e07c      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009c88:	2b20      	cmp	r3, #32
 8009c8a:	d100      	bne.n	8009c8e <HAL_TIM_ConfigClockSource+0x6a>
 8009c8c:	e06f      	b.n	8009d6e <HAL_TIM_ConfigClockSource+0x14a>
 8009c8e:	2b30      	cmp	r3, #48	; 0x30
 8009c90:	d100      	bne.n	8009c94 <HAL_TIM_ConfigClockSource+0x70>
 8009c92:	e06c      	b.n	8009d6e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8009c94:	e075      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009c96:	2b70      	cmp	r3, #112	; 0x70
 8009c98:	d00e      	beq.n	8009cb8 <HAL_TIM_ConfigClockSource+0x94>
 8009c9a:	d804      	bhi.n	8009ca6 <HAL_TIM_ConfigClockSource+0x82>
 8009c9c:	2b50      	cmp	r3, #80	; 0x50
 8009c9e:	d036      	beq.n	8009d0e <HAL_TIM_ConfigClockSource+0xea>
 8009ca0:	2b60      	cmp	r3, #96	; 0x60
 8009ca2:	d044      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8009ca4:	e06d      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009ca6:	2280      	movs	r2, #128	; 0x80
 8009ca8:	0152      	lsls	r2, r2, #5
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d068      	beq.n	8009d80 <HAL_TIM_ConfigClockSource+0x15c>
 8009cae:	2280      	movs	r2, #128	; 0x80
 8009cb0:	0192      	lsls	r2, r2, #6
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d017      	beq.n	8009ce6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8009cb6:	e064      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	6899      	ldr	r1, [r3, #8]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f000 f98c 	bl	8009fe4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2277      	movs	r2, #119	; 0x77
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	609a      	str	r2, [r3, #8]
      break;
 8009ce4:	e04d      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	6899      	ldr	r1, [r3, #8]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f000 f975 	bl	8009fe4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689a      	ldr	r2, [r3, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2180      	movs	r1, #128	; 0x80
 8009d06:	01c9      	lsls	r1, r1, #7
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	609a      	str	r2, [r3, #8]
      break;
 8009d0c:	e039      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	6859      	ldr	r1, [r3, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	001a      	movs	r2, r3
 8009d1c:	f000 f8e8 	bl	8009ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2150      	movs	r1, #80	; 0x50
 8009d26:	0018      	movs	r0, r3
 8009d28:	f000 f942 	bl	8009fb0 <TIM_ITRx_SetConfig>
      break;
 8009d2c:	e029      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6859      	ldr	r1, [r3, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	001a      	movs	r2, r3
 8009d3c:	f000 f906 	bl	8009f4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2160      	movs	r1, #96	; 0x60
 8009d46:	0018      	movs	r0, r3
 8009d48:	f000 f932 	bl	8009fb0 <TIM_ITRx_SetConfig>
      break;
 8009d4c:	e019      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	6859      	ldr	r1, [r3, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	001a      	movs	r2, r3
 8009d5c:	f000 f8c8 	bl	8009ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2140      	movs	r1, #64	; 0x40
 8009d66:	0018      	movs	r0, r3
 8009d68:	f000 f922 	bl	8009fb0 <TIM_ITRx_SetConfig>
      break;
 8009d6c:	e009      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	0019      	movs	r1, r3
 8009d78:	0010      	movs	r0, r2
 8009d7a:	f000 f919 	bl	8009fb0 <TIM_ITRx_SetConfig>
      break;
 8009d7e:	e000      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8009d80:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	223d      	movs	r2, #61	; 0x3d
 8009d86:	2101      	movs	r1, #1
 8009d88:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	223c      	movs	r2, #60	; 0x3c
 8009d8e:	2100      	movs	r1, #0
 8009d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	0018      	movs	r0, r3
 8009d96:	46bd      	mov	sp, r7
 8009d98:	b004      	add	sp, #16
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	ffff00ff 	.word	0xffff00ff

08009da0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009da8:	46c0      	nop			; (mov r8, r8)
 8009daa:	46bd      	mov	sp, r7
 8009dac:	b002      	add	sp, #8
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009db8:	46c0      	nop			; (mov r8, r8)
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	b002      	add	sp, #8
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009dc8:	46c0      	nop			; (mov r8, r8)
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b002      	add	sp, #8
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009dd8:	46c0      	nop			; (mov r8, r8)
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	b002      	add	sp, #8
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009de8:	46c0      	nop			; (mov r8, r8)
 8009dea:	46bd      	mov	sp, r7
 8009dec:	b002      	add	sp, #8
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a34      	ldr	r2, [pc, #208]	; (8009ed4 <TIM_Base_SetConfig+0xe4>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d008      	beq.n	8009e1a <TIM_Base_SetConfig+0x2a>
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	2380      	movs	r3, #128	; 0x80
 8009e0c:	05db      	lsls	r3, r3, #23
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d003      	beq.n	8009e1a <TIM_Base_SetConfig+0x2a>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a30      	ldr	r2, [pc, #192]	; (8009ed8 <TIM_Base_SetConfig+0xe8>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d108      	bne.n	8009e2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2270      	movs	r2, #112	; 0x70
 8009e1e:	4393      	bics	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a29      	ldr	r2, [pc, #164]	; (8009ed4 <TIM_Base_SetConfig+0xe4>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d018      	beq.n	8009e66 <TIM_Base_SetConfig+0x76>
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	2380      	movs	r3, #128	; 0x80
 8009e38:	05db      	lsls	r3, r3, #23
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d013      	beq.n	8009e66 <TIM_Base_SetConfig+0x76>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a25      	ldr	r2, [pc, #148]	; (8009ed8 <TIM_Base_SetConfig+0xe8>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d00f      	beq.n	8009e66 <TIM_Base_SetConfig+0x76>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a24      	ldr	r2, [pc, #144]	; (8009edc <TIM_Base_SetConfig+0xec>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d00b      	beq.n	8009e66 <TIM_Base_SetConfig+0x76>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a23      	ldr	r2, [pc, #140]	; (8009ee0 <TIM_Base_SetConfig+0xf0>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d007      	beq.n	8009e66 <TIM_Base_SetConfig+0x76>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a22      	ldr	r2, [pc, #136]	; (8009ee4 <TIM_Base_SetConfig+0xf4>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d003      	beq.n	8009e66 <TIM_Base_SetConfig+0x76>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a21      	ldr	r2, [pc, #132]	; (8009ee8 <TIM_Base_SetConfig+0xf8>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d108      	bne.n	8009e78 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	4a20      	ldr	r2, [pc, #128]	; (8009eec <TIM_Base_SetConfig+0xfc>)
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2280      	movs	r2, #128	; 0x80
 8009e7c:	4393      	bics	r3, r2
 8009e7e:	001a      	movs	r2, r3
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a0c      	ldr	r2, [pc, #48]	; (8009ed4 <TIM_Base_SetConfig+0xe4>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00b      	beq.n	8009ebe <TIM_Base_SetConfig+0xce>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a0d      	ldr	r2, [pc, #52]	; (8009ee0 <TIM_Base_SetConfig+0xf0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d007      	beq.n	8009ebe <TIM_Base_SetConfig+0xce>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a0c      	ldr	r2, [pc, #48]	; (8009ee4 <TIM_Base_SetConfig+0xf4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d003      	beq.n	8009ebe <TIM_Base_SetConfig+0xce>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a0b      	ldr	r2, [pc, #44]	; (8009ee8 <TIM_Base_SetConfig+0xf8>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d103      	bne.n	8009ec6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	691a      	ldr	r2, [r3, #16]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	615a      	str	r2, [r3, #20]
}
 8009ecc:	46c0      	nop			; (mov r8, r8)
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	b004      	add	sp, #16
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	40012c00 	.word	0x40012c00
 8009ed8:	40000400 	.word	0x40000400
 8009edc:	40002000 	.word	0x40002000
 8009ee0:	40014000 	.word	0x40014000
 8009ee4:	40014400 	.word	0x40014400
 8009ee8:	40014800 	.word	0x40014800
 8009eec:	fffffcff 	.word	0xfffffcff

08009ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a1b      	ldr	r3, [r3, #32]
 8009f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	2201      	movs	r2, #1
 8009f08:	4393      	bics	r3, r2
 8009f0a:	001a      	movs	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	22f0      	movs	r2, #240	; 0xf0
 8009f1a:	4393      	bics	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	220a      	movs	r2, #10
 8009f2c:	4393      	bics	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	621a      	str	r2, [r3, #32]
}
 8009f44:	46c0      	nop			; (mov r8, r8)
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b006      	add	sp, #24
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	2210      	movs	r2, #16
 8009f5e:	4393      	bics	r3, r2
 8009f60:	001a      	movs	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	4a0d      	ldr	r2, [pc, #52]	; (8009fac <TIM_TI2_ConfigInputStage+0x60>)
 8009f76:	4013      	ands	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	031b      	lsls	r3, r3, #12
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	22a0      	movs	r2, #160	; 0xa0
 8009f88:	4393      	bics	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	621a      	str	r2, [r3, #32]
}
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	b006      	add	sp, #24
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	ffff0fff 	.word	0xffff0fff

08009fb0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2270      	movs	r2, #112	; 0x70
 8009fc4:	4393      	bics	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	2207      	movs	r2, #7
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	609a      	str	r2, [r3, #8]
}
 8009fda:	46c0      	nop			; (mov r8, r8)
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	b004      	add	sp, #16
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	4a09      	ldr	r2, [pc, #36]	; (800a020 <TIM_ETR_SetConfig+0x3c>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	021a      	lsls	r2, r3, #8
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	431a      	orrs	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	4313      	orrs	r3, r2
 800a010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	609a      	str	r2, [r3, #8]
}
 800a018:	46c0      	nop			; (mov r8, r8)
 800a01a:	46bd      	mov	sp, r7
 800a01c:	b006      	add	sp, #24
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	ffff00ff 	.word	0xffff00ff

0800a024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	223c      	movs	r2, #60	; 0x3c
 800a032:	5c9b      	ldrb	r3, [r3, r2]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a038:	2302      	movs	r3, #2
 800a03a:	e047      	b.n	800a0cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	223c      	movs	r2, #60	; 0x3c
 800a040:	2101      	movs	r1, #1
 800a042:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	223d      	movs	r2, #61	; 0x3d
 800a048:	2102      	movs	r1, #2
 800a04a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2270      	movs	r2, #112	; 0x70
 800a060:	4393      	bics	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a16      	ldr	r2, [pc, #88]	; (800a0d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00f      	beq.n	800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	2380      	movs	r3, #128	; 0x80
 800a086:	05db      	lsls	r3, r3, #23
 800a088:	429a      	cmp	r2, r3
 800a08a:	d009      	beq.n	800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a11      	ldr	r2, [pc, #68]	; (800a0d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d004      	beq.n	800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a10      	ldr	r2, [pc, #64]	; (800a0dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d10c      	bne.n	800a0ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2280      	movs	r2, #128	; 0x80
 800a0a4:	4393      	bics	r3, r2
 800a0a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	223d      	movs	r2, #61	; 0x3d
 800a0be:	2101      	movs	r1, #1
 800a0c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	223c      	movs	r2, #60	; 0x3c
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	b004      	add	sp, #16
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	40012c00 	.word	0x40012c00
 800a0d8:	40000400 	.word	0x40000400
 800a0dc:	40014000 	.word	0x40014000

0800a0e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0e8:	46c0      	nop			; (mov r8, r8)
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	b002      	add	sp, #8
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0f8:	46c0      	nop			; (mov r8, r8)
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b002      	add	sp, #8
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e044      	b.n	800a19c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a116:	2b00      	cmp	r3, #0
 800a118:	d107      	bne.n	800a12a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2270      	movs	r2, #112	; 0x70
 800a11e:	2100      	movs	r1, #0
 800a120:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	0018      	movs	r0, r3
 800a126:	f7f9 f8ef 	bl	8003308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2224      	movs	r2, #36	; 0x24
 800a12e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2101      	movs	r1, #1
 800a13c:	438a      	bics	r2, r1
 800a13e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	0018      	movs	r0, r3
 800a144:	f000 fa24 	bl	800a590 <UART_SetConfig>
 800a148:	0003      	movs	r3, r0
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d101      	bne.n	800a152 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e024      	b.n	800a19c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	0018      	movs	r0, r3
 800a15e:	f000 fbe3 	bl	800a928 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	490d      	ldr	r1, [pc, #52]	; (800a1a4 <HAL_UART_Init+0xa4>)
 800a16e:	400a      	ands	r2, r1
 800a170:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	212a      	movs	r1, #42	; 0x2a
 800a17e:	438a      	bics	r2, r1
 800a180:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2101      	movs	r1, #1
 800a18e:	430a      	orrs	r2, r1
 800a190:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	0018      	movs	r0, r3
 800a196:	f000 fc7b 	bl	800aa90 <UART_CheckIdleState>
 800a19a:	0003      	movs	r3, r0
}
 800a19c:	0018      	movs	r0, r3
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	b002      	add	sp, #8
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	ffffb7ff 	.word	0xffffb7ff

0800a1a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08a      	sub	sp, #40	; 0x28
 800a1ac:	af02      	add	r7, sp, #8
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	1dbb      	adds	r3, r7, #6
 800a1b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	d000      	beq.n	800a1c2 <HAL_UART_Transmit+0x1a>
 800a1c0:	e095      	b.n	800a2ee <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d003      	beq.n	800a1d0 <HAL_UART_Transmit+0x28>
 800a1c8:	1dbb      	adds	r3, r7, #6
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e08d      	b.n	800a2f0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	689a      	ldr	r2, [r3, #8]
 800a1d8:	2380      	movs	r3, #128	; 0x80
 800a1da:	015b      	lsls	r3, r3, #5
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d109      	bne.n	800a1f4 <HAL_UART_Transmit+0x4c>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d105      	bne.n	800a1f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	d001      	beq.n	800a1f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e07d      	b.n	800a2f0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2270      	movs	r2, #112	; 0x70
 800a1f8:	5c9b      	ldrb	r3, [r3, r2]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d101      	bne.n	800a202 <HAL_UART_Transmit+0x5a>
 800a1fe:	2302      	movs	r3, #2
 800a200:	e076      	b.n	800a2f0 <HAL_UART_Transmit+0x148>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2270      	movs	r2, #112	; 0x70
 800a206:	2101      	movs	r1, #1
 800a208:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2221      	movs	r2, #33	; 0x21
 800a214:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a216:	f7f9 f9d9 	bl	80035cc <HAL_GetTick>
 800a21a:	0003      	movs	r3, r0
 800a21c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	1dba      	adds	r2, r7, #6
 800a222:	2150      	movs	r1, #80	; 0x50
 800a224:	8812      	ldrh	r2, [r2, #0]
 800a226:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	1dba      	adds	r2, r7, #6
 800a22c:	2152      	movs	r1, #82	; 0x52
 800a22e:	8812      	ldrh	r2, [r2, #0]
 800a230:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	689a      	ldr	r2, [r3, #8]
 800a236:	2380      	movs	r3, #128	; 0x80
 800a238:	015b      	lsls	r3, r3, #5
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d108      	bne.n	800a250 <HAL_UART_Transmit+0xa8>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d104      	bne.n	800a250 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	61bb      	str	r3, [r7, #24]
 800a24e:	e003      	b.n	800a258 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a254:	2300      	movs	r3, #0
 800a256:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a258:	e02d      	b.n	800a2b6 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	0013      	movs	r3, r2
 800a264:	2200      	movs	r2, #0
 800a266:	2180      	movs	r1, #128	; 0x80
 800a268:	f000 fc58 	bl	800ab1c <UART_WaitOnFlagUntilTimeout>
 800a26c:	1e03      	subs	r3, r0, #0
 800a26e:	d001      	beq.n	800a274 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e03d      	b.n	800a2f0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	881a      	ldrh	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	05d2      	lsls	r2, r2, #23
 800a284:	0dd2      	lsrs	r2, r2, #23
 800a286:	b292      	uxth	r2, r2
 800a288:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	3302      	adds	r3, #2
 800a28e:	61bb      	str	r3, [r7, #24]
 800a290:	e008      	b.n	800a2a4 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	781a      	ldrb	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	b292      	uxth	r2, r2
 800a29c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2252      	movs	r2, #82	; 0x52
 800a2a8:	5a9b      	ldrh	r3, [r3, r2]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	b299      	uxth	r1, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2252      	movs	r2, #82	; 0x52
 800a2b4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2252      	movs	r2, #82	; 0x52
 800a2ba:	5a9b      	ldrh	r3, [r3, r2]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1cb      	bne.n	800a25a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	0013      	movs	r3, r2
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2140      	movs	r1, #64	; 0x40
 800a2d0:	f000 fc24 	bl	800ab1c <UART_WaitOnFlagUntilTimeout>
 800a2d4:	1e03      	subs	r3, r0, #0
 800a2d6:	d001      	beq.n	800a2dc <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e009      	b.n	800a2f0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2220      	movs	r2, #32
 800a2e0:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2270      	movs	r2, #112	; 0x70
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e000      	b.n	800a2f0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800a2ee:	2302      	movs	r3, #2
  }
}
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	b008      	add	sp, #32
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	4a93      	ldr	r2, [pc, #588]	; (800a568 <HAL_UART_IRQHandler+0x270>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d112      	bne.n	800a34c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	2220      	movs	r2, #32
 800a32a:	4013      	ands	r3, r2
 800a32c:	d00e      	beq.n	800a34c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	2220      	movs	r2, #32
 800a332:	4013      	ands	r3, r2
 800a334:	d00a      	beq.n	800a34c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d100      	bne.n	800a340 <HAL_UART_IRQHandler+0x48>
 800a33e:	e10b      	b.n	800a558 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	0010      	movs	r0, r2
 800a348:	4798      	blx	r3
      }
      return;
 800a34a:	e105      	b.n	800a558 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d100      	bne.n	800a354 <HAL_UART_IRQHandler+0x5c>
 800a352:	e0cd      	b.n	800a4f0 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	2201      	movs	r2, #1
 800a358:	4013      	ands	r3, r2
 800a35a:	d105      	bne.n	800a368 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	2390      	movs	r3, #144	; 0x90
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	4013      	ands	r3, r2
 800a364:	d100      	bne.n	800a368 <HAL_UART_IRQHandler+0x70>
 800a366:	e0c3      	b.n	800a4f0 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	2201      	movs	r2, #1
 800a36c:	4013      	ands	r3, r2
 800a36e:	d00e      	beq.n	800a38e <HAL_UART_IRQHandler+0x96>
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	2380      	movs	r3, #128	; 0x80
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	4013      	ands	r3, r2
 800a378:	d009      	beq.n	800a38e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2201      	movs	r2, #1
 800a380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a386:	2201      	movs	r2, #1
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	2202      	movs	r2, #2
 800a392:	4013      	ands	r3, r2
 800a394:	d00d      	beq.n	800a3b2 <HAL_UART_IRQHandler+0xba>
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2201      	movs	r2, #1
 800a39a:	4013      	ands	r3, r2
 800a39c:	d009      	beq.n	800a3b2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	d00d      	beq.n	800a3d6 <HAL_UART_IRQHandler+0xde>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	4013      	ands	r3, r2
 800a3c0:	d009      	beq.n	800a3d6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2204      	movs	r2, #4
 800a3c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	2208      	movs	r2, #8
 800a3da:	4013      	ands	r3, r2
 800a3dc:	d011      	beq.n	800a402 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	d103      	bne.n	800a3ee <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a3ec:	d009      	beq.n	800a402 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2208      	movs	r2, #8
 800a3f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3fa:	2208      	movs	r2, #8
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a402:	69fa      	ldr	r2, [r7, #28]
 800a404:	2380      	movs	r3, #128	; 0x80
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	4013      	ands	r3, r2
 800a40a:	d00f      	beq.n	800a42c <HAL_UART_IRQHandler+0x134>
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	2380      	movs	r3, #128	; 0x80
 800a410:	04db      	lsls	r3, r3, #19
 800a412:	4013      	ands	r3, r2
 800a414:	d00a      	beq.n	800a42c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2280      	movs	r2, #128	; 0x80
 800a41c:	0112      	lsls	r2, r2, #4
 800a41e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a424:	2220      	movs	r2, #32
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d100      	bne.n	800a436 <HAL_UART_IRQHandler+0x13e>
 800a434:	e092      	b.n	800a55c <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	2220      	movs	r2, #32
 800a43a:	4013      	ands	r3, r2
 800a43c:	d00c      	beq.n	800a458 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	2220      	movs	r2, #32
 800a442:	4013      	ands	r3, r2
 800a444:	d008      	beq.n	800a458 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d004      	beq.n	800a458 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	0010      	movs	r0, r2
 800a456:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a45c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	2240      	movs	r2, #64	; 0x40
 800a466:	4013      	ands	r3, r2
 800a468:	2b40      	cmp	r3, #64	; 0x40
 800a46a:	d003      	beq.n	800a474 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2228      	movs	r2, #40	; 0x28
 800a470:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a472:	d033      	beq.n	800a4dc <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	0018      	movs	r0, r3
 800a478:	f000 fbce 	bl	800ac18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2240      	movs	r2, #64	; 0x40
 800a484:	4013      	ands	r3, r2
 800a486:	2b40      	cmp	r3, #64	; 0x40
 800a488:	d123      	bne.n	800a4d2 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2140      	movs	r1, #64	; 0x40
 800a496:	438a      	bics	r2, r1
 800a498:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d012      	beq.n	800a4c8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a6:	4a31      	ldr	r2, [pc, #196]	; (800a56c <HAL_UART_IRQHandler+0x274>)
 800a4a8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	f7fa fe64 	bl	800517c <HAL_DMA_Abort_IT>
 800a4b4:	1e03      	subs	r3, r0, #0
 800a4b6:	d019      	beq.n	800a4ec <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4c6:	e011      	b.n	800a4ec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	f000 f858 	bl	800a580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4d0:	e00c      	b.n	800a4ec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f000 f853 	bl	800a580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4da:	e007      	b.n	800a4ec <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	0018      	movs	r0, r3
 800a4e0:	f000 f84e 	bl	800a580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a4ea:	e037      	b.n	800a55c <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ec:	46c0      	nop			; (mov r8, r8)
    return;
 800a4ee:	e035      	b.n	800a55c <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a4f0:	69fa      	ldr	r2, [r7, #28]
 800a4f2:	2380      	movs	r3, #128	; 0x80
 800a4f4:	035b      	lsls	r3, r3, #13
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	d00e      	beq.n	800a518 <HAL_UART_IRQHandler+0x220>
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	2380      	movs	r3, #128	; 0x80
 800a4fe:	03db      	lsls	r3, r3, #15
 800a500:	4013      	ands	r3, r2
 800a502:	d009      	beq.n	800a518 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2280      	movs	r2, #128	; 0x80
 800a50a:	0352      	lsls	r2, r2, #13
 800a50c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	0018      	movs	r0, r3
 800a512:	f000 fbd2 	bl	800acba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a516:	e024      	b.n	800a562 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	2280      	movs	r2, #128	; 0x80
 800a51c:	4013      	ands	r3, r2
 800a51e:	d00d      	beq.n	800a53c <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	2280      	movs	r2, #128	; 0x80
 800a524:	4013      	ands	r3, r2
 800a526:	d009      	beq.n	800a53c <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d017      	beq.n	800a560 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	0010      	movs	r0, r2
 800a538:	4798      	blx	r3
    }
    return;
 800a53a:	e011      	b.n	800a560 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	2240      	movs	r2, #64	; 0x40
 800a540:	4013      	ands	r3, r2
 800a542:	d00e      	beq.n	800a562 <HAL_UART_IRQHandler+0x26a>
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2240      	movs	r2, #64	; 0x40
 800a548:	4013      	ands	r3, r2
 800a54a:	d00a      	beq.n	800a562 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	0018      	movs	r0, r3
 800a550:	f000 fb99 	bl	800ac86 <UART_EndTransmit_IT>
    return;
 800a554:	46c0      	nop			; (mov r8, r8)
 800a556:	e004      	b.n	800a562 <HAL_UART_IRQHandler+0x26a>
      return;
 800a558:	46c0      	nop			; (mov r8, r8)
 800a55a:	e002      	b.n	800a562 <HAL_UART_IRQHandler+0x26a>
    return;
 800a55c:	46c0      	nop			; (mov r8, r8)
 800a55e:	e000      	b.n	800a562 <HAL_UART_IRQHandler+0x26a>
    return;
 800a560:	46c0      	nop			; (mov r8, r8)
  }

}
 800a562:	46bd      	mov	sp, r7
 800a564:	b008      	add	sp, #32
 800a566:	bd80      	pop	{r7, pc}
 800a568:	0000080f 	.word	0x0000080f
 800a56c:	0800ac59 	.word	0x0800ac59

0800a570 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a578:	46c0      	nop			; (mov r8, r8)
 800a57a:	46bd      	mov	sp, r7
 800a57c:	b002      	add	sp, #8
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a588:	46c0      	nop			; (mov r8, r8)
 800a58a:	46bd      	mov	sp, r7
 800a58c:	b002      	add	sp, #8
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a598:	2300      	movs	r3, #0
 800a59a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a59c:	2317      	movs	r3, #23
 800a59e:	18fb      	adds	r3, r7, r3
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4ac5      	ldr	r2, [pc, #788]	; (800a8d8 <UART_SetConfig+0x348>)
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	0019      	movs	r1, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4ac0      	ldr	r2, [pc, #768]	; (800a8dc <UART_SetConfig+0x34c>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	0019      	movs	r1, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	4ab7      	ldr	r2, [pc, #732]	; (800a8e0 <UART_SetConfig+0x350>)
 800a602:	4013      	ands	r3, r2
 800a604:	0019      	movs	r1, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4ab3      	ldr	r2, [pc, #716]	; (800a8e4 <UART_SetConfig+0x354>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d125      	bne.n	800a666 <UART_SetConfig+0xd6>
 800a61a:	4bb3      	ldr	r3, [pc, #716]	; (800a8e8 <UART_SetConfig+0x358>)
 800a61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61e:	2203      	movs	r2, #3
 800a620:	4013      	ands	r3, r2
 800a622:	2b01      	cmp	r3, #1
 800a624:	d00f      	beq.n	800a646 <UART_SetConfig+0xb6>
 800a626:	d304      	bcc.n	800a632 <UART_SetConfig+0xa2>
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d011      	beq.n	800a650 <UART_SetConfig+0xc0>
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d005      	beq.n	800a63c <UART_SetConfig+0xac>
 800a630:	e013      	b.n	800a65a <UART_SetConfig+0xca>
 800a632:	231f      	movs	r3, #31
 800a634:	18fb      	adds	r3, r7, r3
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
 800a63a:	e064      	b.n	800a706 <UART_SetConfig+0x176>
 800a63c:	231f      	movs	r3, #31
 800a63e:	18fb      	adds	r3, r7, r3
 800a640:	2202      	movs	r2, #2
 800a642:	701a      	strb	r2, [r3, #0]
 800a644:	e05f      	b.n	800a706 <UART_SetConfig+0x176>
 800a646:	231f      	movs	r3, #31
 800a648:	18fb      	adds	r3, r7, r3
 800a64a:	2204      	movs	r2, #4
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e05a      	b.n	800a706 <UART_SetConfig+0x176>
 800a650:	231f      	movs	r3, #31
 800a652:	18fb      	adds	r3, r7, r3
 800a654:	2208      	movs	r2, #8
 800a656:	701a      	strb	r2, [r3, #0]
 800a658:	e055      	b.n	800a706 <UART_SetConfig+0x176>
 800a65a:	231f      	movs	r3, #31
 800a65c:	18fb      	adds	r3, r7, r3
 800a65e:	2210      	movs	r2, #16
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	46c0      	nop			; (mov r8, r8)
 800a664:	e04f      	b.n	800a706 <UART_SetConfig+0x176>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4aa0      	ldr	r2, [pc, #640]	; (800a8ec <UART_SetConfig+0x35c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d132      	bne.n	800a6d6 <UART_SetConfig+0x146>
 800a670:	4b9d      	ldr	r3, [pc, #628]	; (800a8e8 <UART_SetConfig+0x358>)
 800a672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a674:	23c0      	movs	r3, #192	; 0xc0
 800a676:	029b      	lsls	r3, r3, #10
 800a678:	4013      	ands	r3, r2
 800a67a:	2280      	movs	r2, #128	; 0x80
 800a67c:	0252      	lsls	r2, r2, #9
 800a67e:	4293      	cmp	r3, r2
 800a680:	d019      	beq.n	800a6b6 <UART_SetConfig+0x126>
 800a682:	2280      	movs	r2, #128	; 0x80
 800a684:	0252      	lsls	r2, r2, #9
 800a686:	4293      	cmp	r3, r2
 800a688:	d802      	bhi.n	800a690 <UART_SetConfig+0x100>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d009      	beq.n	800a6a2 <UART_SetConfig+0x112>
 800a68e:	e01c      	b.n	800a6ca <UART_SetConfig+0x13a>
 800a690:	2280      	movs	r2, #128	; 0x80
 800a692:	0292      	lsls	r2, r2, #10
 800a694:	4293      	cmp	r3, r2
 800a696:	d013      	beq.n	800a6c0 <UART_SetConfig+0x130>
 800a698:	22c0      	movs	r2, #192	; 0xc0
 800a69a:	0292      	lsls	r2, r2, #10
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d005      	beq.n	800a6ac <UART_SetConfig+0x11c>
 800a6a0:	e013      	b.n	800a6ca <UART_SetConfig+0x13a>
 800a6a2:	231f      	movs	r3, #31
 800a6a4:	18fb      	adds	r3, r7, r3
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	701a      	strb	r2, [r3, #0]
 800a6aa:	e02c      	b.n	800a706 <UART_SetConfig+0x176>
 800a6ac:	231f      	movs	r3, #31
 800a6ae:	18fb      	adds	r3, r7, r3
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	701a      	strb	r2, [r3, #0]
 800a6b4:	e027      	b.n	800a706 <UART_SetConfig+0x176>
 800a6b6:	231f      	movs	r3, #31
 800a6b8:	18fb      	adds	r3, r7, r3
 800a6ba:	2204      	movs	r2, #4
 800a6bc:	701a      	strb	r2, [r3, #0]
 800a6be:	e022      	b.n	800a706 <UART_SetConfig+0x176>
 800a6c0:	231f      	movs	r3, #31
 800a6c2:	18fb      	adds	r3, r7, r3
 800a6c4:	2208      	movs	r2, #8
 800a6c6:	701a      	strb	r2, [r3, #0]
 800a6c8:	e01d      	b.n	800a706 <UART_SetConfig+0x176>
 800a6ca:	231f      	movs	r3, #31
 800a6cc:	18fb      	adds	r3, r7, r3
 800a6ce:	2210      	movs	r2, #16
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	46c0      	nop			; (mov r8, r8)
 800a6d4:	e017      	b.n	800a706 <UART_SetConfig+0x176>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a85      	ldr	r2, [pc, #532]	; (800a8f0 <UART_SetConfig+0x360>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d104      	bne.n	800a6ea <UART_SetConfig+0x15a>
 800a6e0:	231f      	movs	r3, #31
 800a6e2:	18fb      	adds	r3, r7, r3
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	701a      	strb	r2, [r3, #0]
 800a6e8:	e00d      	b.n	800a706 <UART_SetConfig+0x176>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a81      	ldr	r2, [pc, #516]	; (800a8f4 <UART_SetConfig+0x364>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d104      	bne.n	800a6fe <UART_SetConfig+0x16e>
 800a6f4:	231f      	movs	r3, #31
 800a6f6:	18fb      	adds	r3, r7, r3
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	701a      	strb	r2, [r3, #0]
 800a6fc:	e003      	b.n	800a706 <UART_SetConfig+0x176>
 800a6fe:	231f      	movs	r3, #31
 800a700:	18fb      	adds	r3, r7, r3
 800a702:	2210      	movs	r2, #16
 800a704:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69da      	ldr	r2, [r3, #28]
 800a70a:	2380      	movs	r3, #128	; 0x80
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	429a      	cmp	r2, r3
 800a710:	d000      	beq.n	800a714 <UART_SetConfig+0x184>
 800a712:	e07d      	b.n	800a810 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 800a714:	231f      	movs	r3, #31
 800a716:	18fb      	adds	r3, r7, r3
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d01c      	beq.n	800a758 <UART_SetConfig+0x1c8>
 800a71e:	dc02      	bgt.n	800a726 <UART_SetConfig+0x196>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d005      	beq.n	800a730 <UART_SetConfig+0x1a0>
 800a724:	e04b      	b.n	800a7be <UART_SetConfig+0x22e>
 800a726:	2b04      	cmp	r3, #4
 800a728:	d025      	beq.n	800a776 <UART_SetConfig+0x1e6>
 800a72a:	2b08      	cmp	r3, #8
 800a72c:	d037      	beq.n	800a79e <UART_SetConfig+0x20e>
 800a72e:	e046      	b.n	800a7be <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a730:	f7fe fcb8 	bl	80090a4 <HAL_RCC_GetPCLK1Freq>
 800a734:	0003      	movs	r3, r0
 800a736:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	005a      	lsls	r2, r3, #1
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	085b      	lsrs	r3, r3, #1
 800a742:	18d2      	adds	r2, r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	0019      	movs	r1, r3
 800a74a:	0010      	movs	r0, r2
 800a74c:	f7f5 fcdc 	bl	8000108 <__udivsi3>
 800a750:	0003      	movs	r3, r0
 800a752:	b29b      	uxth	r3, r3
 800a754:	61bb      	str	r3, [r7, #24]
        break;
 800a756:	e037      	b.n	800a7c8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	085b      	lsrs	r3, r3, #1
 800a75e:	4a66      	ldr	r2, [pc, #408]	; (800a8f8 <UART_SetConfig+0x368>)
 800a760:	189a      	adds	r2, r3, r2
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	0019      	movs	r1, r3
 800a768:	0010      	movs	r0, r2
 800a76a:	f7f5 fccd 	bl	8000108 <__udivsi3>
 800a76e:	0003      	movs	r3, r0
 800a770:	b29b      	uxth	r3, r3
 800a772:	61bb      	str	r3, [r7, #24]
        break;
 800a774:	e028      	b.n	800a7c8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a776:	f7fe fc0d 	bl	8008f94 <HAL_RCC_GetSysClockFreq>
 800a77a:	0003      	movs	r3, r0
 800a77c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	005a      	lsls	r2, r3, #1
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	085b      	lsrs	r3, r3, #1
 800a788:	18d2      	adds	r2, r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	0019      	movs	r1, r3
 800a790:	0010      	movs	r0, r2
 800a792:	f7f5 fcb9 	bl	8000108 <__udivsi3>
 800a796:	0003      	movs	r3, r0
 800a798:	b29b      	uxth	r3, r3
 800a79a:	61bb      	str	r3, [r7, #24]
        break;
 800a79c:	e014      	b.n	800a7c8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	085b      	lsrs	r3, r3, #1
 800a7a4:	2280      	movs	r2, #128	; 0x80
 800a7a6:	0252      	lsls	r2, r2, #9
 800a7a8:	189a      	adds	r2, r3, r2
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	0019      	movs	r1, r3
 800a7b0:	0010      	movs	r0, r2
 800a7b2:	f7f5 fca9 	bl	8000108 <__udivsi3>
 800a7b6:	0003      	movs	r3, r0
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	61bb      	str	r3, [r7, #24]
        break;
 800a7bc:	e004      	b.n	800a7c8 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 800a7be:	2317      	movs	r3, #23
 800a7c0:	18fb      	adds	r3, r7, r3
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	701a      	strb	r2, [r3, #0]
        break;
 800a7c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	2b0f      	cmp	r3, #15
 800a7cc:	d91b      	bls.n	800a806 <UART_SetConfig+0x276>
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	4a4a      	ldr	r2, [pc, #296]	; (800a8fc <UART_SetConfig+0x36c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d817      	bhi.n	800a806 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	200a      	movs	r0, #10
 800a7dc:	183b      	adds	r3, r7, r0
 800a7de:	210f      	movs	r1, #15
 800a7e0:	438a      	bics	r2, r1
 800a7e2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	085b      	lsrs	r3, r3, #1
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	2207      	movs	r2, #7
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	b299      	uxth	r1, r3
 800a7f0:	183b      	adds	r3, r7, r0
 800a7f2:	183a      	adds	r2, r7, r0
 800a7f4:	8812      	ldrh	r2, [r2, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	183a      	adds	r2, r7, r0
 800a800:	8812      	ldrh	r2, [r2, #0]
 800a802:	60da      	str	r2, [r3, #12]
 800a804:	e082      	b.n	800a90c <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 800a806:	2317      	movs	r3, #23
 800a808:	18fb      	adds	r3, r7, r3
 800a80a:	2201      	movs	r2, #1
 800a80c:	701a      	strb	r2, [r3, #0]
 800a80e:	e07d      	b.n	800a90c <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 800a810:	231f      	movs	r3, #31
 800a812:	18fb      	adds	r3, r7, r3
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d01b      	beq.n	800a852 <UART_SetConfig+0x2c2>
 800a81a:	dc02      	bgt.n	800a822 <UART_SetConfig+0x292>
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <UART_SetConfig+0x29c>
 800a820:	e049      	b.n	800a8b6 <UART_SetConfig+0x326>
 800a822:	2b04      	cmp	r3, #4
 800a824:	d024      	beq.n	800a870 <UART_SetConfig+0x2e0>
 800a826:	2b08      	cmp	r3, #8
 800a828:	d035      	beq.n	800a896 <UART_SetConfig+0x306>
 800a82a:	e044      	b.n	800a8b6 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a82c:	f7fe fc3a 	bl	80090a4 <HAL_RCC_GetPCLK1Freq>
 800a830:	0003      	movs	r3, r0
 800a832:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	085a      	lsrs	r2, r3, #1
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	18d2      	adds	r2, r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	0019      	movs	r1, r3
 800a844:	0010      	movs	r0, r2
 800a846:	f7f5 fc5f 	bl	8000108 <__udivsi3>
 800a84a:	0003      	movs	r3, r0
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	61bb      	str	r3, [r7, #24]
        break;
 800a850:	e036      	b.n	800a8c0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	085b      	lsrs	r3, r3, #1
 800a858:	4a29      	ldr	r2, [pc, #164]	; (800a900 <UART_SetConfig+0x370>)
 800a85a:	189a      	adds	r2, r3, r2
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	0019      	movs	r1, r3
 800a862:	0010      	movs	r0, r2
 800a864:	f7f5 fc50 	bl	8000108 <__udivsi3>
 800a868:	0003      	movs	r3, r0
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	61bb      	str	r3, [r7, #24]
        break;
 800a86e:	e027      	b.n	800a8c0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a870:	f7fe fb90 	bl	8008f94 <HAL_RCC_GetSysClockFreq>
 800a874:	0003      	movs	r3, r0
 800a876:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	085a      	lsrs	r2, r3, #1
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	18d2      	adds	r2, r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	0019      	movs	r1, r3
 800a888:	0010      	movs	r0, r2
 800a88a:	f7f5 fc3d 	bl	8000108 <__udivsi3>
 800a88e:	0003      	movs	r3, r0
 800a890:	b29b      	uxth	r3, r3
 800a892:	61bb      	str	r3, [r7, #24]
        break;
 800a894:	e014      	b.n	800a8c0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	085b      	lsrs	r3, r3, #1
 800a89c:	2280      	movs	r2, #128	; 0x80
 800a89e:	0212      	lsls	r2, r2, #8
 800a8a0:	189a      	adds	r2, r3, r2
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	0019      	movs	r1, r3
 800a8a8:	0010      	movs	r0, r2
 800a8aa:	f7f5 fc2d 	bl	8000108 <__udivsi3>
 800a8ae:	0003      	movs	r3, r0
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	61bb      	str	r3, [r7, #24]
        break;
 800a8b4:	e004      	b.n	800a8c0 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 800a8b6:	2317      	movs	r3, #23
 800a8b8:	18fb      	adds	r3, r7, r3
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	701a      	strb	r2, [r3, #0]
        break;
 800a8be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	2b0f      	cmp	r3, #15
 800a8c4:	d91e      	bls.n	800a904 <UART_SetConfig+0x374>
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	4a0c      	ldr	r2, [pc, #48]	; (800a8fc <UART_SetConfig+0x36c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d81a      	bhi.n	800a904 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	69ba      	ldr	r2, [r7, #24]
 800a8d4:	60da      	str	r2, [r3, #12]
 800a8d6:	e019      	b.n	800a90c <UART_SetConfig+0x37c>
 800a8d8:	efff69f3 	.word	0xefff69f3
 800a8dc:	ffffcfff 	.word	0xffffcfff
 800a8e0:	fffff4ff 	.word	0xfffff4ff
 800a8e4:	40013800 	.word	0x40013800
 800a8e8:	40021000 	.word	0x40021000
 800a8ec:	40004400 	.word	0x40004400
 800a8f0:	40004800 	.word	0x40004800
 800a8f4:	40004c00 	.word	0x40004c00
 800a8f8:	00f42400 	.word	0x00f42400
 800a8fc:	0000ffff 	.word	0x0000ffff
 800a900:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 800a904:	2317      	movs	r3, #23
 800a906:	18fb      	adds	r3, r7, r3
 800a908:	2201      	movs	r2, #1
 800a90a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a918:	2317      	movs	r3, #23
 800a91a:	18fb      	adds	r3, r7, r3
 800a91c:	781b      	ldrb	r3, [r3, #0]
}
 800a91e:	0018      	movs	r0, r3
 800a920:	46bd      	mov	sp, r7
 800a922:	b008      	add	sp, #32
 800a924:	bd80      	pop	{r7, pc}
 800a926:	46c0      	nop			; (mov r8, r8)

0800a928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a934:	2201      	movs	r2, #1
 800a936:	4013      	ands	r3, r2
 800a938:	d00b      	beq.n	800a952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	4a4a      	ldr	r2, [pc, #296]	; (800aa6c <UART_AdvFeatureConfig+0x144>)
 800a942:	4013      	ands	r3, r2
 800a944:	0019      	movs	r1, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	2202      	movs	r2, #2
 800a958:	4013      	ands	r3, r2
 800a95a:	d00b      	beq.n	800a974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4a43      	ldr	r2, [pc, #268]	; (800aa70 <UART_AdvFeatureConfig+0x148>)
 800a964:	4013      	ands	r3, r2
 800a966:	0019      	movs	r1, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	430a      	orrs	r2, r1
 800a972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	2204      	movs	r2, #4
 800a97a:	4013      	ands	r3, r2
 800a97c:	d00b      	beq.n	800a996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4a3b      	ldr	r2, [pc, #236]	; (800aa74 <UART_AdvFeatureConfig+0x14c>)
 800a986:	4013      	ands	r3, r2
 800a988:	0019      	movs	r1, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	430a      	orrs	r2, r1
 800a994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	2208      	movs	r2, #8
 800a99c:	4013      	ands	r3, r2
 800a99e:	d00b      	beq.n	800a9b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	4a34      	ldr	r2, [pc, #208]	; (800aa78 <UART_AdvFeatureConfig+0x150>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	0019      	movs	r1, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	430a      	orrs	r2, r1
 800a9b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9bc:	2210      	movs	r2, #16
 800a9be:	4013      	ands	r3, r2
 800a9c0:	d00b      	beq.n	800a9da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	4a2c      	ldr	r2, [pc, #176]	; (800aa7c <UART_AdvFeatureConfig+0x154>)
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	0019      	movs	r1, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	430a      	orrs	r2, r1
 800a9d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	2220      	movs	r2, #32
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	d00b      	beq.n	800a9fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	4a25      	ldr	r2, [pc, #148]	; (800aa80 <UART_AdvFeatureConfig+0x158>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	0019      	movs	r1, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	430a      	orrs	r2, r1
 800a9fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2240      	movs	r2, #64	; 0x40
 800aa02:	4013      	ands	r3, r2
 800aa04:	d01d      	beq.n	800aa42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	4a1d      	ldr	r2, [pc, #116]	; (800aa84 <UART_AdvFeatureConfig+0x15c>)
 800aa0e:	4013      	ands	r3, r2
 800aa10:	0019      	movs	r1, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa22:	2380      	movs	r3, #128	; 0x80
 800aa24:	035b      	lsls	r3, r3, #13
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d10b      	bne.n	800aa42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4a15      	ldr	r2, [pc, #84]	; (800aa88 <UART_AdvFeatureConfig+0x160>)
 800aa32:	4013      	ands	r3, r2
 800aa34:	0019      	movs	r1, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2280      	movs	r2, #128	; 0x80
 800aa48:	4013      	ands	r3, r2
 800aa4a:	d00b      	beq.n	800aa64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	4a0e      	ldr	r2, [pc, #56]	; (800aa8c <UART_AdvFeatureConfig+0x164>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	0019      	movs	r1, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	605a      	str	r2, [r3, #4]
  }
}
 800aa64:	46c0      	nop			; (mov r8, r8)
 800aa66:	46bd      	mov	sp, r7
 800aa68:	b002      	add	sp, #8
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	fffdffff 	.word	0xfffdffff
 800aa70:	fffeffff 	.word	0xfffeffff
 800aa74:	fffbffff 	.word	0xfffbffff
 800aa78:	ffff7fff 	.word	0xffff7fff
 800aa7c:	ffffefff 	.word	0xffffefff
 800aa80:	ffffdfff 	.word	0xffffdfff
 800aa84:	ffefffff 	.word	0xffefffff
 800aa88:	ff9fffff 	.word	0xff9fffff
 800aa8c:	fff7ffff 	.word	0xfff7ffff

0800aa90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aa9e:	f7f8 fd95 	bl	80035cc <HAL_GetTick>
 800aaa2:	0003      	movs	r3, r0
 800aaa4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2208      	movs	r2, #8
 800aaae:	4013      	ands	r3, r2
 800aab0:	2b08      	cmp	r3, #8
 800aab2:	d10d      	bne.n	800aad0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	2380      	movs	r3, #128	; 0x80
 800aab8:	0399      	lsls	r1, r3, #14
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	4b16      	ldr	r3, [pc, #88]	; (800ab18 <UART_CheckIdleState+0x88>)
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	0013      	movs	r3, r2
 800aac2:	2200      	movs	r2, #0
 800aac4:	f000 f82a 	bl	800ab1c <UART_WaitOnFlagUntilTimeout>
 800aac8:	1e03      	subs	r3, r0, #0
 800aaca:	d001      	beq.n	800aad0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e01f      	b.n	800ab10 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2204      	movs	r2, #4
 800aad8:	4013      	ands	r3, r2
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d10d      	bne.n	800aafa <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	2380      	movs	r3, #128	; 0x80
 800aae2:	03d9      	lsls	r1, r3, #15
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	4b0c      	ldr	r3, [pc, #48]	; (800ab18 <UART_CheckIdleState+0x88>)
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	0013      	movs	r3, r2
 800aaec:	2200      	movs	r2, #0
 800aaee:	f000 f815 	bl	800ab1c <UART_WaitOnFlagUntilTimeout>
 800aaf2:	1e03      	subs	r3, r0, #0
 800aaf4:	d001      	beq.n	800aafa <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e00a      	b.n	800ab10 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2220      	movs	r2, #32
 800aafe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2220      	movs	r2, #32
 800ab04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2270      	movs	r2, #112	; 0x70
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	0018      	movs	r0, r3
 800ab12:	46bd      	mov	sp, r7
 800ab14:	b004      	add	sp, #16
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	01ffffff 	.word	0x01ffffff

0800ab1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	1dfb      	adds	r3, r7, #7
 800ab2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab2c:	e05d      	b.n	800abea <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	3301      	adds	r3, #1
 800ab32:	d05a      	beq.n	800abea <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab34:	f7f8 fd4a 	bl	80035cc <HAL_GetTick>
 800ab38:	0002      	movs	r2, r0
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d302      	bcc.n	800ab4a <UART_WaitOnFlagUntilTimeout+0x2e>
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d11b      	bne.n	800ab82 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	492f      	ldr	r1, [pc, #188]	; (800ac14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800ab56:	400a      	ands	r2, r1
 800ab58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	689a      	ldr	r2, [r3, #8]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2101      	movs	r1, #1
 800ab66:	438a      	bics	r2, r1
 800ab68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2220      	movs	r2, #32
 800ab74:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2270      	movs	r2, #112	; 0x70
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e043      	b.n	800ac0a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2204      	movs	r2, #4
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	d02d      	beq.n	800abea <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69da      	ldr	r2, [r3, #28]
 800ab94:	2380      	movs	r3, #128	; 0x80
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	401a      	ands	r2, r3
 800ab9a:	2380      	movs	r3, #128	; 0x80
 800ab9c:	011b      	lsls	r3, r3, #4
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d123      	bne.n	800abea <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2280      	movs	r2, #128	; 0x80
 800aba8:	0112      	lsls	r2, r2, #4
 800abaa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4917      	ldr	r1, [pc, #92]	; (800ac14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800abb8:	400a      	ands	r2, r1
 800abba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689a      	ldr	r2, [r3, #8]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2101      	movs	r1, #1
 800abc8:	438a      	bics	r2, r1
 800abca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2220      	movs	r2, #32
 800abd0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2220      	movs	r2, #32
 800abd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2220      	movs	r2, #32
 800abdc:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2270      	movs	r2, #112	; 0x70
 800abe2:	2100      	movs	r1, #0
 800abe4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e00f      	b.n	800ac0a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	4013      	ands	r3, r2
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	425a      	negs	r2, r3
 800abfa:	4153      	adcs	r3, r2
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	001a      	movs	r2, r3
 800ac00:	1dfb      	adds	r3, r7, #7
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d092      	beq.n	800ab2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	b004      	add	sp, #16
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	fffffe5f 	.word	0xfffffe5f

0800ac18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	490a      	ldr	r1, [pc, #40]	; (800ac54 <UART_EndRxTransfer+0x3c>)
 800ac2c:	400a      	ands	r2, r1
 800ac2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689a      	ldr	r2, [r3, #8]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	438a      	bics	r2, r1
 800ac3e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2220      	movs	r2, #32
 800ac44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ac4c:	46c0      	nop			; (mov r8, r8)
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	b002      	add	sp, #8
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	fffffedf 	.word	0xfffffedf

0800ac58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	225a      	movs	r2, #90	; 0x5a
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2252      	movs	r2, #82	; 0x52
 800ac72:	2100      	movs	r1, #0
 800ac74:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f7ff fc81 	bl	800a580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	46bd      	mov	sp, r7
 800ac82:	b004      	add	sp, #16
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2140      	movs	r1, #64	; 0x40
 800ac9a:	438a      	bics	r2, r1
 800ac9c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2220      	movs	r2, #32
 800aca2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	0018      	movs	r0, r3
 800acae:	f7ff fc5f 	bl	800a570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acb2:	46c0      	nop			; (mov r8, r8)
 800acb4:	46bd      	mov	sp, r7
 800acb6:	b002      	add	sp, #8
 800acb8:	bd80      	pop	{r7, pc}

0800acba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acc2:	46c0      	nop			; (mov r8, r8)
 800acc4:	46bd      	mov	sp, r7
 800acc6:	b002      	add	sp, #8
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2244      	movs	r2, #68	; 0x44
 800acd8:	2100      	movs	r1, #0
 800acda:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <USB_EnableGlobalInt+0x28>)
 800acde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	b299      	uxth	r1, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2240      	movs	r2, #64	; 0x40
 800ace8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	0018      	movs	r0, r3
 800acee:	46bd      	mov	sp, r7
 800acf0:	b004      	add	sp, #16
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	0000bf80 	.word	0x0000bf80

0800acf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ad00:	4b09      	ldr	r3, [pc, #36]	; (800ad28 <USB_DisableGlobalInt+0x30>)
 800ad02:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2240      	movs	r2, #64	; 0x40
 800ad08:	5a9b      	ldrh	r3, [r3, r2]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	b292      	uxth	r2, r2
 800ad10:	43d2      	mvns	r2, r2
 800ad12:	b292      	uxth	r2, r2
 800ad14:	4013      	ands	r3, r2
 800ad16:	b299      	uxth	r1, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2240      	movs	r2, #64	; 0x40
 800ad1c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	0018      	movs	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b004      	add	sp, #16
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	0000bf80 	.word	0x0000bf80

0800ad2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	b590      	push	{r4, r7, lr}
 800ad30:	46c6      	mov	lr, r8
 800ad32:	b500      	push	{lr}
 800ad34:	b082      	sub	sp, #8
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	2004      	movs	r0, #4
 800ad3c:	2410      	movs	r4, #16
 800ad3e:	46a4      	mov	ip, r4
 800ad40:	2408      	movs	r4, #8
 800ad42:	46a0      	mov	r8, r4
 800ad44:	44b8      	add	r8, r7
 800ad46:	44c4      	add	ip, r8
 800ad48:	4460      	add	r0, ip
 800ad4a:	6001      	str	r1, [r0, #0]
 800ad4c:	6042      	str	r2, [r0, #4]
 800ad4e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2240      	movs	r2, #64	; 0x40
 800ad54:	2101      	movs	r1, #1
 800ad56:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2240      	movs	r2, #64	; 0x40
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2244      	movs	r2, #68	; 0x44
 800ad64:	2100      	movs	r1, #0
 800ad66:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2250      	movs	r2, #80	; 0x50
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	0018      	movs	r0, r3
 800ad74:	46bd      	mov	sp, r7
 800ad76:	b002      	add	sp, #8
 800ad78:	bc04      	pop	{r2}
 800ad7a:	4690      	mov	r8, r2
 800ad7c:	bc90      	pop	{r4, r7}
 800ad7e:	bc08      	pop	{r3}
 800ad80:	b004      	add	sp, #16
 800ad82:	4718      	bx	r3

0800ad84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b09a      	sub	sp, #104	; 0x68
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad8e:	2367      	movs	r3, #103	; 0x67
 800ad90:	18fb      	adds	r3, r7, r3
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	18d3      	adds	r3, r2, r3
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	2364      	movs	r3, #100	; 0x64
 800ada6:	18fb      	adds	r3, r7, r3
 800ada8:	49cf      	ldr	r1, [pc, #828]	; (800b0e8 <USB_ActivateEndpoint+0x364>)
 800adaa:	400a      	ands	r2, r1
 800adac:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	78db      	ldrb	r3, [r3, #3]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d020      	beq.n	800adf8 <USB_ActivateEndpoint+0x74>
 800adb6:	dc02      	bgt.n	800adbe <USB_ActivateEndpoint+0x3a>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <USB_ActivateEndpoint+0x44>
 800adbc:	e025      	b.n	800ae0a <USB_ActivateEndpoint+0x86>
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d00b      	beq.n	800adda <USB_ActivateEndpoint+0x56>
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d00f      	beq.n	800ade6 <USB_ActivateEndpoint+0x62>
 800adc6:	e020      	b.n	800ae0a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800adc8:	2264      	movs	r2, #100	; 0x64
 800adca:	18bb      	adds	r3, r7, r2
 800adcc:	18ba      	adds	r2, r7, r2
 800adce:	8812      	ldrh	r2, [r2, #0]
 800add0:	2180      	movs	r1, #128	; 0x80
 800add2:	0089      	lsls	r1, r1, #2
 800add4:	430a      	orrs	r2, r1
 800add6:	801a      	strh	r2, [r3, #0]
      break;
 800add8:	e01c      	b.n	800ae14 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800adda:	2264      	movs	r2, #100	; 0x64
 800addc:	18bb      	adds	r3, r7, r2
 800adde:	18ba      	adds	r2, r7, r2
 800ade0:	8812      	ldrh	r2, [r2, #0]
 800ade2:	801a      	strh	r2, [r3, #0]
      break;
 800ade4:	e016      	b.n	800ae14 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ade6:	2264      	movs	r2, #100	; 0x64
 800ade8:	18bb      	adds	r3, r7, r2
 800adea:	18ba      	adds	r2, r7, r2
 800adec:	8812      	ldrh	r2, [r2, #0]
 800adee:	21c0      	movs	r1, #192	; 0xc0
 800adf0:	00c9      	lsls	r1, r1, #3
 800adf2:	430a      	orrs	r2, r1
 800adf4:	801a      	strh	r2, [r3, #0]
      break;
 800adf6:	e00d      	b.n	800ae14 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800adf8:	2264      	movs	r2, #100	; 0x64
 800adfa:	18bb      	adds	r3, r7, r2
 800adfc:	18ba      	adds	r2, r7, r2
 800adfe:	8812      	ldrh	r2, [r2, #0]
 800ae00:	2180      	movs	r1, #128	; 0x80
 800ae02:	00c9      	lsls	r1, r1, #3
 800ae04:	430a      	orrs	r2, r1
 800ae06:	801a      	strh	r2, [r3, #0]
      break;
 800ae08:	e004      	b.n	800ae14 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800ae0a:	2367      	movs	r3, #103	; 0x67
 800ae0c:	18fb      	adds	r3, r7, r3
 800ae0e:	2201      	movs	r2, #1
 800ae10:	701a      	strb	r2, [r3, #0]
      break;
 800ae12:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	18d3      	adds	r3, r2, r3
 800ae1e:	2264      	movs	r2, #100	; 0x64
 800ae20:	18ba      	adds	r2, r7, r2
 800ae22:	8812      	ldrh	r2, [r2, #0]
 800ae24:	49b1      	ldr	r1, [pc, #708]	; (800b0ec <USB_ActivateEndpoint+0x368>)
 800ae26:	430a      	orrs	r2, r1
 800ae28:	b292      	uxth	r2, r2
 800ae2a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	18d3      	adds	r3, r2, r3
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	b21b      	sxth	r3, r3
 800ae3c:	4aac      	ldr	r2, [pc, #688]	; (800b0f0 <USB_ActivateEndpoint+0x36c>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	b21a      	sxth	r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	b21b      	sxth	r3, r3
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	b21a      	sxth	r2, r3
 800ae4c:	215e      	movs	r1, #94	; 0x5e
 800ae4e:	187b      	adds	r3, r7, r1
 800ae50:	801a      	strh	r2, [r3, #0]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	18d3      	adds	r3, r2, r3
 800ae5c:	187a      	adds	r2, r7, r1
 800ae5e:	8812      	ldrh	r2, [r2, #0]
 800ae60:	49a2      	ldr	r1, [pc, #648]	; (800b0ec <USB_ActivateEndpoint+0x368>)
 800ae62:	430a      	orrs	r2, r1
 800ae64:	b292      	uxth	r2, r2
 800ae66:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	7b1b      	ldrb	r3, [r3, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d000      	beq.n	800ae72 <USB_ActivateEndpoint+0xee>
 800ae70:	e150      	b.n	800b114 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	785b      	ldrb	r3, [r3, #1]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d100      	bne.n	800ae7c <USB_ActivateEndpoint+0xf8>
 800ae7a:	e07a      	b.n	800af72 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	617b      	str	r3, [r7, #20]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2250      	movs	r2, #80	; 0x50
 800ae84:	5a9b      	ldrh	r3, [r3, r2]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	001a      	movs	r2, r3
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	189b      	adds	r3, r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	00da      	lsls	r2, r3, #3
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	18d3      	adds	r3, r2, r3
 800ae9a:	2280      	movs	r2, #128	; 0x80
 800ae9c:	00d2      	lsls	r2, r2, #3
 800ae9e:	4694      	mov	ip, r2
 800aea0:	4463      	add	r3, ip
 800aea2:	613b      	str	r3, [r7, #16]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	88db      	ldrh	r3, [r3, #6]
 800aea8:	085b      	lsrs	r3, r3, #1
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	18db      	adds	r3, r3, r3
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	18d2      	adds	r2, r2, r3
 800aebe:	210e      	movs	r1, #14
 800aec0:	187b      	adds	r3, r7, r1
 800aec2:	8812      	ldrh	r2, [r2, #0]
 800aec4:	801a      	strh	r2, [r3, #0]
 800aec6:	187b      	adds	r3, r7, r1
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	2240      	movs	r2, #64	; 0x40
 800aecc:	4013      	ands	r3, r2
 800aece:	d016      	beq.n	800aefe <USB_ActivateEndpoint+0x17a>
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	18d3      	adds	r3, r2, r3
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	b29a      	uxth	r2, r3
 800aede:	200c      	movs	r0, #12
 800aee0:	183b      	adds	r3, r7, r0
 800aee2:	4983      	ldr	r1, [pc, #524]	; (800b0f0 <USB_ActivateEndpoint+0x36c>)
 800aee4:	400a      	ands	r2, r1
 800aee6:	801a      	strh	r2, [r3, #0]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	18d3      	adds	r3, r2, r3
 800aef2:	183a      	adds	r2, r7, r0
 800aef4:	8812      	ldrh	r2, [r2, #0]
 800aef6:	497f      	ldr	r1, [pc, #508]	; (800b0f4 <USB_ActivateEndpoint+0x370>)
 800aef8:	430a      	orrs	r2, r1
 800aefa:	b292      	uxth	r2, r2
 800aefc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	78db      	ldrb	r3, [r3, #3]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d01d      	beq.n	800af42 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	18d3      	adds	r3, r2, r3
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	b29a      	uxth	r2, r3
 800af14:	2008      	movs	r0, #8
 800af16:	183b      	adds	r3, r7, r0
 800af18:	4977      	ldr	r1, [pc, #476]	; (800b0f8 <USB_ActivateEndpoint+0x374>)
 800af1a:	400a      	ands	r2, r1
 800af1c:	801a      	strh	r2, [r3, #0]
 800af1e:	183b      	adds	r3, r7, r0
 800af20:	183a      	adds	r2, r7, r0
 800af22:	8812      	ldrh	r2, [r2, #0]
 800af24:	2120      	movs	r1, #32
 800af26:	404a      	eors	r2, r1
 800af28:	801a      	strh	r2, [r3, #0]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	18d3      	adds	r3, r2, r3
 800af34:	183a      	adds	r2, r7, r0
 800af36:	8812      	ldrh	r2, [r2, #0]
 800af38:	496c      	ldr	r1, [pc, #432]	; (800b0ec <USB_ActivateEndpoint+0x368>)
 800af3a:	430a      	orrs	r2, r1
 800af3c:	b292      	uxth	r2, r2
 800af3e:	801a      	strh	r2, [r3, #0]
 800af40:	e25e      	b.n	800b400 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	18d3      	adds	r3, r2, r3
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	b29a      	uxth	r2, r3
 800af50:	200a      	movs	r0, #10
 800af52:	183b      	adds	r3, r7, r0
 800af54:	4968      	ldr	r1, [pc, #416]	; (800b0f8 <USB_ActivateEndpoint+0x374>)
 800af56:	400a      	ands	r2, r1
 800af58:	801a      	strh	r2, [r3, #0]
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	18d3      	adds	r3, r2, r3
 800af64:	183a      	adds	r2, r7, r0
 800af66:	8812      	ldrh	r2, [r2, #0]
 800af68:	4960      	ldr	r1, [pc, #384]	; (800b0ec <USB_ActivateEndpoint+0x368>)
 800af6a:	430a      	orrs	r2, r1
 800af6c:	b292      	uxth	r2, r2
 800af6e:	801a      	strh	r2, [r3, #0]
 800af70:	e246      	b.n	800b400 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2250      	movs	r2, #80	; 0x50
 800af7a:	5a9b      	ldrh	r3, [r3, r2]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	001a      	movs	r2, r3
 800af80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af82:	189b      	adds	r3, r3, r2
 800af84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	00da      	lsls	r2, r3, #3
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8e:	18d3      	adds	r3, r2, r3
 800af90:	4a5a      	ldr	r2, [pc, #360]	; (800b0fc <USB_ActivateEndpoint+0x378>)
 800af92:	4694      	mov	ip, r2
 800af94:	4463      	add	r3, ip
 800af96:	62bb      	str	r3, [r7, #40]	; 0x28
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	88db      	ldrh	r3, [r3, #6]
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	18db      	adds	r3, r3, r3
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2250      	movs	r2, #80	; 0x50
 800afb0:	5a9b      	ldrh	r3, [r3, r2]
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	001a      	movs	r2, r3
 800afb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb8:	189b      	adds	r3, r3, r2
 800afba:	627b      	str	r3, [r7, #36]	; 0x24
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	00da      	lsls	r2, r3, #3
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	18d3      	adds	r3, r2, r3
 800afc6:	4a4e      	ldr	r2, [pc, #312]	; (800b100 <USB_ActivateEndpoint+0x37c>)
 800afc8:	4694      	mov	ip, r2
 800afca:	4463      	add	r3, ip
 800afcc:	623b      	str	r3, [r7, #32]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d110      	bne.n	800aff8 <USB_ActivateEndpoint+0x274>
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	b29b      	uxth	r3, r3
 800afdc:	4a49      	ldr	r2, [pc, #292]	; (800b104 <USB_ActivateEndpoint+0x380>)
 800afde:	4013      	ands	r3, r2
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	801a      	strh	r2, [r3, #0]
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	b29b      	uxth	r3, r3
 800afec:	4a46      	ldr	r2, [pc, #280]	; (800b108 <USB_ActivateEndpoint+0x384>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	6a3b      	ldr	r3, [r7, #32]
 800aff4:	801a      	strh	r2, [r3, #0]
 800aff6:	e02b      	b.n	800b050 <USB_ActivateEndpoint+0x2cc>
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	2b3e      	cmp	r3, #62	; 0x3e
 800affe:	d812      	bhi.n	800b026 <USB_ActivateEndpoint+0x2a2>
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	085b      	lsrs	r3, r3, #1
 800b006:	663b      	str	r3, [r7, #96]	; 0x60
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	2201      	movs	r2, #1
 800b00e:	4013      	ands	r3, r2
 800b010:	d002      	beq.n	800b018 <USB_ActivateEndpoint+0x294>
 800b012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b014:	3301      	adds	r3, #1
 800b016:	663b      	str	r3, [r7, #96]	; 0x60
 800b018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	029b      	lsls	r3, r3, #10
 800b01e:	b29a      	uxth	r2, r3
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	801a      	strh	r2, [r3, #0]
 800b024:	e014      	b.n	800b050 <USB_ActivateEndpoint+0x2cc>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	095b      	lsrs	r3, r3, #5
 800b02c:	663b      	str	r3, [r7, #96]	; 0x60
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	221f      	movs	r2, #31
 800b034:	4013      	ands	r3, r2
 800b036:	d102      	bne.n	800b03e <USB_ActivateEndpoint+0x2ba>
 800b038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b03a:	3b01      	subs	r3, #1
 800b03c:	663b      	str	r3, [r7, #96]	; 0x60
 800b03e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b040:	b29b      	uxth	r3, r3
 800b042:	029b      	lsls	r3, r3, #10
 800b044:	b29b      	uxth	r3, r3
 800b046:	4a30      	ldr	r2, [pc, #192]	; (800b108 <USB_ActivateEndpoint+0x384>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	18d2      	adds	r2, r2, r3
 800b05a:	211e      	movs	r1, #30
 800b05c:	187b      	adds	r3, r7, r1
 800b05e:	8812      	ldrh	r2, [r2, #0]
 800b060:	801a      	strh	r2, [r3, #0]
 800b062:	187b      	adds	r3, r7, r1
 800b064:	881a      	ldrh	r2, [r3, #0]
 800b066:	2380      	movs	r3, #128	; 0x80
 800b068:	01db      	lsls	r3, r3, #7
 800b06a:	4013      	ands	r3, r2
 800b06c:	d016      	beq.n	800b09c <USB_ActivateEndpoint+0x318>
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	18d3      	adds	r3, r2, r3
 800b078:	881b      	ldrh	r3, [r3, #0]
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	201c      	movs	r0, #28
 800b07e:	183b      	adds	r3, r7, r0
 800b080:	491b      	ldr	r1, [pc, #108]	; (800b0f0 <USB_ActivateEndpoint+0x36c>)
 800b082:	400a      	ands	r2, r1
 800b084:	801a      	strh	r2, [r3, #0]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	18d3      	adds	r3, r2, r3
 800b090:	183a      	adds	r2, r7, r0
 800b092:	8812      	ldrh	r2, [r2, #0]
 800b094:	491d      	ldr	r1, [pc, #116]	; (800b10c <USB_ActivateEndpoint+0x388>)
 800b096:	430a      	orrs	r2, r1
 800b098:	b292      	uxth	r2, r2
 800b09a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	18d3      	adds	r3, r2, r3
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	201a      	movs	r0, #26
 800b0ac:	183b      	adds	r3, r7, r0
 800b0ae:	4918      	ldr	r1, [pc, #96]	; (800b110 <USB_ActivateEndpoint+0x38c>)
 800b0b0:	400a      	ands	r2, r1
 800b0b2:	801a      	strh	r2, [r3, #0]
 800b0b4:	183b      	adds	r3, r7, r0
 800b0b6:	183a      	adds	r2, r7, r0
 800b0b8:	8812      	ldrh	r2, [r2, #0]
 800b0ba:	2180      	movs	r1, #128	; 0x80
 800b0bc:	0149      	lsls	r1, r1, #5
 800b0be:	404a      	eors	r2, r1
 800b0c0:	801a      	strh	r2, [r3, #0]
 800b0c2:	183b      	adds	r3, r7, r0
 800b0c4:	183a      	adds	r2, r7, r0
 800b0c6:	8812      	ldrh	r2, [r2, #0]
 800b0c8:	2180      	movs	r1, #128	; 0x80
 800b0ca:	0189      	lsls	r1, r1, #6
 800b0cc:	404a      	eors	r2, r1
 800b0ce:	801a      	strh	r2, [r3, #0]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	18d3      	adds	r3, r2, r3
 800b0da:	183a      	adds	r2, r7, r0
 800b0dc:	8812      	ldrh	r2, [r2, #0]
 800b0de:	4903      	ldr	r1, [pc, #12]	; (800b0ec <USB_ActivateEndpoint+0x368>)
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	b292      	uxth	r2, r2
 800b0e4:	801a      	strh	r2, [r3, #0]
 800b0e6:	e18b      	b.n	800b400 <USB_ActivateEndpoint+0x67c>
 800b0e8:	ffff898f 	.word	0xffff898f
 800b0ec:	ffff8080 	.word	0xffff8080
 800b0f0:	ffff8f8f 	.word	0xffff8f8f
 800b0f4:	ffff80c0 	.word	0xffff80c0
 800b0f8:	ffff8fbf 	.word	0xffff8fbf
 800b0fc:	00000404 	.word	0x00000404
 800b100:	00000406 	.word	0x00000406
 800b104:	ffff83ff 	.word	0xffff83ff
 800b108:	ffff8000 	.word	0xffff8000
 800b10c:	ffffc080 	.word	0xffffc080
 800b110:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	18d3      	adds	r3, r2, r3
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	b29a      	uxth	r2, r3
 800b122:	205c      	movs	r0, #92	; 0x5c
 800b124:	183b      	adds	r3, r7, r0
 800b126:	49ba      	ldr	r1, [pc, #744]	; (800b410 <USB_ActivateEndpoint+0x68c>)
 800b128:	400a      	ands	r2, r1
 800b12a:	801a      	strh	r2, [r3, #0]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	18d3      	adds	r3, r2, r3
 800b136:	183a      	adds	r2, r7, r0
 800b138:	8812      	ldrh	r2, [r2, #0]
 800b13a:	49b6      	ldr	r1, [pc, #728]	; (800b414 <USB_ActivateEndpoint+0x690>)
 800b13c:	430a      	orrs	r2, r1
 800b13e:	b292      	uxth	r2, r2
 800b140:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	65bb      	str	r3, [r7, #88]	; 0x58
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2250      	movs	r2, #80	; 0x50
 800b14a:	5a9b      	ldrh	r3, [r3, r2]
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	001a      	movs	r2, r3
 800b150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b152:	189b      	adds	r3, r3, r2
 800b154:	65bb      	str	r3, [r7, #88]	; 0x58
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	00da      	lsls	r2, r3, #3
 800b15c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b15e:	18d3      	adds	r3, r2, r3
 800b160:	2280      	movs	r2, #128	; 0x80
 800b162:	00d2      	lsls	r2, r2, #3
 800b164:	4694      	mov	ip, r2
 800b166:	4463      	add	r3, ip
 800b168:	657b      	str	r3, [r7, #84]	; 0x54
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	891b      	ldrh	r3, [r3, #8]
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	b29b      	uxth	r3, r3
 800b172:	18db      	adds	r3, r3, r3
 800b174:	b29a      	uxth	r2, r3
 800b176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b178:	801a      	strh	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	653b      	str	r3, [r7, #80]	; 0x50
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2250      	movs	r2, #80	; 0x50
 800b182:	5a9b      	ldrh	r3, [r3, r2]
 800b184:	b29b      	uxth	r3, r3
 800b186:	001a      	movs	r2, r3
 800b188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b18a:	189b      	adds	r3, r3, r2
 800b18c:	653b      	str	r3, [r7, #80]	; 0x50
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	00da      	lsls	r2, r3, #3
 800b194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b196:	18d3      	adds	r3, r2, r3
 800b198:	4a9f      	ldr	r2, [pc, #636]	; (800b418 <USB_ActivateEndpoint+0x694>)
 800b19a:	4694      	mov	ip, r2
 800b19c:	4463      	add	r3, ip
 800b19e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	895b      	ldrh	r3, [r3, #10]
 800b1a4:	085b      	lsrs	r3, r3, #1
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	18db      	adds	r3, r3, r3
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	785b      	ldrb	r3, [r3, #1]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d000      	beq.n	800b1ba <USB_ActivateEndpoint+0x436>
 800b1b8:	e087      	b.n	800b2ca <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	18d2      	adds	r2, r2, r3
 800b1c4:	213c      	movs	r1, #60	; 0x3c
 800b1c6:	187b      	adds	r3, r7, r1
 800b1c8:	8812      	ldrh	r2, [r2, #0]
 800b1ca:	801a      	strh	r2, [r3, #0]
 800b1cc:	187b      	adds	r3, r7, r1
 800b1ce:	881a      	ldrh	r2, [r3, #0]
 800b1d0:	2380      	movs	r3, #128	; 0x80
 800b1d2:	01db      	lsls	r3, r3, #7
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	d016      	beq.n	800b206 <USB_ActivateEndpoint+0x482>
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	18d3      	adds	r3, r2, r3
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	203a      	movs	r0, #58	; 0x3a
 800b1e8:	183b      	adds	r3, r7, r0
 800b1ea:	4989      	ldr	r1, [pc, #548]	; (800b410 <USB_ActivateEndpoint+0x68c>)
 800b1ec:	400a      	ands	r2, r1
 800b1ee:	801a      	strh	r2, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	18d3      	adds	r3, r2, r3
 800b1fa:	183a      	adds	r2, r7, r0
 800b1fc:	8812      	ldrh	r2, [r2, #0]
 800b1fe:	4987      	ldr	r1, [pc, #540]	; (800b41c <USB_ActivateEndpoint+0x698>)
 800b200:	430a      	orrs	r2, r1
 800b202:	b292      	uxth	r2, r2
 800b204:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	18d2      	adds	r2, r2, r3
 800b210:	2138      	movs	r1, #56	; 0x38
 800b212:	187b      	adds	r3, r7, r1
 800b214:	8812      	ldrh	r2, [r2, #0]
 800b216:	801a      	strh	r2, [r3, #0]
 800b218:	187b      	adds	r3, r7, r1
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	2240      	movs	r2, #64	; 0x40
 800b21e:	4013      	ands	r3, r2
 800b220:	d016      	beq.n	800b250 <USB_ActivateEndpoint+0x4cc>
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	18d3      	adds	r3, r2, r3
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	b29a      	uxth	r2, r3
 800b230:	2036      	movs	r0, #54	; 0x36
 800b232:	183b      	adds	r3, r7, r0
 800b234:	4976      	ldr	r1, [pc, #472]	; (800b410 <USB_ActivateEndpoint+0x68c>)
 800b236:	400a      	ands	r2, r1
 800b238:	801a      	strh	r2, [r3, #0]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	18d3      	adds	r3, r2, r3
 800b244:	183a      	adds	r2, r7, r0
 800b246:	8812      	ldrh	r2, [r2, #0]
 800b248:	4975      	ldr	r1, [pc, #468]	; (800b420 <USB_ActivateEndpoint+0x69c>)
 800b24a:	430a      	orrs	r2, r1
 800b24c:	b292      	uxth	r2, r2
 800b24e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	18d3      	adds	r3, r2, r3
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	2034      	movs	r0, #52	; 0x34
 800b260:	183b      	adds	r3, r7, r0
 800b262:	4970      	ldr	r1, [pc, #448]	; (800b424 <USB_ActivateEndpoint+0x6a0>)
 800b264:	400a      	ands	r2, r1
 800b266:	801a      	strh	r2, [r3, #0]
 800b268:	183b      	adds	r3, r7, r0
 800b26a:	183a      	adds	r2, r7, r0
 800b26c:	8812      	ldrh	r2, [r2, #0]
 800b26e:	2180      	movs	r1, #128	; 0x80
 800b270:	0149      	lsls	r1, r1, #5
 800b272:	404a      	eors	r2, r1
 800b274:	801a      	strh	r2, [r3, #0]
 800b276:	183b      	adds	r3, r7, r0
 800b278:	183a      	adds	r2, r7, r0
 800b27a:	8812      	ldrh	r2, [r2, #0]
 800b27c:	2180      	movs	r1, #128	; 0x80
 800b27e:	0189      	lsls	r1, r1, #6
 800b280:	404a      	eors	r2, r1
 800b282:	801a      	strh	r2, [r3, #0]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	18d3      	adds	r3, r2, r3
 800b28e:	183a      	adds	r2, r7, r0
 800b290:	8812      	ldrh	r2, [r2, #0]
 800b292:	4965      	ldr	r1, [pc, #404]	; (800b428 <USB_ActivateEndpoint+0x6a4>)
 800b294:	430a      	orrs	r2, r1
 800b296:	b292      	uxth	r2, r2
 800b298:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	18d3      	adds	r3, r2, r3
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	2032      	movs	r0, #50	; 0x32
 800b2aa:	183b      	adds	r3, r7, r0
 800b2ac:	495f      	ldr	r1, [pc, #380]	; (800b42c <USB_ActivateEndpoint+0x6a8>)
 800b2ae:	400a      	ands	r2, r1
 800b2b0:	801a      	strh	r2, [r3, #0]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	18d3      	adds	r3, r2, r3
 800b2bc:	183a      	adds	r2, r7, r0
 800b2be:	8812      	ldrh	r2, [r2, #0]
 800b2c0:	4959      	ldr	r1, [pc, #356]	; (800b428 <USB_ActivateEndpoint+0x6a4>)
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	b292      	uxth	r2, r2
 800b2c6:	801a      	strh	r2, [r3, #0]
 800b2c8:	e09a      	b.n	800b400 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	18d2      	adds	r2, r2, r3
 800b2d4:	214a      	movs	r1, #74	; 0x4a
 800b2d6:	187b      	adds	r3, r7, r1
 800b2d8:	8812      	ldrh	r2, [r2, #0]
 800b2da:	801a      	strh	r2, [r3, #0]
 800b2dc:	187b      	adds	r3, r7, r1
 800b2de:	881a      	ldrh	r2, [r3, #0]
 800b2e0:	2380      	movs	r3, #128	; 0x80
 800b2e2:	01db      	lsls	r3, r3, #7
 800b2e4:	4013      	ands	r3, r2
 800b2e6:	d016      	beq.n	800b316 <USB_ActivateEndpoint+0x592>
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	18d3      	adds	r3, r2, r3
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	2048      	movs	r0, #72	; 0x48
 800b2f8:	183b      	adds	r3, r7, r0
 800b2fa:	4945      	ldr	r1, [pc, #276]	; (800b410 <USB_ActivateEndpoint+0x68c>)
 800b2fc:	400a      	ands	r2, r1
 800b2fe:	801a      	strh	r2, [r3, #0]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	18d3      	adds	r3, r2, r3
 800b30a:	183a      	adds	r2, r7, r0
 800b30c:	8812      	ldrh	r2, [r2, #0]
 800b30e:	4943      	ldr	r1, [pc, #268]	; (800b41c <USB_ActivateEndpoint+0x698>)
 800b310:	430a      	orrs	r2, r1
 800b312:	b292      	uxth	r2, r2
 800b314:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	18d2      	adds	r2, r2, r3
 800b320:	2146      	movs	r1, #70	; 0x46
 800b322:	187b      	adds	r3, r7, r1
 800b324:	8812      	ldrh	r2, [r2, #0]
 800b326:	801a      	strh	r2, [r3, #0]
 800b328:	187b      	adds	r3, r7, r1
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	2240      	movs	r2, #64	; 0x40
 800b32e:	4013      	ands	r3, r2
 800b330:	d016      	beq.n	800b360 <USB_ActivateEndpoint+0x5dc>
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	18d3      	adds	r3, r2, r3
 800b33c:	881b      	ldrh	r3, [r3, #0]
 800b33e:	b29a      	uxth	r2, r3
 800b340:	2044      	movs	r0, #68	; 0x44
 800b342:	183b      	adds	r3, r7, r0
 800b344:	4932      	ldr	r1, [pc, #200]	; (800b410 <USB_ActivateEndpoint+0x68c>)
 800b346:	400a      	ands	r2, r1
 800b348:	801a      	strh	r2, [r3, #0]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	18d3      	adds	r3, r2, r3
 800b354:	183a      	adds	r2, r7, r0
 800b356:	8812      	ldrh	r2, [r2, #0]
 800b358:	4931      	ldr	r1, [pc, #196]	; (800b420 <USB_ActivateEndpoint+0x69c>)
 800b35a:	430a      	orrs	r2, r1
 800b35c:	b292      	uxth	r2, r2
 800b35e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	78db      	ldrb	r3, [r3, #3]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d01d      	beq.n	800b3a4 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	18d3      	adds	r3, r2, r3
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	b29a      	uxth	r2, r3
 800b376:	2040      	movs	r0, #64	; 0x40
 800b378:	183b      	adds	r3, r7, r0
 800b37a:	492c      	ldr	r1, [pc, #176]	; (800b42c <USB_ActivateEndpoint+0x6a8>)
 800b37c:	400a      	ands	r2, r1
 800b37e:	801a      	strh	r2, [r3, #0]
 800b380:	183b      	adds	r3, r7, r0
 800b382:	183a      	adds	r2, r7, r0
 800b384:	8812      	ldrh	r2, [r2, #0]
 800b386:	2120      	movs	r1, #32
 800b388:	404a      	eors	r2, r1
 800b38a:	801a      	strh	r2, [r3, #0]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	18d3      	adds	r3, r2, r3
 800b396:	183a      	adds	r2, r7, r0
 800b398:	8812      	ldrh	r2, [r2, #0]
 800b39a:	4923      	ldr	r1, [pc, #140]	; (800b428 <USB_ActivateEndpoint+0x6a4>)
 800b39c:	430a      	orrs	r2, r1
 800b39e:	b292      	uxth	r2, r2
 800b3a0:	801a      	strh	r2, [r3, #0]
 800b3a2:	e016      	b.n	800b3d2 <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	18d3      	adds	r3, r2, r3
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	2042      	movs	r0, #66	; 0x42
 800b3b4:	183b      	adds	r3, r7, r0
 800b3b6:	491d      	ldr	r1, [pc, #116]	; (800b42c <USB_ActivateEndpoint+0x6a8>)
 800b3b8:	400a      	ands	r2, r1
 800b3ba:	801a      	strh	r2, [r3, #0]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	18d3      	adds	r3, r2, r3
 800b3c6:	183a      	adds	r2, r7, r0
 800b3c8:	8812      	ldrh	r2, [r2, #0]
 800b3ca:	4917      	ldr	r1, [pc, #92]	; (800b428 <USB_ActivateEndpoint+0x6a4>)
 800b3cc:	430a      	orrs	r2, r1
 800b3ce:	b292      	uxth	r2, r2
 800b3d0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	18d3      	adds	r3, r2, r3
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	203e      	movs	r0, #62	; 0x3e
 800b3e2:	183b      	adds	r3, r7, r0
 800b3e4:	490f      	ldr	r1, [pc, #60]	; (800b424 <USB_ActivateEndpoint+0x6a0>)
 800b3e6:	400a      	ands	r2, r1
 800b3e8:	801a      	strh	r2, [r3, #0]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	18d3      	adds	r3, r2, r3
 800b3f4:	183a      	adds	r2, r7, r0
 800b3f6:	8812      	ldrh	r2, [r2, #0]
 800b3f8:	490b      	ldr	r1, [pc, #44]	; (800b428 <USB_ActivateEndpoint+0x6a4>)
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	b292      	uxth	r2, r2
 800b3fe:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 800b400:	2367      	movs	r3, #103	; 0x67
 800b402:	18fb      	adds	r3, r7, r3
 800b404:	781b      	ldrb	r3, [r3, #0]
}
 800b406:	0018      	movs	r0, r3
 800b408:	46bd      	mov	sp, r7
 800b40a:	b01a      	add	sp, #104	; 0x68
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	46c0      	nop			; (mov r8, r8)
 800b410:	ffff8f8f 	.word	0xffff8f8f
 800b414:	ffff8180 	.word	0xffff8180
 800b418:	00000404 	.word	0x00000404
 800b41c:	ffffc080 	.word	0xffffc080
 800b420:	ffff80c0 	.word	0xffff80c0
 800b424:	ffffbf8f 	.word	0xffffbf8f
 800b428:	ffff8080 	.word	0xffff8080
 800b42c:	ffff8fbf 	.word	0xffff8fbf

0800b430 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08c      	sub	sp, #48	; 0x30
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	7b1b      	ldrb	r3, [r3, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d000      	beq.n	800b444 <USB_DeactivateEndpoint+0x14>
 800b442:	e07e      	b.n	800b542 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	785b      	ldrb	r3, [r3, #1]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d03c      	beq.n	800b4c6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	18d2      	adds	r2, r2, r3
 800b456:	210c      	movs	r1, #12
 800b458:	187b      	adds	r3, r7, r1
 800b45a:	8812      	ldrh	r2, [r2, #0]
 800b45c:	801a      	strh	r2, [r3, #0]
 800b45e:	187b      	adds	r3, r7, r1
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	2240      	movs	r2, #64	; 0x40
 800b464:	4013      	ands	r3, r2
 800b466:	d016      	beq.n	800b496 <USB_DeactivateEndpoint+0x66>
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	18d3      	adds	r3, r2, r3
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	b29a      	uxth	r2, r3
 800b476:	200a      	movs	r0, #10
 800b478:	183b      	adds	r3, r7, r0
 800b47a:	49c7      	ldr	r1, [pc, #796]	; (800b798 <USB_DeactivateEndpoint+0x368>)
 800b47c:	400a      	ands	r2, r1
 800b47e:	801a      	strh	r2, [r3, #0]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	18d3      	adds	r3, r2, r3
 800b48a:	183a      	adds	r2, r7, r0
 800b48c:	8812      	ldrh	r2, [r2, #0]
 800b48e:	49c3      	ldr	r1, [pc, #780]	; (800b79c <USB_DeactivateEndpoint+0x36c>)
 800b490:	430a      	orrs	r2, r1
 800b492:	b292      	uxth	r2, r2
 800b494:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	18d3      	adds	r3, r2, r3
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	2008      	movs	r0, #8
 800b4a6:	183b      	adds	r3, r7, r0
 800b4a8:	49bd      	ldr	r1, [pc, #756]	; (800b7a0 <USB_DeactivateEndpoint+0x370>)
 800b4aa:	400a      	ands	r2, r1
 800b4ac:	801a      	strh	r2, [r3, #0]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	18d3      	adds	r3, r2, r3
 800b4b8:	183a      	adds	r2, r7, r0
 800b4ba:	8812      	ldrh	r2, [r2, #0]
 800b4bc:	49b9      	ldr	r1, [pc, #740]	; (800b7a4 <USB_DeactivateEndpoint+0x374>)
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	b292      	uxth	r2, r2
 800b4c2:	801a      	strh	r2, [r3, #0]
 800b4c4:	e163      	b.n	800b78e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	18d2      	adds	r2, r2, r3
 800b4d0:	2112      	movs	r1, #18
 800b4d2:	187b      	adds	r3, r7, r1
 800b4d4:	8812      	ldrh	r2, [r2, #0]
 800b4d6:	801a      	strh	r2, [r3, #0]
 800b4d8:	187b      	adds	r3, r7, r1
 800b4da:	881a      	ldrh	r2, [r3, #0]
 800b4dc:	2380      	movs	r3, #128	; 0x80
 800b4de:	01db      	lsls	r3, r3, #7
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	d016      	beq.n	800b512 <USB_DeactivateEndpoint+0xe2>
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	18d3      	adds	r3, r2, r3
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	2010      	movs	r0, #16
 800b4f4:	183b      	adds	r3, r7, r0
 800b4f6:	49a8      	ldr	r1, [pc, #672]	; (800b798 <USB_DeactivateEndpoint+0x368>)
 800b4f8:	400a      	ands	r2, r1
 800b4fa:	801a      	strh	r2, [r3, #0]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	18d3      	adds	r3, r2, r3
 800b506:	183a      	adds	r2, r7, r0
 800b508:	8812      	ldrh	r2, [r2, #0]
 800b50a:	49a7      	ldr	r1, [pc, #668]	; (800b7a8 <USB_DeactivateEndpoint+0x378>)
 800b50c:	430a      	orrs	r2, r1
 800b50e:	b292      	uxth	r2, r2
 800b510:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	18d3      	adds	r3, r2, r3
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	b29a      	uxth	r2, r3
 800b520:	200e      	movs	r0, #14
 800b522:	183b      	adds	r3, r7, r0
 800b524:	49a1      	ldr	r1, [pc, #644]	; (800b7ac <USB_DeactivateEndpoint+0x37c>)
 800b526:	400a      	ands	r2, r1
 800b528:	801a      	strh	r2, [r3, #0]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	18d3      	adds	r3, r2, r3
 800b534:	183a      	adds	r2, r7, r0
 800b536:	8812      	ldrh	r2, [r2, #0]
 800b538:	499a      	ldr	r1, [pc, #616]	; (800b7a4 <USB_DeactivateEndpoint+0x374>)
 800b53a:	430a      	orrs	r2, r1
 800b53c:	b292      	uxth	r2, r2
 800b53e:	801a      	strh	r2, [r3, #0]
 800b540:	e125      	b.n	800b78e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	785b      	ldrb	r3, [r3, #1]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d000      	beq.n	800b54c <USB_DeactivateEndpoint+0x11c>
 800b54a:	e090      	b.n	800b66e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	18d2      	adds	r2, r2, r3
 800b556:	2120      	movs	r1, #32
 800b558:	187b      	adds	r3, r7, r1
 800b55a:	8812      	ldrh	r2, [r2, #0]
 800b55c:	801a      	strh	r2, [r3, #0]
 800b55e:	187b      	adds	r3, r7, r1
 800b560:	881a      	ldrh	r2, [r3, #0]
 800b562:	2380      	movs	r3, #128	; 0x80
 800b564:	01db      	lsls	r3, r3, #7
 800b566:	4013      	ands	r3, r2
 800b568:	d016      	beq.n	800b598 <USB_DeactivateEndpoint+0x168>
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	18d3      	adds	r3, r2, r3
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	b29a      	uxth	r2, r3
 800b578:	201e      	movs	r0, #30
 800b57a:	183b      	adds	r3, r7, r0
 800b57c:	4986      	ldr	r1, [pc, #536]	; (800b798 <USB_DeactivateEndpoint+0x368>)
 800b57e:	400a      	ands	r2, r1
 800b580:	801a      	strh	r2, [r3, #0]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	18d3      	adds	r3, r2, r3
 800b58c:	183a      	adds	r2, r7, r0
 800b58e:	8812      	ldrh	r2, [r2, #0]
 800b590:	4985      	ldr	r1, [pc, #532]	; (800b7a8 <USB_DeactivateEndpoint+0x378>)
 800b592:	430a      	orrs	r2, r1
 800b594:	b292      	uxth	r2, r2
 800b596:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	18d2      	adds	r2, r2, r3
 800b5a2:	211c      	movs	r1, #28
 800b5a4:	187b      	adds	r3, r7, r1
 800b5a6:	8812      	ldrh	r2, [r2, #0]
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	187b      	adds	r3, r7, r1
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	2240      	movs	r2, #64	; 0x40
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	d016      	beq.n	800b5e2 <USB_DeactivateEndpoint+0x1b2>
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	18d3      	adds	r3, r2, r3
 800b5be:	881b      	ldrh	r3, [r3, #0]
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	201a      	movs	r0, #26
 800b5c4:	183b      	adds	r3, r7, r0
 800b5c6:	4974      	ldr	r1, [pc, #464]	; (800b798 <USB_DeactivateEndpoint+0x368>)
 800b5c8:	400a      	ands	r2, r1
 800b5ca:	801a      	strh	r2, [r3, #0]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	18d3      	adds	r3, r2, r3
 800b5d6:	183a      	adds	r2, r7, r0
 800b5d8:	8812      	ldrh	r2, [r2, #0]
 800b5da:	4970      	ldr	r1, [pc, #448]	; (800b79c <USB_DeactivateEndpoint+0x36c>)
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	b292      	uxth	r2, r2
 800b5e0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	18d3      	adds	r3, r2, r3
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	2018      	movs	r0, #24
 800b5f2:	183b      	adds	r3, r7, r0
 800b5f4:	4968      	ldr	r1, [pc, #416]	; (800b798 <USB_DeactivateEndpoint+0x368>)
 800b5f6:	400a      	ands	r2, r1
 800b5f8:	801a      	strh	r2, [r3, #0]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	18d3      	adds	r3, r2, r3
 800b604:	183a      	adds	r2, r7, r0
 800b606:	8812      	ldrh	r2, [r2, #0]
 800b608:	4964      	ldr	r1, [pc, #400]	; (800b79c <USB_DeactivateEndpoint+0x36c>)
 800b60a:	430a      	orrs	r2, r1
 800b60c:	b292      	uxth	r2, r2
 800b60e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	18d3      	adds	r3, r2, r3
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	2016      	movs	r0, #22
 800b620:	183b      	adds	r3, r7, r0
 800b622:	4962      	ldr	r1, [pc, #392]	; (800b7ac <USB_DeactivateEndpoint+0x37c>)
 800b624:	400a      	ands	r2, r1
 800b626:	801a      	strh	r2, [r3, #0]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	18d3      	adds	r3, r2, r3
 800b632:	183a      	adds	r2, r7, r0
 800b634:	8812      	ldrh	r2, [r2, #0]
 800b636:	495b      	ldr	r1, [pc, #364]	; (800b7a4 <USB_DeactivateEndpoint+0x374>)
 800b638:	430a      	orrs	r2, r1
 800b63a:	b292      	uxth	r2, r2
 800b63c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	18d3      	adds	r3, r2, r3
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	2014      	movs	r0, #20
 800b64e:	183b      	adds	r3, r7, r0
 800b650:	4953      	ldr	r1, [pc, #332]	; (800b7a0 <USB_DeactivateEndpoint+0x370>)
 800b652:	400a      	ands	r2, r1
 800b654:	801a      	strh	r2, [r3, #0]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	18d3      	adds	r3, r2, r3
 800b660:	183a      	adds	r2, r7, r0
 800b662:	8812      	ldrh	r2, [r2, #0]
 800b664:	494f      	ldr	r1, [pc, #316]	; (800b7a4 <USB_DeactivateEndpoint+0x374>)
 800b666:	430a      	orrs	r2, r1
 800b668:	b292      	uxth	r2, r2
 800b66a:	801a      	strh	r2, [r3, #0]
 800b66c:	e08f      	b.n	800b78e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	18d2      	adds	r2, r2, r3
 800b678:	212e      	movs	r1, #46	; 0x2e
 800b67a:	187b      	adds	r3, r7, r1
 800b67c:	8812      	ldrh	r2, [r2, #0]
 800b67e:	801a      	strh	r2, [r3, #0]
 800b680:	187b      	adds	r3, r7, r1
 800b682:	881a      	ldrh	r2, [r3, #0]
 800b684:	2380      	movs	r3, #128	; 0x80
 800b686:	01db      	lsls	r3, r3, #7
 800b688:	4013      	ands	r3, r2
 800b68a:	d016      	beq.n	800b6ba <USB_DeactivateEndpoint+0x28a>
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	18d3      	adds	r3, r2, r3
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	b29a      	uxth	r2, r3
 800b69a:	202c      	movs	r0, #44	; 0x2c
 800b69c:	183b      	adds	r3, r7, r0
 800b69e:	493e      	ldr	r1, [pc, #248]	; (800b798 <USB_DeactivateEndpoint+0x368>)
 800b6a0:	400a      	ands	r2, r1
 800b6a2:	801a      	strh	r2, [r3, #0]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	18d3      	adds	r3, r2, r3
 800b6ae:	183a      	adds	r2, r7, r0
 800b6b0:	8812      	ldrh	r2, [r2, #0]
 800b6b2:	493d      	ldr	r1, [pc, #244]	; (800b7a8 <USB_DeactivateEndpoint+0x378>)
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	b292      	uxth	r2, r2
 800b6b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	18d2      	adds	r2, r2, r3
 800b6c4:	212a      	movs	r1, #42	; 0x2a
 800b6c6:	187b      	adds	r3, r7, r1
 800b6c8:	8812      	ldrh	r2, [r2, #0]
 800b6ca:	801a      	strh	r2, [r3, #0]
 800b6cc:	187b      	adds	r3, r7, r1
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	2240      	movs	r2, #64	; 0x40
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	d016      	beq.n	800b704 <USB_DeactivateEndpoint+0x2d4>
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	18d3      	adds	r3, r2, r3
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	2028      	movs	r0, #40	; 0x28
 800b6e6:	183b      	adds	r3, r7, r0
 800b6e8:	492b      	ldr	r1, [pc, #172]	; (800b798 <USB_DeactivateEndpoint+0x368>)
 800b6ea:	400a      	ands	r2, r1
 800b6ec:	801a      	strh	r2, [r3, #0]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	18d3      	adds	r3, r2, r3
 800b6f8:	183a      	adds	r2, r7, r0
 800b6fa:	8812      	ldrh	r2, [r2, #0]
 800b6fc:	4927      	ldr	r1, [pc, #156]	; (800b79c <USB_DeactivateEndpoint+0x36c>)
 800b6fe:	430a      	orrs	r2, r1
 800b700:	b292      	uxth	r2, r2
 800b702:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	18d3      	adds	r3, r2, r3
 800b70e:	881b      	ldrh	r3, [r3, #0]
 800b710:	b29a      	uxth	r2, r3
 800b712:	2026      	movs	r0, #38	; 0x26
 800b714:	183b      	adds	r3, r7, r0
 800b716:	4920      	ldr	r1, [pc, #128]	; (800b798 <USB_DeactivateEndpoint+0x368>)
 800b718:	400a      	ands	r2, r1
 800b71a:	801a      	strh	r2, [r3, #0]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	18d3      	adds	r3, r2, r3
 800b726:	183a      	adds	r2, r7, r0
 800b728:	8812      	ldrh	r2, [r2, #0]
 800b72a:	491f      	ldr	r1, [pc, #124]	; (800b7a8 <USB_DeactivateEndpoint+0x378>)
 800b72c:	430a      	orrs	r2, r1
 800b72e:	b292      	uxth	r2, r2
 800b730:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	18d3      	adds	r3, r2, r3
 800b73c:	881b      	ldrh	r3, [r3, #0]
 800b73e:	b29a      	uxth	r2, r3
 800b740:	2024      	movs	r0, #36	; 0x24
 800b742:	183b      	adds	r3, r7, r0
 800b744:	4916      	ldr	r1, [pc, #88]	; (800b7a0 <USB_DeactivateEndpoint+0x370>)
 800b746:	400a      	ands	r2, r1
 800b748:	801a      	strh	r2, [r3, #0]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	18d3      	adds	r3, r2, r3
 800b754:	183a      	adds	r2, r7, r0
 800b756:	8812      	ldrh	r2, [r2, #0]
 800b758:	4912      	ldr	r1, [pc, #72]	; (800b7a4 <USB_DeactivateEndpoint+0x374>)
 800b75a:	430a      	orrs	r2, r1
 800b75c:	b292      	uxth	r2, r2
 800b75e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	18d3      	adds	r3, r2, r3
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	2022      	movs	r0, #34	; 0x22
 800b770:	183b      	adds	r3, r7, r0
 800b772:	490e      	ldr	r1, [pc, #56]	; (800b7ac <USB_DeactivateEndpoint+0x37c>)
 800b774:	400a      	ands	r2, r1
 800b776:	801a      	strh	r2, [r3, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	18d3      	adds	r3, r2, r3
 800b782:	183a      	adds	r2, r7, r0
 800b784:	8812      	ldrh	r2, [r2, #0]
 800b786:	4907      	ldr	r1, [pc, #28]	; (800b7a4 <USB_DeactivateEndpoint+0x374>)
 800b788:	430a      	orrs	r2, r1
 800b78a:	b292      	uxth	r2, r2
 800b78c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	0018      	movs	r0, r3
 800b792:	46bd      	mov	sp, r7
 800b794:	b00c      	add	sp, #48	; 0x30
 800b796:	bd80      	pop	{r7, pc}
 800b798:	ffff8f8f 	.word	0xffff8f8f
 800b79c:	ffff80c0 	.word	0xffff80c0
 800b7a0:	ffff8fbf 	.word	0xffff8fbf
 800b7a4:	ffff8080 	.word	0xffff8080
 800b7a8:	ffffc080 	.word	0xffffc080
 800b7ac:	ffffbf8f 	.word	0xffffbf8f

0800b7b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b7b0:	b5b0      	push	{r4, r5, r7, lr}
 800b7b2:	b0c4      	sub	sp, #272	; 0x110
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	785b      	ldrb	r3, [r3, #1]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d001      	beq.n	800b7c6 <USB_EPStartXfer+0x16>
 800b7c2:	f000 fd63 	bl	800c28c <USB_EPStartXfer+0xadc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	699a      	ldr	r2, [r3, #24]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d906      	bls.n	800b7e0 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	2286      	movs	r2, #134	; 0x86
 800b7d8:	0052      	lsls	r2, r2, #1
 800b7da:	18ba      	adds	r2, r7, r2
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	e005      	b.n	800b7ec <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	2286      	movs	r2, #134	; 0x86
 800b7e6:	0052      	lsls	r2, r2, #1
 800b7e8:	18ba      	adds	r2, r7, r2
 800b7ea:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	7b1b      	ldrb	r3, [r3, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d125      	bne.n	800b840 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	6959      	ldr	r1, [r3, #20]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	88da      	ldrh	r2, [r3, #6]
 800b7fc:	2486      	movs	r4, #134	; 0x86
 800b7fe:	0064      	lsls	r4, r4, #1
 800b800:	193b      	adds	r3, r7, r4
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	b29b      	uxth	r3, r3
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f001 fa62 	bl	800ccd0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	617b      	str	r3, [r7, #20]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2250      	movs	r2, #80	; 0x50
 800b814:	5a9b      	ldrh	r3, [r3, r2]
 800b816:	b29b      	uxth	r3, r3
 800b818:	001a      	movs	r2, r3
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	189b      	adds	r3, r3, r2
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	00da      	lsls	r2, r3, #3
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	18d3      	adds	r3, r2, r3
 800b82a:	4ad4      	ldr	r2, [pc, #848]	; (800bb7c <USB_EPStartXfer+0x3cc>)
 800b82c:	4694      	mov	ip, r2
 800b82e:	4463      	add	r3, ip
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	193b      	adds	r3, r7, r4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	b29a      	uxth	r2, r3
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	801a      	strh	r2, [r3, #0]
 800b83c:	f000 fce4 	bl	800c208 <USB_EPStartXfer+0xa58>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	78db      	ldrb	r3, [r3, #3]
 800b844:	2b02      	cmp	r3, #2
 800b846:	d000      	beq.n	800b84a <USB_EPStartXfer+0x9a>
 800b848:	e358      	b.n	800befc <USB_EPStartXfer+0x74c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6a1a      	ldr	r2, [r3, #32]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	429a      	cmp	r2, r3
 800b854:	d800      	bhi.n	800b858 <USB_EPStartXfer+0xa8>
 800b856:	e2fe      	b.n	800be56 <USB_EPStartXfer+0x6a6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	18d3      	adds	r3, r2, r3
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	b29a      	uxth	r2, r3
 800b866:	205a      	movs	r0, #90	; 0x5a
 800b868:	183b      	adds	r3, r7, r0
 800b86a:	49c5      	ldr	r1, [pc, #788]	; (800bb80 <USB_EPStartXfer+0x3d0>)
 800b86c:	400a      	ands	r2, r1
 800b86e:	801a      	strh	r2, [r3, #0]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	18d3      	adds	r3, r2, r3
 800b87a:	183a      	adds	r2, r7, r0
 800b87c:	8812      	ldrh	r2, [r2, #0]
 800b87e:	49c1      	ldr	r1, [pc, #772]	; (800bb84 <USB_EPStartXfer+0x3d4>)
 800b880:	430a      	orrs	r2, r1
 800b882:	b292      	uxth	r2, r2
 800b884:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	6a1a      	ldr	r2, [r3, #32]
 800b88a:	2386      	movs	r3, #134	; 0x86
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	18fb      	adds	r3, r7, r3
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	1ad2      	subs	r2, r2, r3
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	18d3      	adds	r3, r2, r3
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	001a      	movs	r2, r3
 800b8a8:	2340      	movs	r3, #64	; 0x40
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	d100      	bne.n	800b8b0 <USB_EPStartXfer+0x100>
 800b8ae:	e171      	b.n	800bb94 <USB_EPStartXfer+0x3e4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	785b      	ldrb	r3, [r3, #1]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d16c      	bne.n	800b996 <USB_EPStartXfer+0x1e6>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2250      	movs	r2, #80	; 0x50
 800b8c4:	5a9b      	ldrh	r3, [r3, r2]
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	001a      	movs	r2, r3
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8cc:	189b      	adds	r3, r3, r2
 800b8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	00da      	lsls	r2, r3, #3
 800b8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d8:	18d3      	adds	r3, r2, r3
 800b8da:	4aab      	ldr	r2, [pc, #684]	; (800bb88 <USB_EPStartXfer+0x3d8>)
 800b8dc:	4694      	mov	ip, r2
 800b8de:	4463      	add	r3, ip
 800b8e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e2:	2386      	movs	r3, #134	; 0x86
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	18fb      	adds	r3, r7, r3
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d110      	bne.n	800b910 <USB_EPStartXfer+0x160>
 800b8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	4aa5      	ldr	r2, [pc, #660]	; (800bb8c <USB_EPStartXfer+0x3dc>)
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	801a      	strh	r2, [r3, #0]
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	b29b      	uxth	r3, r3
 800b904:	4aa2      	ldr	r2, [pc, #648]	; (800bb90 <USB_EPStartXfer+0x3e0>)
 800b906:	4313      	orrs	r3, r2
 800b908:	b29a      	uxth	r2, r3
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	801a      	strh	r2, [r3, #0]
 800b90e:	e05e      	b.n	800b9ce <USB_EPStartXfer+0x21e>
 800b910:	2386      	movs	r3, #134	; 0x86
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	18fb      	adds	r3, r7, r3
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b3e      	cmp	r3, #62	; 0x3e
 800b91a:	d81c      	bhi.n	800b956 <USB_EPStartXfer+0x1a6>
 800b91c:	2286      	movs	r2, #134	; 0x86
 800b91e:	0052      	lsls	r2, r2, #1
 800b920:	18bb      	adds	r3, r7, r2
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	1d79      	adds	r1, r7, #5
 800b928:	31ff      	adds	r1, #255	; 0xff
 800b92a:	600b      	str	r3, [r1, #0]
 800b92c:	18bb      	adds	r3, r7, r2
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2201      	movs	r2, #1
 800b932:	4013      	ands	r3, r2
 800b934:	d006      	beq.n	800b944 <USB_EPStartXfer+0x194>
 800b936:	1d7b      	adds	r3, r7, #5
 800b938:	33ff      	adds	r3, #255	; 0xff
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3301      	adds	r3, #1
 800b93e:	1d7a      	adds	r2, r7, #5
 800b940:	32ff      	adds	r2, #255	; 0xff
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	1d7b      	adds	r3, r7, #5
 800b946:	33ff      	adds	r3, #255	; 0xff
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	029b      	lsls	r3, r3, #10
 800b94e:	b29a      	uxth	r2, r3
 800b950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b952:	801a      	strh	r2, [r3, #0]
 800b954:	e03b      	b.n	800b9ce <USB_EPStartXfer+0x21e>
 800b956:	2286      	movs	r2, #134	; 0x86
 800b958:	0052      	lsls	r2, r2, #1
 800b95a:	18bb      	adds	r3, r7, r2
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	095b      	lsrs	r3, r3, #5
 800b960:	1d79      	adds	r1, r7, #5
 800b962:	31ff      	adds	r1, #255	; 0xff
 800b964:	600b      	str	r3, [r1, #0]
 800b966:	18bb      	adds	r3, r7, r2
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	221f      	movs	r2, #31
 800b96c:	4013      	ands	r3, r2
 800b96e:	d106      	bne.n	800b97e <USB_EPStartXfer+0x1ce>
 800b970:	1d7b      	adds	r3, r7, #5
 800b972:	33ff      	adds	r3, #255	; 0xff
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3b01      	subs	r3, #1
 800b978:	1d7a      	adds	r2, r7, #5
 800b97a:	32ff      	adds	r2, #255	; 0xff
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	1d7b      	adds	r3, r7, #5
 800b980:	33ff      	adds	r3, #255	; 0xff
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	b29b      	uxth	r3, r3
 800b986:	029b      	lsls	r3, r3, #10
 800b988:	b29b      	uxth	r3, r3
 800b98a:	4a81      	ldr	r2, [pc, #516]	; (800bb90 <USB_EPStartXfer+0x3e0>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	b29a      	uxth	r2, r3
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	801a      	strh	r2, [r3, #0]
 800b994:	e01b      	b.n	800b9ce <USB_EPStartXfer+0x21e>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	785b      	ldrb	r3, [r3, #1]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d117      	bne.n	800b9ce <USB_EPStartXfer+0x21e>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2250      	movs	r2, #80	; 0x50
 800b9a2:	5a9b      	ldrh	r3, [r3, r2]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	001a      	movs	r2, r3
 800b9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9aa:	189b      	adds	r3, r3, r2
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	00da      	lsls	r2, r3, #3
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b6:	18d3      	adds	r3, r2, r3
 800b9b8:	4a73      	ldr	r2, [pc, #460]	; (800bb88 <USB_EPStartXfer+0x3d8>)
 800b9ba:	4694      	mov	ip, r2
 800b9bc:	4463      	add	r3, ip
 800b9be:	633b      	str	r3, [r7, #48]	; 0x30
 800b9c0:	2386      	movs	r3, #134	; 0x86
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	18fb      	adds	r3, r7, r3
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b9ce:	2085      	movs	r0, #133	; 0x85
 800b9d0:	0040      	lsls	r0, r0, #1
 800b9d2:	183b      	adds	r3, r7, r0
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	8952      	ldrh	r2, [r2, #10]
 800b9d8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	6959      	ldr	r1, [r3, #20]
 800b9de:	2586      	movs	r5, #134	; 0x86
 800b9e0:	006d      	lsls	r5, r5, #1
 800b9e2:	197b      	adds	r3, r7, r5
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	b29c      	uxth	r4, r3
 800b9e8:	183b      	adds	r3, r7, r0
 800b9ea:	881a      	ldrh	r2, [r3, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	0023      	movs	r3, r4
 800b9f0:	f001 f96e 	bl	800ccd0 <USB_WritePMA>
            ep->xfer_buff += len;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	695a      	ldr	r2, [r3, #20]
 800b9f8:	197b      	adds	r3, r7, r5
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	18d2      	adds	r2, r2, r3
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	6a1a      	ldr	r2, [r3, #32]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d909      	bls.n	800ba22 <USB_EPStartXfer+0x272>
            {
              ep->xfer_len_db -= len;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	6a1a      	ldr	r2, [r3, #32]
 800ba12:	2386      	movs	r3, #134	; 0x86
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	18fb      	adds	r3, r7, r3
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	621a      	str	r2, [r3, #32]
 800ba20:	e008      	b.n	800ba34 <USB_EPStartXfer+0x284>
            }
            else
            {
              len = ep->xfer_len_db;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	2286      	movs	r2, #134	; 0x86
 800ba28:	0052      	lsls	r2, r2, #1
 800ba2a:	18ba      	adds	r2, r7, r2
 800ba2c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2200      	movs	r2, #0
 800ba32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	785b      	ldrb	r3, [r3, #1]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d16c      	bne.n	800bb16 <USB_EPStartXfer+0x366>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	61fb      	str	r3, [r7, #28]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2250      	movs	r2, #80	; 0x50
 800ba44:	5a9b      	ldrh	r3, [r3, r2]
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	001a      	movs	r2, r3
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	189b      	adds	r3, r3, r2
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	00da      	lsls	r2, r3, #3
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	18d3      	adds	r3, r2, r3
 800ba5a:	4a48      	ldr	r2, [pc, #288]	; (800bb7c <USB_EPStartXfer+0x3cc>)
 800ba5c:	4694      	mov	ip, r2
 800ba5e:	4463      	add	r3, ip
 800ba60:	61bb      	str	r3, [r7, #24]
 800ba62:	2386      	movs	r3, #134	; 0x86
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	18fb      	adds	r3, r7, r3
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d110      	bne.n	800ba90 <USB_EPStartXfer+0x2e0>
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	881b      	ldrh	r3, [r3, #0]
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	4a45      	ldr	r2, [pc, #276]	; (800bb8c <USB_EPStartXfer+0x3dc>)
 800ba76:	4013      	ands	r3, r2
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	801a      	strh	r2, [r3, #0]
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	4a42      	ldr	r2, [pc, #264]	; (800bb90 <USB_EPStartXfer+0x3e0>)
 800ba86:	4313      	orrs	r3, r2
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	801a      	strh	r2, [r3, #0]
 800ba8e:	e060      	b.n	800bb52 <USB_EPStartXfer+0x3a2>
 800ba90:	2386      	movs	r3, #134	; 0x86
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	18fb      	adds	r3, r7, r3
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b3e      	cmp	r3, #62	; 0x3e
 800ba9a:	d81c      	bhi.n	800bad6 <USB_EPStartXfer+0x326>
 800ba9c:	2286      	movs	r2, #134	; 0x86
 800ba9e:	0052      	lsls	r2, r2, #1
 800baa0:	18bb      	adds	r3, r7, r2
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	085b      	lsrs	r3, r3, #1
 800baa6:	1c79      	adds	r1, r7, #1
 800baa8:	31ff      	adds	r1, #255	; 0xff
 800baaa:	600b      	str	r3, [r1, #0]
 800baac:	18bb      	adds	r3, r7, r2
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2201      	movs	r2, #1
 800bab2:	4013      	ands	r3, r2
 800bab4:	d006      	beq.n	800bac4 <USB_EPStartXfer+0x314>
 800bab6:	1c7b      	adds	r3, r7, #1
 800bab8:	33ff      	adds	r3, #255	; 0xff
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3301      	adds	r3, #1
 800babe:	1c7a      	adds	r2, r7, #1
 800bac0:	32ff      	adds	r2, #255	; 0xff
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	1c7b      	adds	r3, r7, #1
 800bac6:	33ff      	adds	r3, #255	; 0xff
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	029b      	lsls	r3, r3, #10
 800bace:	b29a      	uxth	r2, r3
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	801a      	strh	r2, [r3, #0]
 800bad4:	e03d      	b.n	800bb52 <USB_EPStartXfer+0x3a2>
 800bad6:	2286      	movs	r2, #134	; 0x86
 800bad8:	0052      	lsls	r2, r2, #1
 800bada:	18bb      	adds	r3, r7, r2
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	095b      	lsrs	r3, r3, #5
 800bae0:	1c79      	adds	r1, r7, #1
 800bae2:	31ff      	adds	r1, #255	; 0xff
 800bae4:	600b      	str	r3, [r1, #0]
 800bae6:	18bb      	adds	r3, r7, r2
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	221f      	movs	r2, #31
 800baec:	4013      	ands	r3, r2
 800baee:	d106      	bne.n	800bafe <USB_EPStartXfer+0x34e>
 800baf0:	1c7b      	adds	r3, r7, #1
 800baf2:	33ff      	adds	r3, #255	; 0xff
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	1c7a      	adds	r2, r7, #1
 800bafa:	32ff      	adds	r2, #255	; 0xff
 800bafc:	6013      	str	r3, [r2, #0]
 800bafe:	1c7b      	adds	r3, r7, #1
 800bb00:	33ff      	adds	r3, #255	; 0xff
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	029b      	lsls	r3, r3, #10
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	4a21      	ldr	r2, [pc, #132]	; (800bb90 <USB_EPStartXfer+0x3e0>)
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	801a      	strh	r2, [r3, #0]
 800bb14:	e01d      	b.n	800bb52 <USB_EPStartXfer+0x3a2>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	785b      	ldrb	r3, [r3, #1]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d119      	bne.n	800bb52 <USB_EPStartXfer+0x3a2>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	627b      	str	r3, [r7, #36]	; 0x24
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2250      	movs	r2, #80	; 0x50
 800bb26:	5a9b      	ldrh	r3, [r3, r2]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	001a      	movs	r2, r3
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	189b      	adds	r3, r3, r2
 800bb30:	627b      	str	r3, [r7, #36]	; 0x24
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	00da      	lsls	r2, r3, #3
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	18d3      	adds	r3, r2, r3
 800bb3c:	4a0f      	ldr	r2, [pc, #60]	; (800bb7c <USB_EPStartXfer+0x3cc>)
 800bb3e:	4694      	mov	ip, r2
 800bb40:	4463      	add	r3, ip
 800bb42:	623b      	str	r3, [r7, #32]
 800bb44:	2386      	movs	r3, #134	; 0x86
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	18fb      	adds	r3, r7, r3
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bb52:	2085      	movs	r0, #133	; 0x85
 800bb54:	0040      	lsls	r0, r0, #1
 800bb56:	183b      	adds	r3, r7, r0
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	8912      	ldrh	r2, [r2, #8]
 800bb5c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	6959      	ldr	r1, [r3, #20]
 800bb62:	2386      	movs	r3, #134	; 0x86
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	18fb      	adds	r3, r7, r3
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	b29c      	uxth	r4, r3
 800bb6c:	183b      	adds	r3, r7, r0
 800bb6e:	881a      	ldrh	r2, [r3, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	0023      	movs	r3, r4
 800bb74:	f001 f8ac 	bl	800ccd0 <USB_WritePMA>
 800bb78:	e346      	b.n	800c208 <USB_EPStartXfer+0xa58>
 800bb7a:	46c0      	nop			; (mov r8, r8)
 800bb7c:	00000402 	.word	0x00000402
 800bb80:	ffff8f8f 	.word	0xffff8f8f
 800bb84:	ffff8180 	.word	0xffff8180
 800bb88:	00000406 	.word	0x00000406
 800bb8c:	ffff83ff 	.word	0xffff83ff
 800bb90:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	785b      	ldrb	r3, [r3, #1]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d16a      	bne.n	800bc72 <USB_EPStartXfer+0x4c2>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2250      	movs	r2, #80	; 0x50
 800bba4:	5a9b      	ldrh	r3, [r3, r2]
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	001a      	movs	r2, r3
 800bbaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbac:	189b      	adds	r3, r3, r2
 800bbae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	00da      	lsls	r2, r3, #3
 800bbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb8:	18d3      	adds	r3, r2, r3
 800bbba:	4aca      	ldr	r2, [pc, #808]	; (800bee4 <USB_EPStartXfer+0x734>)
 800bbbc:	4694      	mov	ip, r2
 800bbbe:	4463      	add	r3, ip
 800bbc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbc2:	2386      	movs	r3, #134	; 0x86
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	18fb      	adds	r3, r7, r3
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d110      	bne.n	800bbf0 <USB_EPStartXfer+0x440>
 800bbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd0:	881b      	ldrh	r3, [r3, #0]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	4ac4      	ldr	r2, [pc, #784]	; (800bee8 <USB_EPStartXfer+0x738>)
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbdc:	801a      	strh	r2, [r3, #0]
 800bbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4ac1      	ldr	r2, [pc, #772]	; (800beec <USB_EPStartXfer+0x73c>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbec:	801a      	strh	r2, [r3, #0]
 800bbee:	e05e      	b.n	800bcae <USB_EPStartXfer+0x4fe>
 800bbf0:	2386      	movs	r3, #134	; 0x86
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	18fb      	adds	r3, r7, r3
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b3e      	cmp	r3, #62	; 0x3e
 800bbfa:	d81b      	bhi.n	800bc34 <USB_EPStartXfer+0x484>
 800bbfc:	2286      	movs	r2, #134	; 0x86
 800bbfe:	0052      	lsls	r2, r2, #1
 800bc00:	18bb      	adds	r3, r7, r2
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	085b      	lsrs	r3, r3, #1
 800bc06:	21fc      	movs	r1, #252	; 0xfc
 800bc08:	1879      	adds	r1, r7, r1
 800bc0a:	600b      	str	r3, [r1, #0]
 800bc0c:	18bb      	adds	r3, r7, r2
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2201      	movs	r2, #1
 800bc12:	4013      	ands	r3, r2
 800bc14:	d005      	beq.n	800bc22 <USB_EPStartXfer+0x472>
 800bc16:	22fc      	movs	r2, #252	; 0xfc
 800bc18:	18bb      	adds	r3, r7, r2
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	18ba      	adds	r2, r7, r2
 800bc20:	6013      	str	r3, [r2, #0]
 800bc22:	23fc      	movs	r3, #252	; 0xfc
 800bc24:	18fb      	adds	r3, r7, r3
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	029b      	lsls	r3, r3, #10
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc30:	801a      	strh	r2, [r3, #0]
 800bc32:	e03c      	b.n	800bcae <USB_EPStartXfer+0x4fe>
 800bc34:	2286      	movs	r2, #134	; 0x86
 800bc36:	0052      	lsls	r2, r2, #1
 800bc38:	18bb      	adds	r3, r7, r2
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	095b      	lsrs	r3, r3, #5
 800bc3e:	21fc      	movs	r1, #252	; 0xfc
 800bc40:	1879      	adds	r1, r7, r1
 800bc42:	600b      	str	r3, [r1, #0]
 800bc44:	18bb      	adds	r3, r7, r2
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	221f      	movs	r2, #31
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	d105      	bne.n	800bc5a <USB_EPStartXfer+0x4aa>
 800bc4e:	22fc      	movs	r2, #252	; 0xfc
 800bc50:	18bb      	adds	r3, r7, r2
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3b01      	subs	r3, #1
 800bc56:	18ba      	adds	r2, r7, r2
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	23fc      	movs	r3, #252	; 0xfc
 800bc5c:	18fb      	adds	r3, r7, r3
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	029b      	lsls	r3, r3, #10
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	4aa1      	ldr	r2, [pc, #644]	; (800beec <USB_EPStartXfer+0x73c>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc6e:	801a      	strh	r2, [r3, #0]
 800bc70:	e01d      	b.n	800bcae <USB_EPStartXfer+0x4fe>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d119      	bne.n	800bcae <USB_EPStartXfer+0x4fe>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	657b      	str	r3, [r7, #84]	; 0x54
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2250      	movs	r2, #80	; 0x50
 800bc82:	5a9b      	ldrh	r3, [r3, r2]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	001a      	movs	r2, r3
 800bc88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc8a:	189b      	adds	r3, r3, r2
 800bc8c:	657b      	str	r3, [r7, #84]	; 0x54
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	00da      	lsls	r2, r3, #3
 800bc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc96:	18d3      	adds	r3, r2, r3
 800bc98:	4a92      	ldr	r2, [pc, #584]	; (800bee4 <USB_EPStartXfer+0x734>)
 800bc9a:	4694      	mov	ip, r2
 800bc9c:	4463      	add	r3, ip
 800bc9e:	653b      	str	r3, [r7, #80]	; 0x50
 800bca0:	2386      	movs	r3, #134	; 0x86
 800bca2:	005b      	lsls	r3, r3, #1
 800bca4:	18fb      	adds	r3, r7, r3
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bcae:	2085      	movs	r0, #133	; 0x85
 800bcb0:	0040      	lsls	r0, r0, #1
 800bcb2:	183b      	adds	r3, r7, r0
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	8912      	ldrh	r2, [r2, #8]
 800bcb8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	6959      	ldr	r1, [r3, #20]
 800bcbe:	2586      	movs	r5, #134	; 0x86
 800bcc0:	006d      	lsls	r5, r5, #1
 800bcc2:	197b      	adds	r3, r7, r5
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	b29c      	uxth	r4, r3
 800bcc8:	183b      	adds	r3, r7, r0
 800bcca:	881a      	ldrh	r2, [r3, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	0023      	movs	r3, r4
 800bcd0:	f000 fffe 	bl	800ccd0 <USB_WritePMA>
            ep->xfer_buff += len;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	695a      	ldr	r2, [r3, #20]
 800bcd8:	197b      	adds	r3, r7, r5
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	18d2      	adds	r2, r2, r3
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	6a1a      	ldr	r2, [r3, #32]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d909      	bls.n	800bd02 <USB_EPStartXfer+0x552>
            {
              ep->xfer_len_db -= len;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	6a1a      	ldr	r2, [r3, #32]
 800bcf2:	2386      	movs	r3, #134	; 0x86
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	18fb      	adds	r3, r7, r3
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	1ad2      	subs	r2, r2, r3
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	621a      	str	r2, [r3, #32]
 800bd00:	e008      	b.n	800bd14 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	2286      	movs	r2, #134	; 0x86
 800bd08:	0052      	lsls	r2, r2, #1
 800bd0a:	18ba      	adds	r2, r7, r2
 800bd0c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2200      	movs	r2, #0
 800bd12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	647b      	str	r3, [r7, #68]	; 0x44
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	785b      	ldrb	r3, [r3, #1]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d16a      	bne.n	800bdf6 <USB_EPStartXfer+0x646>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2250      	movs	r2, #80	; 0x50
 800bd28:	5a9b      	ldrh	r3, [r3, r2]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	001a      	movs	r2, r3
 800bd2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd30:	189b      	adds	r3, r3, r2
 800bd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	00da      	lsls	r2, r3, #3
 800bd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3c:	18d3      	adds	r3, r2, r3
 800bd3e:	4a6c      	ldr	r2, [pc, #432]	; (800bef0 <USB_EPStartXfer+0x740>)
 800bd40:	4694      	mov	ip, r2
 800bd42:	4463      	add	r3, ip
 800bd44:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd46:	2386      	movs	r3, #134	; 0x86
 800bd48:	005b      	lsls	r3, r3, #1
 800bd4a:	18fb      	adds	r3, r7, r3
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d110      	bne.n	800bd74 <USB_EPStartXfer+0x5c4>
 800bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	4a63      	ldr	r2, [pc, #396]	; (800bee8 <USB_EPStartXfer+0x738>)
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd60:	801a      	strh	r2, [r3, #0]
 800bd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	4a60      	ldr	r2, [pc, #384]	; (800beec <USB_EPStartXfer+0x73c>)
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	801a      	strh	r2, [r3, #0]
 800bd72:	e05c      	b.n	800be2e <USB_EPStartXfer+0x67e>
 800bd74:	2386      	movs	r3, #134	; 0x86
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	18fb      	adds	r3, r7, r3
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b3e      	cmp	r3, #62	; 0x3e
 800bd7e:	d81b      	bhi.n	800bdb8 <USB_EPStartXfer+0x608>
 800bd80:	2286      	movs	r2, #134	; 0x86
 800bd82:	0052      	lsls	r2, r2, #1
 800bd84:	18bb      	adds	r3, r7, r2
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	085b      	lsrs	r3, r3, #1
 800bd8a:	21f8      	movs	r1, #248	; 0xf8
 800bd8c:	1879      	adds	r1, r7, r1
 800bd8e:	600b      	str	r3, [r1, #0]
 800bd90:	18bb      	adds	r3, r7, r2
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2201      	movs	r2, #1
 800bd96:	4013      	ands	r3, r2
 800bd98:	d005      	beq.n	800bda6 <USB_EPStartXfer+0x5f6>
 800bd9a:	22f8      	movs	r2, #248	; 0xf8
 800bd9c:	18bb      	adds	r3, r7, r2
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3301      	adds	r3, #1
 800bda2:	18ba      	adds	r2, r7, r2
 800bda4:	6013      	str	r3, [r2, #0]
 800bda6:	23f8      	movs	r3, #248	; 0xf8
 800bda8:	18fb      	adds	r3, r7, r3
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	029b      	lsls	r3, r3, #10
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb4:	801a      	strh	r2, [r3, #0]
 800bdb6:	e03a      	b.n	800be2e <USB_EPStartXfer+0x67e>
 800bdb8:	2286      	movs	r2, #134	; 0x86
 800bdba:	0052      	lsls	r2, r2, #1
 800bdbc:	18bb      	adds	r3, r7, r2
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	095b      	lsrs	r3, r3, #5
 800bdc2:	21f8      	movs	r1, #248	; 0xf8
 800bdc4:	1879      	adds	r1, r7, r1
 800bdc6:	600b      	str	r3, [r1, #0]
 800bdc8:	18bb      	adds	r3, r7, r2
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	221f      	movs	r2, #31
 800bdce:	4013      	ands	r3, r2
 800bdd0:	d105      	bne.n	800bdde <USB_EPStartXfer+0x62e>
 800bdd2:	22f8      	movs	r2, #248	; 0xf8
 800bdd4:	18bb      	adds	r3, r7, r2
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	18ba      	adds	r2, r7, r2
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	23f8      	movs	r3, #248	; 0xf8
 800bde0:	18fb      	adds	r3, r7, r3
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	029b      	lsls	r3, r3, #10
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	4a40      	ldr	r2, [pc, #256]	; (800beec <USB_EPStartXfer+0x73c>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	801a      	strh	r2, [r3, #0]
 800bdf4:	e01b      	b.n	800be2e <USB_EPStartXfer+0x67e>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	785b      	ldrb	r3, [r3, #1]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d117      	bne.n	800be2e <USB_EPStartXfer+0x67e>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2250      	movs	r2, #80	; 0x50
 800be02:	5a9b      	ldrh	r3, [r3, r2]
 800be04:	b29b      	uxth	r3, r3
 800be06:	001a      	movs	r2, r3
 800be08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be0a:	189b      	adds	r3, r3, r2
 800be0c:	647b      	str	r3, [r7, #68]	; 0x44
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	00da      	lsls	r2, r3, #3
 800be14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be16:	18d3      	adds	r3, r2, r3
 800be18:	4a35      	ldr	r2, [pc, #212]	; (800bef0 <USB_EPStartXfer+0x740>)
 800be1a:	4694      	mov	ip, r2
 800be1c:	4463      	add	r3, ip
 800be1e:	643b      	str	r3, [r7, #64]	; 0x40
 800be20:	2386      	movs	r3, #134	; 0x86
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	18fb      	adds	r3, r7, r3
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	b29a      	uxth	r2, r3
 800be2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800be2e:	2085      	movs	r0, #133	; 0x85
 800be30:	0040      	lsls	r0, r0, #1
 800be32:	183b      	adds	r3, r7, r0
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	8952      	ldrh	r2, [r2, #10]
 800be38:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	6959      	ldr	r1, [r3, #20]
 800be3e:	2386      	movs	r3, #134	; 0x86
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	18fb      	adds	r3, r7, r3
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	b29c      	uxth	r4, r3
 800be48:	183b      	adds	r3, r7, r0
 800be4a:	881a      	ldrh	r2, [r3, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	0023      	movs	r3, r4
 800be50:	f000 ff3e 	bl	800ccd0 <USB_WritePMA>
 800be54:	e1d8      	b.n	800c208 <USB_EPStartXfer+0xa58>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	2086      	movs	r0, #134	; 0x86
 800be5c:	0040      	lsls	r0, r0, #1
 800be5e:	183a      	adds	r2, r7, r0
 800be60:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	18d3      	adds	r3, r2, r3
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	b29a      	uxth	r2, r3
 800be70:	2466      	movs	r4, #102	; 0x66
 800be72:	193b      	adds	r3, r7, r4
 800be74:	491f      	ldr	r1, [pc, #124]	; (800bef4 <USB_EPStartXfer+0x744>)
 800be76:	400a      	ands	r2, r1
 800be78:	801a      	strh	r2, [r3, #0]
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	18d3      	adds	r3, r2, r3
 800be84:	193a      	adds	r2, r7, r4
 800be86:	8812      	ldrh	r2, [r2, #0]
 800be88:	491b      	ldr	r1, [pc, #108]	; (800bef8 <USB_EPStartXfer+0x748>)
 800be8a:	430a      	orrs	r2, r1
 800be8c:	b292      	uxth	r2, r2
 800be8e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	663b      	str	r3, [r7, #96]	; 0x60
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2250      	movs	r2, #80	; 0x50
 800be98:	5a9b      	ldrh	r3, [r3, r2]
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	001a      	movs	r2, r3
 800be9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bea0:	189b      	adds	r3, r3, r2
 800bea2:	663b      	str	r3, [r7, #96]	; 0x60
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	00da      	lsls	r2, r3, #3
 800beaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beac:	18d3      	adds	r3, r2, r3
 800beae:	4a0d      	ldr	r2, [pc, #52]	; (800bee4 <USB_EPStartXfer+0x734>)
 800beb0:	4694      	mov	ip, r2
 800beb2:	4463      	add	r3, ip
 800beb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800beb6:	183b      	adds	r3, r7, r0
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	b29a      	uxth	r2, r3
 800bebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bebe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bec0:	2585      	movs	r5, #133	; 0x85
 800bec2:	006d      	lsls	r5, r5, #1
 800bec4:	197b      	adds	r3, r7, r5
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	8912      	ldrh	r2, [r2, #8]
 800beca:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	6959      	ldr	r1, [r3, #20]
 800bed0:	183b      	adds	r3, r7, r0
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	b29c      	uxth	r4, r3
 800bed6:	197b      	adds	r3, r7, r5
 800bed8:	881a      	ldrh	r2, [r3, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	0023      	movs	r3, r4
 800bede:	f000 fef7 	bl	800ccd0 <USB_WritePMA>
 800bee2:	e191      	b.n	800c208 <USB_EPStartXfer+0xa58>
 800bee4:	00000402 	.word	0x00000402
 800bee8:	ffff83ff 	.word	0xffff83ff
 800beec:	ffff8000 	.word	0xffff8000
 800bef0:	00000406 	.word	0x00000406
 800bef4:	ffff8e8f 	.word	0xffff8e8f
 800bef8:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	18d3      	adds	r3, r2, r3
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	001a      	movs	r2, r3
 800bf0c:	2340      	movs	r3, #64	; 0x40
 800bf0e:	4013      	ands	r3, r2
 800bf10:	d100      	bne.n	800bf14 <USB_EPStartXfer+0x764>
 800bf12:	e093      	b.n	800c03c <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	785b      	ldrb	r3, [r3, #1]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d16a      	bne.n	800bff6 <USB_EPStartXfer+0x846>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	673b      	str	r3, [r7, #112]	; 0x70
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2250      	movs	r2, #80	; 0x50
 800bf28:	5a9b      	ldrh	r3, [r3, r2]
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	001a      	movs	r2, r3
 800bf2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf30:	189b      	adds	r3, r3, r2
 800bf32:	673b      	str	r3, [r7, #112]	; 0x70
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	00da      	lsls	r2, r3, #3
 800bf3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf3c:	18d3      	adds	r3, r2, r3
 800bf3e:	4ae0      	ldr	r2, [pc, #896]	; (800c2c0 <USB_EPStartXfer+0xb10>)
 800bf40:	4694      	mov	ip, r2
 800bf42:	4463      	add	r3, ip
 800bf44:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf46:	2386      	movs	r3, #134	; 0x86
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	18fb      	adds	r3, r7, r3
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d110      	bne.n	800bf74 <USB_EPStartXfer+0x7c4>
 800bf52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	4ada      	ldr	r2, [pc, #872]	; (800c2c4 <USB_EPStartXfer+0xb14>)
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf60:	801a      	strh	r2, [r3, #0]
 800bf62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	4ad7      	ldr	r2, [pc, #860]	; (800c2c8 <USB_EPStartXfer+0xb18>)
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf70:	801a      	strh	r2, [r3, #0]
 800bf72:	e05c      	b.n	800c02e <USB_EPStartXfer+0x87e>
 800bf74:	2386      	movs	r3, #134	; 0x86
 800bf76:	005b      	lsls	r3, r3, #1
 800bf78:	18fb      	adds	r3, r7, r3
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b3e      	cmp	r3, #62	; 0x3e
 800bf7e:	d81b      	bhi.n	800bfb8 <USB_EPStartXfer+0x808>
 800bf80:	2286      	movs	r2, #134	; 0x86
 800bf82:	0052      	lsls	r2, r2, #1
 800bf84:	18bb      	adds	r3, r7, r2
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	085b      	lsrs	r3, r3, #1
 800bf8a:	21f4      	movs	r1, #244	; 0xf4
 800bf8c:	1879      	adds	r1, r7, r1
 800bf8e:	600b      	str	r3, [r1, #0]
 800bf90:	18bb      	adds	r3, r7, r2
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2201      	movs	r2, #1
 800bf96:	4013      	ands	r3, r2
 800bf98:	d005      	beq.n	800bfa6 <USB_EPStartXfer+0x7f6>
 800bf9a:	22f4      	movs	r2, #244	; 0xf4
 800bf9c:	18bb      	adds	r3, r7, r2
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	18ba      	adds	r2, r7, r2
 800bfa4:	6013      	str	r3, [r2, #0]
 800bfa6:	23f4      	movs	r3, #244	; 0xf4
 800bfa8:	18fb      	adds	r3, r7, r3
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	029b      	lsls	r3, r3, #10
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfb4:	801a      	strh	r2, [r3, #0]
 800bfb6:	e03a      	b.n	800c02e <USB_EPStartXfer+0x87e>
 800bfb8:	2286      	movs	r2, #134	; 0x86
 800bfba:	0052      	lsls	r2, r2, #1
 800bfbc:	18bb      	adds	r3, r7, r2
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	095b      	lsrs	r3, r3, #5
 800bfc2:	21f4      	movs	r1, #244	; 0xf4
 800bfc4:	1879      	adds	r1, r7, r1
 800bfc6:	600b      	str	r3, [r1, #0]
 800bfc8:	18bb      	adds	r3, r7, r2
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	221f      	movs	r2, #31
 800bfce:	4013      	ands	r3, r2
 800bfd0:	d105      	bne.n	800bfde <USB_EPStartXfer+0x82e>
 800bfd2:	22f4      	movs	r2, #244	; 0xf4
 800bfd4:	18bb      	adds	r3, r7, r2
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	18ba      	adds	r2, r7, r2
 800bfdc:	6013      	str	r3, [r2, #0]
 800bfde:	23f4      	movs	r3, #244	; 0xf4
 800bfe0:	18fb      	adds	r3, r7, r3
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	029b      	lsls	r3, r3, #10
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	4ab7      	ldr	r2, [pc, #732]	; (800c2c8 <USB_EPStartXfer+0xb18>)
 800bfec:	4313      	orrs	r3, r2
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff2:	801a      	strh	r2, [r3, #0]
 800bff4:	e01b      	b.n	800c02e <USB_EPStartXfer+0x87e>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	785b      	ldrb	r3, [r3, #1]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d117      	bne.n	800c02e <USB_EPStartXfer+0x87e>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2250      	movs	r2, #80	; 0x50
 800c002:	5a9b      	ldrh	r3, [r3, r2]
 800c004:	b29b      	uxth	r3, r3
 800c006:	001a      	movs	r2, r3
 800c008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c00a:	189b      	adds	r3, r3, r2
 800c00c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	00da      	lsls	r2, r3, #3
 800c014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c016:	18d3      	adds	r3, r2, r3
 800c018:	4aa9      	ldr	r2, [pc, #676]	; (800c2c0 <USB_EPStartXfer+0xb10>)
 800c01a:	4694      	mov	ip, r2
 800c01c:	4463      	add	r3, ip
 800c01e:	677b      	str	r3, [r7, #116]	; 0x74
 800c020:	2386      	movs	r3, #134	; 0x86
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	18fb      	adds	r3, r7, r3
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	b29a      	uxth	r2, r3
 800c02a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c02c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c02e:	2385      	movs	r3, #133	; 0x85
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	18fb      	adds	r3, r7, r3
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	8952      	ldrh	r2, [r2, #10]
 800c038:	801a      	strh	r2, [r3, #0]
 800c03a:	e09f      	b.n	800c17c <USB_EPStartXfer+0x9cc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	785b      	ldrb	r3, [r3, #1]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d16f      	bne.n	800c124 <USB_EPStartXfer+0x974>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2180      	movs	r1, #128	; 0x80
 800c048:	187a      	adds	r2, r7, r1
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2250      	movs	r2, #80	; 0x50
 800c050:	5a9b      	ldrh	r3, [r3, r2]
 800c052:	b29b      	uxth	r3, r3
 800c054:	001a      	movs	r2, r3
 800c056:	187b      	adds	r3, r7, r1
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	189b      	adds	r3, r3, r2
 800c05c:	187a      	adds	r2, r7, r1
 800c05e:	6013      	str	r3, [r2, #0]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	00da      	lsls	r2, r3, #3
 800c066:	187b      	adds	r3, r7, r1
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	18d3      	adds	r3, r2, r3
 800c06c:	4a97      	ldr	r2, [pc, #604]	; (800c2cc <USB_EPStartXfer+0xb1c>)
 800c06e:	4694      	mov	ip, r2
 800c070:	4463      	add	r3, ip
 800c072:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c074:	2386      	movs	r3, #134	; 0x86
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	18fb      	adds	r3, r7, r3
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d110      	bne.n	800c0a2 <USB_EPStartXfer+0x8f2>
 800c080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c082:	881b      	ldrh	r3, [r3, #0]
 800c084:	b29b      	uxth	r3, r3
 800c086:	4a8f      	ldr	r2, [pc, #572]	; (800c2c4 <USB_EPStartXfer+0xb14>)
 800c088:	4013      	ands	r3, r2
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c08e:	801a      	strh	r2, [r3, #0]
 800c090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	b29b      	uxth	r3, r3
 800c096:	4a8c      	ldr	r2, [pc, #560]	; (800c2c8 <USB_EPStartXfer+0xb18>)
 800c098:	4313      	orrs	r3, r2
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c09e:	801a      	strh	r2, [r3, #0]
 800c0a0:	e066      	b.n	800c170 <USB_EPStartXfer+0x9c0>
 800c0a2:	2386      	movs	r3, #134	; 0x86
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	18fb      	adds	r3, r7, r3
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b3e      	cmp	r3, #62	; 0x3e
 800c0ac:	d81b      	bhi.n	800c0e6 <USB_EPStartXfer+0x936>
 800c0ae:	2286      	movs	r2, #134	; 0x86
 800c0b0:	0052      	lsls	r2, r2, #1
 800c0b2:	18bb      	adds	r3, r7, r2
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	085b      	lsrs	r3, r3, #1
 800c0b8:	21f0      	movs	r1, #240	; 0xf0
 800c0ba:	1879      	adds	r1, r7, r1
 800c0bc:	600b      	str	r3, [r1, #0]
 800c0be:	18bb      	adds	r3, r7, r2
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	d005      	beq.n	800c0d4 <USB_EPStartXfer+0x924>
 800c0c8:	22f0      	movs	r2, #240	; 0xf0
 800c0ca:	18bb      	adds	r3, r7, r2
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	18ba      	adds	r2, r7, r2
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	23f0      	movs	r3, #240	; 0xf0
 800c0d6:	18fb      	adds	r3, r7, r3
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	029b      	lsls	r3, r3, #10
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0e2:	801a      	strh	r2, [r3, #0]
 800c0e4:	e044      	b.n	800c170 <USB_EPStartXfer+0x9c0>
 800c0e6:	2286      	movs	r2, #134	; 0x86
 800c0e8:	0052      	lsls	r2, r2, #1
 800c0ea:	18bb      	adds	r3, r7, r2
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	095b      	lsrs	r3, r3, #5
 800c0f0:	21f0      	movs	r1, #240	; 0xf0
 800c0f2:	1879      	adds	r1, r7, r1
 800c0f4:	600b      	str	r3, [r1, #0]
 800c0f6:	18bb      	adds	r3, r7, r2
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	221f      	movs	r2, #31
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	d105      	bne.n	800c10c <USB_EPStartXfer+0x95c>
 800c100:	22f0      	movs	r2, #240	; 0xf0
 800c102:	18bb      	adds	r3, r7, r2
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3b01      	subs	r3, #1
 800c108:	18ba      	adds	r2, r7, r2
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	23f0      	movs	r3, #240	; 0xf0
 800c10e:	18fb      	adds	r3, r7, r3
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	b29b      	uxth	r3, r3
 800c114:	029b      	lsls	r3, r3, #10
 800c116:	b29b      	uxth	r3, r3
 800c118:	4a6b      	ldr	r2, [pc, #428]	; (800c2c8 <USB_EPStartXfer+0xb18>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c120:	801a      	strh	r2, [r3, #0]
 800c122:	e025      	b.n	800c170 <USB_EPStartXfer+0x9c0>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	785b      	ldrb	r3, [r3, #1]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d121      	bne.n	800c170 <USB_EPStartXfer+0x9c0>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2188      	movs	r1, #136	; 0x88
 800c130:	187a      	adds	r2, r7, r1
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2250      	movs	r2, #80	; 0x50
 800c138:	5a9b      	ldrh	r3, [r3, r2]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	001a      	movs	r2, r3
 800c13e:	187b      	adds	r3, r7, r1
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	189b      	adds	r3, r3, r2
 800c144:	187a      	adds	r2, r7, r1
 800c146:	6013      	str	r3, [r2, #0]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	00da      	lsls	r2, r3, #3
 800c14e:	187b      	adds	r3, r7, r1
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	18d3      	adds	r3, r2, r3
 800c154:	4a5d      	ldr	r2, [pc, #372]	; (800c2cc <USB_EPStartXfer+0xb1c>)
 800c156:	4694      	mov	ip, r2
 800c158:	4463      	add	r3, ip
 800c15a:	2184      	movs	r1, #132	; 0x84
 800c15c:	187a      	adds	r2, r7, r1
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	2386      	movs	r3, #134	; 0x86
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	18fb      	adds	r3, r7, r3
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	b29a      	uxth	r2, r3
 800c16a:	187b      	adds	r3, r7, r1
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c170:	2385      	movs	r3, #133	; 0x85
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	18fb      	adds	r3, r7, r3
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	8912      	ldrh	r2, [r2, #8]
 800c17a:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	6959      	ldr	r1, [r3, #20]
 800c180:	2386      	movs	r3, #134	; 0x86
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	18fb      	adds	r3, r7, r3
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	b29c      	uxth	r4, r3
 800c18a:	2385      	movs	r3, #133	; 0x85
 800c18c:	005b      	lsls	r3, r3, #1
 800c18e:	18fb      	adds	r3, r7, r3
 800c190:	881a      	ldrh	r2, [r3, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	0023      	movs	r3, r4
 800c196:	f000 fd9b 	bl	800ccd0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d117      	bne.n	800c1d2 <USB_EPStartXfer+0xa22>
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	18d3      	adds	r3, r2, r3
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	2068      	movs	r0, #104	; 0x68
 800c1b2:	183b      	adds	r3, r7, r0
 800c1b4:	4946      	ldr	r1, [pc, #280]	; (800c2d0 <USB_EPStartXfer+0xb20>)
 800c1b6:	400a      	ands	r2, r1
 800c1b8:	801a      	strh	r2, [r3, #0]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	18d3      	adds	r3, r2, r3
 800c1c4:	183a      	adds	r2, r7, r0
 800c1c6:	8812      	ldrh	r2, [r2, #0]
 800c1c8:	4942      	ldr	r1, [pc, #264]	; (800c2d4 <USB_EPStartXfer+0xb24>)
 800c1ca:	430a      	orrs	r2, r1
 800c1cc:	b292      	uxth	r2, r2
 800c1ce:	801a      	strh	r2, [r3, #0]
 800c1d0:	e01a      	b.n	800c208 <USB_EPStartXfer+0xa58>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	785b      	ldrb	r3, [r3, #1]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d116      	bne.n	800c208 <USB_EPStartXfer+0xa58>
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	18d3      	adds	r3, r2, r3
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	206a      	movs	r0, #106	; 0x6a
 800c1ea:	183b      	adds	r3, r7, r0
 800c1ec:	4938      	ldr	r1, [pc, #224]	; (800c2d0 <USB_EPStartXfer+0xb20>)
 800c1ee:	400a      	ands	r2, r1
 800c1f0:	801a      	strh	r2, [r3, #0]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	18d3      	adds	r3, r2, r3
 800c1fc:	183a      	adds	r2, r7, r0
 800c1fe:	8812      	ldrh	r2, [r2, #0]
 800c200:	4935      	ldr	r1, [pc, #212]	; (800c2d8 <USB_EPStartXfer+0xb28>)
 800c202:	430a      	orrs	r2, r1
 800c204:	b292      	uxth	r2, r2
 800c206:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	18d3      	adds	r3, r2, r3
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	b29a      	uxth	r2, r3
 800c216:	4b31      	ldr	r3, [pc, #196]	; (800c2dc <USB_EPStartXfer+0xb2c>)
 800c218:	2188      	movs	r1, #136	; 0x88
 800c21a:	0049      	lsls	r1, r1, #1
 800c21c:	468c      	mov	ip, r1
 800c21e:	44bc      	add	ip, r7
 800c220:	4463      	add	r3, ip
 800c222:	492f      	ldr	r1, [pc, #188]	; (800c2e0 <USB_EPStartXfer+0xb30>)
 800c224:	400a      	ands	r2, r1
 800c226:	801a      	strh	r2, [r3, #0]
 800c228:	4b2c      	ldr	r3, [pc, #176]	; (800c2dc <USB_EPStartXfer+0xb2c>)
 800c22a:	2288      	movs	r2, #136	; 0x88
 800c22c:	0052      	lsls	r2, r2, #1
 800c22e:	4694      	mov	ip, r2
 800c230:	44bc      	add	ip, r7
 800c232:	4463      	add	r3, ip
 800c234:	4a29      	ldr	r2, [pc, #164]	; (800c2dc <USB_EPStartXfer+0xb2c>)
 800c236:	2188      	movs	r1, #136	; 0x88
 800c238:	0049      	lsls	r1, r1, #1
 800c23a:	468c      	mov	ip, r1
 800c23c:	44bc      	add	ip, r7
 800c23e:	4462      	add	r2, ip
 800c240:	8812      	ldrh	r2, [r2, #0]
 800c242:	2110      	movs	r1, #16
 800c244:	404a      	eors	r2, r1
 800c246:	801a      	strh	r2, [r3, #0]
 800c248:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <USB_EPStartXfer+0xb2c>)
 800c24a:	2288      	movs	r2, #136	; 0x88
 800c24c:	0052      	lsls	r2, r2, #1
 800c24e:	4694      	mov	ip, r2
 800c250:	44bc      	add	ip, r7
 800c252:	4463      	add	r3, ip
 800c254:	4a21      	ldr	r2, [pc, #132]	; (800c2dc <USB_EPStartXfer+0xb2c>)
 800c256:	2188      	movs	r1, #136	; 0x88
 800c258:	0049      	lsls	r1, r1, #1
 800c25a:	468c      	mov	ip, r1
 800c25c:	44bc      	add	ip, r7
 800c25e:	4462      	add	r2, ip
 800c260:	8812      	ldrh	r2, [r2, #0]
 800c262:	2120      	movs	r1, #32
 800c264:	404a      	eors	r2, r1
 800c266:	801a      	strh	r2, [r3, #0]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	18d3      	adds	r3, r2, r3
 800c272:	4a1a      	ldr	r2, [pc, #104]	; (800c2dc <USB_EPStartXfer+0xb2c>)
 800c274:	2188      	movs	r1, #136	; 0x88
 800c276:	0049      	lsls	r1, r1, #1
 800c278:	468c      	mov	ip, r1
 800c27a:	44bc      	add	ip, r7
 800c27c:	4462      	add	r2, ip
 800c27e:	8812      	ldrh	r2, [r2, #0]
 800c280:	4918      	ldr	r1, [pc, #96]	; (800c2e4 <USB_EPStartXfer+0xb34>)
 800c282:	430a      	orrs	r2, r1
 800c284:	b292      	uxth	r2, r2
 800c286:	801a      	strh	r2, [r3, #0]
 800c288:	f000 fbdd 	bl	800ca46 <USB_EPStartXfer+0x1296>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	7b1b      	ldrb	r3, [r3, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d000      	beq.n	800c296 <USB_EPStartXfer+0xae6>
 800c294:	e0ac      	b.n	800c3f0 <USB_EPStartXfer+0xc40>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	699a      	ldr	r2, [r3, #24]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d922      	bls.n	800c2e8 <USB_EPStartXfer+0xb38>
      {
        len = ep->maxpacket;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	2186      	movs	r1, #134	; 0x86
 800c2a8:	0049      	lsls	r1, r1, #1
 800c2aa:	187a      	adds	r2, r7, r1
 800c2ac:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	699a      	ldr	r2, [r3, #24]
 800c2b2:	187b      	adds	r3, r7, r1
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	1ad2      	subs	r2, r2, r3
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	619a      	str	r2, [r3, #24]
 800c2bc:	e01d      	b.n	800c2fa <USB_EPStartXfer+0xb4a>
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	00000406 	.word	0x00000406
 800c2c4:	ffff83ff 	.word	0xffff83ff
 800c2c8:	ffff8000 	.word	0xffff8000
 800c2cc:	00000402 	.word	0x00000402
 800c2d0:	ffff8f8f 	.word	0xffff8f8f
 800c2d4:	ffff80c0 	.word	0xffff80c0
 800c2d8:	ffffc080 	.word	0xffffc080
 800c2dc:	fffffefe 	.word	0xfffffefe
 800c2e0:	ffff8fbf 	.word	0xffff8fbf
 800c2e4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	699b      	ldr	r3, [r3, #24]
 800c2ec:	2286      	movs	r2, #134	; 0x86
 800c2ee:	0052      	lsls	r2, r2, #1
 800c2f0:	18ba      	adds	r2, r7, r2
 800c2f2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2194      	movs	r1, #148	; 0x94
 800c2fe:	187a      	adds	r2, r7, r1
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2250      	movs	r2, #80	; 0x50
 800c306:	5a9b      	ldrh	r3, [r3, r2]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	001a      	movs	r2, r3
 800c30c:	187b      	adds	r3, r7, r1
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	189b      	adds	r3, r3, r2
 800c312:	187a      	adds	r2, r7, r1
 800c314:	6013      	str	r3, [r2, #0]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	00da      	lsls	r2, r3, #3
 800c31c:	187b      	adds	r3, r7, r1
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	18d3      	adds	r3, r2, r3
 800c322:	4ac2      	ldr	r2, [pc, #776]	; (800c62c <USB_EPStartXfer+0xe7c>)
 800c324:	4694      	mov	ip, r2
 800c326:	4463      	add	r3, ip
 800c328:	2290      	movs	r2, #144	; 0x90
 800c32a:	18ba      	adds	r2, r7, r2
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	2386      	movs	r3, #134	; 0x86
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	18fb      	adds	r3, r7, r3
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d115      	bne.n	800c366 <USB_EPStartXfer+0xbb6>
 800c33a:	2190      	movs	r1, #144	; 0x90
 800c33c:	187b      	adds	r3, r7, r1
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	b29b      	uxth	r3, r3
 800c344:	4aba      	ldr	r2, [pc, #744]	; (800c630 <USB_EPStartXfer+0xe80>)
 800c346:	4013      	ands	r3, r2
 800c348:	b29a      	uxth	r2, r3
 800c34a:	187b      	adds	r3, r7, r1
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	801a      	strh	r2, [r3, #0]
 800c350:	187b      	adds	r3, r7, r1
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	b29b      	uxth	r3, r3
 800c358:	4ab6      	ldr	r2, [pc, #728]	; (800c634 <USB_EPStartXfer+0xe84>)
 800c35a:	4313      	orrs	r3, r2
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	187b      	adds	r3, r7, r1
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	801a      	strh	r2, [r3, #0]
 800c364:	e34a      	b.n	800c9fc <USB_EPStartXfer+0x124c>
 800c366:	2386      	movs	r3, #134	; 0x86
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	18fb      	adds	r3, r7, r3
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b3e      	cmp	r3, #62	; 0x3e
 800c370:	d81d      	bhi.n	800c3ae <USB_EPStartXfer+0xbfe>
 800c372:	2286      	movs	r2, #134	; 0x86
 800c374:	0052      	lsls	r2, r2, #1
 800c376:	18bb      	adds	r3, r7, r2
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	085b      	lsrs	r3, r3, #1
 800c37c:	21ec      	movs	r1, #236	; 0xec
 800c37e:	1879      	adds	r1, r7, r1
 800c380:	600b      	str	r3, [r1, #0]
 800c382:	18bb      	adds	r3, r7, r2
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2201      	movs	r2, #1
 800c388:	4013      	ands	r3, r2
 800c38a:	d005      	beq.n	800c398 <USB_EPStartXfer+0xbe8>
 800c38c:	22ec      	movs	r2, #236	; 0xec
 800c38e:	18bb      	adds	r3, r7, r2
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	18ba      	adds	r2, r7, r2
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	23ec      	movs	r3, #236	; 0xec
 800c39a:	18fb      	adds	r3, r7, r3
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	029b      	lsls	r3, r3, #10
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	2390      	movs	r3, #144	; 0x90
 800c3a6:	18fb      	adds	r3, r7, r3
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	801a      	strh	r2, [r3, #0]
 800c3ac:	e326      	b.n	800c9fc <USB_EPStartXfer+0x124c>
 800c3ae:	2286      	movs	r2, #134	; 0x86
 800c3b0:	0052      	lsls	r2, r2, #1
 800c3b2:	18bb      	adds	r3, r7, r2
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	095b      	lsrs	r3, r3, #5
 800c3b8:	21ec      	movs	r1, #236	; 0xec
 800c3ba:	1879      	adds	r1, r7, r1
 800c3bc:	600b      	str	r3, [r1, #0]
 800c3be:	18bb      	adds	r3, r7, r2
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	221f      	movs	r2, #31
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	d105      	bne.n	800c3d4 <USB_EPStartXfer+0xc24>
 800c3c8:	22ec      	movs	r2, #236	; 0xec
 800c3ca:	18bb      	adds	r3, r7, r2
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	18ba      	adds	r2, r7, r2
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	23ec      	movs	r3, #236	; 0xec
 800c3d6:	18fb      	adds	r3, r7, r3
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	029b      	lsls	r3, r3, #10
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	4a94      	ldr	r2, [pc, #592]	; (800c634 <USB_EPStartXfer+0xe84>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	2390      	movs	r3, #144	; 0x90
 800c3e8:	18fb      	adds	r3, r7, r3
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	801a      	strh	r2, [r3, #0]
 800c3ee:	e305      	b.n	800c9fc <USB_EPStartXfer+0x124c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	78db      	ldrb	r3, [r3, #3]
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d000      	beq.n	800c3fa <USB_EPStartXfer+0xc4a>
 800c3f8:	e182      	b.n	800c700 <USB_EPStartXfer+0xf50>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	785b      	ldrb	r3, [r3, #1]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d000      	beq.n	800c404 <USB_EPStartXfer+0xc54>
 800c402:	e072      	b.n	800c4ea <USB_EPStartXfer+0xd3a>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	21b0      	movs	r1, #176	; 0xb0
 800c408:	187a      	adds	r2, r7, r1
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2250      	movs	r2, #80	; 0x50
 800c410:	5a9b      	ldrh	r3, [r3, r2]
 800c412:	b29b      	uxth	r3, r3
 800c414:	001a      	movs	r2, r3
 800c416:	187b      	adds	r3, r7, r1
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	189b      	adds	r3, r3, r2
 800c41c:	187a      	adds	r2, r7, r1
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	00da      	lsls	r2, r3, #3
 800c426:	187b      	adds	r3, r7, r1
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	18d3      	adds	r3, r2, r3
 800c42c:	4a82      	ldr	r2, [pc, #520]	; (800c638 <USB_EPStartXfer+0xe88>)
 800c42e:	4694      	mov	ip, r2
 800c430:	4463      	add	r3, ip
 800c432:	22ac      	movs	r2, #172	; 0xac
 800c434:	18ba      	adds	r2, r7, r2
 800c436:	6013      	str	r3, [r2, #0]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d115      	bne.n	800c46c <USB_EPStartXfer+0xcbc>
 800c440:	21ac      	movs	r1, #172	; 0xac
 800c442:	187b      	adds	r3, r7, r1
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	b29b      	uxth	r3, r3
 800c44a:	4a79      	ldr	r2, [pc, #484]	; (800c630 <USB_EPStartXfer+0xe80>)
 800c44c:	4013      	ands	r3, r2
 800c44e:	b29a      	uxth	r2, r3
 800c450:	187b      	adds	r3, r7, r1
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	801a      	strh	r2, [r3, #0]
 800c456:	187b      	adds	r3, r7, r1
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	881b      	ldrh	r3, [r3, #0]
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	4a75      	ldr	r2, [pc, #468]	; (800c634 <USB_EPStartXfer+0xe84>)
 800c460:	4313      	orrs	r3, r2
 800c462:	b29a      	uxth	r2, r3
 800c464:	187b      	adds	r3, r7, r1
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	801a      	strh	r2, [r3, #0]
 800c46a:	e062      	b.n	800c532 <USB_EPStartXfer+0xd82>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	2b3e      	cmp	r3, #62	; 0x3e
 800c472:	d81b      	bhi.n	800c4ac <USB_EPStartXfer+0xcfc>
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	085b      	lsrs	r3, r3, #1
 800c47a:	22e8      	movs	r2, #232	; 0xe8
 800c47c:	18ba      	adds	r2, r7, r2
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	2201      	movs	r2, #1
 800c486:	4013      	ands	r3, r2
 800c488:	d005      	beq.n	800c496 <USB_EPStartXfer+0xce6>
 800c48a:	22e8      	movs	r2, #232	; 0xe8
 800c48c:	18bb      	adds	r3, r7, r2
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3301      	adds	r3, #1
 800c492:	18ba      	adds	r2, r7, r2
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	23e8      	movs	r3, #232	; 0xe8
 800c498:	18fb      	adds	r3, r7, r3
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	029b      	lsls	r3, r3, #10
 800c4a0:	b29a      	uxth	r2, r3
 800c4a2:	23ac      	movs	r3, #172	; 0xac
 800c4a4:	18fb      	adds	r3, r7, r3
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	801a      	strh	r2, [r3, #0]
 800c4aa:	e042      	b.n	800c532 <USB_EPStartXfer+0xd82>
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	095b      	lsrs	r3, r3, #5
 800c4b2:	22e8      	movs	r2, #232	; 0xe8
 800c4b4:	18ba      	adds	r2, r7, r2
 800c4b6:	6013      	str	r3, [r2, #0]
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	221f      	movs	r2, #31
 800c4be:	4013      	ands	r3, r2
 800c4c0:	d105      	bne.n	800c4ce <USB_EPStartXfer+0xd1e>
 800c4c2:	22e8      	movs	r2, #232	; 0xe8
 800c4c4:	18bb      	adds	r3, r7, r2
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3b01      	subs	r3, #1
 800c4ca:	18ba      	adds	r2, r7, r2
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	23e8      	movs	r3, #232	; 0xe8
 800c4d0:	18fb      	adds	r3, r7, r3
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	029b      	lsls	r3, r3, #10
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	4a56      	ldr	r2, [pc, #344]	; (800c634 <USB_EPStartXfer+0xe84>)
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	23ac      	movs	r3, #172	; 0xac
 800c4e2:	18fb      	adds	r3, r7, r3
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	801a      	strh	r2, [r3, #0]
 800c4e8:	e023      	b.n	800c532 <USB_EPStartXfer+0xd82>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	785b      	ldrb	r3, [r3, #1]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d11f      	bne.n	800c532 <USB_EPStartXfer+0xd82>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	21b8      	movs	r1, #184	; 0xb8
 800c4f6:	187a      	adds	r2, r7, r1
 800c4f8:	6013      	str	r3, [r2, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2250      	movs	r2, #80	; 0x50
 800c4fe:	5a9b      	ldrh	r3, [r3, r2]
 800c500:	b29b      	uxth	r3, r3
 800c502:	001a      	movs	r2, r3
 800c504:	187b      	adds	r3, r7, r1
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	189b      	adds	r3, r3, r2
 800c50a:	187a      	adds	r2, r7, r1
 800c50c:	6013      	str	r3, [r2, #0]
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	00da      	lsls	r2, r3, #3
 800c514:	187b      	adds	r3, r7, r1
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	18d3      	adds	r3, r2, r3
 800c51a:	4a47      	ldr	r2, [pc, #284]	; (800c638 <USB_EPStartXfer+0xe88>)
 800c51c:	4694      	mov	ip, r2
 800c51e:	4463      	add	r3, ip
 800c520:	21b4      	movs	r1, #180	; 0xb4
 800c522:	187a      	adds	r2, r7, r1
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	187b      	adds	r3, r7, r1
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	801a      	strh	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	22a8      	movs	r2, #168	; 0xa8
 800c536:	18ba      	adds	r2, r7, r2
 800c538:	6013      	str	r3, [r2, #0]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	785b      	ldrb	r3, [r3, #1]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d000      	beq.n	800c544 <USB_EPStartXfer+0xd94>
 800c542:	e07b      	b.n	800c63c <USB_EPStartXfer+0xe8c>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	21a0      	movs	r1, #160	; 0xa0
 800c548:	187a      	adds	r2, r7, r1
 800c54a:	6013      	str	r3, [r2, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2250      	movs	r2, #80	; 0x50
 800c550:	5a9b      	ldrh	r3, [r3, r2]
 800c552:	b29b      	uxth	r3, r3
 800c554:	001a      	movs	r2, r3
 800c556:	187b      	adds	r3, r7, r1
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	189b      	adds	r3, r3, r2
 800c55c:	187a      	adds	r2, r7, r1
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	00da      	lsls	r2, r3, #3
 800c566:	187b      	adds	r3, r7, r1
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	18d3      	adds	r3, r2, r3
 800c56c:	4a2f      	ldr	r2, [pc, #188]	; (800c62c <USB_EPStartXfer+0xe7c>)
 800c56e:	4694      	mov	ip, r2
 800c570:	4463      	add	r3, ip
 800c572:	229c      	movs	r2, #156	; 0x9c
 800c574:	18ba      	adds	r2, r7, r2
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d115      	bne.n	800c5ac <USB_EPStartXfer+0xdfc>
 800c580:	219c      	movs	r1, #156	; 0x9c
 800c582:	187b      	adds	r3, r7, r1
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	b29b      	uxth	r3, r3
 800c58a:	4a29      	ldr	r2, [pc, #164]	; (800c630 <USB_EPStartXfer+0xe80>)
 800c58c:	4013      	ands	r3, r2
 800c58e:	b29a      	uxth	r2, r3
 800c590:	187b      	adds	r3, r7, r1
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	801a      	strh	r2, [r3, #0]
 800c596:	187b      	adds	r3, r7, r1
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	881b      	ldrh	r3, [r3, #0]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	4a25      	ldr	r2, [pc, #148]	; (800c634 <USB_EPStartXfer+0xe84>)
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	187b      	adds	r3, r7, r1
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	801a      	strh	r2, [r3, #0]
 800c5aa:	e068      	b.n	800c67e <USB_EPStartXfer+0xece>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	2b3e      	cmp	r3, #62	; 0x3e
 800c5b2:	d81b      	bhi.n	800c5ec <USB_EPStartXfer+0xe3c>
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	085b      	lsrs	r3, r3, #1
 800c5ba:	22e4      	movs	r2, #228	; 0xe4
 800c5bc:	18ba      	adds	r2, r7, r2
 800c5be:	6013      	str	r3, [r2, #0]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	d005      	beq.n	800c5d6 <USB_EPStartXfer+0xe26>
 800c5ca:	22e4      	movs	r2, #228	; 0xe4
 800c5cc:	18bb      	adds	r3, r7, r2
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	18ba      	adds	r2, r7, r2
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	23e4      	movs	r3, #228	; 0xe4
 800c5d8:	18fb      	adds	r3, r7, r3
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	029b      	lsls	r3, r3, #10
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	239c      	movs	r3, #156	; 0x9c
 800c5e4:	18fb      	adds	r3, r7, r3
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	801a      	strh	r2, [r3, #0]
 800c5ea:	e048      	b.n	800c67e <USB_EPStartXfer+0xece>
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	095b      	lsrs	r3, r3, #5
 800c5f2:	22e4      	movs	r2, #228	; 0xe4
 800c5f4:	18ba      	adds	r2, r7, r2
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	221f      	movs	r2, #31
 800c5fe:	4013      	ands	r3, r2
 800c600:	d105      	bne.n	800c60e <USB_EPStartXfer+0xe5e>
 800c602:	22e4      	movs	r2, #228	; 0xe4
 800c604:	18bb      	adds	r3, r7, r2
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3b01      	subs	r3, #1
 800c60a:	18ba      	adds	r2, r7, r2
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	23e4      	movs	r3, #228	; 0xe4
 800c610:	18fb      	adds	r3, r7, r3
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	029b      	lsls	r3, r3, #10
 800c618:	b29b      	uxth	r3, r3
 800c61a:	4a06      	ldr	r2, [pc, #24]	; (800c634 <USB_EPStartXfer+0xe84>)
 800c61c:	4313      	orrs	r3, r2
 800c61e:	b29a      	uxth	r2, r3
 800c620:	239c      	movs	r3, #156	; 0x9c
 800c622:	18fb      	adds	r3, r7, r3
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	801a      	strh	r2, [r3, #0]
 800c628:	e029      	b.n	800c67e <USB_EPStartXfer+0xece>
 800c62a:	46c0      	nop			; (mov r8, r8)
 800c62c:	00000406 	.word	0x00000406
 800c630:	ffff83ff 	.word	0xffff83ff
 800c634:	ffff8000 	.word	0xffff8000
 800c638:	00000402 	.word	0x00000402
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	785b      	ldrb	r3, [r3, #1]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d11c      	bne.n	800c67e <USB_EPStartXfer+0xece>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2250      	movs	r2, #80	; 0x50
 800c648:	5a9b      	ldrh	r3, [r3, r2]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	001a      	movs	r2, r3
 800c64e:	21a8      	movs	r1, #168	; 0xa8
 800c650:	187b      	adds	r3, r7, r1
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	189b      	adds	r3, r3, r2
 800c656:	187a      	adds	r2, r7, r1
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	00da      	lsls	r2, r3, #3
 800c660:	187b      	adds	r3, r7, r1
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	18d3      	adds	r3, r2, r3
 800c666:	4acc      	ldr	r2, [pc, #816]	; (800c998 <USB_EPStartXfer+0x11e8>)
 800c668:	4694      	mov	ip, r2
 800c66a:	4463      	add	r3, ip
 800c66c:	21a4      	movs	r1, #164	; 0xa4
 800c66e:	187a      	adds	r2, r7, r1
 800c670:	6013      	str	r3, [r2, #0]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	b29a      	uxth	r2, r3
 800c678:	187b      	adds	r3, r7, r1
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	69db      	ldr	r3, [r3, #28]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d100      	bne.n	800c688 <USB_EPStartXfer+0xed8>
 800c686:	e1b9      	b.n	800c9fc <USB_EPStartXfer+0x124c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	18d2      	adds	r2, r2, r3
 800c692:	219a      	movs	r1, #154	; 0x9a
 800c694:	187b      	adds	r3, r7, r1
 800c696:	8812      	ldrh	r2, [r2, #0]
 800c698:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c69a:	187b      	adds	r3, r7, r1
 800c69c:	881a      	ldrh	r2, [r3, #0]
 800c69e:	2380      	movs	r3, #128	; 0x80
 800c6a0:	01db      	lsls	r3, r3, #7
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	d005      	beq.n	800c6b2 <USB_EPStartXfer+0xf02>
 800c6a6:	239a      	movs	r3, #154	; 0x9a
 800c6a8:	18fb      	adds	r3, r7, r3
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	2240      	movs	r2, #64	; 0x40
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	d10e      	bne.n	800c6d0 <USB_EPStartXfer+0xf20>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c6b2:	239a      	movs	r3, #154	; 0x9a
 800c6b4:	18fb      	adds	r3, r7, r3
 800c6b6:	881a      	ldrh	r2, [r3, #0]
 800c6b8:	2380      	movs	r3, #128	; 0x80
 800c6ba:	01db      	lsls	r3, r3, #7
 800c6bc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c6be:	d000      	beq.n	800c6c2 <USB_EPStartXfer+0xf12>
 800c6c0:	e19c      	b.n	800c9fc <USB_EPStartXfer+0x124c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c6c2:	239a      	movs	r3, #154	; 0x9a
 800c6c4:	18fb      	adds	r3, r7, r3
 800c6c6:	881b      	ldrh	r3, [r3, #0]
 800c6c8:	2240      	movs	r2, #64	; 0x40
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	d000      	beq.n	800c6d0 <USB_EPStartXfer+0xf20>
 800c6ce:	e195      	b.n	800c9fc <USB_EPStartXfer+0x124c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	18d3      	adds	r3, r2, r3
 800c6da:	881b      	ldrh	r3, [r3, #0]
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	2098      	movs	r0, #152	; 0x98
 800c6e0:	183b      	adds	r3, r7, r0
 800c6e2:	49ae      	ldr	r1, [pc, #696]	; (800c99c <USB_EPStartXfer+0x11ec>)
 800c6e4:	400a      	ands	r2, r1
 800c6e6:	801a      	strh	r2, [r3, #0]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	18d3      	adds	r3, r2, r3
 800c6f2:	183a      	adds	r2, r7, r0
 800c6f4:	8812      	ldrh	r2, [r2, #0]
 800c6f6:	49aa      	ldr	r1, [pc, #680]	; (800c9a0 <USB_EPStartXfer+0x11f0>)
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	b292      	uxth	r2, r2
 800c6fc:	801a      	strh	r2, [r3, #0]
 800c6fe:	e17d      	b.n	800c9fc <USB_EPStartXfer+0x124c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	78db      	ldrb	r3, [r3, #3]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d000      	beq.n	800c70a <USB_EPStartXfer+0xf5a>
 800c708:	e176      	b.n	800c9f8 <USB_EPStartXfer+0x1248>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	699a      	ldr	r2, [r3, #24]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	429a      	cmp	r2, r3
 800c714:	d90d      	bls.n	800c732 <USB_EPStartXfer+0xf82>
        {
          len = ep->maxpacket;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	2186      	movs	r1, #134	; 0x86
 800c71c:	0049      	lsls	r1, r1, #1
 800c71e:	187a      	adds	r2, r7, r1
 800c720:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	699a      	ldr	r2, [r3, #24]
 800c726:	187b      	adds	r3, r7, r1
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	1ad2      	subs	r2, r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	619a      	str	r2, [r3, #24]
 800c730:	e008      	b.n	800c744 <USB_EPStartXfer+0xf94>
        }
        else
        {
          len = ep->xfer_len;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	2286      	movs	r2, #134	; 0x86
 800c738:	0052      	lsls	r2, r2, #1
 800c73a:	18ba      	adds	r2, r7, r2
 800c73c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2200      	movs	r2, #0
 800c742:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	785b      	ldrb	r3, [r3, #1]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d000      	beq.n	800c74e <USB_EPStartXfer+0xf9e>
 800c74c:	e07a      	b.n	800c844 <USB_EPStartXfer+0x1094>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	21d0      	movs	r1, #208	; 0xd0
 800c752:	187a      	adds	r2, r7, r1
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2250      	movs	r2, #80	; 0x50
 800c75a:	5a9b      	ldrh	r3, [r3, r2]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	001a      	movs	r2, r3
 800c760:	187b      	adds	r3, r7, r1
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	189b      	adds	r3, r3, r2
 800c766:	187a      	adds	r2, r7, r1
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	00da      	lsls	r2, r3, #3
 800c770:	187b      	adds	r3, r7, r1
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	18d3      	adds	r3, r2, r3
 800c776:	4a8b      	ldr	r2, [pc, #556]	; (800c9a4 <USB_EPStartXfer+0x11f4>)
 800c778:	4694      	mov	ip, r2
 800c77a:	4463      	add	r3, ip
 800c77c:	22cc      	movs	r2, #204	; 0xcc
 800c77e:	18ba      	adds	r2, r7, r2
 800c780:	6013      	str	r3, [r2, #0]
 800c782:	2386      	movs	r3, #134	; 0x86
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	18fb      	adds	r3, r7, r3
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d115      	bne.n	800c7ba <USB_EPStartXfer+0x100a>
 800c78e:	21cc      	movs	r1, #204	; 0xcc
 800c790:	187b      	adds	r3, r7, r1
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	b29b      	uxth	r3, r3
 800c798:	4a83      	ldr	r2, [pc, #524]	; (800c9a8 <USB_EPStartXfer+0x11f8>)
 800c79a:	4013      	ands	r3, r2
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	187b      	adds	r3, r7, r1
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	801a      	strh	r2, [r3, #0]
 800c7a4:	187b      	adds	r3, r7, r1
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	881b      	ldrh	r3, [r3, #0]
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	4a7f      	ldr	r2, [pc, #508]	; (800c9ac <USB_EPStartXfer+0x11fc>)
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	187b      	adds	r3, r7, r1
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	801a      	strh	r2, [r3, #0]
 800c7b8:	e06a      	b.n	800c890 <USB_EPStartXfer+0x10e0>
 800c7ba:	2386      	movs	r3, #134	; 0x86
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	18fb      	adds	r3, r7, r3
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b3e      	cmp	r3, #62	; 0x3e
 800c7c4:	d81d      	bhi.n	800c802 <USB_EPStartXfer+0x1052>
 800c7c6:	2286      	movs	r2, #134	; 0x86
 800c7c8:	0052      	lsls	r2, r2, #1
 800c7ca:	18bb      	adds	r3, r7, r2
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	085b      	lsrs	r3, r3, #1
 800c7d0:	21e0      	movs	r1, #224	; 0xe0
 800c7d2:	1879      	adds	r1, r7, r1
 800c7d4:	600b      	str	r3, [r1, #0]
 800c7d6:	18bb      	adds	r3, r7, r2
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4013      	ands	r3, r2
 800c7de:	d005      	beq.n	800c7ec <USB_EPStartXfer+0x103c>
 800c7e0:	22e0      	movs	r2, #224	; 0xe0
 800c7e2:	18bb      	adds	r3, r7, r2
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	18ba      	adds	r2, r7, r2
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	23e0      	movs	r3, #224	; 0xe0
 800c7ee:	18fb      	adds	r3, r7, r3
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	029b      	lsls	r3, r3, #10
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	23cc      	movs	r3, #204	; 0xcc
 800c7fa:	18fb      	adds	r3, r7, r3
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	801a      	strh	r2, [r3, #0]
 800c800:	e046      	b.n	800c890 <USB_EPStartXfer+0x10e0>
 800c802:	2286      	movs	r2, #134	; 0x86
 800c804:	0052      	lsls	r2, r2, #1
 800c806:	18bb      	adds	r3, r7, r2
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	095b      	lsrs	r3, r3, #5
 800c80c:	21e0      	movs	r1, #224	; 0xe0
 800c80e:	1879      	adds	r1, r7, r1
 800c810:	600b      	str	r3, [r1, #0]
 800c812:	18bb      	adds	r3, r7, r2
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	221f      	movs	r2, #31
 800c818:	4013      	ands	r3, r2
 800c81a:	d105      	bne.n	800c828 <USB_EPStartXfer+0x1078>
 800c81c:	22e0      	movs	r2, #224	; 0xe0
 800c81e:	18bb      	adds	r3, r7, r2
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	3b01      	subs	r3, #1
 800c824:	18ba      	adds	r2, r7, r2
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	23e0      	movs	r3, #224	; 0xe0
 800c82a:	18fb      	adds	r3, r7, r3
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	029b      	lsls	r3, r3, #10
 800c832:	b29b      	uxth	r3, r3
 800c834:	4a5d      	ldr	r2, [pc, #372]	; (800c9ac <USB_EPStartXfer+0x11fc>)
 800c836:	4313      	orrs	r3, r2
 800c838:	b29a      	uxth	r2, r3
 800c83a:	23cc      	movs	r3, #204	; 0xcc
 800c83c:	18fb      	adds	r3, r7, r3
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	801a      	strh	r2, [r3, #0]
 800c842:	e025      	b.n	800c890 <USB_EPStartXfer+0x10e0>
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	785b      	ldrb	r3, [r3, #1]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d121      	bne.n	800c890 <USB_EPStartXfer+0x10e0>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	21d8      	movs	r1, #216	; 0xd8
 800c850:	187a      	adds	r2, r7, r1
 800c852:	6013      	str	r3, [r2, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2250      	movs	r2, #80	; 0x50
 800c858:	5a9b      	ldrh	r3, [r3, r2]
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	001a      	movs	r2, r3
 800c85e:	187b      	adds	r3, r7, r1
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	189b      	adds	r3, r3, r2
 800c864:	187a      	adds	r2, r7, r1
 800c866:	6013      	str	r3, [r2, #0]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	00da      	lsls	r2, r3, #3
 800c86e:	187b      	adds	r3, r7, r1
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	18d3      	adds	r3, r2, r3
 800c874:	4a4b      	ldr	r2, [pc, #300]	; (800c9a4 <USB_EPStartXfer+0x11f4>)
 800c876:	4694      	mov	ip, r2
 800c878:	4463      	add	r3, ip
 800c87a:	21d4      	movs	r1, #212	; 0xd4
 800c87c:	187a      	adds	r2, r7, r1
 800c87e:	6013      	str	r3, [r2, #0]
 800c880:	2386      	movs	r3, #134	; 0x86
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	18fb      	adds	r3, r7, r3
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	b29a      	uxth	r2, r3
 800c88a:	187b      	adds	r3, r7, r1
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	801a      	strh	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	22c8      	movs	r2, #200	; 0xc8
 800c894:	18ba      	adds	r2, r7, r2
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	785b      	ldrb	r3, [r3, #1]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d000      	beq.n	800c8a2 <USB_EPStartXfer+0x10f2>
 800c8a0:	e086      	b.n	800c9b0 <USB_EPStartXfer+0x1200>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	21c0      	movs	r1, #192	; 0xc0
 800c8a6:	187a      	adds	r2, r7, r1
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2250      	movs	r2, #80	; 0x50
 800c8ae:	5a9b      	ldrh	r3, [r3, r2]
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	001a      	movs	r2, r3
 800c8b4:	187b      	adds	r3, r7, r1
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	189b      	adds	r3, r3, r2
 800c8ba:	187a      	adds	r2, r7, r1
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	00da      	lsls	r2, r3, #3
 800c8c4:	187b      	adds	r3, r7, r1
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	18d3      	adds	r3, r2, r3
 800c8ca:	4a33      	ldr	r2, [pc, #204]	; (800c998 <USB_EPStartXfer+0x11e8>)
 800c8cc:	4694      	mov	ip, r2
 800c8ce:	4463      	add	r3, ip
 800c8d0:	22bc      	movs	r2, #188	; 0xbc
 800c8d2:	18ba      	adds	r2, r7, r2
 800c8d4:	6013      	str	r3, [r2, #0]
 800c8d6:	2386      	movs	r3, #134	; 0x86
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	18fb      	adds	r3, r7, r3
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d115      	bne.n	800c90e <USB_EPStartXfer+0x115e>
 800c8e2:	21bc      	movs	r1, #188	; 0xbc
 800c8e4:	187b      	adds	r3, r7, r1
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	881b      	ldrh	r3, [r3, #0]
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	4a2e      	ldr	r2, [pc, #184]	; (800c9a8 <USB_EPStartXfer+0x11f8>)
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	187b      	adds	r3, r7, r1
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	801a      	strh	r2, [r3, #0]
 800c8f8:	187b      	adds	r3, r7, r1
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	881b      	ldrh	r3, [r3, #0]
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	4a2a      	ldr	r2, [pc, #168]	; (800c9ac <USB_EPStartXfer+0x11fc>)
 800c902:	4313      	orrs	r3, r2
 800c904:	b29a      	uxth	r2, r3
 800c906:	187b      	adds	r3, r7, r1
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	801a      	strh	r2, [r3, #0]
 800c90c:	e076      	b.n	800c9fc <USB_EPStartXfer+0x124c>
 800c90e:	2386      	movs	r3, #134	; 0x86
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	18fb      	adds	r3, r7, r3
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b3e      	cmp	r3, #62	; 0x3e
 800c918:	d81d      	bhi.n	800c956 <USB_EPStartXfer+0x11a6>
 800c91a:	2286      	movs	r2, #134	; 0x86
 800c91c:	0052      	lsls	r2, r2, #1
 800c91e:	18bb      	adds	r3, r7, r2
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	085b      	lsrs	r3, r3, #1
 800c924:	21dc      	movs	r1, #220	; 0xdc
 800c926:	1879      	adds	r1, r7, r1
 800c928:	600b      	str	r3, [r1, #0]
 800c92a:	18bb      	adds	r3, r7, r2
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2201      	movs	r2, #1
 800c930:	4013      	ands	r3, r2
 800c932:	d005      	beq.n	800c940 <USB_EPStartXfer+0x1190>
 800c934:	22dc      	movs	r2, #220	; 0xdc
 800c936:	18bb      	adds	r3, r7, r2
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3301      	adds	r3, #1
 800c93c:	18ba      	adds	r2, r7, r2
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	23dc      	movs	r3, #220	; 0xdc
 800c942:	18fb      	adds	r3, r7, r3
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	b29b      	uxth	r3, r3
 800c948:	029b      	lsls	r3, r3, #10
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	23bc      	movs	r3, #188	; 0xbc
 800c94e:	18fb      	adds	r3, r7, r3
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	801a      	strh	r2, [r3, #0]
 800c954:	e052      	b.n	800c9fc <USB_EPStartXfer+0x124c>
 800c956:	2286      	movs	r2, #134	; 0x86
 800c958:	0052      	lsls	r2, r2, #1
 800c95a:	18bb      	adds	r3, r7, r2
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	095b      	lsrs	r3, r3, #5
 800c960:	21dc      	movs	r1, #220	; 0xdc
 800c962:	1879      	adds	r1, r7, r1
 800c964:	600b      	str	r3, [r1, #0]
 800c966:	18bb      	adds	r3, r7, r2
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	221f      	movs	r2, #31
 800c96c:	4013      	ands	r3, r2
 800c96e:	d105      	bne.n	800c97c <USB_EPStartXfer+0x11cc>
 800c970:	22dc      	movs	r2, #220	; 0xdc
 800c972:	18bb      	adds	r3, r7, r2
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3b01      	subs	r3, #1
 800c978:	18ba      	adds	r2, r7, r2
 800c97a:	6013      	str	r3, [r2, #0]
 800c97c:	23dc      	movs	r3, #220	; 0xdc
 800c97e:	18fb      	adds	r3, r7, r3
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	b29b      	uxth	r3, r3
 800c984:	029b      	lsls	r3, r3, #10
 800c986:	b29b      	uxth	r3, r3
 800c988:	4a08      	ldr	r2, [pc, #32]	; (800c9ac <USB_EPStartXfer+0x11fc>)
 800c98a:	4313      	orrs	r3, r2
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	23bc      	movs	r3, #188	; 0xbc
 800c990:	18fb      	adds	r3, r7, r3
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	801a      	strh	r2, [r3, #0]
 800c996:	e031      	b.n	800c9fc <USB_EPStartXfer+0x124c>
 800c998:	00000406 	.word	0x00000406
 800c99c:	ffff8f8f 	.word	0xffff8f8f
 800c9a0:	ffff80c0 	.word	0xffff80c0
 800c9a4:	00000402 	.word	0x00000402
 800c9a8:	ffff83ff 	.word	0xffff83ff
 800c9ac:	ffff8000 	.word	0xffff8000
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	785b      	ldrb	r3, [r3, #1]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d121      	bne.n	800c9fc <USB_EPStartXfer+0x124c>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2250      	movs	r2, #80	; 0x50
 800c9bc:	5a9b      	ldrh	r3, [r3, r2]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	001a      	movs	r2, r3
 800c9c2:	21c8      	movs	r1, #200	; 0xc8
 800c9c4:	187b      	adds	r3, r7, r1
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	189b      	adds	r3, r3, r2
 800c9ca:	187a      	adds	r2, r7, r1
 800c9cc:	6013      	str	r3, [r2, #0]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	00da      	lsls	r2, r3, #3
 800c9d4:	187b      	adds	r3, r7, r1
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	18d3      	adds	r3, r2, r3
 800c9da:	4a1d      	ldr	r2, [pc, #116]	; (800ca50 <USB_EPStartXfer+0x12a0>)
 800c9dc:	4694      	mov	ip, r2
 800c9de:	4463      	add	r3, ip
 800c9e0:	21c4      	movs	r1, #196	; 0xc4
 800c9e2:	187a      	adds	r2, r7, r1
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	2386      	movs	r3, #134	; 0x86
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	18fb      	adds	r3, r7, r3
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	187b      	adds	r3, r7, r1
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	801a      	strh	r2, [r3, #0]
 800c9f6:	e001      	b.n	800c9fc <USB_EPStartXfer+0x124c>
      }
      else
      {
        return HAL_ERROR;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e025      	b.n	800ca48 <USB_EPStartXfer+0x1298>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	18d3      	adds	r3, r2, r3
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	208e      	movs	r0, #142	; 0x8e
 800ca0c:	183b      	adds	r3, r7, r0
 800ca0e:	4911      	ldr	r1, [pc, #68]	; (800ca54 <USB_EPStartXfer+0x12a4>)
 800ca10:	400a      	ands	r2, r1
 800ca12:	801a      	strh	r2, [r3, #0]
 800ca14:	183b      	adds	r3, r7, r0
 800ca16:	183a      	adds	r2, r7, r0
 800ca18:	8812      	ldrh	r2, [r2, #0]
 800ca1a:	2180      	movs	r1, #128	; 0x80
 800ca1c:	0149      	lsls	r1, r1, #5
 800ca1e:	404a      	eors	r2, r1
 800ca20:	801a      	strh	r2, [r3, #0]
 800ca22:	183b      	adds	r3, r7, r0
 800ca24:	183a      	adds	r2, r7, r0
 800ca26:	8812      	ldrh	r2, [r2, #0]
 800ca28:	2180      	movs	r1, #128	; 0x80
 800ca2a:	0189      	lsls	r1, r1, #6
 800ca2c:	404a      	eors	r2, r1
 800ca2e:	801a      	strh	r2, [r3, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	18d3      	adds	r3, r2, r3
 800ca3a:	183a      	adds	r2, r7, r0
 800ca3c:	8812      	ldrh	r2, [r2, #0]
 800ca3e:	4906      	ldr	r1, [pc, #24]	; (800ca58 <USB_EPStartXfer+0x12a8>)
 800ca40:	430a      	orrs	r2, r1
 800ca42:	b292      	uxth	r2, r2
 800ca44:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	0018      	movs	r0, r3
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	b044      	add	sp, #272	; 0x110
 800ca4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca50:	00000406 	.word	0x00000406
 800ca54:	ffffbf8f 	.word	0xffffbf8f
 800ca58:	ffff8080 	.word	0xffff8080

0800ca5c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	785b      	ldrb	r3, [r3, #1]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d01d      	beq.n	800caaa <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	18d3      	adds	r3, r2, r3
 800ca78:	881b      	ldrh	r3, [r3, #0]
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	200c      	movs	r0, #12
 800ca7e:	183b      	adds	r3, r7, r0
 800ca80:	491b      	ldr	r1, [pc, #108]	; (800caf0 <USB_EPSetStall+0x94>)
 800ca82:	400a      	ands	r2, r1
 800ca84:	801a      	strh	r2, [r3, #0]
 800ca86:	183b      	adds	r3, r7, r0
 800ca88:	183a      	adds	r2, r7, r0
 800ca8a:	8812      	ldrh	r2, [r2, #0]
 800ca8c:	2110      	movs	r1, #16
 800ca8e:	404a      	eors	r2, r1
 800ca90:	801a      	strh	r2, [r3, #0]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	18d3      	adds	r3, r2, r3
 800ca9c:	183a      	adds	r2, r7, r0
 800ca9e:	8812      	ldrh	r2, [r2, #0]
 800caa0:	4914      	ldr	r1, [pc, #80]	; (800caf4 <USB_EPSetStall+0x98>)
 800caa2:	430a      	orrs	r2, r1
 800caa4:	b292      	uxth	r2, r2
 800caa6:	801a      	strh	r2, [r3, #0]
 800caa8:	e01d      	b.n	800cae6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	18d3      	adds	r3, r2, r3
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	200e      	movs	r0, #14
 800caba:	183b      	adds	r3, r7, r0
 800cabc:	490e      	ldr	r1, [pc, #56]	; (800caf8 <USB_EPSetStall+0x9c>)
 800cabe:	400a      	ands	r2, r1
 800cac0:	801a      	strh	r2, [r3, #0]
 800cac2:	183b      	adds	r3, r7, r0
 800cac4:	183a      	adds	r2, r7, r0
 800cac6:	8812      	ldrh	r2, [r2, #0]
 800cac8:	2180      	movs	r1, #128	; 0x80
 800caca:	0149      	lsls	r1, r1, #5
 800cacc:	404a      	eors	r2, r1
 800cace:	801a      	strh	r2, [r3, #0]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	18d3      	adds	r3, r2, r3
 800cada:	183a      	adds	r2, r7, r0
 800cadc:	8812      	ldrh	r2, [r2, #0]
 800cade:	4905      	ldr	r1, [pc, #20]	; (800caf4 <USB_EPSetStall+0x98>)
 800cae0:	430a      	orrs	r2, r1
 800cae2:	b292      	uxth	r2, r2
 800cae4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	0018      	movs	r0, r3
 800caea:	46bd      	mov	sp, r7
 800caec:	b004      	add	sp, #16
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	ffff8fbf 	.word	0xffff8fbf
 800caf4:	ffff8080 	.word	0xffff8080
 800caf8:	ffffbf8f 	.word	0xffffbf8f

0800cafc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b086      	sub	sp, #24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	7b1b      	ldrb	r3, [r3, #12]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d000      	beq.n	800cb10 <USB_EPClearStall+0x14>
 800cb0e:	e095      	b.n	800cc3c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	785b      	ldrb	r3, [r3, #1]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d046      	beq.n	800cba6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	18d2      	adds	r2, r2, r3
 800cb22:	2110      	movs	r1, #16
 800cb24:	187b      	adds	r3, r7, r1
 800cb26:	8812      	ldrh	r2, [r2, #0]
 800cb28:	801a      	strh	r2, [r3, #0]
 800cb2a:	187b      	adds	r3, r7, r1
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	2240      	movs	r2, #64	; 0x40
 800cb30:	4013      	ands	r3, r2
 800cb32:	d016      	beq.n	800cb62 <USB_EPClearStall+0x66>
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	18d3      	adds	r3, r2, r3
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	200e      	movs	r0, #14
 800cb44:	183b      	adds	r3, r7, r0
 800cb46:	4940      	ldr	r1, [pc, #256]	; (800cc48 <USB_EPClearStall+0x14c>)
 800cb48:	400a      	ands	r2, r1
 800cb4a:	801a      	strh	r2, [r3, #0]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	18d3      	adds	r3, r2, r3
 800cb56:	183a      	adds	r2, r7, r0
 800cb58:	8812      	ldrh	r2, [r2, #0]
 800cb5a:	493c      	ldr	r1, [pc, #240]	; (800cc4c <USB_EPClearStall+0x150>)
 800cb5c:	430a      	orrs	r2, r1
 800cb5e:	b292      	uxth	r2, r2
 800cb60:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	78db      	ldrb	r3, [r3, #3]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d068      	beq.n	800cc3c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	18d3      	adds	r3, r2, r3
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	200c      	movs	r0, #12
 800cb7a:	183b      	adds	r3, r7, r0
 800cb7c:	4934      	ldr	r1, [pc, #208]	; (800cc50 <USB_EPClearStall+0x154>)
 800cb7e:	400a      	ands	r2, r1
 800cb80:	801a      	strh	r2, [r3, #0]
 800cb82:	183b      	adds	r3, r7, r0
 800cb84:	183a      	adds	r2, r7, r0
 800cb86:	8812      	ldrh	r2, [r2, #0]
 800cb88:	2120      	movs	r1, #32
 800cb8a:	404a      	eors	r2, r1
 800cb8c:	801a      	strh	r2, [r3, #0]
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	18d3      	adds	r3, r2, r3
 800cb98:	183a      	adds	r2, r7, r0
 800cb9a:	8812      	ldrh	r2, [r2, #0]
 800cb9c:	492d      	ldr	r1, [pc, #180]	; (800cc54 <USB_EPClearStall+0x158>)
 800cb9e:	430a      	orrs	r2, r1
 800cba0:	b292      	uxth	r2, r2
 800cba2:	801a      	strh	r2, [r3, #0]
 800cba4:	e04a      	b.n	800cc3c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	18d2      	adds	r2, r2, r3
 800cbb0:	2116      	movs	r1, #22
 800cbb2:	187b      	adds	r3, r7, r1
 800cbb4:	8812      	ldrh	r2, [r2, #0]
 800cbb6:	801a      	strh	r2, [r3, #0]
 800cbb8:	187b      	adds	r3, r7, r1
 800cbba:	881a      	ldrh	r2, [r3, #0]
 800cbbc:	2380      	movs	r3, #128	; 0x80
 800cbbe:	01db      	lsls	r3, r3, #7
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	d016      	beq.n	800cbf2 <USB_EPClearStall+0xf6>
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	18d3      	adds	r3, r2, r3
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	2014      	movs	r0, #20
 800cbd4:	183b      	adds	r3, r7, r0
 800cbd6:	491c      	ldr	r1, [pc, #112]	; (800cc48 <USB_EPClearStall+0x14c>)
 800cbd8:	400a      	ands	r2, r1
 800cbda:	801a      	strh	r2, [r3, #0]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	18d3      	adds	r3, r2, r3
 800cbe6:	183a      	adds	r2, r7, r0
 800cbe8:	8812      	ldrh	r2, [r2, #0]
 800cbea:	491b      	ldr	r1, [pc, #108]	; (800cc58 <USB_EPClearStall+0x15c>)
 800cbec:	430a      	orrs	r2, r1
 800cbee:	b292      	uxth	r2, r2
 800cbf0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	18d3      	adds	r3, r2, r3
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	2012      	movs	r0, #18
 800cc02:	183b      	adds	r3, r7, r0
 800cc04:	4915      	ldr	r1, [pc, #84]	; (800cc5c <USB_EPClearStall+0x160>)
 800cc06:	400a      	ands	r2, r1
 800cc08:	801a      	strh	r2, [r3, #0]
 800cc0a:	183b      	adds	r3, r7, r0
 800cc0c:	183a      	adds	r2, r7, r0
 800cc0e:	8812      	ldrh	r2, [r2, #0]
 800cc10:	2180      	movs	r1, #128	; 0x80
 800cc12:	0149      	lsls	r1, r1, #5
 800cc14:	404a      	eors	r2, r1
 800cc16:	801a      	strh	r2, [r3, #0]
 800cc18:	183b      	adds	r3, r7, r0
 800cc1a:	183a      	adds	r2, r7, r0
 800cc1c:	8812      	ldrh	r2, [r2, #0]
 800cc1e:	2180      	movs	r1, #128	; 0x80
 800cc20:	0189      	lsls	r1, r1, #6
 800cc22:	404a      	eors	r2, r1
 800cc24:	801a      	strh	r2, [r3, #0]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	18d3      	adds	r3, r2, r3
 800cc30:	183a      	adds	r2, r7, r0
 800cc32:	8812      	ldrh	r2, [r2, #0]
 800cc34:	4907      	ldr	r1, [pc, #28]	; (800cc54 <USB_EPClearStall+0x158>)
 800cc36:	430a      	orrs	r2, r1
 800cc38:	b292      	uxth	r2, r2
 800cc3a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	0018      	movs	r0, r3
 800cc40:	46bd      	mov	sp, r7
 800cc42:	b006      	add	sp, #24
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	46c0      	nop			; (mov r8, r8)
 800cc48:	ffff8f8f 	.word	0xffff8f8f
 800cc4c:	ffff80c0 	.word	0xffff80c0
 800cc50:	ffff8fbf 	.word	0xffff8fbf
 800cc54:	ffff8080 	.word	0xffff8080
 800cc58:	ffffc080 	.word	0xffffc080
 800cc5c:	ffffbf8f 	.word	0xffffbf8f

0800cc60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	000a      	movs	r2, r1
 800cc6a:	1cfb      	adds	r3, r7, #3
 800cc6c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800cc6e:	1cfb      	adds	r3, r7, #3
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d103      	bne.n	800cc7e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	224c      	movs	r2, #76	; 0x4c
 800cc7a:	2180      	movs	r1, #128	; 0x80
 800cc7c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	0018      	movs	r0, r3
 800cc82:	46bd      	mov	sp, r7
 800cc84:	b002      	add	sp, #8
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2258      	movs	r2, #88	; 0x58
 800cc94:	5a9b      	ldrh	r3, [r3, r2]
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	4a05      	ldr	r2, [pc, #20]	; (800ccb0 <USB_DevConnect+0x28>)
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	b299      	uxth	r1, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2258      	movs	r2, #88	; 0x58
 800cca2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	0018      	movs	r0, r3
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	b002      	add	sp, #8
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	46c0      	nop			; (mov r8, r8)
 800ccb0:	ffff8000 	.word	0xffff8000

0800ccb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2244      	movs	r2, #68	; 0x44
 800ccc0:	5a9b      	ldrh	r3, [r3, r2]
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
}
 800ccc8:	0018      	movs	r0, r3
 800ccca:	46bd      	mov	sp, r7
 800cccc:	b004      	add	sp, #16
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08c      	sub	sp, #48	; 0x30
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	0019      	movs	r1, r3
 800ccdc:	1dbb      	adds	r3, r7, #6
 800ccde:	801a      	strh	r2, [r3, #0]
 800cce0:	1d3b      	adds	r3, r7, #4
 800cce2:	1c0a      	adds	r2, r1, #0
 800cce4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cce6:	1d3b      	adds	r3, r7, #4
 800cce8:	881b      	ldrh	r3, [r3, #0]
 800ccea:	3301      	adds	r3, #1
 800ccec:	085b      	lsrs	r3, r3, #1
 800ccee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ccf8:	1dbb      	adds	r3, r7, #6
 800ccfa:	881a      	ldrh	r2, [r3, #0]
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	18d3      	adds	r3, r2, r3
 800cd00:	2280      	movs	r2, #128	; 0x80
 800cd02:	00d2      	lsls	r2, r2, #3
 800cd04:	4694      	mov	ip, r2
 800cd06:	4463      	add	r3, ip
 800cd08:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd0e:	e01b      	b.n	800cd48 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	3301      	adds	r3, #1
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	001a      	movs	r2, r3
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd34:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	3302      	adds	r3, #2
 800cd3a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	3301      	adds	r3, #1
 800cd40:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	3b01      	subs	r3, #1
 800cd46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1e0      	bne.n	800cd10 <USB_WritePMA+0x40>
  }
}
 800cd4e:	46c0      	nop			; (mov r8, r8)
 800cd50:	46bd      	mov	sp, r7
 800cd52:	b00c      	add	sp, #48	; 0x30
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b08a      	sub	sp, #40	; 0x28
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	60b9      	str	r1, [r7, #8]
 800cd60:	0019      	movs	r1, r3
 800cd62:	1dbb      	adds	r3, r7, #6
 800cd64:	801a      	strh	r2, [r3, #0]
 800cd66:	1d3b      	adds	r3, r7, #4
 800cd68:	1c0a      	adds	r2, r1, #0
 800cd6a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cd6c:	1d3b      	adds	r3, r7, #4
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	085b      	lsrs	r3, r3, #1
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cd7e:	1dbb      	adds	r3, r7, #6
 800cd80:	881a      	ldrh	r2, [r3, #0]
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	18d3      	adds	r3, r2, r3
 800cd86:	2280      	movs	r2, #128	; 0x80
 800cd88:	00d2      	lsls	r2, r2, #3
 800cd8a:	4694      	mov	ip, r2
 800cd8c:	4463      	add	r3, ip
 800cd8e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	627b      	str	r3, [r7, #36]	; 0x24
 800cd94:	e018      	b.n	800cdc8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	3302      	adds	r3, #2
 800cda2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	0a1b      	lsrs	r3, r3, #8
 800cdb6:	b2da      	uxtb	r2, r3
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1e3      	bne.n	800cd96 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800cdce:	1d3b      	adds	r3, r7, #4
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d007      	beq.n	800cdec <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	881b      	ldrh	r3, [r3, #0]
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	701a      	strb	r2, [r3, #0]
  }
}
 800cdec:	46c0      	nop			; (mov r8, r8)
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	b00a      	add	sp, #40	; 0x28
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	000a      	movs	r2, r1
 800cdfe:	1cfb      	adds	r3, r7, #3
 800ce00:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ce02:	230f      	movs	r3, #15
 800ce04:	18fb      	adds	r3, r7, r3
 800ce06:	2200      	movs	r2, #0
 800ce08:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	7c1b      	ldrb	r3, [r3, #16]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d116      	bne.n	800ce40 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ce12:	2380      	movs	r3, #128	; 0x80
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	2202      	movs	r2, #2
 800ce1a:	2181      	movs	r1, #129	; 0x81
 800ce1c:	f002 f8a2 	bl	800ef64 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ce26:	2380      	movs	r3, #128	; 0x80
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	2202      	movs	r2, #2
 800ce2e:	2101      	movs	r1, #1
 800ce30:	f002 f898 	bl	800ef64 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	23b6      	movs	r3, #182	; 0xb6
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	2101      	movs	r1, #1
 800ce3c:	50d1      	str	r1, [r2, r3]
 800ce3e:	e013      	b.n	800ce68 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	2340      	movs	r3, #64	; 0x40
 800ce44:	2202      	movs	r2, #2
 800ce46:	2181      	movs	r1, #129	; 0x81
 800ce48:	f002 f88c 	bl	800ef64 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	2340      	movs	r3, #64	; 0x40
 800ce56:	2202      	movs	r2, #2
 800ce58:	2101      	movs	r1, #1
 800ce5a:	f002 f883 	bl	800ef64 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	23b6      	movs	r3, #182	; 0xb6
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	2101      	movs	r1, #1
 800ce66:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	2308      	movs	r3, #8
 800ce6c:	2203      	movs	r2, #3
 800ce6e:	2182      	movs	r1, #130	; 0x82
 800ce70:	f002 f878 	bl	800ef64 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2201      	movs	r2, #1
 800ce78:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce7a:	2387      	movs	r3, #135	; 0x87
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	0018      	movs	r0, r3
 800ce80:	f002 fa0e 	bl	800f2a0 <USBD_static_malloc>
 800ce84:	0001      	movs	r1, r0
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	23ae      	movs	r3, #174	; 0xae
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	23ae      	movs	r3, #174	; 0xae
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	58d3      	ldr	r3, [r2, r3]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d104      	bne.n	800cea4 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800ce9a:	230f      	movs	r3, #15
 800ce9c:	18fb      	adds	r3, r7, r3
 800ce9e:	2201      	movs	r2, #1
 800cea0:	701a      	strb	r2, [r3, #0]
 800cea2:	e02c      	b.n	800cefe <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	23ae      	movs	r3, #174	; 0xae
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	58d3      	ldr	r3, [r2, r3]
 800ceac:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	23af      	movs	r3, #175	; 0xaf
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	58d3      	ldr	r3, [r2, r3]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	2385      	movs	r3, #133	; 0x85
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	2100      	movs	r1, #0
 800cec2:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	2386      	movs	r3, #134	; 0x86
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	2100      	movs	r1, #0
 800cecc:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	7c1b      	ldrb	r3, [r3, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	2381      	movs	r3, #129	; 0x81
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	58d2      	ldr	r2, [r2, r3]
 800cede:	2380      	movs	r3, #128	; 0x80
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	2101      	movs	r1, #1
 800cee6:	f002 f98d 	bl	800f204 <USBD_LL_PrepareReceive>
 800ceea:	e008      	b.n	800cefe <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	2381      	movs	r3, #129	; 0x81
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	58d2      	ldr	r2, [r2, r3]
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	2340      	movs	r3, #64	; 0x40
 800cef8:	2101      	movs	r1, #1
 800cefa:	f002 f983 	bl	800f204 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800cefe:	230f      	movs	r3, #15
 800cf00:	18fb      	adds	r3, r7, r3
 800cf02:	781b      	ldrb	r3, [r3, #0]
}
 800cf04:	0018      	movs	r0, r3
 800cf06:	46bd      	mov	sp, r7
 800cf08:	b004      	add	sp, #16
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	000a      	movs	r2, r1
 800cf16:	1cfb      	adds	r3, r7, #3
 800cf18:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800cf1a:	230f      	movs	r3, #15
 800cf1c:	18fb      	adds	r3, r7, r3
 800cf1e:	2200      	movs	r2, #0
 800cf20:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2181      	movs	r1, #129	; 0x81
 800cf26:	0018      	movs	r0, r3
 800cf28:	f002 f853 	bl	800efd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2101      	movs	r1, #1
 800cf36:	0018      	movs	r0, r3
 800cf38:	f002 f84b 	bl	800efd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	23b6      	movs	r3, #182	; 0xb6
 800cf40:	005b      	lsls	r3, r3, #1
 800cf42:	2100      	movs	r1, #0
 800cf44:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2182      	movs	r1, #130	; 0x82
 800cf4a:	0018      	movs	r0, r3
 800cf4c:	f002 f841 	bl	800efd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	23ae      	movs	r3, #174	; 0xae
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	58d3      	ldr	r3, [r2, r3]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d011      	beq.n	800cf86 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	23af      	movs	r3, #175	; 0xaf
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	58d3      	ldr	r3, [r2, r3]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	23ae      	movs	r3, #174	; 0xae
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	58d3      	ldr	r3, [r2, r3]
 800cf76:	0018      	movs	r0, r3
 800cf78:	f002 f99e 	bl	800f2b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	23ae      	movs	r3, #174	; 0xae
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	2100      	movs	r1, #0
 800cf84:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800cf86:	230f      	movs	r3, #15
 800cf88:	18fb      	adds	r3, r7, r3
 800cf8a:	781b      	ldrb	r3, [r3, #0]
}
 800cf8c:	0018      	movs	r0, r3
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	b004      	add	sp, #16
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	23ae      	movs	r3, #174	; 0xae
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	58d3      	ldr	r3, [r2, r3]
 800cfa6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800cfa8:	230f      	movs	r3, #15
 800cfaa:	18fb      	adds	r3, r7, r3
 800cfac:	2200      	movs	r2, #0
 800cfae:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800cfb0:	230c      	movs	r3, #12
 800cfb2:	18fb      	adds	r3, r7, r3
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800cfb8:	2317      	movs	r3, #23
 800cfba:	18fb      	adds	r3, r7, r3
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	001a      	movs	r2, r3
 800cfc6:	2360      	movs	r3, #96	; 0x60
 800cfc8:	4013      	ands	r3, r2
 800cfca:	d03d      	beq.n	800d048 <USBD_CDC_Setup+0xb4>
 800cfcc:	2b20      	cmp	r3, #32
 800cfce:	d000      	beq.n	800cfd2 <USBD_CDC_Setup+0x3e>
 800cfd0:	e092      	b.n	800d0f8 <USBD_CDC_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	88db      	ldrh	r3, [r3, #6]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d02b      	beq.n	800d032 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	b25b      	sxtb	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	da12      	bge.n	800d00a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	23af      	movs	r3, #175	; 0xaf
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	58d3      	ldr	r3, [r2, r3]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800cff2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cff4:	683a      	ldr	r2, [r7, #0]
 800cff6:	88d2      	ldrh	r2, [r2, #6]
 800cff8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cffa:	6939      	ldr	r1, [r7, #16]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	88da      	ldrh	r2, [r3, #6]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	0018      	movs	r0, r3
 800d004:	f001 fbbe 	bl	800e784 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d008:	e081      	b.n	800d10e <USBD_CDC_Setup+0x17a>
          hcdc->CmdOpCode = req->bRequest;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	7859      	ldrb	r1, [r3, #1]
 800d00e:	693a      	ldr	r2, [r7, #16]
 800d010:	2380      	movs	r3, #128	; 0x80
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	88db      	ldrh	r3, [r3, #6]
 800d01a:	b2d9      	uxtb	r1, r3
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	4a3f      	ldr	r2, [pc, #252]	; (800d11c <USBD_CDC_Setup+0x188>)
 800d020:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d022:	6939      	ldr	r1, [r7, #16]
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	88da      	ldrh	r2, [r3, #6]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	0018      	movs	r0, r3
 800d02c:	f001 fbdd 	bl	800e7ea <USBD_CtlPrepareRx>
      break;
 800d030:	e06d      	b.n	800d10e <USBD_CDC_Setup+0x17a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	23af      	movs	r3, #175	; 0xaf
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	58d3      	ldr	r3, [r2, r3]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	7850      	ldrb	r0, [r2, #1]
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	2200      	movs	r2, #0
 800d044:	4798      	blx	r3
      break;
 800d046:	e062      	b.n	800d10e <USBD_CDC_Setup+0x17a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	785b      	ldrb	r3, [r3, #1]
 800d04c:	2b0a      	cmp	r3, #10
 800d04e:	d01c      	beq.n	800d08a <USBD_CDC_Setup+0xf6>
 800d050:	2b0b      	cmp	r3, #11
 800d052:	d033      	beq.n	800d0bc <USBD_CDC_Setup+0x128>
 800d054:	2b00      	cmp	r3, #0
 800d056:	d142      	bne.n	800d0de <USBD_CDC_Setup+0x14a>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	23a7      	movs	r3, #167	; 0xa7
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	5cd3      	ldrb	r3, [r2, r3]
 800d060:	2b03      	cmp	r3, #3
 800d062:	d107      	bne.n	800d074 <USBD_CDC_Setup+0xe0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d064:	230c      	movs	r3, #12
 800d066:	18f9      	adds	r1, r7, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2202      	movs	r2, #2
 800d06c:	0018      	movs	r0, r3
 800d06e:	f001 fb89 	bl	800e784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d072:	e040      	b.n	800d0f6 <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	0011      	movs	r1, r2
 800d07a:	0018      	movs	r0, r3
 800d07c:	f001 fb03 	bl	800e686 <USBD_CtlError>
            ret = USBD_FAIL;
 800d080:	2317      	movs	r3, #23
 800d082:	18fb      	adds	r3, r7, r3
 800d084:	2202      	movs	r2, #2
 800d086:	701a      	strb	r2, [r3, #0]
          break;
 800d088:	e035      	b.n	800d0f6 <USBD_CDC_Setup+0x162>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	23a7      	movs	r3, #167	; 0xa7
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	5cd3      	ldrb	r3, [r2, r3]
 800d092:	2b03      	cmp	r3, #3
 800d094:	d107      	bne.n	800d0a6 <USBD_CDC_Setup+0x112>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d096:	230f      	movs	r3, #15
 800d098:	18f9      	adds	r1, r7, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	0018      	movs	r0, r3
 800d0a0:	f001 fb70 	bl	800e784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0a4:	e027      	b.n	800d0f6 <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	0011      	movs	r1, r2
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	f001 faea 	bl	800e686 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0b2:	2317      	movs	r3, #23
 800d0b4:	18fb      	adds	r3, r7, r3
 800d0b6:	2202      	movs	r2, #2
 800d0b8:	701a      	strb	r2, [r3, #0]
          break;
 800d0ba:	e01c      	b.n	800d0f6 <USBD_CDC_Setup+0x162>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	23a7      	movs	r3, #167	; 0xa7
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	5cd3      	ldrb	r3, [r2, r3]
 800d0c4:	2b03      	cmp	r3, #3
 800d0c6:	d015      	beq.n	800d0f4 <USBD_CDC_Setup+0x160>
          {
            USBD_CtlError(pdev, req);
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	0011      	movs	r1, r2
 800d0ce:	0018      	movs	r0, r3
 800d0d0:	f001 fad9 	bl	800e686 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0d4:	2317      	movs	r3, #23
 800d0d6:	18fb      	adds	r3, r7, r3
 800d0d8:	2202      	movs	r2, #2
 800d0da:	701a      	strb	r2, [r3, #0]
          }
          break;
 800d0dc:	e00a      	b.n	800d0f4 <USBD_CDC_Setup+0x160>

        default:
          USBD_CtlError(pdev, req);
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	0011      	movs	r1, r2
 800d0e4:	0018      	movs	r0, r3
 800d0e6:	f001 face 	bl	800e686 <USBD_CtlError>
          ret = USBD_FAIL;
 800d0ea:	2317      	movs	r3, #23
 800d0ec:	18fb      	adds	r3, r7, r3
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	701a      	strb	r2, [r3, #0]
          break;
 800d0f2:	e000      	b.n	800d0f6 <USBD_CDC_Setup+0x162>
          break;
 800d0f4:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800d0f6:	e00a      	b.n	800d10e <USBD_CDC_Setup+0x17a>

    default:
      USBD_CtlError(pdev, req);
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	0011      	movs	r1, r2
 800d0fe:	0018      	movs	r0, r3
 800d100:	f001 fac1 	bl	800e686 <USBD_CtlError>
      ret = USBD_FAIL;
 800d104:	2317      	movs	r3, #23
 800d106:	18fb      	adds	r3, r7, r3
 800d108:	2202      	movs	r2, #2
 800d10a:	701a      	strb	r2, [r3, #0]
      break;
 800d10c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800d10e:	2317      	movs	r3, #23
 800d110:	18fb      	adds	r3, r7, r3
 800d112:	781b      	ldrb	r3, [r3, #0]
}
 800d114:	0018      	movs	r0, r3
 800d116:	46bd      	mov	sp, r7
 800d118:	b006      	add	sp, #24
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	00000201 	.word	0x00000201

0800d120 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	000a      	movs	r2, r1
 800d12a:	1cfb      	adds	r3, r7, #3
 800d12c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	23ae      	movs	r3, #174	; 0xae
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	58d3      	ldr	r3, [r2, r3]
 800d136:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	23b0      	movs	r3, #176	; 0xb0
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	58d3      	ldr	r3, [r2, r3]
 800d140:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	23ae      	movs	r3, #174	; 0xae
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	58d3      	ldr	r3, [r2, r3]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d03e      	beq.n	800d1cc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d14e:	1cfb      	adds	r3, r7, #3
 800d150:	781a      	ldrb	r2, [r3, #0]
 800d152:	6879      	ldr	r1, [r7, #4]
 800d154:	0013      	movs	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	189b      	adds	r3, r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	18cb      	adds	r3, r1, r3
 800d15e:	331c      	adds	r3, #28
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d02b      	beq.n	800d1be <USBD_CDC_DataIn+0x9e>
 800d166:	1cfb      	adds	r3, r7, #3
 800d168:	781a      	ldrb	r2, [r3, #0]
 800d16a:	6879      	ldr	r1, [r7, #4]
 800d16c:	0013      	movs	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	189b      	adds	r3, r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	18cb      	adds	r3, r1, r3
 800d176:	331c      	adds	r3, #28
 800d178:	6818      	ldr	r0, [r3, #0]
 800d17a:	1cfb      	adds	r3, r7, #3
 800d17c:	781a      	ldrb	r2, [r3, #0]
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	0013      	movs	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	189b      	adds	r3, r3, r2
 800d186:	00db      	lsls	r3, r3, #3
 800d188:	18cb      	adds	r3, r1, r3
 800d18a:	3338      	adds	r3, #56	; 0x38
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	0019      	movs	r1, r3
 800d190:	f7f3 f840 	bl	8000214 <__aeabi_uidivmod>
 800d194:	1e0b      	subs	r3, r1, #0
 800d196:	d112      	bne.n	800d1be <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d198:	1cfb      	adds	r3, r7, #3
 800d19a:	781a      	ldrb	r2, [r3, #0]
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	0013      	movs	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	189b      	adds	r3, r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	18cb      	adds	r3, r1, r3
 800d1a8:	331c      	adds	r3, #28
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d1ae:	1cfb      	adds	r3, r7, #3
 800d1b0:	7819      	ldrb	r1, [r3, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f001 ffec 	bl	800f194 <USBD_LL_Transmit>
 800d1bc:	e004      	b.n	800d1c8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	2385      	movs	r3, #133	; 0x85
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	e000      	b.n	800d1ce <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800d1cc:	2302      	movs	r3, #2
  }
}
 800d1ce:	0018      	movs	r0, r3
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	b004      	add	sp, #16
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b084      	sub	sp, #16
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	000a      	movs	r2, r1
 800d1e0:	1cfb      	adds	r3, r7, #3
 800d1e2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	23ae      	movs	r3, #174	; 0xae
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	58d3      	ldr	r3, [r2, r3]
 800d1ec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d1ee:	1cfb      	adds	r3, r7, #3
 800d1f0:	781a      	ldrb	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	0011      	movs	r1, r2
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f002 f83c 	bl	800f274 <USBD_LL_GetRxDataSize>
 800d1fc:	0001      	movs	r1, r0
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	2383      	movs	r3, #131	; 0x83
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	23ae      	movs	r3, #174	; 0xae
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	58d3      	ldr	r3, [r2, r3]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d011      	beq.n	800d236 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	23af      	movs	r3, #175	; 0xaf
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	58d3      	ldr	r3, [r2, r3]
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	68f9      	ldr	r1, [r7, #12]
 800d21e:	2281      	movs	r2, #129	; 0x81
 800d220:	0092      	lsls	r2, r2, #2
 800d222:	5888      	ldr	r0, [r1, r2]
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	2183      	movs	r1, #131	; 0x83
 800d228:	0089      	lsls	r1, r1, #2
 800d22a:	468c      	mov	ip, r1
 800d22c:	4462      	add	r2, ip
 800d22e:	0011      	movs	r1, r2
 800d230:	4798      	blx	r3

    return USBD_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	e000      	b.n	800d238 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800d236:	2302      	movs	r3, #2
  }
}
 800d238:	0018      	movs	r0, r3
 800d23a:	46bd      	mov	sp, r7
 800d23c:	b004      	add	sp, #16
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d240:	b590      	push	{r4, r7, lr}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	23ae      	movs	r3, #174	; 0xae
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	58d3      	ldr	r3, [r2, r3]
 800d250:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	23af      	movs	r3, #175	; 0xaf
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	58d3      	ldr	r3, [r2, r3]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d01a      	beq.n	800d294 <USBD_CDC_EP0_RxReady+0x54>
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	2380      	movs	r3, #128	; 0x80
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	5cd3      	ldrb	r3, [r2, r3]
 800d266:	2bff      	cmp	r3, #255	; 0xff
 800d268:	d014      	beq.n	800d294 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	23af      	movs	r3, #175	; 0xaf
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	58d3      	ldr	r3, [r2, r3]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	68f9      	ldr	r1, [r7, #12]
 800d276:	2280      	movs	r2, #128	; 0x80
 800d278:	0092      	lsls	r2, r2, #2
 800d27a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800d27c:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d27e:	68fa      	ldr	r2, [r7, #12]
 800d280:	4907      	ldr	r1, [pc, #28]	; (800d2a0 <USBD_CDC_EP0_RxReady+0x60>)
 800d282:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d284:	b292      	uxth	r2, r2
 800d286:	0021      	movs	r1, r4
 800d288:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	2380      	movs	r3, #128	; 0x80
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	21ff      	movs	r1, #255	; 0xff
 800d292:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	0018      	movs	r0, r3
 800d298:	46bd      	mov	sp, r7
 800d29a:	b005      	add	sp, #20
 800d29c:	bd90      	pop	{r4, r7, pc}
 800d29e:	46c0      	nop			; (mov r8, r8)
 800d2a0:	00000201 	.word	0x00000201

0800d2a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2243      	movs	r2, #67	; 0x43
 800d2b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d2b2:	4b02      	ldr	r3, [pc, #8]	; (800d2bc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800d2b4:	0018      	movs	r0, r3
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	b002      	add	sp, #8
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	200001a0 	.word	0x200001a0

0800d2c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2243      	movs	r2, #67	; 0x43
 800d2cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d2ce:	4b02      	ldr	r3, [pc, #8]	; (800d2d8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	b002      	add	sp, #8
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	2000015c 	.word	0x2000015c

0800d2dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2243      	movs	r2, #67	; 0x43
 800d2e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d2ea:	4b02      	ldr	r3, [pc, #8]	; (800d2f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800d2ec:	0018      	movs	r0, r3
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	b002      	add	sp, #8
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	200001e4 	.word	0x200001e4

0800d2f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	220a      	movs	r2, #10
 800d304:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d306:	4b02      	ldr	r3, [pc, #8]	; (800d310 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800d308:	0018      	movs	r0, r3
 800d30a:	46bd      	mov	sp, r7
 800d30c:	b002      	add	sp, #8
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	20000118 	.word	0x20000118

0800d314 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d31e:	230f      	movs	r3, #15
 800d320:	18fb      	adds	r3, r7, r3
 800d322:	2202      	movs	r2, #2
 800d324:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d008      	beq.n	800d33e <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData = fops;
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	23af      	movs	r3, #175	; 0xaf
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	6839      	ldr	r1, [r7, #0]
 800d334:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800d336:	230f      	movs	r3, #15
 800d338:	18fb      	adds	r3, r7, r3
 800d33a:	2200      	movs	r2, #0
 800d33c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800d33e:	230f      	movs	r3, #15
 800d340:	18fb      	adds	r3, r7, r3
 800d342:	781b      	ldrb	r3, [r3, #0]
}
 800d344:	0018      	movs	r0, r3
 800d346:	46bd      	mov	sp, r7
 800d348:	b004      	add	sp, #16
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	1dbb      	adds	r3, r7, #6
 800d358:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	23ae      	movs	r3, #174	; 0xae
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	58d3      	ldr	r3, [r2, r3]
 800d362:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	2382      	movs	r3, #130	; 0x82
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	68b9      	ldr	r1, [r7, #8]
 800d36c:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800d36e:	1dbb      	adds	r3, r7, #6
 800d370:	8819      	ldrh	r1, [r3, #0]
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	2384      	movs	r3, #132	; 0x84
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800d37a:	2300      	movs	r3, #0
}
 800d37c:	0018      	movs	r0, r3
 800d37e:	46bd      	mov	sp, r7
 800d380:	b006      	add	sp, #24
 800d382:	bd80      	pop	{r7, pc}

0800d384 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	23ae      	movs	r3, #174	; 0xae
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	58d3      	ldr	r3, [r2, r3]
 800d396:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	2381      	movs	r3, #129	; 0x81
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	0018      	movs	r0, r3
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	b004      	add	sp, #16
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	23ae      	movs	r3, #174	; 0xae
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	58d3      	ldr	r3, [r2, r3]
 800d3bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	23ae      	movs	r3, #174	; 0xae
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	58d3      	ldr	r3, [r2, r3]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d022      	beq.n	800d410 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800d3ca:	68fa      	ldr	r2, [r7, #12]
 800d3cc:	2385      	movs	r3, #133	; 0x85
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	58d3      	ldr	r3, [r2, r3]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d11a      	bne.n	800d40c <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	2385      	movs	r3, #133	; 0x85
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	2101      	movs	r1, #1
 800d3de:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	2384      	movs	r3, #132	; 0x84
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	58d2      	ldr	r2, [r2, r3]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	2382      	movs	r3, #130	; 0x82
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	2384      	movs	r3, #132	; 0x84
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	000a      	movs	r2, r1
 800d402:	2181      	movs	r1, #129	; 0x81
 800d404:	f001 fec6 	bl	800f194 <USBD_LL_Transmit>

      return USBD_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	e002      	b.n	800d412 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800d40c:	2301      	movs	r3, #1
 800d40e:	e000      	b.n	800d412 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800d410:	2302      	movs	r3, #2
  }
}
 800d412:	0018      	movs	r0, r3
 800d414:	46bd      	mov	sp, r7
 800d416:	b004      	add	sp, #16
 800d418:	bd80      	pop	{r7, pc}

0800d41a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b084      	sub	sp, #16
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	23ae      	movs	r3, #174	; 0xae
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	58d3      	ldr	r3, [r2, r3]
 800d42a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	23ae      	movs	r3, #174	; 0xae
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	58d3      	ldr	r3, [r2, r3]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d019      	beq.n	800d46c <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7c1b      	ldrb	r3, [r3, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10a      	bne.n	800d456 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	2381      	movs	r3, #129	; 0x81
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	58d2      	ldr	r2, [r2, r3]
 800d448:	2380      	movs	r3, #128	; 0x80
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	2101      	movs	r1, #1
 800d450:	f001 fed8 	bl	800f204 <USBD_LL_PrepareReceive>
 800d454:	e008      	b.n	800d468 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	2381      	movs	r3, #129	; 0x81
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	58d2      	ldr	r2, [r2, r3]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	2340      	movs	r3, #64	; 0x40
 800d462:	2101      	movs	r1, #1
 800d464:	f001 fece 	bl	800f204 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	e000      	b.n	800d46e <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800d46c:	2302      	movs	r3, #2
  }
}
 800d46e:	0018      	movs	r0, r3
 800d470:	46bd      	mov	sp, r7
 800d472:	b004      	add	sp, #16
 800d474:	bd80      	pop	{r7, pc}

0800d476 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b084      	sub	sp, #16
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	60f8      	str	r0, [r7, #12]
 800d47e:	60b9      	str	r1, [r7, #8]
 800d480:	1dfb      	adds	r3, r7, #7
 800d482:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d101      	bne.n	800d48e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d48a:	2302      	movs	r3, #2
 800d48c:	e020      	b.n	800d4d0 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	23ad      	movs	r3, #173	; 0xad
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	58d3      	ldr	r3, [r2, r3]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d004      	beq.n	800d4a4 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	23ad      	movs	r3, #173	; 0xad
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d004      	beq.n	800d4b4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	23ac      	movs	r3, #172	; 0xac
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	68b9      	ldr	r1, [r7, #8]
 800d4b2:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	23a7      	movs	r3, #167	; 0xa7
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	1dfa      	adds	r2, r7, #7
 800d4c2:	7812      	ldrb	r2, [r2, #0]
 800d4c4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	0018      	movs	r0, r3
 800d4ca:	f001 fcc1 	bl	800ee50 <USBD_LL_Init>

  return USBD_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	0018      	movs	r0, r3
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	b004      	add	sp, #16
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d4e2:	230f      	movs	r3, #15
 800d4e4:	18fb      	adds	r3, r7, r3
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d009      	beq.n	800d504 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	23ad      	movs	r3, #173	; 0xad
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	6839      	ldr	r1, [r7, #0]
 800d4f8:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800d4fa:	230f      	movs	r3, #15
 800d4fc:	18fb      	adds	r3, r7, r3
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]
 800d502:	e003      	b.n	800d50c <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d504:	230f      	movs	r3, #15
 800d506:	18fb      	adds	r3, r7, r3
 800d508:	2202      	movs	r2, #2
 800d50a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d50c:	230f      	movs	r3, #15
 800d50e:	18fb      	adds	r3, r7, r3
 800d510:	781b      	ldrb	r3, [r3, #0]
}
 800d512:	0018      	movs	r0, r3
 800d514:	46bd      	mov	sp, r7
 800d516:	b004      	add	sp, #16
 800d518:	bd80      	pop	{r7, pc}

0800d51a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b082      	sub	sp, #8
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	0018      	movs	r0, r3
 800d526:	f001 fcf7 	bl	800ef18 <USBD_LL_Start>

  return USBD_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	0018      	movs	r0, r3
 800d52e:	46bd      	mov	sp, r7
 800d530:	b002      	add	sp, #8
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	0018      	movs	r0, r3
 800d540:	46bd      	mov	sp, r7
 800d542:	b002      	add	sp, #8
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b084      	sub	sp, #16
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	000a      	movs	r2, r1
 800d550:	1cfb      	adds	r3, r7, #3
 800d552:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d554:	230f      	movs	r3, #15
 800d556:	18fb      	adds	r3, r7, r3
 800d558:	2202      	movs	r2, #2
 800d55a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	23ad      	movs	r3, #173	; 0xad
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	58d3      	ldr	r3, [r2, r3]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00f      	beq.n	800d588 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	23ad      	movs	r3, #173	; 0xad
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	58d3      	ldr	r3, [r2, r3]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	1cfa      	adds	r2, r7, #3
 800d574:	7811      	ldrb	r1, [r2, #0]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	0010      	movs	r0, r2
 800d57a:	4798      	blx	r3
 800d57c:	1e03      	subs	r3, r0, #0
 800d57e:	d103      	bne.n	800d588 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 800d580:	230f      	movs	r3, #15
 800d582:	18fb      	adds	r3, r7, r3
 800d584:	2200      	movs	r2, #0
 800d586:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800d588:	230f      	movs	r3, #15
 800d58a:	18fb      	adds	r3, r7, r3
 800d58c:	781b      	ldrb	r3, [r3, #0]
}
 800d58e:	0018      	movs	r0, r3
 800d590:	46bd      	mov	sp, r7
 800d592:	b004      	add	sp, #16
 800d594:	bd80      	pop	{r7, pc}

0800d596 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	000a      	movs	r2, r1
 800d5a0:	1cfb      	adds	r3, r7, #3
 800d5a2:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	23ad      	movs	r3, #173	; 0xad
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	58d3      	ldr	r3, [r2, r3]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	1cfa      	adds	r2, r7, #3
 800d5b0:	7811      	ldrb	r1, [r2, #0]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	0010      	movs	r0, r2
 800d5b6:	4798      	blx	r3

  return USBD_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	b002      	add	sp, #8
 800d5c0:	bd80      	pop	{r7, pc}
	...

0800d5c4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	22aa      	movs	r2, #170	; 0xaa
 800d5d2:	0092      	lsls	r2, r2, #2
 800d5d4:	4694      	mov	ip, r2
 800d5d6:	4463      	add	r3, ip
 800d5d8:	683a      	ldr	r2, [r7, #0]
 800d5da:	0011      	movs	r1, r2
 800d5dc:	0018      	movs	r0, r3
 800d5de:	f001 f817 	bl	800e610 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	23a5      	movs	r3, #165	; 0xa5
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a22      	ldr	r2, [pc, #136]	; (800d678 <USBD_LL_SetupStage+0xb4>)
 800d5f0:	5a9b      	ldrh	r3, [r3, r2]
 800d5f2:	0019      	movs	r1, r3
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	23a6      	movs	r3, #166	; 0xa6
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	23aa      	movs	r3, #170	; 0xaa
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	5cd3      	ldrb	r3, [r2, r3]
 800d604:	001a      	movs	r2, r3
 800d606:	231f      	movs	r3, #31
 800d608:	4013      	ands	r3, r2
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d00d      	beq.n	800d62a <USBD_LL_SetupStage+0x66>
 800d60e:	d302      	bcc.n	800d616 <USBD_LL_SetupStage+0x52>
 800d610:	2b02      	cmp	r3, #2
 800d612:	d014      	beq.n	800d63e <USBD_LL_SetupStage+0x7a>
 800d614:	e01d      	b.n	800d652 <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	22aa      	movs	r2, #170	; 0xaa
 800d61a:	0092      	lsls	r2, r2, #2
 800d61c:	189a      	adds	r2, r3, r2
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	0011      	movs	r1, r2
 800d622:	0018      	movs	r0, r3
 800d624:	f000 fa10 	bl	800da48 <USBD_StdDevReq>
      break;
 800d628:	e020      	b.n	800d66c <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	22aa      	movs	r2, #170	; 0xaa
 800d62e:	0092      	lsls	r2, r2, #2
 800d630:	189a      	adds	r2, r3, r2
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	0011      	movs	r1, r2
 800d636:	0018      	movs	r0, r3
 800d638:	f000 fa78 	bl	800db2c <USBD_StdItfReq>
      break;
 800d63c:	e016      	b.n	800d66c <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	22aa      	movs	r2, #170	; 0xaa
 800d642:	0092      	lsls	r2, r2, #2
 800d644:	189a      	adds	r2, r3, r2
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	0011      	movs	r1, r2
 800d64a:	0018      	movs	r0, r3
 800d64c:	f000 fac5 	bl	800dbda <USBD_StdEPReq>
      break;
 800d650:	e00c      	b.n	800d66c <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	23aa      	movs	r3, #170	; 0xaa
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	5cd3      	ldrb	r3, [r2, r3]
 800d65a:	227f      	movs	r2, #127	; 0x7f
 800d65c:	4393      	bics	r3, r2
 800d65e:	b2da      	uxtb	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	0011      	movs	r1, r2
 800d664:	0018      	movs	r0, r3
 800d666:	f001 fce0 	bl	800f02a <USBD_LL_StallEP>
      break;
 800d66a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	0018      	movs	r0, r3
 800d670:	46bd      	mov	sp, r7
 800d672:	b002      	add	sp, #8
 800d674:	bd80      	pop	{r7, pc}
 800d676:	46c0      	nop			; (mov r8, r8)
 800d678:	000002ae 	.word	0x000002ae

0800d67c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	607a      	str	r2, [r7, #4]
 800d686:	200b      	movs	r0, #11
 800d688:	183b      	adds	r3, r7, r0
 800d68a:	1c0a      	adds	r2, r1, #0
 800d68c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d68e:	183b      	adds	r3, r7, r0
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d154      	bne.n	800d740 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	3355      	adds	r3, #85	; 0x55
 800d69a:	33ff      	adds	r3, #255	; 0xff
 800d69c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	23a5      	movs	r3, #165	; 0xa5
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	58d3      	ldr	r3, [r2, r3]
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d139      	bne.n	800d71e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d919      	bls.n	800d6ea <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	1ad2      	subs	r2, r2, r3
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	68da      	ldr	r2, [r3, #12]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d203      	bcs.n	800d6d8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	e002      	b.n	800d6de <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	6879      	ldr	r1, [r7, #4]
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	001a      	movs	r2, r3
 800d6e4:	f001 f8a5 	bl	800e832 <USBD_CtlContinueRx>
 800d6e8:	e045      	b.n	800d776 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	23ad      	movs	r3, #173	; 0xad
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	58d3      	ldr	r3, [r2, r3]
 800d6f2:	691b      	ldr	r3, [r3, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00d      	beq.n	800d714 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	23a7      	movs	r3, #167	; 0xa7
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d700:	2b03      	cmp	r3, #3
 800d702:	d107      	bne.n	800d714 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	23ad      	movs	r3, #173	; 0xad
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	58d3      	ldr	r3, [r2, r3]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	0010      	movs	r0, r2
 800d712:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	0018      	movs	r0, r3
 800d718:	f001 f89e 	bl	800e858 <USBD_CtlSendStatus>
 800d71c:	e02b      	b.n	800d776 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	23a5      	movs	r3, #165	; 0xa5
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	58d3      	ldr	r3, [r2, r3]
 800d726:	2b05      	cmp	r3, #5
 800d728:	d125      	bne.n	800d776 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	23a5      	movs	r3, #165	; 0xa5
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	2100      	movs	r1, #0
 800d732:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2100      	movs	r1, #0
 800d738:	0018      	movs	r0, r3
 800d73a:	f001 fc76 	bl	800f02a <USBD_LL_StallEP>
 800d73e:	e01a      	b.n	800d776 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	23ad      	movs	r3, #173	; 0xad
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	58d3      	ldr	r3, [r2, r3]
 800d748:	699b      	ldr	r3, [r3, #24]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d011      	beq.n	800d772 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d74e:	68fa      	ldr	r2, [r7, #12]
 800d750:	23a7      	movs	r3, #167	; 0xa7
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800d756:	2b03      	cmp	r3, #3
 800d758:	d10b      	bne.n	800d772 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	23ad      	movs	r3, #173	; 0xad
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	58d3      	ldr	r3, [r2, r3]
 800d762:	699b      	ldr	r3, [r3, #24]
 800d764:	220b      	movs	r2, #11
 800d766:	18ba      	adds	r2, r7, r2
 800d768:	7811      	ldrb	r1, [r2, #0]
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	0010      	movs	r0, r2
 800d76e:	4798      	blx	r3
 800d770:	e001      	b.n	800d776 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d772:	2302      	movs	r3, #2
 800d774:	e000      	b.n	800d778 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	0018      	movs	r0, r3
 800d77a:	46bd      	mov	sp, r7
 800d77c:	b006      	add	sp, #24
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	607a      	str	r2, [r7, #4]
 800d78a:	200b      	movs	r0, #11
 800d78c:	183b      	adds	r3, r7, r0
 800d78e:	1c0a      	adds	r2, r1, #0
 800d790:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d792:	183b      	adds	r3, r7, r0
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d000      	beq.n	800d79c <USBD_LL_DataInStage+0x1c>
 800d79a:	e08e      	b.n	800d8ba <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3314      	adds	r3, #20
 800d7a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	23a5      	movs	r3, #165	; 0xa5
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	58d3      	ldr	r3, [r2, r3]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d164      	bne.n	800d878 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d915      	bls.n	800d7e6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	68da      	ldr	r2, [r3, #12]
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	1ad2      	subs	r2, r2, r3
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	0018      	movs	r0, r3
 800d7d4:	f000 fff6 	bl	800e7c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	2200      	movs	r2, #0
 800d7de:	2100      	movs	r1, #0
 800d7e0:	f001 fd10 	bl	800f204 <USBD_LL_PrepareReceive>
 800d7e4:	e059      	b.n	800d89a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	689a      	ldr	r2, [r3, #8]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	0019      	movs	r1, r3
 800d7f0:	0010      	movs	r0, r2
 800d7f2:	f7f2 fd0f 	bl	8000214 <__aeabi_uidivmod>
 800d7f6:	1e0b      	subs	r3, r1, #0
 800d7f8:	d11f      	bne.n	800d83a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	689a      	ldr	r2, [r3, #8]
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d802:	429a      	cmp	r2, r3
 800d804:	d319      	bcc.n	800d83a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	689a      	ldr	r2, [r3, #8]
 800d80a:	68f9      	ldr	r1, [r7, #12]
 800d80c:	23a6      	movs	r3, #166	; 0xa6
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800d812:	429a      	cmp	r2, r3
 800d814:	d211      	bcs.n	800d83a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2200      	movs	r2, #0
 800d81a:	2100      	movs	r1, #0
 800d81c:	0018      	movs	r0, r3
 800d81e:	f000 ffd1 	bl	800e7c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	23a6      	movs	r3, #166	; 0xa6
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	2100      	movs	r1, #0
 800d82a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	2300      	movs	r3, #0
 800d830:	2200      	movs	r2, #0
 800d832:	2100      	movs	r1, #0
 800d834:	f001 fce6 	bl	800f204 <USBD_LL_PrepareReceive>
 800d838:	e02f      	b.n	800d89a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	23ad      	movs	r3, #173	; 0xad
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	58d3      	ldr	r3, [r2, r3]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00d      	beq.n	800d864 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	23a7      	movs	r3, #167	; 0xa7
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d850:	2b03      	cmp	r3, #3
 800d852:	d107      	bne.n	800d864 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	23ad      	movs	r3, #173	; 0xad
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	58d3      	ldr	r3, [r2, r3]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	0010      	movs	r0, r2
 800d862:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2180      	movs	r1, #128	; 0x80
 800d868:	0018      	movs	r0, r3
 800d86a:	f001 fbde 	bl	800f02a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	0018      	movs	r0, r3
 800d872:	f001 f805 	bl	800e880 <USBD_CtlReceiveStatus>
 800d876:	e010      	b.n	800d89a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	23a5      	movs	r3, #165	; 0xa5
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	58d3      	ldr	r3, [r2, r3]
 800d880:	2b04      	cmp	r3, #4
 800d882:	d005      	beq.n	800d890 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	23a5      	movs	r3, #165	; 0xa5
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d104      	bne.n	800d89a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2180      	movs	r1, #128	; 0x80
 800d894:	0018      	movs	r0, r3
 800d896:	f001 fbc8 	bl	800f02a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	23a8      	movs	r3, #168	; 0xa8
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	5cd3      	ldrb	r3, [r2, r3]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d124      	bne.n	800d8f0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	0018      	movs	r0, r3
 800d8aa:	f7ff fe43 	bl	800d534 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	23a8      	movs	r3, #168	; 0xa8
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	54d1      	strb	r1, [r2, r3]
 800d8b8:	e01a      	b.n	800d8f0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	23ad      	movs	r3, #173	; 0xad
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	58d3      	ldr	r3, [r2, r3]
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d011      	beq.n	800d8ec <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	23a7      	movs	r3, #167	; 0xa7
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d10b      	bne.n	800d8ec <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	23ad      	movs	r3, #173	; 0xad
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	58d3      	ldr	r3, [r2, r3]
 800d8dc:	695b      	ldr	r3, [r3, #20]
 800d8de:	220b      	movs	r2, #11
 800d8e0:	18ba      	adds	r2, r7, r2
 800d8e2:	7811      	ldrb	r1, [r2, #0]
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	0010      	movs	r0, r2
 800d8e8:	4798      	blx	r3
 800d8ea:	e001      	b.n	800d8f0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d8ec:	2302      	movs	r3, #2
 800d8ee:	e000      	b.n	800d8f2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	0018      	movs	r0, r3
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	b006      	add	sp, #24
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	2340      	movs	r3, #64	; 0x40
 800d906:	2200      	movs	r2, #0
 800d908:	2100      	movs	r1, #0
 800d90a:	f001 fb2b 	bl	800ef64 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	23ac      	movs	r3, #172	; 0xac
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	2101      	movs	r1, #1
 800d916:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	23b2      	movs	r3, #178	; 0xb2
 800d91c:	005b      	lsls	r3, r3, #1
 800d91e:	2140      	movs	r1, #64	; 0x40
 800d920:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	2340      	movs	r3, #64	; 0x40
 800d926:	2200      	movs	r2, #0
 800d928:	2180      	movs	r1, #128	; 0x80
 800d92a:	f001 fb1b 	bl	800ef64 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2240      	movs	r2, #64	; 0x40
 800d938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	23a7      	movs	r3, #167	; 0xa7
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	2101      	movs	r1, #1
 800d942:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	23a5      	movs	r3, #165	; 0xa5
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	2100      	movs	r1, #0
 800d94c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	23a9      	movs	r3, #169	; 0xa9
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	2100      	movs	r1, #0
 800d95c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	23ae      	movs	r3, #174	; 0xae
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	58d3      	ldr	r3, [r2, r3]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00a      	beq.n	800d980 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	23ad      	movs	r3, #173	; 0xad
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	58d3      	ldr	r3, [r2, r3]
 800d972:	685a      	ldr	r2, [r3, #4]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	b2d9      	uxtb	r1, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	0018      	movs	r0, r3
 800d97e:	4790      	blx	r2
  }

  return USBD_OK;
 800d980:	2300      	movs	r3, #0
}
 800d982:	0018      	movs	r0, r3
 800d984:	46bd      	mov	sp, r7
 800d986:	b002      	add	sp, #8
 800d988:	bd80      	pop	{r7, pc}

0800d98a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b082      	sub	sp, #8
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
 800d992:	000a      	movs	r2, r1
 800d994:	1cfb      	adds	r3, r7, #3
 800d996:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	1cfa      	adds	r2, r7, #3
 800d99c:	7812      	ldrb	r2, [r2, #0]
 800d99e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	0018      	movs	r0, r3
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	b002      	add	sp, #8
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	23a7      	movs	r3, #167	; 0xa7
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	5cd1      	ldrb	r1, [r2, r3]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4a06      	ldr	r2, [pc, #24]	; (800d9d8 <USBD_LL_Suspend+0x2c>)
 800d9c0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	23a7      	movs	r3, #167	; 0xa7
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	2104      	movs	r1, #4
 800d9ca:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	0018      	movs	r0, r3
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	b002      	add	sp, #8
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	46c0      	nop			; (mov r8, r8)
 800d9d8:	0000029d 	.word	0x0000029d

0800d9dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	23a7      	movs	r3, #167	; 0xa7
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	5cd3      	ldrb	r3, [r2, r3]
 800d9ec:	2b04      	cmp	r3, #4
 800d9ee:	d106      	bne.n	800d9fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a05      	ldr	r2, [pc, #20]	; (800da08 <USBD_LL_Resume+0x2c>)
 800d9f4:	5c99      	ldrb	r1, [r3, r2]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	23a7      	movs	r3, #167	; 0xa7
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	0018      	movs	r0, r3
 800da02:	46bd      	mov	sp, r7
 800da04:	b002      	add	sp, #8
 800da06:	bd80      	pop	{r7, pc}
 800da08:	0000029d 	.word	0x0000029d

0800da0c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	23a7      	movs	r3, #167	; 0xa7
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	5cd3      	ldrb	r3, [r2, r3]
 800da1c:	2b03      	cmp	r3, #3
 800da1e:	d10e      	bne.n	800da3e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	23ad      	movs	r3, #173	; 0xad
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	58d3      	ldr	r3, [r2, r3]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d007      	beq.n	800da3e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	23ad      	movs	r3, #173	; 0xad
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	58d3      	ldr	r3, [r2, r3]
 800da36:	69db      	ldr	r3, [r3, #28]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	0010      	movs	r0, r2
 800da3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da3e:	2300      	movs	r3, #0
}
 800da40:	0018      	movs	r0, r3
 800da42:	46bd      	mov	sp, r7
 800da44:	b002      	add	sp, #8
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da52:	230f      	movs	r3, #15
 800da54:	18fb      	adds	r3, r7, r3
 800da56:	2200      	movs	r2, #0
 800da58:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	001a      	movs	r2, r3
 800da60:	2360      	movs	r3, #96	; 0x60
 800da62:	4013      	ands	r3, r2
 800da64:	2b20      	cmp	r3, #32
 800da66:	d004      	beq.n	800da72 <USBD_StdDevReq+0x2a>
 800da68:	2b40      	cmp	r3, #64	; 0x40
 800da6a:	d002      	beq.n	800da72 <USBD_StdDevReq+0x2a>
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00a      	beq.n	800da86 <USBD_StdDevReq+0x3e>
 800da70:	e04b      	b.n	800db0a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	23ad      	movs	r3, #173	; 0xad
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	58d3      	ldr	r3, [r2, r3]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	0010      	movs	r0, r2
 800da82:	4798      	blx	r3
      break;
 800da84:	e048      	b.n	800db18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	785b      	ldrb	r3, [r3, #1]
 800da8a:	2b09      	cmp	r3, #9
 800da8c:	d835      	bhi.n	800dafa <USBD_StdDevReq+0xb2>
 800da8e:	009a      	lsls	r2, r3, #2
 800da90:	4b25      	ldr	r3, [pc, #148]	; (800db28 <USBD_StdDevReq+0xe0>)
 800da92:	18d3      	adds	r3, r2, r3
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	0011      	movs	r1, r2
 800da9e:	0018      	movs	r0, r3
 800daa0:	f000 fa5a 	bl	800df58 <USBD_GetDescriptor>
          break;
 800daa4:	e030      	b.n	800db08 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	0011      	movs	r1, r2
 800daac:	0018      	movs	r0, r3
 800daae:	f000 fc07 	bl	800e2c0 <USBD_SetAddress>
          break;
 800dab2:	e029      	b.n	800db08 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800dab4:	683a      	ldr	r2, [r7, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	0011      	movs	r1, r2
 800daba:	0018      	movs	r0, r3
 800dabc:	f000 fc54 	bl	800e368 <USBD_SetConfig>
          break;
 800dac0:	e022      	b.n	800db08 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	0011      	movs	r1, r2
 800dac8:	0018      	movs	r0, r3
 800daca:	f000 fcf1 	bl	800e4b0 <USBD_GetConfig>
          break;
 800dace:	e01b      	b.n	800db08 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	0011      	movs	r1, r2
 800dad6:	0018      	movs	r0, r3
 800dad8:	f000 fd24 	bl	800e524 <USBD_GetStatus>
          break;
 800dadc:	e014      	b.n	800db08 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	0011      	movs	r1, r2
 800dae4:	0018      	movs	r0, r3
 800dae6:	f000 fd57 	bl	800e598 <USBD_SetFeature>
          break;
 800daea:	e00d      	b.n	800db08 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800daec:	683a      	ldr	r2, [r7, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	0011      	movs	r1, r2
 800daf2:	0018      	movs	r0, r3
 800daf4:	f000 fd66 	bl	800e5c4 <USBD_ClrFeature>
          break;
 800daf8:	e006      	b.n	800db08 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	0011      	movs	r1, r2
 800db00:	0018      	movs	r0, r3
 800db02:	f000 fdc0 	bl	800e686 <USBD_CtlError>
          break;
 800db06:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800db08:	e006      	b.n	800db18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	0011      	movs	r1, r2
 800db10:	0018      	movs	r0, r3
 800db12:	f000 fdb8 	bl	800e686 <USBD_CtlError>
      break;
 800db16:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800db18:	230f      	movs	r3, #15
 800db1a:	18fb      	adds	r3, r7, r3
 800db1c:	781b      	ldrb	r3, [r3, #0]
}
 800db1e:	0018      	movs	r0, r3
 800db20:	46bd      	mov	sp, r7
 800db22:	b004      	add	sp, #16
 800db24:	bd80      	pop	{r7, pc}
 800db26:	46c0      	nop			; (mov r8, r8)
 800db28:	0800f54c 	.word	0x0800f54c

0800db2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800db2c:	b590      	push	{r4, r7, lr}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db36:	230f      	movs	r3, #15
 800db38:	18fb      	adds	r3, r7, r3
 800db3a:	2200      	movs	r2, #0
 800db3c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	001a      	movs	r2, r3
 800db44:	2360      	movs	r3, #96	; 0x60
 800db46:	4013      	ands	r3, r2
 800db48:	2b20      	cmp	r3, #32
 800db4a:	d003      	beq.n	800db54 <USBD_StdItfReq+0x28>
 800db4c:	2b40      	cmp	r3, #64	; 0x40
 800db4e:	d001      	beq.n	800db54 <USBD_StdItfReq+0x28>
 800db50:	2b00      	cmp	r3, #0
 800db52:	d136      	bne.n	800dbc2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	23a7      	movs	r3, #167	; 0xa7
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	5cd3      	ldrb	r3, [r2, r3]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	2b02      	cmp	r3, #2
 800db60:	d826      	bhi.n	800dbb0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	889b      	ldrh	r3, [r3, #4]
 800db66:	b2db      	uxtb	r3, r3
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d81a      	bhi.n	800dba2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	23ad      	movs	r3, #173	; 0xad
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	58d3      	ldr	r3, [r2, r3]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	220f      	movs	r2, #15
 800db78:	18bc      	adds	r4, r7, r2
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	0010      	movs	r0, r2
 800db80:	4798      	blx	r3
 800db82:	0003      	movs	r3, r0
 800db84:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	88db      	ldrh	r3, [r3, #6]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d117      	bne.n	800dbbe <USBD_StdItfReq+0x92>
 800db8e:	230f      	movs	r3, #15
 800db90:	18fb      	adds	r3, r7, r3
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d112      	bne.n	800dbbe <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	0018      	movs	r0, r3
 800db9c:	f000 fe5c 	bl	800e858 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dba0:	e00d      	b.n	800dbbe <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	0011      	movs	r1, r2
 800dba8:	0018      	movs	r0, r3
 800dbaa:	f000 fd6c 	bl	800e686 <USBD_CtlError>
          break;
 800dbae:	e006      	b.n	800dbbe <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800dbb0:	683a      	ldr	r2, [r7, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	0011      	movs	r1, r2
 800dbb6:	0018      	movs	r0, r3
 800dbb8:	f000 fd65 	bl	800e686 <USBD_CtlError>
          break;
 800dbbc:	e000      	b.n	800dbc0 <USBD_StdItfReq+0x94>
          break;
 800dbbe:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800dbc0:	e006      	b.n	800dbd0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	0011      	movs	r1, r2
 800dbc8:	0018      	movs	r0, r3
 800dbca:	f000 fd5c 	bl	800e686 <USBD_CtlError>
      break;
 800dbce:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	0018      	movs	r0, r3
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	b005      	add	sp, #20
 800dbd8:	bd90      	pop	{r4, r7, pc}

0800dbda <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800dbda:	b5b0      	push	{r4, r5, r7, lr}
 800dbdc:	b084      	sub	sp, #16
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbe4:	230f      	movs	r3, #15
 800dbe6:	18fb      	adds	r3, r7, r3
 800dbe8:	2200      	movs	r2, #0
 800dbea:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	889a      	ldrh	r2, [r3, #4]
 800dbf0:	230e      	movs	r3, #14
 800dbf2:	18fb      	adds	r3, r7, r3
 800dbf4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	001a      	movs	r2, r3
 800dbfc:	2360      	movs	r3, #96	; 0x60
 800dbfe:	4013      	ands	r3, r2
 800dc00:	2b20      	cmp	r3, #32
 800dc02:	d004      	beq.n	800dc0e <USBD_StdEPReq+0x34>
 800dc04:	2b40      	cmp	r3, #64	; 0x40
 800dc06:	d002      	beq.n	800dc0e <USBD_StdEPReq+0x34>
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00a      	beq.n	800dc22 <USBD_StdEPReq+0x48>
 800dc0c:	e195      	b.n	800df3a <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	23ad      	movs	r3, #173	; 0xad
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	58d3      	ldr	r3, [r2, r3]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	6839      	ldr	r1, [r7, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	0010      	movs	r0, r2
 800dc1e:	4798      	blx	r3
      break;
 800dc20:	e192      	b.n	800df48 <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	001a      	movs	r2, r3
 800dc28:	2360      	movs	r3, #96	; 0x60
 800dc2a:	4013      	ands	r3, r2
 800dc2c:	2b20      	cmp	r3, #32
 800dc2e:	d10f      	bne.n	800dc50 <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	23ad      	movs	r3, #173	; 0xad
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	58d3      	ldr	r3, [r2, r3]
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	250f      	movs	r5, #15
 800dc3c:	197c      	adds	r4, r7, r5
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	0010      	movs	r0, r2
 800dc44:	4798      	blx	r3
 800dc46:	0003      	movs	r3, r0
 800dc48:	7023      	strb	r3, [r4, #0]

        return ret;
 800dc4a:	197b      	adds	r3, r7, r5
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	e17e      	b.n	800df4e <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	785b      	ldrb	r3, [r3, #1]
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d054      	beq.n	800dd02 <USBD_StdEPReq+0x128>
 800dc58:	2b03      	cmp	r3, #3
 800dc5a:	d003      	beq.n	800dc64 <USBD_StdEPReq+0x8a>
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d100      	bne.n	800dc62 <USBD_StdEPReq+0x88>
 800dc60:	e097      	b.n	800dd92 <USBD_StdEPReq+0x1b8>
 800dc62:	e162      	b.n	800df2a <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	23a7      	movs	r3, #167	; 0xa7
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	5cd3      	ldrb	r3, [r2, r3]
 800dc6c:	2b02      	cmp	r3, #2
 800dc6e:	d002      	beq.n	800dc76 <USBD_StdEPReq+0x9c>
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	d01f      	beq.n	800dcb4 <USBD_StdEPReq+0xda>
 800dc74:	e03d      	b.n	800dcf2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc76:	230e      	movs	r3, #14
 800dc78:	18fb      	adds	r3, r7, r3
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d012      	beq.n	800dca6 <USBD_StdEPReq+0xcc>
 800dc80:	230e      	movs	r3, #14
 800dc82:	18fb      	adds	r3, r7, r3
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2b80      	cmp	r3, #128	; 0x80
 800dc88:	d00d      	beq.n	800dca6 <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dc8a:	230e      	movs	r3, #14
 800dc8c:	18fb      	adds	r3, r7, r3
 800dc8e:	781a      	ldrb	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	0011      	movs	r1, r2
 800dc94:	0018      	movs	r0, r3
 800dc96:	f001 f9c8 	bl	800f02a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2180      	movs	r1, #128	; 0x80
 800dc9e:	0018      	movs	r0, r3
 800dca0:	f001 f9c3 	bl	800f02a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dca4:	e02c      	b.n	800dd00 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	0011      	movs	r1, r2
 800dcac:	0018      	movs	r0, r3
 800dcae:	f000 fcea 	bl	800e686 <USBD_CtlError>
              break;
 800dcb2:	e025      	b.n	800dd00 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	885b      	ldrh	r3, [r3, #2]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d115      	bne.n	800dce8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800dcbc:	230e      	movs	r3, #14
 800dcbe:	18fb      	adds	r3, r7, r3
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d010      	beq.n	800dce8 <USBD_StdEPReq+0x10e>
 800dcc6:	230e      	movs	r3, #14
 800dcc8:	18fb      	adds	r3, r7, r3
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	2b80      	cmp	r3, #128	; 0x80
 800dcce:	d00b      	beq.n	800dce8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	88db      	ldrh	r3, [r3, #6]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d107      	bne.n	800dce8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800dcd8:	230e      	movs	r3, #14
 800dcda:	18fb      	adds	r3, r7, r3
 800dcdc:	781a      	ldrb	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	0011      	movs	r1, r2
 800dce2:	0018      	movs	r0, r3
 800dce4:	f001 f9a1 	bl	800f02a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	0018      	movs	r0, r3
 800dcec:	f000 fdb4 	bl	800e858 <USBD_CtlSendStatus>

              break;
 800dcf0:	e006      	b.n	800dd00 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	0011      	movs	r1, r2
 800dcf8:	0018      	movs	r0, r3
 800dcfa:	f000 fcc4 	bl	800e686 <USBD_CtlError>
              break;
 800dcfe:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800dd00:	e11a      	b.n	800df38 <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	23a7      	movs	r3, #167	; 0xa7
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	5cd3      	ldrb	r3, [r2, r3]
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	d002      	beq.n	800dd14 <USBD_StdEPReq+0x13a>
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d01f      	beq.n	800dd52 <USBD_StdEPReq+0x178>
 800dd12:	e035      	b.n	800dd80 <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd14:	230e      	movs	r3, #14
 800dd16:	18fb      	adds	r3, r7, r3
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d012      	beq.n	800dd44 <USBD_StdEPReq+0x16a>
 800dd1e:	230e      	movs	r3, #14
 800dd20:	18fb      	adds	r3, r7, r3
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b80      	cmp	r3, #128	; 0x80
 800dd26:	d00d      	beq.n	800dd44 <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dd28:	230e      	movs	r3, #14
 800dd2a:	18fb      	adds	r3, r7, r3
 800dd2c:	781a      	ldrb	r2, [r3, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	0011      	movs	r1, r2
 800dd32:	0018      	movs	r0, r3
 800dd34:	f001 f979 	bl	800f02a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2180      	movs	r1, #128	; 0x80
 800dd3c:	0018      	movs	r0, r3
 800dd3e:	f001 f974 	bl	800f02a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd42:	e025      	b.n	800dd90 <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	0011      	movs	r1, r2
 800dd4a:	0018      	movs	r0, r3
 800dd4c:	f000 fc9b 	bl	800e686 <USBD_CtlError>
              break;
 800dd50:	e01e      	b.n	800dd90 <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	885b      	ldrh	r3, [r3, #2]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d119      	bne.n	800dd8e <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd5a:	230e      	movs	r3, #14
 800dd5c:	18fb      	adds	r3, r7, r3
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	227f      	movs	r2, #127	; 0x7f
 800dd62:	4013      	ands	r3, r2
 800dd64:	d007      	beq.n	800dd76 <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd66:	230e      	movs	r3, #14
 800dd68:	18fb      	adds	r3, r7, r3
 800dd6a:	781a      	ldrb	r2, [r3, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	0011      	movs	r1, r2
 800dd70:	0018      	movs	r0, r3
 800dd72:	f001 f986 	bl	800f082 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	0018      	movs	r0, r3
 800dd7a:	f000 fd6d 	bl	800e858 <USBD_CtlSendStatus>
              }
              break;
 800dd7e:	e006      	b.n	800dd8e <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	0011      	movs	r1, r2
 800dd86:	0018      	movs	r0, r3
 800dd88:	f000 fc7d 	bl	800e686 <USBD_CtlError>
              break;
 800dd8c:	e000      	b.n	800dd90 <USBD_StdEPReq+0x1b6>
              break;
 800dd8e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800dd90:	e0d2      	b.n	800df38 <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	23a7      	movs	r3, #167	; 0xa7
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	5cd3      	ldrb	r3, [r2, r3]
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d002      	beq.n	800dda4 <USBD_StdEPReq+0x1ca>
 800dd9e:	2b03      	cmp	r3, #3
 800dda0:	d03e      	beq.n	800de20 <USBD_StdEPReq+0x246>
 800dda2:	e0ba      	b.n	800df1a <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dda4:	230e      	movs	r3, #14
 800dda6:	18fb      	adds	r3, r7, r3
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00b      	beq.n	800ddc6 <USBD_StdEPReq+0x1ec>
 800ddae:	230e      	movs	r3, #14
 800ddb0:	18fb      	adds	r3, r7, r3
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	2b80      	cmp	r3, #128	; 0x80
 800ddb6:	d006      	beq.n	800ddc6 <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 800ddb8:	683a      	ldr	r2, [r7, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	0011      	movs	r1, r2
 800ddbe:	0018      	movs	r0, r3
 800ddc0:	f000 fc61 	bl	800e686 <USBD_CtlError>
                break;
 800ddc4:	e0b0      	b.n	800df28 <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddc6:	230e      	movs	r3, #14
 800ddc8:	18fb      	adds	r3, r7, r3
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	b25b      	sxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	da0d      	bge.n	800ddee <USBD_StdEPReq+0x214>
 800ddd2:	230e      	movs	r3, #14
 800ddd4:	18fb      	adds	r3, r7, r3
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	227f      	movs	r2, #127	; 0x7f
 800ddda:	401a      	ands	r2, r3
 800dddc:	0013      	movs	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	189b      	adds	r3, r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	3310      	adds	r3, #16
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	18d3      	adds	r3, r2, r3
 800ddea:	3304      	adds	r3, #4
 800ddec:	e00d      	b.n	800de0a <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddee:	230e      	movs	r3, #14
 800ddf0:	18fb      	adds	r3, r7, r3
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	227f      	movs	r2, #127	; 0x7f
 800ddf6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddf8:	0013      	movs	r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	189b      	adds	r3, r3, r2
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	3351      	adds	r3, #81	; 0x51
 800de02:	33ff      	adds	r3, #255	; 0xff
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	18d3      	adds	r3, r2, r3
 800de08:	3304      	adds	r3, #4
 800de0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	2200      	movs	r2, #0
 800de10:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800de12:	68b9      	ldr	r1, [r7, #8]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2202      	movs	r2, #2
 800de18:	0018      	movs	r0, r3
 800de1a:	f000 fcb3 	bl	800e784 <USBD_CtlSendData>
              break;
 800de1e:	e083      	b.n	800df28 <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800de20:	230e      	movs	r3, #14
 800de22:	18fb      	adds	r3, r7, r3
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	b25b      	sxtb	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	da15      	bge.n	800de58 <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800de2c:	230e      	movs	r3, #14
 800de2e:	18fb      	adds	r3, r7, r3
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	220f      	movs	r2, #15
 800de34:	401a      	ands	r2, r3
 800de36:	6879      	ldr	r1, [r7, #4]
 800de38:	0013      	movs	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	189b      	adds	r3, r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	18cb      	adds	r3, r1, r3
 800de42:	3318      	adds	r3, #24
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d11e      	bne.n	800de88 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	0011      	movs	r1, r2
 800de50:	0018      	movs	r0, r3
 800de52:	f000 fc18 	bl	800e686 <USBD_CtlError>
                  break;
 800de56:	e067      	b.n	800df28 <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de58:	230e      	movs	r3, #14
 800de5a:	18fb      	adds	r3, r7, r3
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	220f      	movs	r2, #15
 800de60:	401a      	ands	r2, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	23ac      	movs	r3, #172	; 0xac
 800de66:	0059      	lsls	r1, r3, #1
 800de68:	0013      	movs	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	189b      	adds	r3, r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	18c3      	adds	r3, r0, r3
 800de72:	185b      	adds	r3, r3, r1
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d106      	bne.n	800de88 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	0011      	movs	r1, r2
 800de80:	0018      	movs	r0, r3
 800de82:	f000 fc00 	bl	800e686 <USBD_CtlError>
                  break;
 800de86:	e04f      	b.n	800df28 <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de88:	230e      	movs	r3, #14
 800de8a:	18fb      	adds	r3, r7, r3
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	b25b      	sxtb	r3, r3
 800de90:	2b00      	cmp	r3, #0
 800de92:	da0d      	bge.n	800deb0 <USBD_StdEPReq+0x2d6>
 800de94:	230e      	movs	r3, #14
 800de96:	18fb      	adds	r3, r7, r3
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	227f      	movs	r2, #127	; 0x7f
 800de9c:	401a      	ands	r2, r3
 800de9e:	0013      	movs	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	189b      	adds	r3, r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	3310      	adds	r3, #16
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	18d3      	adds	r3, r2, r3
 800deac:	3304      	adds	r3, #4
 800deae:	e00d      	b.n	800decc <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800deb0:	230e      	movs	r3, #14
 800deb2:	18fb      	adds	r3, r7, r3
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	227f      	movs	r2, #127	; 0x7f
 800deb8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800deba:	0013      	movs	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	189b      	adds	r3, r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	3351      	adds	r3, #81	; 0x51
 800dec4:	33ff      	adds	r3, #255	; 0xff
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	18d3      	adds	r3, r2, r3
 800deca:	3304      	adds	r3, #4
 800decc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dece:	230e      	movs	r3, #14
 800ded0:	18fb      	adds	r3, r7, r3
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d004      	beq.n	800dee2 <USBD_StdEPReq+0x308>
 800ded8:	230e      	movs	r3, #14
 800deda:	18fb      	adds	r3, r7, r3
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2b80      	cmp	r3, #128	; 0x80
 800dee0:	d103      	bne.n	800deea <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	e010      	b.n	800df0c <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800deea:	230e      	movs	r3, #14
 800deec:	18fb      	adds	r3, r7, r3
 800deee:	781a      	ldrb	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	0011      	movs	r1, r2
 800def4:	0018      	movs	r0, r3
 800def6:	f001 f8f0 	bl	800f0da <USBD_LL_IsStallEP>
 800defa:	1e03      	subs	r3, r0, #0
 800defc:	d003      	beq.n	800df06 <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	2201      	movs	r2, #1
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	e002      	b.n	800df0c <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800df0c:	68b9      	ldr	r1, [r7, #8]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2202      	movs	r2, #2
 800df12:	0018      	movs	r0, r3
 800df14:	f000 fc36 	bl	800e784 <USBD_CtlSendData>
              break;
 800df18:	e006      	b.n	800df28 <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 800df1a:	683a      	ldr	r2, [r7, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	0011      	movs	r1, r2
 800df20:	0018      	movs	r0, r3
 800df22:	f000 fbb0 	bl	800e686 <USBD_CtlError>
              break;
 800df26:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800df28:	e006      	b.n	800df38 <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 800df2a:	683a      	ldr	r2, [r7, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	0011      	movs	r1, r2
 800df30:	0018      	movs	r0, r3
 800df32:	f000 fba8 	bl	800e686 <USBD_CtlError>
          break;
 800df36:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800df38:	e006      	b.n	800df48 <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	0011      	movs	r1, r2
 800df40:	0018      	movs	r0, r3
 800df42:	f000 fba0 	bl	800e686 <USBD_CtlError>
      break;
 800df46:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800df48:	230f      	movs	r3, #15
 800df4a:	18fb      	adds	r3, r7, r3
 800df4c:	781b      	ldrb	r3, [r3, #0]
}
 800df4e:	0018      	movs	r0, r3
 800df50:	46bd      	mov	sp, r7
 800df52:	b004      	add	sp, #16
 800df54:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df62:	2308      	movs	r3, #8
 800df64:	18fb      	adds	r3, r7, r3
 800df66:	2200      	movs	r2, #0
 800df68:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800df6a:	2300      	movs	r3, #0
 800df6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800df6e:	230b      	movs	r3, #11
 800df70:	18fb      	adds	r3, r7, r3
 800df72:	2200      	movs	r2, #0
 800df74:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	885b      	ldrh	r3, [r3, #2]
 800df7a:	0a1b      	lsrs	r3, r3, #8
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	2b07      	cmp	r3, #7
 800df80:	d900      	bls.n	800df84 <USBD_GetDescriptor+0x2c>
 800df82:	e159      	b.n	800e238 <USBD_GetDescriptor+0x2e0>
 800df84:	009a      	lsls	r2, r3, #2
 800df86:	4bcc      	ldr	r3, [pc, #816]	; (800e2b8 <USBD_GetDescriptor+0x360>)
 800df88:	18d3      	adds	r3, r2, r3
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	23ac      	movs	r3, #172	; 0xac
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	58d3      	ldr	r3, [r2, r3]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	7c12      	ldrb	r2, [r2, #16]
 800df9c:	2108      	movs	r1, #8
 800df9e:	1879      	adds	r1, r7, r1
 800dfa0:	0010      	movs	r0, r2
 800dfa2:	4798      	blx	r3
 800dfa4:	0003      	movs	r3, r0
 800dfa6:	60fb      	str	r3, [r7, #12]
      break;
 800dfa8:	e153      	b.n	800e252 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	7c1b      	ldrb	r3, [r3, #16]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d10f      	bne.n	800dfd2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	23ad      	movs	r3, #173	; 0xad
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	58d3      	ldr	r3, [r2, r3]
 800dfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfbc:	2208      	movs	r2, #8
 800dfbe:	18ba      	adds	r2, r7, r2
 800dfc0:	0010      	movs	r0, r2
 800dfc2:	4798      	blx	r3
 800dfc4:	0003      	movs	r3, r0
 800dfc6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	2202      	movs	r2, #2
 800dfce:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dfd0:	e13f      	b.n	800e252 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	23ad      	movs	r3, #173	; 0xad
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	58d3      	ldr	r3, [r2, r3]
 800dfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfdc:	2208      	movs	r2, #8
 800dfde:	18ba      	adds	r2, r7, r2
 800dfe0:	0010      	movs	r0, r2
 800dfe2:	4798      	blx	r3
 800dfe4:	0003      	movs	r3, r0
 800dfe6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	3301      	adds	r3, #1
 800dfec:	2202      	movs	r2, #2
 800dfee:	701a      	strb	r2, [r3, #0]
      break;
 800dff0:	e12f      	b.n	800e252 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	885b      	ldrh	r3, [r3, #2]
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	2b05      	cmp	r3, #5
 800dffa:	d900      	bls.n	800dffe <USBD_GetDescriptor+0xa6>
 800dffc:	e0d0      	b.n	800e1a0 <USBD_GetDescriptor+0x248>
 800dffe:	009a      	lsls	r2, r3, #2
 800e000:	4bae      	ldr	r3, [pc, #696]	; (800e2bc <USBD_GetDescriptor+0x364>)
 800e002:	18d3      	adds	r3, r2, r3
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	23ac      	movs	r3, #172	; 0xac
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	58d3      	ldr	r3, [r2, r3]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d00d      	beq.n	800e032 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	23ac      	movs	r3, #172	; 0xac
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	58d3      	ldr	r3, [r2, r3]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	7c12      	ldrb	r2, [r2, #16]
 800e024:	2108      	movs	r1, #8
 800e026:	1879      	adds	r1, r7, r1
 800e028:	0010      	movs	r0, r2
 800e02a:	4798      	blx	r3
 800e02c:	0003      	movs	r3, r0
 800e02e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e030:	e0c3      	b.n	800e1ba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	0011      	movs	r1, r2
 800e038:	0018      	movs	r0, r3
 800e03a:	f000 fb24 	bl	800e686 <USBD_CtlError>
            err++;
 800e03e:	210b      	movs	r1, #11
 800e040:	187b      	adds	r3, r7, r1
 800e042:	781a      	ldrb	r2, [r3, #0]
 800e044:	187b      	adds	r3, r7, r1
 800e046:	3201      	adds	r2, #1
 800e048:	701a      	strb	r2, [r3, #0]
          break;
 800e04a:	e0b6      	b.n	800e1ba <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	23ac      	movs	r3, #172	; 0xac
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	58d3      	ldr	r3, [r2, r3]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00d      	beq.n	800e076 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	23ac      	movs	r3, #172	; 0xac
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	58d3      	ldr	r3, [r2, r3]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	7c12      	ldrb	r2, [r2, #16]
 800e068:	2108      	movs	r1, #8
 800e06a:	1879      	adds	r1, r7, r1
 800e06c:	0010      	movs	r0, r2
 800e06e:	4798      	blx	r3
 800e070:	0003      	movs	r3, r0
 800e072:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e074:	e0a1      	b.n	800e1ba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	0011      	movs	r1, r2
 800e07c:	0018      	movs	r0, r3
 800e07e:	f000 fb02 	bl	800e686 <USBD_CtlError>
            err++;
 800e082:	210b      	movs	r1, #11
 800e084:	187b      	adds	r3, r7, r1
 800e086:	781a      	ldrb	r2, [r3, #0]
 800e088:	187b      	adds	r3, r7, r1
 800e08a:	3201      	adds	r2, #1
 800e08c:	701a      	strb	r2, [r3, #0]
          break;
 800e08e:	e094      	b.n	800e1ba <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	23ac      	movs	r3, #172	; 0xac
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	58d3      	ldr	r3, [r2, r3]
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00d      	beq.n	800e0ba <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	23ac      	movs	r3, #172	; 0xac
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	58d3      	ldr	r3, [r2, r3]
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	7c12      	ldrb	r2, [r2, #16]
 800e0ac:	2108      	movs	r1, #8
 800e0ae:	1879      	adds	r1, r7, r1
 800e0b0:	0010      	movs	r0, r2
 800e0b2:	4798      	blx	r3
 800e0b4:	0003      	movs	r3, r0
 800e0b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0b8:	e07f      	b.n	800e1ba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	0011      	movs	r1, r2
 800e0c0:	0018      	movs	r0, r3
 800e0c2:	f000 fae0 	bl	800e686 <USBD_CtlError>
            err++;
 800e0c6:	210b      	movs	r1, #11
 800e0c8:	187b      	adds	r3, r7, r1
 800e0ca:	781a      	ldrb	r2, [r3, #0]
 800e0cc:	187b      	adds	r3, r7, r1
 800e0ce:	3201      	adds	r2, #1
 800e0d0:	701a      	strb	r2, [r3, #0]
          break;
 800e0d2:	e072      	b.n	800e1ba <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	23ac      	movs	r3, #172	; 0xac
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	58d3      	ldr	r3, [r2, r3]
 800e0dc:	691b      	ldr	r3, [r3, #16]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00d      	beq.n	800e0fe <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	23ac      	movs	r3, #172	; 0xac
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	58d3      	ldr	r3, [r2, r3]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	7c12      	ldrb	r2, [r2, #16]
 800e0f0:	2108      	movs	r1, #8
 800e0f2:	1879      	adds	r1, r7, r1
 800e0f4:	0010      	movs	r0, r2
 800e0f6:	4798      	blx	r3
 800e0f8:	0003      	movs	r3, r0
 800e0fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0fc:	e05d      	b.n	800e1ba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	0011      	movs	r1, r2
 800e104:	0018      	movs	r0, r3
 800e106:	f000 fabe 	bl	800e686 <USBD_CtlError>
            err++;
 800e10a:	210b      	movs	r1, #11
 800e10c:	187b      	adds	r3, r7, r1
 800e10e:	781a      	ldrb	r2, [r3, #0]
 800e110:	187b      	adds	r3, r7, r1
 800e112:	3201      	adds	r2, #1
 800e114:	701a      	strb	r2, [r3, #0]
          break;
 800e116:	e050      	b.n	800e1ba <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	23ac      	movs	r3, #172	; 0xac
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	58d3      	ldr	r3, [r2, r3]
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00d      	beq.n	800e142 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	23ac      	movs	r3, #172	; 0xac
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	58d3      	ldr	r3, [r2, r3]
 800e12e:	695b      	ldr	r3, [r3, #20]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	7c12      	ldrb	r2, [r2, #16]
 800e134:	2108      	movs	r1, #8
 800e136:	1879      	adds	r1, r7, r1
 800e138:	0010      	movs	r0, r2
 800e13a:	4798      	blx	r3
 800e13c:	0003      	movs	r3, r0
 800e13e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e140:	e03b      	b.n	800e1ba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	0011      	movs	r1, r2
 800e148:	0018      	movs	r0, r3
 800e14a:	f000 fa9c 	bl	800e686 <USBD_CtlError>
            err++;
 800e14e:	210b      	movs	r1, #11
 800e150:	187b      	adds	r3, r7, r1
 800e152:	781a      	ldrb	r2, [r3, #0]
 800e154:	187b      	adds	r3, r7, r1
 800e156:	3201      	adds	r2, #1
 800e158:	701a      	strb	r2, [r3, #0]
          break;
 800e15a:	e02e      	b.n	800e1ba <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	23ac      	movs	r3, #172	; 0xac
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	58d3      	ldr	r3, [r2, r3]
 800e164:	699b      	ldr	r3, [r3, #24]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00d      	beq.n	800e186 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	23ac      	movs	r3, #172	; 0xac
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	58d3      	ldr	r3, [r2, r3]
 800e172:	699b      	ldr	r3, [r3, #24]
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	7c12      	ldrb	r2, [r2, #16]
 800e178:	2108      	movs	r1, #8
 800e17a:	1879      	adds	r1, r7, r1
 800e17c:	0010      	movs	r0, r2
 800e17e:	4798      	blx	r3
 800e180:	0003      	movs	r3, r0
 800e182:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e184:	e019      	b.n	800e1ba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800e186:	683a      	ldr	r2, [r7, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	0011      	movs	r1, r2
 800e18c:	0018      	movs	r0, r3
 800e18e:	f000 fa7a 	bl	800e686 <USBD_CtlError>
            err++;
 800e192:	210b      	movs	r1, #11
 800e194:	187b      	adds	r3, r7, r1
 800e196:	781a      	ldrb	r2, [r3, #0]
 800e198:	187b      	adds	r3, r7, r1
 800e19a:	3201      	adds	r2, #1
 800e19c:	701a      	strb	r2, [r3, #0]
          break;
 800e19e:	e00c      	b.n	800e1ba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	0011      	movs	r1, r2
 800e1a6:	0018      	movs	r0, r3
 800e1a8:	f000 fa6d 	bl	800e686 <USBD_CtlError>
          err++;
 800e1ac:	210b      	movs	r1, #11
 800e1ae:	187b      	adds	r3, r7, r1
 800e1b0:	781a      	ldrb	r2, [r3, #0]
 800e1b2:	187b      	adds	r3, r7, r1
 800e1b4:	3201      	adds	r2, #1
 800e1b6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800e1b8:	e04b      	b.n	800e252 <USBD_GetDescriptor+0x2fa>
 800e1ba:	e04a      	b.n	800e252 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7c1b      	ldrb	r3, [r3, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10b      	bne.n	800e1dc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	23ad      	movs	r3, #173	; 0xad
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	58d3      	ldr	r3, [r2, r3]
 800e1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ce:	2208      	movs	r2, #8
 800e1d0:	18ba      	adds	r2, r7, r2
 800e1d2:	0010      	movs	r0, r2
 800e1d4:	4798      	blx	r3
 800e1d6:	0003      	movs	r3, r0
 800e1d8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1da:	e03a      	b.n	800e252 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	0011      	movs	r1, r2
 800e1e2:	0018      	movs	r0, r3
 800e1e4:	f000 fa4f 	bl	800e686 <USBD_CtlError>
        err++;
 800e1e8:	210b      	movs	r1, #11
 800e1ea:	187b      	adds	r3, r7, r1
 800e1ec:	781a      	ldrb	r2, [r3, #0]
 800e1ee:	187b      	adds	r3, r7, r1
 800e1f0:	3201      	adds	r2, #1
 800e1f2:	701a      	strb	r2, [r3, #0]
      break;
 800e1f4:	e02d      	b.n	800e252 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	7c1b      	ldrb	r3, [r3, #16]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10f      	bne.n	800e21e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	23ad      	movs	r3, #173	; 0xad
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	58d3      	ldr	r3, [r2, r3]
 800e206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e208:	2208      	movs	r2, #8
 800e20a:	18ba      	adds	r2, r7, r2
 800e20c:	0010      	movs	r0, r2
 800e20e:	4798      	blx	r3
 800e210:	0003      	movs	r3, r0
 800e212:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	3301      	adds	r3, #1
 800e218:	2207      	movs	r2, #7
 800e21a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e21c:	e019      	b.n	800e252 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800e21e:	683a      	ldr	r2, [r7, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	0011      	movs	r1, r2
 800e224:	0018      	movs	r0, r3
 800e226:	f000 fa2e 	bl	800e686 <USBD_CtlError>
        err++;
 800e22a:	210b      	movs	r1, #11
 800e22c:	187b      	adds	r3, r7, r1
 800e22e:	781a      	ldrb	r2, [r3, #0]
 800e230:	187b      	adds	r3, r7, r1
 800e232:	3201      	adds	r2, #1
 800e234:	701a      	strb	r2, [r3, #0]
      break;
 800e236:	e00c      	b.n	800e252 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800e238:	683a      	ldr	r2, [r7, #0]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	0011      	movs	r1, r2
 800e23e:	0018      	movs	r0, r3
 800e240:	f000 fa21 	bl	800e686 <USBD_CtlError>
      err++;
 800e244:	210b      	movs	r1, #11
 800e246:	187b      	adds	r3, r7, r1
 800e248:	781a      	ldrb	r2, [r3, #0]
 800e24a:	187b      	adds	r3, r7, r1
 800e24c:	3201      	adds	r2, #1
 800e24e:	701a      	strb	r2, [r3, #0]
      break;
 800e250:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800e252:	230b      	movs	r3, #11
 800e254:	18fb      	adds	r3, r7, r3
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d128      	bne.n	800e2ae <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e25c:	2308      	movs	r3, #8
 800e25e:	18fb      	adds	r3, r7, r3
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d01a      	beq.n	800e29c <USBD_GetDescriptor+0x344>
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	88db      	ldrh	r3, [r3, #6]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d016      	beq.n	800e29c <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	88da      	ldrh	r2, [r3, #6]
 800e272:	2308      	movs	r3, #8
 800e274:	18fb      	adds	r3, r7, r3
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	1c18      	adds	r0, r3, #0
 800e27a:	1c11      	adds	r1, r2, #0
 800e27c:	b28a      	uxth	r2, r1
 800e27e:	b283      	uxth	r3, r0
 800e280:	429a      	cmp	r2, r3
 800e282:	d900      	bls.n	800e286 <USBD_GetDescriptor+0x32e>
 800e284:	1c01      	adds	r1, r0, #0
 800e286:	b28a      	uxth	r2, r1
 800e288:	2108      	movs	r1, #8
 800e28a:	187b      	adds	r3, r7, r1
 800e28c:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e28e:	187b      	adds	r3, r7, r1
 800e290:	881a      	ldrh	r2, [r3, #0]
 800e292:	68f9      	ldr	r1, [r7, #12]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	0018      	movs	r0, r3
 800e298:	f000 fa74 	bl	800e784 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	88db      	ldrh	r3, [r3, #6]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d105      	bne.n	800e2b0 <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	0018      	movs	r0, r3
 800e2a8:	f000 fad6 	bl	800e858 <USBD_CtlSendStatus>
 800e2ac:	e000      	b.n	800e2b0 <USBD_GetDescriptor+0x358>
    return;
 800e2ae:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	b004      	add	sp, #16
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	46c0      	nop			; (mov r8, r8)
 800e2b8:	0800f574 	.word	0x0800f574
 800e2bc:	0800f594 	.word	0x0800f594

0800e2c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e2c0:	b590      	push	{r4, r7, lr}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	889b      	ldrh	r3, [r3, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d13d      	bne.n	800e34e <USBD_SetAddress+0x8e>
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	88db      	ldrh	r3, [r3, #6]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d139      	bne.n	800e34e <USBD_SetAddress+0x8e>
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	885b      	ldrh	r3, [r3, #2]
 800e2de:	2b7f      	cmp	r3, #127	; 0x7f
 800e2e0:	d835      	bhi.n	800e34e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	885b      	ldrh	r3, [r3, #2]
 800e2e6:	b2da      	uxtb	r2, r3
 800e2e8:	230f      	movs	r3, #15
 800e2ea:	18fb      	adds	r3, r7, r3
 800e2ec:	217f      	movs	r1, #127	; 0x7f
 800e2ee:	400a      	ands	r2, r1
 800e2f0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	23a7      	movs	r3, #167	; 0xa7
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	5cd3      	ldrb	r3, [r2, r3]
 800e2fa:	2b03      	cmp	r3, #3
 800e2fc:	d106      	bne.n	800e30c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800e2fe:	683a      	ldr	r2, [r7, #0]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	0011      	movs	r1, r2
 800e304:	0018      	movs	r0, r3
 800e306:	f000 f9be 	bl	800e686 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e30a:	e026      	b.n	800e35a <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	240f      	movs	r4, #15
 800e310:	193a      	adds	r2, r7, r4
 800e312:	4914      	ldr	r1, [pc, #80]	; (800e364 <USBD_SetAddress+0xa4>)
 800e314:	7812      	ldrb	r2, [r2, #0]
 800e316:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e318:	193b      	adds	r3, r7, r4
 800e31a:	781a      	ldrb	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	0011      	movs	r1, r2
 800e320:	0018      	movs	r0, r3
 800e322:	f000 ff0b 	bl	800f13c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	0018      	movs	r0, r3
 800e32a:	f000 fa95 	bl	800e858 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e32e:	193b      	adds	r3, r7, r4
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d005      	beq.n	800e342 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	23a7      	movs	r3, #167	; 0xa7
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	2102      	movs	r1, #2
 800e33e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e340:	e00b      	b.n	800e35a <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	23a7      	movs	r3, #167	; 0xa7
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	2101      	movs	r1, #1
 800e34a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e34c:	e005      	b.n	800e35a <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e34e:	683a      	ldr	r2, [r7, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	0011      	movs	r1, r2
 800e354:	0018      	movs	r0, r3
 800e356:	f000 f996 	bl	800e686 <USBD_CtlError>
  }
}
 800e35a:	46c0      	nop			; (mov r8, r8)
 800e35c:	46bd      	mov	sp, r7
 800e35e:	b005      	add	sp, #20
 800e360:	bd90      	pop	{r4, r7, pc}
 800e362:	46c0      	nop			; (mov r8, r8)
 800e364:	0000029e 	.word	0x0000029e

0800e368 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	885b      	ldrh	r3, [r3, #2]
 800e376:	b2da      	uxtb	r2, r3
 800e378:	4b4c      	ldr	r3, [pc, #304]	; (800e4ac <USBD_SetConfig+0x144>)
 800e37a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e37c:	4b4b      	ldr	r3, [pc, #300]	; (800e4ac <USBD_SetConfig+0x144>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d906      	bls.n	800e392 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	0011      	movs	r1, r2
 800e38a:	0018      	movs	r0, r3
 800e38c:	f000 f97b 	bl	800e686 <USBD_CtlError>
 800e390:	e088      	b.n	800e4a4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	23a7      	movs	r3, #167	; 0xa7
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	5cd3      	ldrb	r3, [r2, r3]
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d002      	beq.n	800e3a4 <USBD_SetConfig+0x3c>
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	d029      	beq.n	800e3f6 <USBD_SetConfig+0x8e>
 800e3a2:	e071      	b.n	800e488 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e3a4:	4b41      	ldr	r3, [pc, #260]	; (800e4ac <USBD_SetConfig+0x144>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d01f      	beq.n	800e3ec <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800e3ac:	4b3f      	ldr	r3, [pc, #252]	; (800e4ac <USBD_SetConfig+0x144>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	001a      	movs	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	23a7      	movs	r3, #167	; 0xa7
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	2103      	movs	r1, #3
 800e3be:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e3c0:	4b3a      	ldr	r3, [pc, #232]	; (800e4ac <USBD_SetConfig+0x144>)
 800e3c2:	781a      	ldrb	r2, [r3, #0]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	0011      	movs	r1, r2
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	f7ff f8bc 	bl	800d546 <USBD_SetClassConfig>
 800e3ce:	0003      	movs	r3, r0
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d106      	bne.n	800e3e2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	0011      	movs	r1, r2
 800e3da:	0018      	movs	r0, r3
 800e3dc:	f000 f953 	bl	800e686 <USBD_CtlError>
            return;
 800e3e0:	e060      	b.n	800e4a4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	0018      	movs	r0, r3
 800e3e6:	f000 fa37 	bl	800e858 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e3ea:	e05b      	b.n	800e4a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	0018      	movs	r0, r3
 800e3f0:	f000 fa32 	bl	800e858 <USBD_CtlSendStatus>
        break;
 800e3f4:	e056      	b.n	800e4a4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e3f6:	4b2d      	ldr	r3, [pc, #180]	; (800e4ac <USBD_SetConfig+0x144>)
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d115      	bne.n	800e42a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	23a7      	movs	r3, #167	; 0xa7
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	2102      	movs	r1, #2
 800e406:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800e408:	4b28      	ldr	r3, [pc, #160]	; (800e4ac <USBD_SetConfig+0x144>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	001a      	movs	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e412:	4b26      	ldr	r3, [pc, #152]	; (800e4ac <USBD_SetConfig+0x144>)
 800e414:	781a      	ldrb	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	0011      	movs	r1, r2
 800e41a:	0018      	movs	r0, r3
 800e41c:	f7ff f8bb 	bl	800d596 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	0018      	movs	r0, r3
 800e424:	f000 fa18 	bl	800e858 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e428:	e03c      	b.n	800e4a4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800e42a:	4b20      	ldr	r3, [pc, #128]	; (800e4ac <USBD_SetConfig+0x144>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	001a      	movs	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d022      	beq.n	800e47e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	b2da      	uxtb	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	0011      	movs	r1, r2
 800e442:	0018      	movs	r0, r3
 800e444:	f7ff f8a7 	bl	800d596 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e448:	4b18      	ldr	r3, [pc, #96]	; (800e4ac <USBD_SetConfig+0x144>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	001a      	movs	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e452:	4b16      	ldr	r3, [pc, #88]	; (800e4ac <USBD_SetConfig+0x144>)
 800e454:	781a      	ldrb	r2, [r3, #0]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	0011      	movs	r1, r2
 800e45a:	0018      	movs	r0, r3
 800e45c:	f7ff f873 	bl	800d546 <USBD_SetClassConfig>
 800e460:	0003      	movs	r3, r0
 800e462:	2b02      	cmp	r3, #2
 800e464:	d106      	bne.n	800e474 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800e466:	683a      	ldr	r2, [r7, #0]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	0011      	movs	r1, r2
 800e46c:	0018      	movs	r0, r3
 800e46e:	f000 f90a 	bl	800e686 <USBD_CtlError>
            return;
 800e472:	e017      	b.n	800e4a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	0018      	movs	r0, r3
 800e478:	f000 f9ee 	bl	800e858 <USBD_CtlSendStatus>
        break;
 800e47c:	e012      	b.n	800e4a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	0018      	movs	r0, r3
 800e482:	f000 f9e9 	bl	800e858 <USBD_CtlSendStatus>
        break;
 800e486:	e00d      	b.n	800e4a4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	0011      	movs	r1, r2
 800e48e:	0018      	movs	r0, r3
 800e490:	f000 f8f9 	bl	800e686 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e494:	4b05      	ldr	r3, [pc, #20]	; (800e4ac <USBD_SetConfig+0x144>)
 800e496:	781a      	ldrb	r2, [r3, #0]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	0011      	movs	r1, r2
 800e49c:	0018      	movs	r0, r3
 800e49e:	f7ff f87a 	bl	800d596 <USBD_ClrClassConfig>
        break;
 800e4a2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	b002      	add	sp, #8
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	46c0      	nop			; (mov r8, r8)
 800e4ac:	2000031c 	.word	0x2000031c

0800e4b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	88db      	ldrh	r3, [r3, #6]
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d006      	beq.n	800e4d0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800e4c2:	683a      	ldr	r2, [r7, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	0011      	movs	r1, r2
 800e4c8:	0018      	movs	r0, r3
 800e4ca:	f000 f8dc 	bl	800e686 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e4ce:	e025      	b.n	800e51c <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	23a7      	movs	r3, #167	; 0xa7
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	5cd3      	ldrb	r3, [r2, r3]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	db18      	blt.n	800e50e <USBD_GetConfig+0x5e>
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	dd02      	ble.n	800e4e6 <USBD_GetConfig+0x36>
 800e4e0:	2b03      	cmp	r3, #3
 800e4e2:	d00c      	beq.n	800e4fe <USBD_GetConfig+0x4e>
 800e4e4:	e013      	b.n	800e50e <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	0019      	movs	r1, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	0018      	movs	r0, r3
 800e4f8:	f000 f944 	bl	800e784 <USBD_CtlSendData>
        break;
 800e4fc:	e00e      	b.n	800e51c <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	1d19      	adds	r1, r3, #4
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2201      	movs	r2, #1
 800e506:	0018      	movs	r0, r3
 800e508:	f000 f93c 	bl	800e784 <USBD_CtlSendData>
        break;
 800e50c:	e006      	b.n	800e51c <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	0011      	movs	r1, r2
 800e514:	0018      	movs	r0, r3
 800e516:	f000 f8b6 	bl	800e686 <USBD_CtlError>
        break;
 800e51a:	46c0      	nop			; (mov r8, r8)
}
 800e51c:	46c0      	nop			; (mov r8, r8)
 800e51e:	46bd      	mov	sp, r7
 800e520:	b002      	add	sp, #8
 800e522:	bd80      	pop	{r7, pc}

0800e524 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	23a7      	movs	r3, #167	; 0xa7
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	5cd3      	ldrb	r3, [r2, r3]
 800e536:	3b01      	subs	r3, #1
 800e538:	2b02      	cmp	r3, #2
 800e53a:	d822      	bhi.n	800e582 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	88db      	ldrh	r3, [r3, #6]
 800e540:	2b02      	cmp	r3, #2
 800e542:	d006      	beq.n	800e552 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800e544:	683a      	ldr	r2, [r7, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	0011      	movs	r1, r2
 800e54a:	0018      	movs	r0, r3
 800e54c:	f000 f89b 	bl	800e686 <USBD_CtlError>
        break;
 800e550:	e01e      	b.n	800e590 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	23a9      	movs	r3, #169	; 0xa9
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	58d3      	ldr	r3, [r2, r3]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d005      	beq.n	800e570 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	2202      	movs	r2, #2
 800e56a:	431a      	orrs	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	330c      	adds	r3, #12
 800e574:	0019      	movs	r1, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2202      	movs	r2, #2
 800e57a:	0018      	movs	r0, r3
 800e57c:	f000 f902 	bl	800e784 <USBD_CtlSendData>
      break;
 800e580:	e006      	b.n	800e590 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800e582:	683a      	ldr	r2, [r7, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	0011      	movs	r1, r2
 800e588:	0018      	movs	r0, r3
 800e58a:	f000 f87c 	bl	800e686 <USBD_CtlError>
      break;
 800e58e:	46c0      	nop			; (mov r8, r8)
  }
}
 800e590:	46c0      	nop			; (mov r8, r8)
 800e592:	46bd      	mov	sp, r7
 800e594:	b002      	add	sp, #8
 800e596:	bd80      	pop	{r7, pc}

0800e598 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	885b      	ldrh	r3, [r3, #2]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d108      	bne.n	800e5bc <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	23a9      	movs	r3, #169	; 0xa9
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	0018      	movs	r0, r3
 800e5b8:	f000 f94e 	bl	800e858 <USBD_CtlSendStatus>
  }
}
 800e5bc:	46c0      	nop			; (mov r8, r8)
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	b002      	add	sp, #8
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	23a7      	movs	r3, #167	; 0xa7
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	5cd3      	ldrb	r3, [r2, r3]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	d80d      	bhi.n	800e5f8 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	885b      	ldrh	r3, [r3, #2]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d110      	bne.n	800e606 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	23a9      	movs	r3, #169	; 0xa9
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	0018      	movs	r0, r3
 800e5f2:	f000 f931 	bl	800e858 <USBD_CtlSendStatus>
      }
      break;
 800e5f6:	e006      	b.n	800e606 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	0011      	movs	r1, r2
 800e5fe:	0018      	movs	r0, r3
 800e600:	f000 f841 	bl	800e686 <USBD_CtlError>
      break;
 800e604:	e000      	b.n	800e608 <USBD_ClrFeature+0x44>
      break;
 800e606:	46c0      	nop			; (mov r8, r8)
  }
}
 800e608:	46c0      	nop			; (mov r8, r8)
 800e60a:	46bd      	mov	sp, r7
 800e60c:	b002      	add	sp, #8
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	781a      	ldrb	r2, [r3, #0]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	785a      	ldrb	r2, [r3, #1]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	3302      	adds	r3, #2
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	b29a      	uxth	r2, r3
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	3303      	adds	r3, #3
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	b29b      	uxth	r3, r3
 800e63a:	021b      	lsls	r3, r3, #8
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	18d3      	adds	r3, r2, r3
 800e640:	b29a      	uxth	r2, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	3304      	adds	r3, #4
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	3305      	adds	r3, #5
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	b29b      	uxth	r3, r3
 800e656:	021b      	lsls	r3, r3, #8
 800e658:	b29b      	uxth	r3, r3
 800e65a:	18d3      	adds	r3, r2, r3
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	3306      	adds	r3, #6
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	b29a      	uxth	r2, r3
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	3307      	adds	r3, #7
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	b29b      	uxth	r3, r3
 800e672:	021b      	lsls	r3, r3, #8
 800e674:	b29b      	uxth	r3, r3
 800e676:	18d3      	adds	r3, r2, r3
 800e678:	b29a      	uxth	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	80da      	strh	r2, [r3, #6]

}
 800e67e:	46c0      	nop			; (mov r8, r8)
 800e680:	46bd      	mov	sp, r7
 800e682:	b002      	add	sp, #8
 800e684:	bd80      	pop	{r7, pc}

0800e686 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b082      	sub	sp, #8
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2180      	movs	r1, #128	; 0x80
 800e694:	0018      	movs	r0, r3
 800e696:	f000 fcc8 	bl	800f02a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2100      	movs	r1, #0
 800e69e:	0018      	movs	r0, r3
 800e6a0:	f000 fcc3 	bl	800f02a <USBD_LL_StallEP>
}
 800e6a4:	46c0      	nop			; (mov r8, r8)
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	b002      	add	sp, #8
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e6ac:	b590      	push	{r4, r7, lr}
 800e6ae:	b087      	sub	sp, #28
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e6b8:	2317      	movs	r3, #23
 800e6ba:	18fb      	adds	r3, r7, r3
 800e6bc:	2200      	movs	r2, #0
 800e6be:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d03d      	beq.n	800e742 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	0018      	movs	r0, r3
 800e6ca:	f000 f83e 	bl	800e74a <USBD_GetLen>
 800e6ce:	0003      	movs	r3, r0
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	18db      	adds	r3, r3, r3
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e6dc:	2017      	movs	r0, #23
 800e6de:	183b      	adds	r3, r7, r0
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	183a      	adds	r2, r7, r0
 800e6e4:	1c59      	adds	r1, r3, #1
 800e6e6:	7011      	strb	r1, [r2, #0]
 800e6e8:	001a      	movs	r2, r3
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	189b      	adds	r3, r3, r2
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	7812      	ldrb	r2, [r2, #0]
 800e6f2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e6f4:	183b      	adds	r3, r7, r0
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	183a      	adds	r2, r7, r0
 800e6fa:	1c59      	adds	r1, r3, #1
 800e6fc:	7011      	strb	r1, [r2, #0]
 800e6fe:	001a      	movs	r2, r3
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	189b      	adds	r3, r3, r2
 800e704:	2203      	movs	r2, #3
 800e706:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e708:	e017      	b.n	800e73a <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	1c5a      	adds	r2, r3, #1
 800e70e:	60fa      	str	r2, [r7, #12]
 800e710:	2417      	movs	r4, #23
 800e712:	193a      	adds	r2, r7, r4
 800e714:	7812      	ldrb	r2, [r2, #0]
 800e716:	1939      	adds	r1, r7, r4
 800e718:	1c50      	adds	r0, r2, #1
 800e71a:	7008      	strb	r0, [r1, #0]
 800e71c:	0011      	movs	r1, r2
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	1852      	adds	r2, r2, r1
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e726:	193b      	adds	r3, r7, r4
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	193a      	adds	r2, r7, r4
 800e72c:	1c59      	adds	r1, r3, #1
 800e72e:	7011      	strb	r1, [r2, #0]
 800e730:	001a      	movs	r2, r3
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	189b      	adds	r3, r3, r2
 800e736:	2200      	movs	r2, #0
 800e738:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1e3      	bne.n	800e70a <USBD_GetString+0x5e>
    }
  }
}
 800e742:	46c0      	nop			; (mov r8, r8)
 800e744:	46bd      	mov	sp, r7
 800e746:	b007      	add	sp, #28
 800e748:	bd90      	pop	{r4, r7, pc}

0800e74a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e752:	230f      	movs	r3, #15
 800e754:	18fb      	adds	r3, r7, r3
 800e756:	2200      	movs	r2, #0
 800e758:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800e75a:	e008      	b.n	800e76e <USBD_GetLen+0x24>
  {
    len++;
 800e75c:	210f      	movs	r1, #15
 800e75e:	187b      	adds	r3, r7, r1
 800e760:	781a      	ldrb	r2, [r3, #0]
 800e762:	187b      	adds	r3, r7, r1
 800e764:	3201      	adds	r2, #1
 800e766:	701a      	strb	r2, [r3, #0]
    buf++;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	3301      	adds	r3, #1
 800e76c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1f2      	bne.n	800e75c <USBD_GetLen+0x12>
  }

  return len;
 800e776:	230f      	movs	r3, #15
 800e778:	18fb      	adds	r3, r7, r3
 800e77a:	781b      	ldrb	r3, [r3, #0]
}
 800e77c:	0018      	movs	r0, r3
 800e77e:	46bd      	mov	sp, r7
 800e780:	b004      	add	sp, #16
 800e782:	bd80      	pop	{r7, pc}

0800e784 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	1dbb      	adds	r3, r7, #6
 800e790:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	23a5      	movs	r3, #165	; 0xa5
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	2102      	movs	r1, #2
 800e79a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800e79c:	1dbb      	adds	r3, r7, #6
 800e79e:	881a      	ldrh	r2, [r3, #0]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e7a4:	1dbb      	adds	r3, r7, #6
 800e7a6:	881a      	ldrh	r2, [r3, #0]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7ac:	1dbb      	adds	r3, r7, #6
 800e7ae:	881b      	ldrh	r3, [r3, #0]
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	f000 fced 	bl	800f194 <USBD_LL_Transmit>

  return USBD_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	0018      	movs	r0, r3
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	b004      	add	sp, #16
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	1dbb      	adds	r3, r7, #6
 800e7d0:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7d2:	1dbb      	adds	r3, r7, #6
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	2100      	movs	r1, #0
 800e7dc:	f000 fcda 	bl	800f194 <USBD_LL_Transmit>

  return USBD_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	0018      	movs	r0, r3
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	b004      	add	sp, #16
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	60f8      	str	r0, [r7, #12]
 800e7f2:	60b9      	str	r1, [r7, #8]
 800e7f4:	1dbb      	adds	r3, r7, #6
 800e7f6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	23a5      	movs	r3, #165	; 0xa5
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	2103      	movs	r1, #3
 800e800:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800e802:	1dbb      	adds	r3, r7, #6
 800e804:	8819      	ldrh	r1, [r3, #0]
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	23ae      	movs	r3, #174	; 0xae
 800e80a:	005b      	lsls	r3, r3, #1
 800e80c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800e80e:	1dbb      	adds	r3, r7, #6
 800e810:	8819      	ldrh	r1, [r3, #0]
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	23b0      	movs	r3, #176	; 0xb0
 800e816:	005b      	lsls	r3, r3, #1
 800e818:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e81a:	1dbb      	adds	r3, r7, #6
 800e81c:	881b      	ldrh	r3, [r3, #0]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	2100      	movs	r1, #0
 800e824:	f000 fcee 	bl	800f204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	0018      	movs	r0, r3
 800e82c:	46bd      	mov	sp, r7
 800e82e:	b004      	add	sp, #16
 800e830:	bd80      	pop	{r7, pc}

0800e832 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b084      	sub	sp, #16
 800e836:	af00      	add	r7, sp, #0
 800e838:	60f8      	str	r0, [r7, #12]
 800e83a:	60b9      	str	r1, [r7, #8]
 800e83c:	1dbb      	adds	r3, r7, #6
 800e83e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e840:	1dbb      	adds	r3, r7, #6
 800e842:	881b      	ldrh	r3, [r3, #0]
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	2100      	movs	r1, #0
 800e84a:	f000 fcdb 	bl	800f204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	0018      	movs	r0, r3
 800e852:	46bd      	mov	sp, r7
 800e854:	b004      	add	sp, #16
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	23a5      	movs	r3, #165	; 0xa5
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	2104      	movs	r1, #4
 800e868:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	2300      	movs	r3, #0
 800e86e:	2200      	movs	r2, #0
 800e870:	2100      	movs	r1, #0
 800e872:	f000 fc8f 	bl	800f194 <USBD_LL_Transmit>

  return USBD_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	0018      	movs	r0, r3
 800e87a:	46bd      	mov	sp, r7
 800e87c:	b002      	add	sp, #8
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	23a5      	movs	r3, #165	; 0xa5
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	2105      	movs	r1, #5
 800e890:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	2300      	movs	r3, #0
 800e896:	2200      	movs	r2, #0
 800e898:	2100      	movs	r1, #0
 800e89a:	f000 fcb3 	bl	800f204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	b002      	add	sp, #8
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8ac:	4914      	ldr	r1, [pc, #80]	; (800e900 <MX_USB_DEVICE_Init+0x58>)
 800e8ae:	4b15      	ldr	r3, [pc, #84]	; (800e904 <MX_USB_DEVICE_Init+0x5c>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	0018      	movs	r0, r3
 800e8b4:	f7fe fddf 	bl	800d476 <USBD_Init>
 800e8b8:	1e03      	subs	r3, r0, #0
 800e8ba:	d001      	beq.n	800e8c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8bc:	f7f2 fdfe 	bl	80014bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8c0:	4a11      	ldr	r2, [pc, #68]	; (800e908 <MX_USB_DEVICE_Init+0x60>)
 800e8c2:	4b10      	ldr	r3, [pc, #64]	; (800e904 <MX_USB_DEVICE_Init+0x5c>)
 800e8c4:	0011      	movs	r1, r2
 800e8c6:	0018      	movs	r0, r3
 800e8c8:	f7fe fe06 	bl	800d4d8 <USBD_RegisterClass>
 800e8cc:	1e03      	subs	r3, r0, #0
 800e8ce:	d001      	beq.n	800e8d4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800e8d0:	f7f2 fdf4 	bl	80014bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8d4:	4a0d      	ldr	r2, [pc, #52]	; (800e90c <MX_USB_DEVICE_Init+0x64>)
 800e8d6:	4b0b      	ldr	r3, [pc, #44]	; (800e904 <MX_USB_DEVICE_Init+0x5c>)
 800e8d8:	0011      	movs	r1, r2
 800e8da:	0018      	movs	r0, r3
 800e8dc:	f7fe fd1a 	bl	800d314 <USBD_CDC_RegisterInterface>
 800e8e0:	1e03      	subs	r3, r0, #0
 800e8e2:	d001      	beq.n	800e8e8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800e8e4:	f7f2 fdea 	bl	80014bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e8e8:	4b06      	ldr	r3, [pc, #24]	; (800e904 <MX_USB_DEVICE_Init+0x5c>)
 800e8ea:	0018      	movs	r0, r3
 800e8ec:	f7fe fe15 	bl	800d51a <USBD_Start>
 800e8f0:	1e03      	subs	r3, r0, #0
 800e8f2:	d001      	beq.n	800e8f8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800e8f4:	f7f2 fde2 	bl	80014bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e8f8:	46c0      	nop			; (mov r8, r8)
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	46c0      	nop			; (mov r8, r8)
 800e900:	20000238 	.word	0x20000238
 800e904:	20000a14 	.word	0x20000a14
 800e908:	20000124 	.word	0x20000124
 800e90c:	20000228 	.word	0x20000228

0800e910 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e914:	4907      	ldr	r1, [pc, #28]	; (800e934 <CDC_Init_FS+0x24>)
 800e916:	4b08      	ldr	r3, [pc, #32]	; (800e938 <CDC_Init_FS+0x28>)
 800e918:	2200      	movs	r2, #0
 800e91a:	0018      	movs	r0, r3
 800e91c:	f7fe fd16 	bl	800d34c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e920:	4a06      	ldr	r2, [pc, #24]	; (800e93c <CDC_Init_FS+0x2c>)
 800e922:	4b05      	ldr	r3, [pc, #20]	; (800e938 <CDC_Init_FS+0x28>)
 800e924:	0011      	movs	r1, r2
 800e926:	0018      	movs	r0, r3
 800e928:	f7fe fd2c 	bl	800d384 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e92c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e92e:	0018      	movs	r0, r3
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	200010c0 	.word	0x200010c0
 800e938:	20000a14 	.word	0x20000a14
 800e93c:	20000cd8 	.word	0x20000cd8

0800e940 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e944:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e946:	0018      	movs	r0, r3
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6039      	str	r1, [r7, #0]
 800e954:	0011      	movs	r1, r2
 800e956:	1dfb      	adds	r3, r7, #7
 800e958:	1c02      	adds	r2, r0, #0
 800e95a:	701a      	strb	r2, [r3, #0]
 800e95c:	1d3b      	adds	r3, r7, #4
 800e95e:	1c0a      	adds	r2, r1, #0
 800e960:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e962:	1dfb      	adds	r3, r7, #7
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b23      	cmp	r3, #35	; 0x23
 800e968:	d804      	bhi.n	800e974 <CDC_Control_FS+0x28>
 800e96a:	009a      	lsls	r2, r3, #2
 800e96c:	4b04      	ldr	r3, [pc, #16]	; (800e980 <CDC_Control_FS+0x34>)
 800e96e:	18d3      	adds	r3, r2, r3
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e974:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800e976:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e978:	0018      	movs	r0, r3
 800e97a:	46bd      	mov	sp, r7
 800e97c:	b002      	add	sp, #8
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	0800f5ac 	.word	0x0800f5ac

0800e984 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	4b0a      	ldr	r3, [pc, #40]	; (800e9bc <CDC_Receive_FS+0x38>)
 800e992:	0011      	movs	r1, r2
 800e994:	0018      	movs	r0, r3
 800e996:	f7fe fcf5 	bl	800d384 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e99a:	4b08      	ldr	r3, [pc, #32]	; (800e9bc <CDC_Receive_FS+0x38>)
 800e99c:	0018      	movs	r0, r3
 800e99e:	f7fe fd3c 	bl	800d41a <USBD_CDC_ReceivePacket>
  usb_addToQueue(&usb_Q, Buf, *Len);
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	6879      	ldr	r1, [r7, #4]
 800e9aa:	4b05      	ldr	r3, [pc, #20]	; (800e9c0 <CDC_Receive_FS+0x3c>)
 800e9ac:	0018      	movs	r0, r3
 800e9ae:	f7f3 fd6d 	bl	800248c <usb_addToQueue>
  return (USBD_OK);
 800e9b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e9b4:	0018      	movs	r0, r3
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	b002      	add	sp, #8
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20000a14 	.word	0x20000a14
 800e9c0:	20000738 	.word	0x20000738

0800e9c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e9c4:	b5b0      	push	{r4, r5, r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	000a      	movs	r2, r1
 800e9ce:	1cbb      	adds	r3, r7, #2
 800e9d0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800e9d2:	230f      	movs	r3, #15
 800e9d4:	18fb      	adds	r3, r7, r3
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e9da:	4a11      	ldr	r2, [pc, #68]	; (800ea20 <CDC_Transmit_FS+0x5c>)
 800e9dc:	23ae      	movs	r3, #174	; 0xae
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	58d3      	ldr	r3, [r2, r3]
 800e9e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e9e4:	68ba      	ldr	r2, [r7, #8]
 800e9e6:	2385      	movs	r3, #133	; 0x85
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	58d3      	ldr	r3, [r2, r3]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d001      	beq.n	800e9f4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e010      	b.n	800ea16 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e9f4:	1cbb      	adds	r3, r7, #2
 800e9f6:	881a      	ldrh	r2, [r3, #0]
 800e9f8:	6879      	ldr	r1, [r7, #4]
 800e9fa:	4b09      	ldr	r3, [pc, #36]	; (800ea20 <CDC_Transmit_FS+0x5c>)
 800e9fc:	0018      	movs	r0, r3
 800e9fe:	f7fe fca5 	bl	800d34c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea02:	250f      	movs	r5, #15
 800ea04:	197c      	adds	r4, r7, r5
 800ea06:	4b06      	ldr	r3, [pc, #24]	; (800ea20 <CDC_Transmit_FS+0x5c>)
 800ea08:	0018      	movs	r0, r3
 800ea0a:	f7fe fccf 	bl	800d3ac <USBD_CDC_TransmitPacket>
 800ea0e:	0003      	movs	r3, r0
 800ea10:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800ea12:	197b      	adds	r3, r7, r5
 800ea14:	781b      	ldrb	r3, [r3, #0]
}
 800ea16:	0018      	movs	r0, r3
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	b004      	add	sp, #16
 800ea1c:	bdb0      	pop	{r4, r5, r7, pc}
 800ea1e:	46c0      	nop			; (mov r8, r8)
 800ea20:	20000a14 	.word	0x20000a14

0800ea24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	0002      	movs	r2, r0
 800ea2c:	6039      	str	r1, [r7, #0]
 800ea2e:	1dfb      	adds	r3, r7, #7
 800ea30:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	2212      	movs	r2, #18
 800ea36:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ea38:	4b02      	ldr	r3, [pc, #8]	; (800ea44 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ea3a:	0018      	movs	r0, r3
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	b002      	add	sp, #8
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	46c0      	nop			; (mov r8, r8)
 800ea44:	20000254 	.word	0x20000254

0800ea48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	0002      	movs	r2, r0
 800ea50:	6039      	str	r1, [r7, #0]
 800ea52:	1dfb      	adds	r3, r7, #7
 800ea54:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2204      	movs	r2, #4
 800ea5a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea5c:	4b02      	ldr	r3, [pc, #8]	; (800ea68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ea5e:	0018      	movs	r0, r3
 800ea60:	46bd      	mov	sp, r7
 800ea62:	b002      	add	sp, #8
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	46c0      	nop			; (mov r8, r8)
 800ea68:	20000268 	.word	0x20000268

0800ea6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	0002      	movs	r2, r0
 800ea74:	6039      	str	r1, [r7, #0]
 800ea76:	1dfb      	adds	r3, r7, #7
 800ea78:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ea7a:	1dfb      	adds	r3, r7, #7
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d106      	bne.n	800ea90 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea82:	683a      	ldr	r2, [r7, #0]
 800ea84:	4908      	ldr	r1, [pc, #32]	; (800eaa8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800ea86:	4b09      	ldr	r3, [pc, #36]	; (800eaac <USBD_FS_ProductStrDescriptor+0x40>)
 800ea88:	0018      	movs	r0, r3
 800ea8a:	f7ff fe0f 	bl	800e6ac <USBD_GetString>
 800ea8e:	e005      	b.n	800ea9c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	4905      	ldr	r1, [pc, #20]	; (800eaa8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800ea94:	4b05      	ldr	r3, [pc, #20]	; (800eaac <USBD_FS_ProductStrDescriptor+0x40>)
 800ea96:	0018      	movs	r0, r3
 800ea98:	f7ff fe08 	bl	800e6ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea9c:	4b02      	ldr	r3, [pc, #8]	; (800eaa8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800ea9e:	0018      	movs	r0, r3
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	b002      	add	sp, #8
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	46c0      	nop			; (mov r8, r8)
 800eaa8:	200014a8 	.word	0x200014a8
 800eaac:	0800f3d4 	.word	0x0800f3d4

0800eab0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	0002      	movs	r2, r0
 800eab8:	6039      	str	r1, [r7, #0]
 800eaba:	1dfb      	adds	r3, r7, #7
 800eabc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	4904      	ldr	r1, [pc, #16]	; (800ead4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eac2:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800eac4:	0018      	movs	r0, r3
 800eac6:	f7ff fdf1 	bl	800e6ac <USBD_GetString>
  return USBD_StrDesc;
 800eaca:	4b02      	ldr	r3, [pc, #8]	; (800ead4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800eacc:	0018      	movs	r0, r3
 800eace:	46bd      	mov	sp, r7
 800ead0:	b002      	add	sp, #8
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	200014a8 	.word	0x200014a8
 800ead8:	0800f3ec 	.word	0x0800f3ec

0800eadc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	0002      	movs	r2, r0
 800eae4:	6039      	str	r1, [r7, #0]
 800eae6:	1dfb      	adds	r3, r7, #7
 800eae8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	221a      	movs	r2, #26
 800eaee:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eaf0:	f000 f84c 	bl	800eb8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eaf4:	4b02      	ldr	r3, [pc, #8]	; (800eb00 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800eaf6:	0018      	movs	r0, r3
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	b002      	add	sp, #8
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	46c0      	nop			; (mov r8, r8)
 800eb00:	2000026c 	.word	0x2000026c

0800eb04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	0002      	movs	r2, r0
 800eb0c:	6039      	str	r1, [r7, #0]
 800eb0e:	1dfb      	adds	r3, r7, #7
 800eb10:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800eb12:	1dfb      	adds	r3, r7, #7
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d106      	bne.n	800eb28 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	4908      	ldr	r1, [pc, #32]	; (800eb40 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800eb1e:	4b09      	ldr	r3, [pc, #36]	; (800eb44 <USBD_FS_ConfigStrDescriptor+0x40>)
 800eb20:	0018      	movs	r0, r3
 800eb22:	f7ff fdc3 	bl	800e6ac <USBD_GetString>
 800eb26:	e005      	b.n	800eb34 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb28:	683a      	ldr	r2, [r7, #0]
 800eb2a:	4905      	ldr	r1, [pc, #20]	; (800eb40 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800eb2c:	4b05      	ldr	r3, [pc, #20]	; (800eb44 <USBD_FS_ConfigStrDescriptor+0x40>)
 800eb2e:	0018      	movs	r0, r3
 800eb30:	f7ff fdbc 	bl	800e6ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb34:	4b02      	ldr	r3, [pc, #8]	; (800eb40 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800eb36:	0018      	movs	r0, r3
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	b002      	add	sp, #8
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	46c0      	nop			; (mov r8, r8)
 800eb40:	200014a8 	.word	0x200014a8
 800eb44:	0800f400 	.word	0x0800f400

0800eb48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	0002      	movs	r2, r0
 800eb50:	6039      	str	r1, [r7, #0]
 800eb52:	1dfb      	adds	r3, r7, #7
 800eb54:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800eb56:	1dfb      	adds	r3, r7, #7
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	4908      	ldr	r1, [pc, #32]	; (800eb84 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800eb62:	4b09      	ldr	r3, [pc, #36]	; (800eb88 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800eb64:	0018      	movs	r0, r3
 800eb66:	f7ff fda1 	bl	800e6ac <USBD_GetString>
 800eb6a:	e005      	b.n	800eb78 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb6c:	683a      	ldr	r2, [r7, #0]
 800eb6e:	4905      	ldr	r1, [pc, #20]	; (800eb84 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800eb70:	4b05      	ldr	r3, [pc, #20]	; (800eb88 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800eb72:	0018      	movs	r0, r3
 800eb74:	f7ff fd9a 	bl	800e6ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb78:	4b02      	ldr	r3, [pc, #8]	; (800eb84 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800eb7a:	0018      	movs	r0, r3
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	b002      	add	sp, #8
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	46c0      	nop			; (mov r8, r8)
 800eb84:	200014a8 	.word	0x200014a8
 800eb88:	0800f40c 	.word	0x0800f40c

0800eb8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb92:	4b10      	ldr	r3, [pc, #64]	; (800ebd4 <Get_SerialNum+0x48>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eb98:	4b0f      	ldr	r3, [pc, #60]	; (800ebd8 <Get_SerialNum+0x4c>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <Get_SerialNum+0x50>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eba4:	68fa      	ldr	r2, [r7, #12]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	18d3      	adds	r3, r2, r3
 800ebaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00b      	beq.n	800ebca <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ebb2:	490b      	ldr	r1, [pc, #44]	; (800ebe0 <Get_SerialNum+0x54>)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2208      	movs	r2, #8
 800ebb8:	0018      	movs	r0, r3
 800ebba:	f000 f815 	bl	800ebe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ebbe:	4909      	ldr	r1, [pc, #36]	; (800ebe4 <Get_SerialNum+0x58>)
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	2204      	movs	r2, #4
 800ebc4:	0018      	movs	r0, r3
 800ebc6:	f000 f80f 	bl	800ebe8 <IntToUnicode>
  }
}
 800ebca:	46c0      	nop			; (mov r8, r8)
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	b004      	add	sp, #16
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	46c0      	nop			; (mov r8, r8)
 800ebd4:	1ffff7ac 	.word	0x1ffff7ac
 800ebd8:	1ffff7b0 	.word	0x1ffff7b0
 800ebdc:	1ffff7b4 	.word	0x1ffff7b4
 800ebe0:	2000026e 	.word	0x2000026e
 800ebe4:	2000027e 	.word	0x2000027e

0800ebe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	1dfb      	adds	r3, r7, #7
 800ebf4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800ebf6:	2117      	movs	r1, #23
 800ebf8:	187b      	adds	r3, r7, r1
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800ebfe:	187b      	adds	r3, r7, r1
 800ec00:	2200      	movs	r2, #0
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	e02f      	b.n	800ec66 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	0f1b      	lsrs	r3, r3, #28
 800ec0a:	2b09      	cmp	r3, #9
 800ec0c:	d80d      	bhi.n	800ec2a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	0f1b      	lsrs	r3, r3, #28
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	2317      	movs	r3, #23
 800ec16:	18fb      	adds	r3, r7, r3
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	005b      	lsls	r3, r3, #1
 800ec1c:	0019      	movs	r1, r3
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	185b      	adds	r3, r3, r1
 800ec22:	3230      	adds	r2, #48	; 0x30
 800ec24:	b2d2      	uxtb	r2, r2
 800ec26:	701a      	strb	r2, [r3, #0]
 800ec28:	e00c      	b.n	800ec44 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	0f1b      	lsrs	r3, r3, #28
 800ec2e:	b2da      	uxtb	r2, r3
 800ec30:	2317      	movs	r3, #23
 800ec32:	18fb      	adds	r3, r7, r3
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	005b      	lsls	r3, r3, #1
 800ec38:	0019      	movs	r1, r3
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	185b      	adds	r3, r3, r1
 800ec3e:	3237      	adds	r2, #55	; 0x37
 800ec40:	b2d2      	uxtb	r2, r2
 800ec42:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	011b      	lsls	r3, r3, #4
 800ec48:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec4a:	2117      	movs	r1, #23
 800ec4c:	187b      	adds	r3, r7, r1
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	3301      	adds	r3, #1
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	18d3      	adds	r3, r2, r3
 800ec58:	2200      	movs	r2, #0
 800ec5a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec5c:	187b      	adds	r3, r7, r1
 800ec5e:	781a      	ldrb	r2, [r3, #0]
 800ec60:	187b      	adds	r3, r7, r1
 800ec62:	3201      	adds	r2, #1
 800ec64:	701a      	strb	r2, [r3, #0]
 800ec66:	2317      	movs	r3, #23
 800ec68:	18fa      	adds	r2, r7, r3
 800ec6a:	1dfb      	adds	r3, r7, #7
 800ec6c:	7812      	ldrb	r2, [r2, #0]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d3c8      	bcc.n	800ec06 <IntToUnicode+0x1e>
  }
}
 800ec74:	46c0      	nop			; (mov r8, r8)
 800ec76:	46bd      	mov	sp, r7
 800ec78:	b006      	add	sp, #24
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a0e      	ldr	r2, [pc, #56]	; (800ecc4 <HAL_PCD_MspInit+0x48>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d115      	bne.n	800ecba <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ec8e:	4b0e      	ldr	r3, [pc, #56]	; (800ecc8 <HAL_PCD_MspInit+0x4c>)
 800ec90:	69da      	ldr	r2, [r3, #28]
 800ec92:	4b0d      	ldr	r3, [pc, #52]	; (800ecc8 <HAL_PCD_MspInit+0x4c>)
 800ec94:	2180      	movs	r1, #128	; 0x80
 800ec96:	0409      	lsls	r1, r1, #16
 800ec98:	430a      	orrs	r2, r1
 800ec9a:	61da      	str	r2, [r3, #28]
 800ec9c:	4b0a      	ldr	r3, [pc, #40]	; (800ecc8 <HAL_PCD_MspInit+0x4c>)
 800ec9e:	69da      	ldr	r2, [r3, #28]
 800eca0:	2380      	movs	r3, #128	; 0x80
 800eca2:	041b      	lsls	r3, r3, #16
 800eca4:	4013      	ands	r3, r2
 800eca6:	60fb      	str	r3, [r7, #12]
 800eca8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800ecaa:	2200      	movs	r2, #0
 800ecac:	2100      	movs	r1, #0
 800ecae:	201f      	movs	r0, #31
 800ecb0:	f7f5 fed2 	bl	8004a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ecb4:	201f      	movs	r0, #31
 800ecb6:	f7f5 fee4 	bl	8004a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ecba:	46c0      	nop			; (mov r8, r8)
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	b004      	add	sp, #16
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	46c0      	nop			; (mov r8, r8)
 800ecc4:	40005c00 	.word	0x40005c00
 800ecc8:	40021000 	.word	0x40021000

0800eccc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	23bc      	movs	r3, #188	; 0xbc
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	58d2      	ldr	r2, [r2, r3]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	21ac      	movs	r1, #172	; 0xac
 800ece0:	0089      	lsls	r1, r1, #2
 800ece2:	468c      	mov	ip, r1
 800ece4:	4463      	add	r3, ip
 800ece6:	0019      	movs	r1, r3
 800ece8:	0010      	movs	r0, r2
 800ecea:	f7fe fc6b 	bl	800d5c4 <USBD_LL_SetupStage>
}
 800ecee:	46c0      	nop			; (mov r8, r8)
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	b002      	add	sp, #8
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf6:	b590      	push	{r4, r7, lr}
 800ecf8:	b083      	sub	sp, #12
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	000a      	movs	r2, r1
 800ed00:	1cfb      	adds	r3, r7, #3
 800ed02:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	23bc      	movs	r3, #188	; 0xbc
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	58d4      	ldr	r4, [r2, r3]
 800ed0c:	1cfb      	adds	r3, r7, #3
 800ed0e:	781a      	ldrb	r2, [r3, #0]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	23be      	movs	r3, #190	; 0xbe
 800ed14:	0059      	lsls	r1, r3, #1
 800ed16:	0013      	movs	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	189b      	adds	r3, r3, r2
 800ed1c:	00db      	lsls	r3, r3, #3
 800ed1e:	18c3      	adds	r3, r0, r3
 800ed20:	185b      	adds	r3, r3, r1
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	1cfb      	adds	r3, r7, #3
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	0019      	movs	r1, r3
 800ed2a:	0020      	movs	r0, r4
 800ed2c:	f7fe fca6 	bl	800d67c <USBD_LL_DataOutStage>
}
 800ed30:	46c0      	nop			; (mov r8, r8)
 800ed32:	46bd      	mov	sp, r7
 800ed34:	b003      	add	sp, #12
 800ed36:	bd90      	pop	{r4, r7, pc}

0800ed38 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	000a      	movs	r2, r1
 800ed42:	1cfb      	adds	r3, r7, #3
 800ed44:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	23bc      	movs	r3, #188	; 0xbc
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	58d0      	ldr	r0, [r2, r3]
 800ed4e:	1cfb      	adds	r3, r7, #3
 800ed50:	781a      	ldrb	r2, [r3, #0]
 800ed52:	6879      	ldr	r1, [r7, #4]
 800ed54:	0013      	movs	r3, r2
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	189b      	adds	r3, r3, r2
 800ed5a:	00db      	lsls	r3, r3, #3
 800ed5c:	18cb      	adds	r3, r1, r3
 800ed5e:	333c      	adds	r3, #60	; 0x3c
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	1cfb      	adds	r3, r7, #3
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	0019      	movs	r1, r3
 800ed68:	f7fe fd0a 	bl	800d780 <USBD_LL_DataInStage>
}
 800ed6c:	46c0      	nop			; (mov r8, r8)
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	b002      	add	sp, #8
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	23bc      	movs	r3, #188	; 0xbc
 800ed80:	009b      	lsls	r3, r3, #2
 800ed82:	58d3      	ldr	r3, [r2, r3]
 800ed84:	0018      	movs	r0, r3
 800ed86:	f7fe fe41 	bl	800da0c <USBD_LL_SOF>
}
 800ed8a:	46c0      	nop			; (mov r8, r8)
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	b002      	add	sp, #8
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b084      	sub	sp, #16
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed9a:	230f      	movs	r3, #15
 800ed9c:	18fb      	adds	r3, r7, r3
 800ed9e:	2201      	movs	r2, #1
 800eda0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	d001      	beq.n	800edae <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800edaa:	f7f2 fb87 	bl	80014bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	23bc      	movs	r3, #188	; 0xbc
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	58d2      	ldr	r2, [r2, r3]
 800edb6:	230f      	movs	r3, #15
 800edb8:	18fb      	adds	r3, r7, r3
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	0019      	movs	r1, r3
 800edbe:	0010      	movs	r0, r2
 800edc0:	f7fe fde3 	bl	800d98a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	23bc      	movs	r3, #188	; 0xbc
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	58d3      	ldr	r3, [r2, r3]
 800edcc:	0018      	movs	r0, r3
 800edce:	f7fe fd94 	bl	800d8fa <USBD_LL_Reset>
}
 800edd2:	46c0      	nop			; (mov r8, r8)
 800edd4:	46bd      	mov	sp, r7
 800edd6:	b004      	add	sp, #16
 800edd8:	bd80      	pop	{r7, pc}
	...

0800eddc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	23bc      	movs	r3, #188	; 0xbc
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	58d3      	ldr	r3, [r2, r3]
 800edec:	0018      	movs	r0, r3
 800edee:	f7fe fddd 	bl	800d9ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	699b      	ldr	r3, [r3, #24]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d005      	beq.n	800ee06 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800edfa:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <HAL_PCD_SuspendCallback+0x34>)
 800edfc:	691a      	ldr	r2, [r3, #16]
 800edfe:	4b04      	ldr	r3, [pc, #16]	; (800ee10 <HAL_PCD_SuspendCallback+0x34>)
 800ee00:	2106      	movs	r1, #6
 800ee02:	430a      	orrs	r2, r1
 800ee04:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800ee06:	46c0      	nop			; (mov r8, r8)
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	b002      	add	sp, #8
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	46c0      	nop			; (mov r8, r8)
 800ee10:	e000ed00 	.word	0xe000ed00

0800ee14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	699b      	ldr	r3, [r3, #24]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d007      	beq.n	800ee34 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee24:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <HAL_PCD_ResumeCallback+0x38>)
 800ee26:	691a      	ldr	r2, [r3, #16]
 800ee28:	4b08      	ldr	r3, [pc, #32]	; (800ee4c <HAL_PCD_ResumeCallback+0x38>)
 800ee2a:	2106      	movs	r1, #6
 800ee2c:	438a      	bics	r2, r1
 800ee2e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800ee30:	f000 fa4a 	bl	800f2c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	23bc      	movs	r3, #188	; 0xbc
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	58d3      	ldr	r3, [r2, r3]
 800ee3c:	0018      	movs	r0, r3
 800ee3e:	f7fe fdcd 	bl	800d9dc <USBD_LL_Resume>
}
 800ee42:	46c0      	nop			; (mov r8, r8)
 800ee44:	46bd      	mov	sp, r7
 800ee46:	b002      	add	sp, #8
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	46c0      	nop			; (mov r8, r8)
 800ee4c:	e000ed00 	.word	0xe000ed00

0800ee50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ee58:	4a2d      	ldr	r2, [pc, #180]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee5a:	23bc      	movs	r3, #188	; 0xbc
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	6879      	ldr	r1, [r7, #4]
 800ee60:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	23b0      	movs	r3, #176	; 0xb0
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	4929      	ldr	r1, [pc, #164]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee6a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800ee6c:	4b28      	ldr	r3, [pc, #160]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee6e:	4a29      	ldr	r2, [pc, #164]	; (800ef14 <USBD_LL_Init+0xc4>)
 800ee70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ee72:	4b27      	ldr	r3, [pc, #156]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee74:	2208      	movs	r2, #8
 800ee76:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ee78:	4b25      	ldr	r3, [pc, #148]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ee7e:	4b24      	ldr	r3, [pc, #144]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee80:	2202      	movs	r2, #2
 800ee82:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ee84:	4b22      	ldr	r3, [pc, #136]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee86:	2200      	movs	r2, #0
 800ee88:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ee8a:	4b21      	ldr	r3, [pc, #132]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ee90:	4b1f      	ldr	r3, [pc, #124]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ee96:	4b1e      	ldr	r3, [pc, #120]	; (800ef10 <USBD_LL_Init+0xc0>)
 800ee98:	0018      	movs	r0, r3
 800ee9a:	f7f7 ff79 	bl	8006d90 <HAL_PCD_Init>
 800ee9e:	1e03      	subs	r3, r0, #0
 800eea0:	d001      	beq.n	800eea6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800eea2:	f7f2 fb0b 	bl	80014bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	23b0      	movs	r3, #176	; 0xb0
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	58d0      	ldr	r0, [r2, r3]
 800eeae:	2318      	movs	r3, #24
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	2100      	movs	r1, #0
 800eeb4:	f7f9 fb8a 	bl	80085cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	23b0      	movs	r3, #176	; 0xb0
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	58d0      	ldr	r0, [r2, r3]
 800eec0:	2358      	movs	r3, #88	; 0x58
 800eec2:	2200      	movs	r2, #0
 800eec4:	2180      	movs	r1, #128	; 0x80
 800eec6:	f7f9 fb81 	bl	80085cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	23b0      	movs	r3, #176	; 0xb0
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	58d0      	ldr	r0, [r2, r3]
 800eed2:	23c0      	movs	r3, #192	; 0xc0
 800eed4:	2200      	movs	r2, #0
 800eed6:	2181      	movs	r1, #129	; 0x81
 800eed8:	f7f9 fb78 	bl	80085cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	23b0      	movs	r3, #176	; 0xb0
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	58d0      	ldr	r0, [r2, r3]
 800eee4:	2388      	movs	r3, #136	; 0x88
 800eee6:	005b      	lsls	r3, r3, #1
 800eee8:	2200      	movs	r2, #0
 800eeea:	2101      	movs	r1, #1
 800eeec:	f7f9 fb6e 	bl	80085cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	23b0      	movs	r3, #176	; 0xb0
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	58d0      	ldr	r0, [r2, r3]
 800eef8:	2380      	movs	r3, #128	; 0x80
 800eefa:	005b      	lsls	r3, r3, #1
 800eefc:	2200      	movs	r2, #0
 800eefe:	2182      	movs	r1, #130	; 0x82
 800ef00:	f7f9 fb64 	bl	80085cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	0018      	movs	r0, r3
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	b002      	add	sp, #8
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	46c0      	nop			; (mov r8, r8)
 800ef10:	200016a8 	.word	0x200016a8
 800ef14:	40005c00 	.word	0x40005c00

0800ef18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef1a:	b085      	sub	sp, #20
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef20:	210f      	movs	r1, #15
 800ef22:	187b      	adds	r3, r7, r1
 800ef24:	2200      	movs	r2, #0
 800ef26:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef28:	260e      	movs	r6, #14
 800ef2a:	19bb      	adds	r3, r7, r6
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	23b0      	movs	r3, #176	; 0xb0
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	58d3      	ldr	r3, [r2, r3]
 800ef38:	000d      	movs	r5, r1
 800ef3a:	187c      	adds	r4, r7, r1
 800ef3c:	0018      	movs	r0, r3
 800ef3e:	f7f8 f837 	bl	8006fb0 <HAL_PCD_Start>
 800ef42:	0003      	movs	r3, r0
 800ef44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef46:	19bc      	adds	r4, r7, r6
 800ef48:	0029      	movs	r1, r5
 800ef4a:	187b      	adds	r3, r7, r1
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	0018      	movs	r0, r3
 800ef50:	f000 f9c1 	bl	800f2d6 <USBD_Get_USB_Status>
 800ef54:	0003      	movs	r3, r0
 800ef56:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ef58:	19bb      	adds	r3, r7, r6
 800ef5a:	781b      	ldrb	r3, [r3, #0]
}
 800ef5c:	0018      	movs	r0, r3
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	b005      	add	sp, #20
 800ef62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef64 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ef64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	000c      	movs	r4, r1
 800ef6e:	0010      	movs	r0, r2
 800ef70:	0019      	movs	r1, r3
 800ef72:	1cfb      	adds	r3, r7, #3
 800ef74:	1c22      	adds	r2, r4, #0
 800ef76:	701a      	strb	r2, [r3, #0]
 800ef78:	1cbb      	adds	r3, r7, #2
 800ef7a:	1c02      	adds	r2, r0, #0
 800ef7c:	701a      	strb	r2, [r3, #0]
 800ef7e:	003b      	movs	r3, r7
 800ef80:	1c0a      	adds	r2, r1, #0
 800ef82:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef84:	260f      	movs	r6, #15
 800ef86:	19bb      	adds	r3, r7, r6
 800ef88:	2200      	movs	r2, #0
 800ef8a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef8c:	250e      	movs	r5, #14
 800ef8e:	197b      	adds	r3, r7, r5
 800ef90:	2200      	movs	r2, #0
 800ef92:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	23b0      	movs	r3, #176	; 0xb0
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	58d0      	ldr	r0, [r2, r3]
 800ef9c:	19bc      	adds	r4, r7, r6
 800ef9e:	1cbb      	adds	r3, r7, #2
 800efa0:	781d      	ldrb	r5, [r3, #0]
 800efa2:	003b      	movs	r3, r7
 800efa4:	881a      	ldrh	r2, [r3, #0]
 800efa6:	1cfb      	adds	r3, r7, #3
 800efa8:	7819      	ldrb	r1, [r3, #0]
 800efaa:	002b      	movs	r3, r5
 800efac:	f7f8 f9cd 	bl	800734a <HAL_PCD_EP_Open>
 800efb0:	0003      	movs	r3, r0
 800efb2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efb4:	250e      	movs	r5, #14
 800efb6:	197c      	adds	r4, r7, r5
 800efb8:	19bb      	adds	r3, r7, r6
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	0018      	movs	r0, r3
 800efbe:	f000 f98a 	bl	800f2d6 <USBD_Get_USB_Status>
 800efc2:	0003      	movs	r3, r0
 800efc4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800efc6:	197b      	adds	r3, r7, r5
 800efc8:	781b      	ldrb	r3, [r3, #0]
}
 800efca:	0018      	movs	r0, r3
 800efcc:	46bd      	mov	sp, r7
 800efce:	b005      	add	sp, #20
 800efd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800efd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efd4:	b085      	sub	sp, #20
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	000a      	movs	r2, r1
 800efdc:	1cfb      	adds	r3, r7, #3
 800efde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efe0:	210f      	movs	r1, #15
 800efe2:	187b      	adds	r3, r7, r1
 800efe4:	2200      	movs	r2, #0
 800efe6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efe8:	260e      	movs	r6, #14
 800efea:	19bb      	adds	r3, r7, r6
 800efec:	2200      	movs	r2, #0
 800efee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	23b0      	movs	r3, #176	; 0xb0
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	58d2      	ldr	r2, [r2, r3]
 800eff8:	000d      	movs	r5, r1
 800effa:	187c      	adds	r4, r7, r1
 800effc:	1cfb      	adds	r3, r7, #3
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	0019      	movs	r1, r3
 800f002:	0010      	movs	r0, r2
 800f004:	f7f8 fa19 	bl	800743a <HAL_PCD_EP_Close>
 800f008:	0003      	movs	r3, r0
 800f00a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f00c:	19bc      	adds	r4, r7, r6
 800f00e:	0029      	movs	r1, r5
 800f010:	187b      	adds	r3, r7, r1
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	0018      	movs	r0, r3
 800f016:	f000 f95e 	bl	800f2d6 <USBD_Get_USB_Status>
 800f01a:	0003      	movs	r3, r0
 800f01c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f01e:	19bb      	adds	r3, r7, r6
 800f020:	781b      	ldrb	r3, [r3, #0]
}
 800f022:	0018      	movs	r0, r3
 800f024:	46bd      	mov	sp, r7
 800f026:	b005      	add	sp, #20
 800f028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f02a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f02c:	b085      	sub	sp, #20
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
 800f032:	000a      	movs	r2, r1
 800f034:	1cfb      	adds	r3, r7, #3
 800f036:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f038:	210f      	movs	r1, #15
 800f03a:	187b      	adds	r3, r7, r1
 800f03c:	2200      	movs	r2, #0
 800f03e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f040:	260e      	movs	r6, #14
 800f042:	19bb      	adds	r3, r7, r6
 800f044:	2200      	movs	r2, #0
 800f046:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	23b0      	movs	r3, #176	; 0xb0
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	58d2      	ldr	r2, [r2, r3]
 800f050:	000d      	movs	r5, r1
 800f052:	187c      	adds	r4, r7, r1
 800f054:	1cfb      	adds	r3, r7, #3
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	0019      	movs	r1, r3
 800f05a:	0010      	movs	r0, r2
 800f05c:	f7f8 fae4 	bl	8007628 <HAL_PCD_EP_SetStall>
 800f060:	0003      	movs	r3, r0
 800f062:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f064:	19bc      	adds	r4, r7, r6
 800f066:	0029      	movs	r1, r5
 800f068:	187b      	adds	r3, r7, r1
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	0018      	movs	r0, r3
 800f06e:	f000 f932 	bl	800f2d6 <USBD_Get_USB_Status>
 800f072:	0003      	movs	r3, r0
 800f074:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f076:	19bb      	adds	r3, r7, r6
 800f078:	781b      	ldrb	r3, [r3, #0]
}
 800f07a:	0018      	movs	r0, r3
 800f07c:	46bd      	mov	sp, r7
 800f07e:	b005      	add	sp, #20
 800f080:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f082:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f084:	b085      	sub	sp, #20
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
 800f08a:	000a      	movs	r2, r1
 800f08c:	1cfb      	adds	r3, r7, #3
 800f08e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f090:	210f      	movs	r1, #15
 800f092:	187b      	adds	r3, r7, r1
 800f094:	2200      	movs	r2, #0
 800f096:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f098:	260e      	movs	r6, #14
 800f09a:	19bb      	adds	r3, r7, r6
 800f09c:	2200      	movs	r2, #0
 800f09e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	23b0      	movs	r3, #176	; 0xb0
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	58d2      	ldr	r2, [r2, r3]
 800f0a8:	000d      	movs	r5, r1
 800f0aa:	187c      	adds	r4, r7, r1
 800f0ac:	1cfb      	adds	r3, r7, #3
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	0019      	movs	r1, r3
 800f0b2:	0010      	movs	r0, r2
 800f0b4:	f7f8 fb14 	bl	80076e0 <HAL_PCD_EP_ClrStall>
 800f0b8:	0003      	movs	r3, r0
 800f0ba:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0bc:	19bc      	adds	r4, r7, r6
 800f0be:	0029      	movs	r1, r5
 800f0c0:	187b      	adds	r3, r7, r1
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	0018      	movs	r0, r3
 800f0c6:	f000 f906 	bl	800f2d6 <USBD_Get_USB_Status>
 800f0ca:	0003      	movs	r3, r0
 800f0cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f0ce:	19bb      	adds	r3, r7, r6
 800f0d0:	781b      	ldrb	r3, [r3, #0]
}
 800f0d2:	0018      	movs	r0, r3
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	b005      	add	sp, #20
 800f0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0da <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b084      	sub	sp, #16
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	6078      	str	r0, [r7, #4]
 800f0e2:	000a      	movs	r2, r1
 800f0e4:	1cfb      	adds	r3, r7, #3
 800f0e6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	23b0      	movs	r3, #176	; 0xb0
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	58d3      	ldr	r3, [r2, r3]
 800f0f0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f0f2:	1cfb      	adds	r3, r7, #3
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	b25b      	sxtb	r3, r3
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	da0d      	bge.n	800f118 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f0fc:	1cfb      	adds	r3, r7, #3
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	227f      	movs	r2, #127	; 0x7f
 800f102:	4013      	ands	r3, r2
 800f104:	68f9      	ldr	r1, [r7, #12]
 800f106:	1c5a      	adds	r2, r3, #1
 800f108:	0013      	movs	r3, r2
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	189b      	adds	r3, r3, r2
 800f10e:	00db      	lsls	r3, r3, #3
 800f110:	18cb      	adds	r3, r1, r3
 800f112:	3302      	adds	r3, #2
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	e00d      	b.n	800f134 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f118:	1cfb      	adds	r3, r7, #3
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	227f      	movs	r2, #127	; 0x7f
 800f11e:	401a      	ands	r2, r3
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	23b5      	movs	r3, #181	; 0xb5
 800f124:	0059      	lsls	r1, r3, #1
 800f126:	0013      	movs	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	189b      	adds	r3, r3, r2
 800f12c:	00db      	lsls	r3, r3, #3
 800f12e:	18c3      	adds	r3, r0, r3
 800f130:	185b      	adds	r3, r3, r1
 800f132:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f134:	0018      	movs	r0, r3
 800f136:	46bd      	mov	sp, r7
 800f138:	b004      	add	sp, #16
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	000a      	movs	r2, r1
 800f146:	1cfb      	adds	r3, r7, #3
 800f148:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f14a:	210f      	movs	r1, #15
 800f14c:	187b      	adds	r3, r7, r1
 800f14e:	2200      	movs	r2, #0
 800f150:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f152:	260e      	movs	r6, #14
 800f154:	19bb      	adds	r3, r7, r6
 800f156:	2200      	movs	r2, #0
 800f158:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	23b0      	movs	r3, #176	; 0xb0
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	58d2      	ldr	r2, [r2, r3]
 800f162:	000d      	movs	r5, r1
 800f164:	187c      	adds	r4, r7, r1
 800f166:	1cfb      	adds	r3, r7, #3
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	0019      	movs	r1, r3
 800f16c:	0010      	movs	r0, r2
 800f16e:	f7f8 f8c1 	bl	80072f4 <HAL_PCD_SetAddress>
 800f172:	0003      	movs	r3, r0
 800f174:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f176:	19bc      	adds	r4, r7, r6
 800f178:	0029      	movs	r1, r5
 800f17a:	187b      	adds	r3, r7, r1
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	0018      	movs	r0, r3
 800f180:	f000 f8a9 	bl	800f2d6 <USBD_Get_USB_Status>
 800f184:	0003      	movs	r3, r0
 800f186:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f188:	19bb      	adds	r3, r7, r6
 800f18a:	781b      	ldrb	r3, [r3, #0]
}
 800f18c:	0018      	movs	r0, r3
 800f18e:	46bd      	mov	sp, r7
 800f190:	b005      	add	sp, #20
 800f192:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f194 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f196:	b087      	sub	sp, #28
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	0008      	movs	r0, r1
 800f19e:	607a      	str	r2, [r7, #4]
 800f1a0:	0019      	movs	r1, r3
 800f1a2:	230b      	movs	r3, #11
 800f1a4:	18fb      	adds	r3, r7, r3
 800f1a6:	1c02      	adds	r2, r0, #0
 800f1a8:	701a      	strb	r2, [r3, #0]
 800f1aa:	2408      	movs	r4, #8
 800f1ac:	193b      	adds	r3, r7, r4
 800f1ae:	1c0a      	adds	r2, r1, #0
 800f1b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1b2:	2117      	movs	r1, #23
 800f1b4:	187b      	adds	r3, r7, r1
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ba:	2516      	movs	r5, #22
 800f1bc:	197b      	adds	r3, r7, r5
 800f1be:	2200      	movs	r2, #0
 800f1c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	23b0      	movs	r3, #176	; 0xb0
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	58d0      	ldr	r0, [r2, r3]
 800f1ca:	193b      	adds	r3, r7, r4
 800f1cc:	881d      	ldrh	r5, [r3, #0]
 800f1ce:	000e      	movs	r6, r1
 800f1d0:	187c      	adds	r4, r7, r1
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	230b      	movs	r3, #11
 800f1d6:	18fb      	adds	r3, r7, r3
 800f1d8:	7819      	ldrb	r1, [r3, #0]
 800f1da:	002b      	movs	r3, r5
 800f1dc:	f7f8 f9db 	bl	8007596 <HAL_PCD_EP_Transmit>
 800f1e0:	0003      	movs	r3, r0
 800f1e2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1e4:	2516      	movs	r5, #22
 800f1e6:	197c      	adds	r4, r7, r5
 800f1e8:	0031      	movs	r1, r6
 800f1ea:	187b      	adds	r3, r7, r1
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	0018      	movs	r0, r3
 800f1f0:	f000 f871 	bl	800f2d6 <USBD_Get_USB_Status>
 800f1f4:	0003      	movs	r3, r0
 800f1f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f1f8:	197b      	adds	r3, r7, r5
 800f1fa:	781b      	ldrb	r3, [r3, #0]
}
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	46bd      	mov	sp, r7
 800f200:	b007      	add	sp, #28
 800f202:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f204 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f204:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f206:	b087      	sub	sp, #28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	0008      	movs	r0, r1
 800f20e:	607a      	str	r2, [r7, #4]
 800f210:	0019      	movs	r1, r3
 800f212:	230b      	movs	r3, #11
 800f214:	18fb      	adds	r3, r7, r3
 800f216:	1c02      	adds	r2, r0, #0
 800f218:	701a      	strb	r2, [r3, #0]
 800f21a:	2408      	movs	r4, #8
 800f21c:	193b      	adds	r3, r7, r4
 800f21e:	1c0a      	adds	r2, r1, #0
 800f220:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f222:	2117      	movs	r1, #23
 800f224:	187b      	adds	r3, r7, r1
 800f226:	2200      	movs	r2, #0
 800f228:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f22a:	2516      	movs	r5, #22
 800f22c:	197b      	adds	r3, r7, r5
 800f22e:	2200      	movs	r2, #0
 800f230:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	23b0      	movs	r3, #176	; 0xb0
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	58d0      	ldr	r0, [r2, r3]
 800f23a:	193b      	adds	r3, r7, r4
 800f23c:	881d      	ldrh	r5, [r3, #0]
 800f23e:	000e      	movs	r6, r1
 800f240:	187c      	adds	r4, r7, r1
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	230b      	movs	r3, #11
 800f246:	18fb      	adds	r3, r7, r3
 800f248:	7819      	ldrb	r1, [r3, #0]
 800f24a:	002b      	movs	r3, r5
 800f24c:	f7f8 f946 	bl	80074dc <HAL_PCD_EP_Receive>
 800f250:	0003      	movs	r3, r0
 800f252:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f254:	2516      	movs	r5, #22
 800f256:	197c      	adds	r4, r7, r5
 800f258:	0031      	movs	r1, r6
 800f25a:	187b      	adds	r3, r7, r1
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	0018      	movs	r0, r3
 800f260:	f000 f839 	bl	800f2d6 <USBD_Get_USB_Status>
 800f264:	0003      	movs	r3, r0
 800f266:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800f268:	197b      	adds	r3, r7, r5
 800f26a:	781b      	ldrb	r3, [r3, #0]
}
 800f26c:	0018      	movs	r0, r3
 800f26e:	46bd      	mov	sp, r7
 800f270:	b007      	add	sp, #28
 800f272:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f274 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	000a      	movs	r2, r1
 800f27e:	1cfb      	adds	r3, r7, #3
 800f280:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	23b0      	movs	r3, #176	; 0xb0
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	58d2      	ldr	r2, [r2, r3]
 800f28a:	1cfb      	adds	r3, r7, #3
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	0019      	movs	r1, r3
 800f290:	0010      	movs	r0, r2
 800f292:	f7f8 f967 	bl	8007564 <HAL_PCD_EP_GetRxCount>
 800f296:	0003      	movs	r3, r0
}
 800f298:	0018      	movs	r0, r3
 800f29a:	46bd      	mov	sp, r7
 800f29c:	b002      	add	sp, #8
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f2a8:	4b02      	ldr	r3, [pc, #8]	; (800f2b4 <USBD_static_malloc+0x14>)
}
 800f2aa:	0018      	movs	r0, r3
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	b002      	add	sp, #8
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	46c0      	nop			; (mov r8, r8)
 800f2b4:	20000320 	.word	0x20000320

0800f2b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]

}
 800f2c0:	46c0      	nop			; (mov r8, r8)
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	b002      	add	sp, #8
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f2cc:	f7f1 fd02 	bl	8000cd4 <SystemClock_Config>
}
 800f2d0:	46c0      	nop			; (mov r8, r8)
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b084      	sub	sp, #16
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	0002      	movs	r2, r0
 800f2de:	1dfb      	adds	r3, r7, #7
 800f2e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2e2:	230f      	movs	r3, #15
 800f2e4:	18fb      	adds	r3, r7, r3
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800f2ea:	1dfb      	adds	r3, r7, #7
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d00d      	beq.n	800f30e <USBD_Get_USB_Status+0x38>
 800f2f2:	dc02      	bgt.n	800f2fa <USBD_Get_USB_Status+0x24>
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d005      	beq.n	800f304 <USBD_Get_USB_Status+0x2e>
 800f2f8:	e018      	b.n	800f32c <USBD_Get_USB_Status+0x56>
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d00c      	beq.n	800f318 <USBD_Get_USB_Status+0x42>
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d00f      	beq.n	800f322 <USBD_Get_USB_Status+0x4c>
 800f302:	e013      	b.n	800f32c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f304:	230f      	movs	r3, #15
 800f306:	18fb      	adds	r3, r7, r3
 800f308:	2200      	movs	r2, #0
 800f30a:	701a      	strb	r2, [r3, #0]
    break;
 800f30c:	e013      	b.n	800f336 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f30e:	230f      	movs	r3, #15
 800f310:	18fb      	adds	r3, r7, r3
 800f312:	2202      	movs	r2, #2
 800f314:	701a      	strb	r2, [r3, #0]
    break;
 800f316:	e00e      	b.n	800f336 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f318:	230f      	movs	r3, #15
 800f31a:	18fb      	adds	r3, r7, r3
 800f31c:	2201      	movs	r2, #1
 800f31e:	701a      	strb	r2, [r3, #0]
    break;
 800f320:	e009      	b.n	800f336 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f322:	230f      	movs	r3, #15
 800f324:	18fb      	adds	r3, r7, r3
 800f326:	2202      	movs	r2, #2
 800f328:	701a      	strb	r2, [r3, #0]
    break;
 800f32a:	e004      	b.n	800f336 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800f32c:	230f      	movs	r3, #15
 800f32e:	18fb      	adds	r3, r7, r3
 800f330:	2202      	movs	r2, #2
 800f332:	701a      	strb	r2, [r3, #0]
    break;
 800f334:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800f336:	230f      	movs	r3, #15
 800f338:	18fb      	adds	r3, r7, r3
 800f33a:	781b      	ldrb	r3, [r3, #0]
}
 800f33c:	0018      	movs	r0, r3
 800f33e:	46bd      	mov	sp, r7
 800f340:	b004      	add	sp, #16
 800f342:	bd80      	pop	{r7, pc}

0800f344 <__libc_init_array>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	2600      	movs	r6, #0
 800f348:	4d0c      	ldr	r5, [pc, #48]	; (800f37c <__libc_init_array+0x38>)
 800f34a:	4c0d      	ldr	r4, [pc, #52]	; (800f380 <__libc_init_array+0x3c>)
 800f34c:	1b64      	subs	r4, r4, r5
 800f34e:	10a4      	asrs	r4, r4, #2
 800f350:	42a6      	cmp	r6, r4
 800f352:	d109      	bne.n	800f368 <__libc_init_array+0x24>
 800f354:	2600      	movs	r6, #0
 800f356:	f000 f821 	bl	800f39c <_init>
 800f35a:	4d0a      	ldr	r5, [pc, #40]	; (800f384 <__libc_init_array+0x40>)
 800f35c:	4c0a      	ldr	r4, [pc, #40]	; (800f388 <__libc_init_array+0x44>)
 800f35e:	1b64      	subs	r4, r4, r5
 800f360:	10a4      	asrs	r4, r4, #2
 800f362:	42a6      	cmp	r6, r4
 800f364:	d105      	bne.n	800f372 <__libc_init_array+0x2e>
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	00b3      	lsls	r3, r6, #2
 800f36a:	58eb      	ldr	r3, [r5, r3]
 800f36c:	4798      	blx	r3
 800f36e:	3601      	adds	r6, #1
 800f370:	e7ee      	b.n	800f350 <__libc_init_array+0xc>
 800f372:	00b3      	lsls	r3, r6, #2
 800f374:	58eb      	ldr	r3, [r5, r3]
 800f376:	4798      	blx	r3
 800f378:	3601      	adds	r6, #1
 800f37a:	e7f2      	b.n	800f362 <__libc_init_array+0x1e>
 800f37c:	0800f63c 	.word	0x0800f63c
 800f380:	0800f63c 	.word	0x0800f63c
 800f384:	0800f63c 	.word	0x0800f63c
 800f388:	0800f640 	.word	0x0800f640

0800f38c <memset>:
 800f38c:	0003      	movs	r3, r0
 800f38e:	1812      	adds	r2, r2, r0
 800f390:	4293      	cmp	r3, r2
 800f392:	d100      	bne.n	800f396 <memset+0xa>
 800f394:	4770      	bx	lr
 800f396:	7019      	strb	r1, [r3, #0]
 800f398:	3301      	adds	r3, #1
 800f39a:	e7f9      	b.n	800f390 <memset+0x4>

0800f39c <_init>:
 800f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39e:	46c0      	nop			; (mov r8, r8)
 800f3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3a2:	bc08      	pop	{r3}
 800f3a4:	469e      	mov	lr, r3
 800f3a6:	4770      	bx	lr

0800f3a8 <_fini>:
 800f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3aa:	46c0      	nop			; (mov r8, r8)
 800f3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ae:	bc08      	pop	{r3}
 800f3b0:	469e      	mov	lr, r3
 800f3b2:	4770      	bx	lr
